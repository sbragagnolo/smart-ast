base 64 content
base64anastomos
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMzsNCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSk7IH0NCg0KY29udHJhY3QgQW5hc3RvbW9zIHsNCiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLw0KICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnQW5hc3RvbW9zIDAuMSc7DQogICAgc3RyaW5nIHB1YmxpYyBuYW1lOw0KICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOw0KICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsNCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsNCg0KICAgIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAqLw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7DQoNCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8NCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsNCg0KICAgIC8qIFRoaXMgbm90aWZpZXMgY2xpZW50cyBhYm91dCB0aGUgYW1vdW50IGJ1cm50ICovDQogICAgZXZlbnQgQnVybihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiB2YWx1ZSk7DQoNCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8NCiAgICBmdW5jdGlvbiBBbmFzdG9tb3MoKSB7DQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDUwMDAwMDAwMCAqIDEwMDAwMDAwMDAwMDAwMDAwMDA7ICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2Vucw0KICAgICAgICB0b3RhbFN1cHBseSA9IDUwMDAwMDAwMCAqIDEwMDAwMDAwMDAwMDAwMDAwMDA7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseQ0KICAgICAgICBuYW1lID0gIkFuYXN0b21vcyI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMNCiAgICAgICAgc3ltYm9sID0gIkFUIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMNCiAgICAgICAgZGVjaW1hbHMgPSAxODsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzDQogICAgfQ0KDQogICAgLyogU2VuZCBjb2lucyAqLw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgew0KICAgICAgICBpZiAoX3RvID09IDB4MCkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZA0KICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSByZXZlcnQoKTsgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaA0KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MNCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlDQogICAgfQ0KDQogICAgLyogQWxsb3cgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBpbiB5b3VyIGJlaGFsZiAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpDQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKiBBcHByb3ZlIGFuZCB0aGVuIGNvbW11bmljYXRlIHRoZSBhcHByb3ZlZCBjb250cmFjdCBpbiBhIHNpbmdsZSB0eCAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKQ0KICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsNCiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsNCiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0gICAgICAgIA0KDQogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChfdG8gPT0gMHgwKSByZXZlcnQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdHJhbnNmZXIgdG8gMHgwIGFkZHJlc3MuIFVzZSBidXJuKCkgaW5zdGVhZA0KICAgICAgICBpZiAoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gNCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHJldmVydCgpOyAgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cw0KICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgcmV2ZXJ0KCk7ICAgICAvLyBDaGVjayBhbGxvd2FuY2UNCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyDQogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50DQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoDQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcg0KICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGVzIHRvdGFsU3VwcGx5DQogICAgICAgIEJ1cm4obXNnLnNlbmRlciwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYnVybkZyb20oYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBpZiAoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaA0KICAgICAgICBpZiAoX3ZhbHVlID4gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSkgcmV2ZXJ0KCk7ICAgIC8vIENoZWNrIGFsbG93YW5jZQ0KICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcg0KICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZXMgdG90YWxTdXBwbHkNCiAgICAgICAgQnVybihfZnJvbSwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KfQ=='