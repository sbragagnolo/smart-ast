base 64 content
base64announcement
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KDQpjb250cmFjdCBBbm5vdW5jZW1lbnQgew0KDQogICAgc3RydWN0IE1lc3NhZ2Ugew0KICAgICAgICBzdHJpbmcgaXBmc0hhc2g7DQogICAgICAgIHVpbnQyNTYgdGltZXN0YW1wOw0KICAgIH0NCg0KICAgIHN0cnVjdCBNZXNzYWdlQXdhaXRpbmdBdWRpdCB7DQogICAgICAgIHVpbnQyNTYgbkF1ZGl0czsNCiAgICAgICAgdWludDI1NiBuQWxhcm1zOw0KICAgICAgICBNZXNzYWdlIG1zZzsNCiAgICAgICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBhdWRpdGVkQnk7DQogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgYWxhcm1lZEJ5Ow0KICAgIH0NCg0KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOw0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgYXVkaXRvcnM7DQogICAgYWRkcmVzc1tdIHB1YmxpYyBhdWRpdG9yc0xpc3Q7DQogICAgdWludDI1NiBwdWJsaWMgbkF1ZGl0b3JzOw0KICAgIHVpbnQyNTYgcHVibGljIG5BdWRpdG9yc1JlcXVpcmVkID0gMTsNCiAgICB1aW50MjU2IHB1YmxpYyBuQXVkaXRvcnNBbGFybSA9IDE7DQogICAgdWludDI1NiBwdWJsaWMgbkFsYXJtcyA9IDA7DQogICAgdWludDI1NltdIHB1YmxpYyBhbGFybXM7DQogICAgbWFwcGluZyh1aW50MjU2ID0+IGJvb2wpIHB1YmxpYyBhbGFybVJhaXNlZDsNCg0KICAgIHVpbnQyNTYgcHVibGljIG5Nc2cgPSAwOw0KICAgIG1hcHBpbmcodWludDI1NiA9PiBNZXNzYWdlKSBwdWJsaWMgbXNnTWFwOw0KDQogICAgdWludDI1NiBwdWJsaWMgbk1zZ3NXYWl0aW5nID0gMDsNCiAgICBtYXBwaW5nKHVpbnQyNTYgPT4gTWVzc2FnZUF3YWl0aW5nQXVkaXQpIG1zZ3NXYWl0aW5nOw0KICAgIG1hcHBpbmcodWludDI1NiA9PiBib29sKSBwdWJsaWMgbXNnc1dhaXRpbmdEb25lOw0KDQoNCiAgICBtb2RpZmllciBpc093bmVyKCkgew0KICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIGlzQXVkaXRvcigpIHsNCiAgICAgICAgcmVxdWlyZShhdWRpdG9yc1ttc2cuc2VuZGVyXSA9PSB0cnVlKTsNCiAgICAgICAgXzsNCiAgICB9DQoNCg0KICAgIGZ1bmN0aW9uIEFubm91bmNlbWVudChhZGRyZXNzW10gX2F1ZGl0b3JzLCB1aW50MjU2IF9uQXVkaXRvcnNSZXF1aXJlZCwgdWludDI1NiBfbkF1ZGl0b3JzQWxhcm0pIHsNCiAgICAgICAgcmVxdWlyZShfbkF1ZGl0b3JzUmVxdWlyZWQgPj0gMSk7DQogICAgICAgIHJlcXVpcmUoX25BdWRpdG9yc0FsYXJtID49IDEpOw0KDQogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IF9hdWRpdG9ycy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgYXVkaXRvcnNbX2F1ZGl0b3JzW2ldXSA9IHRydWU7DQogICAgICAgICAgICBhdWRpdG9yc0xpc3QucHVzaChfYXVkaXRvcnNbaV0pOw0KICAgICAgICB9DQogICAgICAgIG5BdWRpdG9ycyA9IF9hdWRpdG9ycy5sZW5ndGg7DQoNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgICAgICBuQXVkaXRvcnNSZXF1aXJlZCA9IF9uQXVkaXRvcnNSZXF1aXJlZDsNCiAgICAgICAgbkF1ZGl0b3JzQWxhcm0gPSBfbkF1ZGl0b3JzQWxhcm07DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYWRkQW5uIChzdHJpbmcgaXBmc0hhc2gpIGlzT3duZXIgZXh0ZXJuYWwgew0KICAgICAgICByZXF1aXJlKGJ5dGVzKGlwZnNIYXNoKS5sZW5ndGggPiAwKTsNCiAgICAgICAgbXNnUVB1dChpcGZzSGFzaCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbXNnUVB1dCAoc3RyaW5nIGlwZnNIYXNoKSBwcml2YXRlIHsNCiAgICAgICAgY3JlYXRlTmV3TXNnQXdhaXRpbmdBdWRpdChpcGZzSGFzaCwgYmxvY2sudGltZXN0YW1wKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhZGRBdWRpdCAodWludDI1NiBtc2dXYWl0aW5nTiwgYm9vbCBtc2dHb29kKSBpc0F1ZGl0b3IgZXh0ZXJuYWwgew0KICAgICAgICAvLyBlbnN1cmUgdGhlIG1zZ1dhaXRpbmcgaXMgbm90IGRvbmUsIGFuZCB0aGF0IHRoaXMgYXVkaXRvciBoYXMgbm90IHN1Ym1pdHRlZCBhbiBhdWRpdCBwcmV2aW91c2x5DQogICAgICAgIHJlcXVpcmUobXNnc1dhaXRpbmdEb25lW21zZ1dhaXRpbmdOXSA9PSBmYWxzZSk7DQogICAgICAgIE1lc3NhZ2VBd2FpdGluZ0F1ZGl0IG1zZ1dhaXRpbmcgPSBtc2dzV2FpdGluZ1ttc2dXYWl0aW5nTl07DQogICAgICAgIHJlcXVpcmUobXNnV2FpdGluZy5hdWRpdGVkQnlbbXNnLnNlbmRlcl0gPT0gZmFsc2UpOw0KICAgICAgICByZXF1aXJlKG1zZ1dhaXRpbmcuYWxhcm1lZEJ5W21zZy5zZW5kZXJdID09IGZhbHNlKTsNCiAgICAgICAgcmVxdWlyZShhbGFybVJhaXNlZFttc2dXYWl0aW5nTl0gPT0gZmFsc2UpOw0KDQogICAgICAgIC8vIGNoZWNrIGlmIHRoZSBhdWRpdG9yIGlzIGdpdmluZyBhIHRodW1icyB1cCBvciBhIHRodW1icyBkb3duIGFuZCBhZGp1c3QgdGhpbmdzIGFwcHJvcHJpYXRlbHkNCiAgICAgICAgaWYgKG1zZ0dvb2QgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgbXNnV2FpdGluZy5uQXVkaXRzICs9IDE7DQogICAgICAgICAgICBtc2dXYWl0aW5nLmF1ZGl0ZWRCeVttc2cuc2VuZGVyXSA9IHRydWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBtc2dXYWl0aW5nLm5BbGFybXMgKz0gMTsNCiAgICAgICAgICAgIG1zZ1dhaXRpbmcuYWxhcm1lZEJ5W21zZy5zZW5kZXJdID0gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIGhhdmUgd2UgcmVhY2hlZCB0aGUgcmlnaHQgbnVtYmVyIG9mIGF1ZGl0b3JzIGFuZCBub3QgdHJpZ2dlcmVkIGFuIGFsYXJtPw0KICAgICAgICBpZiAobXNnV2FpdGluZy5uQXVkaXRzID49IG5BdWRpdG9yc1JlcXVpcmVkICYmIG1zZ1dhaXRpbmcubkFsYXJtcyA8IG5BdWRpdG9yc0FsYXJtKSB7DQogICAgICAgICAgICAvLyB0aGVuIHJlbW92ZSBtc2cgZnJvbSBxdWV1ZSBhbmQgYWRkIHRvIG1lc3NhZ2VzDQogICAgICAgICAgICBhZGRNc2dGaW5hbChtc2dXYWl0aW5nLm1zZywgbXNnV2FpdGluZ04pOw0KICAgICAgICB9IGVsc2UgaWYgKG1zZ1dhaXRpbmcubkFsYXJtcyA+PSBuQXVkaXRvcnNBbGFybSkgew0KICAgICAgICAgICAgbXNnc1dhaXRpbmdEb25lW21zZ1dhaXRpbmdOXSA9IHRydWU7DQogICAgICAgICAgICBhbGFybVJhaXNlZFttc2dXYWl0aW5nTl0gPSB0cnVlOw0KICAgICAgICAgICAgYWxhcm1zLnB1c2gobXNnV2FpdGluZ04pOw0KICAgICAgICAgICAgbkFsYXJtcyArPSAxOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY3JlYXRlTmV3TXNnQXdhaXRpbmdBdWRpdChzdHJpbmcgaXBmc0hhc2gsIHVpbnQyNTYgdGltZXN0YW1wKSBwcml2YXRlIHsNCiAgICAgICAgbXNnc1dhaXRpbmdbbk1zZ3NXYWl0aW5nXSA9IE1lc3NhZ2VBd2FpdGluZ0F1ZGl0KDAsIDAsIE1lc3NhZ2UoaXBmc0hhc2gsIHRpbWVzdGFtcCkpOw0KICAgICAgICBuTXNnc1dhaXRpbmcgKz0gMTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhZGRNc2dGaW5hbChNZXNzYWdlIG1zZywgdWludDI1NiBtc2dXYWl0aW5nTikgcHJpdmF0ZSB7DQogICAgICAgIC8vIGVuc3VyZSB3ZSBzdG9yZSB0aGUgbWVzc2FnZSBmaXJzdA0KICAgICAgICBtc2dNYXBbbk1zZ10gPSBtc2c7DQogICAgICAgIG5Nc2cgKz0gMTsNCg0KICAgICAgICAvLyBmaW5hbGx5IG5vdGUgdGhhdCB0aGlzIGhhcyBiZWVuIHByb2Nlc3NlZCBhbmQgY2xlYW4gdXANCiAgICAgICAgbXNnc1dhaXRpbmdEb25lW21zZ1dhaXRpbmdOXSA9IHRydWU7DQogICAgICAgIGRlbGV0ZSBtc2dzV2FpdGluZ1ttc2dXYWl0aW5nTl07DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0TXNnV2FpdGluZyh1aW50MjU2IG1zZ1dhaXRpbmdOKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zICh1aW50MjU2LCB1aW50MjU2LCBzdHJpbmcsIHVpbnQyNTYsIGJvb2wpIHsNCiAgICAgICAgTWVzc2FnZUF3YWl0aW5nQXVkaXQgbWFhID0gbXNnc1dhaXRpbmdbbXNnV2FpdGluZ05dOw0KICAgICAgICByZXR1cm4gKA0KICAgICAgICAgICAgbWFhLm5BdWRpdHMsDQogICAgICAgICAgICBtYWEubkFsYXJtcywNCiAgICAgICAgICAgIG1hYS5tc2cuaXBmc0hhc2gsDQogICAgICAgICAgICBtYWEubXNnLnRpbWVzdGFtcCwNCiAgICAgICAgICAgIGFsYXJtUmFpc2VkW21zZ1dhaXRpbmdOXQ0KICAgICAgICApOw0KICAgIH0NCn0='