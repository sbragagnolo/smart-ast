base 64 content
base64arrayUtilsLib
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoqDQogKiBAdGl0bGUgQXJyYXkgVXRpbGl0aWVzIExpYnJhcnkNCiAqIEBhdXRob3IgTWFqb29sci5pbw0KICoNCiAqIHZlcnNpb24gMS4wLjENCiAqIENvcHlyaWdodCAoYykgMjAxNyBNYWpvb2xyLCBMTEMNCiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKQ0KICogaHR0cHM6Ly9naXRodWIuY29tL01ham9vbHIvZXRoZXJldW0tbGlicmFyaWVzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UNCiAqDQogKiBUaGUgQXJyYXkgVXRpbGl0aWVzIExpYnJhcnkgcHJvdmlkZXMgYSBmZXcgdXRpbGl0eSBmdW5jdGlvbnMgdG8gd29yayB3aXRoDQogKiBzdG9yYWdlIGFycmF5cyBpbiBwbGFjZS4gTWFqb29sciB3b3JrcyBvbiBvcGVuIHNvdXJjZSBwcm9qZWN0cyBpbiB0aGUgRXRoZXJldW0NCiAqIGNvbW11bml0eSB3aXRoIHRoZSBwdXJwb3NlIG9mIHRlc3RpbmcsIGRvY3VtZW50aW5nLCBhbmQgZGVwbG95aW5nIHJldXNhYmxlDQogKiBjb2RlIG9udG8gdGhlIGJsb2NrY2hhaW4gdG8gaW1wcm92ZSBzZWN1cml0eSBhbmQgdXNhYmlsaXR5IG9mIHNtYXJ0DQogKiBjb250cmFjdHMuIE1ham9vbHIgYWxzbyBzdHJpdmVzIHRvIGVkdWNhdGUgbm9uLXByb2ZpdHMsIHNjaG9vbHMsIGFuZCBvdGhlcg0KICogY29tbXVuaXR5IG1lbWJlcnMgYWJvdXQgdGhlIGFwcGxpY2F0aW9uIG9mIGJsb2NrY2hhaW4gdGVjaG5vbG9neS4NCiAqIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uOiBtYWpvb2xyLmlvDQogKg0KICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MNCiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YNCiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4NCiAqIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZDQogKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULA0KICogVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUNCiAqIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLg0KICovDQoNCmxpYnJhcnkgQXJyYXlVdGlsc0xpYiB7DQoNCiAgLy8vIEBkZXYgU3VtIHZlY3Rvcg0KICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMNCiAgLy8vIEByZXR1cm4gc3VtIFRoZSBzdW0gb2YgYWxsIGVsZW1lbnRzLCBkb2VzIG5vdCBjaGVjayBmb3Igb3ZlcmZsb3cNCiAgZnVuY3Rpb24gc3VtRWxlbWVudHModWludDI1NltdIHN0b3JhZ2Ugc2VsZikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IHN1bSl7DQogICAgYXNzZW1ibHkgew0KICAgICAgbXN0b3JlKDB4NjAsc2VsZl9zbG90KQ0KDQogICAgICBmb3IgeyBsZXQgaSA6PSAwIH0gbHQoaSwgc2xvYWQoc2VsZl9zbG90KSkgeyBpIDo9IGFkZChpLCAxKSB9IHsNCiAgICAgICAgc3VtIDo9IGFkZChzbG9hZChhZGQoc2hhMygweDYwLDB4MjApLGkpKSxzdW0pDQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgLy8vIEBkZXYgUmV0dXJucyB0aGUgbWF4IHZhbHVlIGluIGFuIGFycmF5Lg0KICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMNCiAgLy8vIEByZXR1cm4gbWF4VmFsdWUgVGhlIGhpZ2hlc3QgdmFsdWUgaW4gdGhlIGFycmF5DQogIGZ1bmN0aW9uIGdldE1heCh1aW50MjU2W10gc3RvcmFnZSBzZWxmKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgbWF4VmFsdWUpIHsNCiAgICBhc3NlbWJseSB7DQogICAgICBtc3RvcmUoMHg2MCxzZWxmX3Nsb3QpDQogICAgICBtYXhWYWx1ZSA6PSBzbG9hZChzaGEzKDB4NjAsMHgyMCkpDQoNCiAgICAgIGZvciB7IGxldCBpIDo9IDAgfSBsdChpLCBzbG9hZChzZWxmX3Nsb3QpKSB7IGkgOj0gYWRkKGksIDEpIH0gew0KICAgICAgICBzd2l0Y2ggbHQoc2xvYWQoYWRkKHNoYTMoMHg2MCwweDIwKSxpKSksIG1heFZhbHVlKQ0KICAgICAgICBjYXNlIDAgew0KICAgICAgICAgIG1heFZhbHVlIDo9IHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksaSkpDQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICAvLy8gQGRldiBGaW5kcyB0aGUgaW5kZXggb2YgYSBnaXZlbiB2YWx1ZSBpbiBhbiBhcnJheQ0KICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMNCiAgLy8vIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvcg0KICAvLy8gQHBhcmFtIGlzU29ydGVkIFRydWUgaWYgdGhlIGFycmF5IGlzIHNvcnRlZCwgZmFsc2Ugb3RoZXJ3aXNlDQogIC8vLyBAcmV0dXJuIGZvdW5kIFRydWUgaWYgdGhlIHZhbHVlIHdhcyBmb3VuZCwgZmFsc2Ugb3RoZXJ3aXNlDQogIC8vLyBAcmV0dXJuIGluZGV4IFRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gdmFsdWUsIHJldHVybnMgMCBpZiBmb3VuZCBpcyBmYWxzZQ0KICBmdW5jdGlvbiBpbmRleE9mKHVpbnQyNTZbXSBzdG9yYWdlIHNlbGYsIHVpbnQyNTYgdmFsdWUsIGJvb2wgaXNTb3J0ZWQpIGNvbnN0YW50DQogICAgICAgICAgIHJldHVybnMoYm9vbCBmb3VuZCwgdWludDI1NiBpbmRleCkgew0KICAgIGFzc2VtYmx5ew0KICAgICAgbXN0b3JlKDB4NjAsc2VsZl9zbG90KQ0KICAgICAgbGV0IGxvdyA6PSAwDQogICAgICBsZXQgaGlnaCA6PSBzdWIoc2xvYWQoc2VsZl9zbG90KSwxKQ0KICAgICAgbGV0IG1pZCA6PSAwDQogICAgICBqdW1waSh1bnNvcnRlZCwgaXN6ZXJvKGlzU29ydGVkKSkNCiAgICAgIHNvcnRlZDoNCiAgICAgICAganVtcGkoZG9uZSwgZ3QobG93LGhpZ2gpKQ0KICAgICAgICBtaWQgOj0gZGl2KGFkZChsb3csaGlnaCksMikNCiAgICAgICAganVtcGkoc2V0SCwgbHQodmFsdWUsc2xvYWQoYWRkKHNoYTMoMHg2MCwweDIwKSxtaWQpKSkpDQogICAgICAgIGp1bXBpKHNldEwsIGd0KHZhbHVlLHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksbWlkKSkpKQ0KICAgICAgICBmb3VuZCA6PSAxDQogICAgICAgIGluZGV4IDo9IG1pZA0KICAgICAgICBqdW1wKGRvbmUpDQogICAgICAgIHNldEg6DQogICAgICAgICAgaGlnaCA6PSBzdWIobWlkLDEpDQogICAgICAgICAganVtcChzb3J0ZWQpDQogICAgICAgIHNldEw6DQogICAgICAgICAgbG93IDo9IGFkZChtaWQsMSkNCiAgICAgICAgICBqdW1wKHNvcnRlZCkNCiAgICAgIHVuc29ydGVkOg0KICAgICAgICBqdW1waShsb29wLCBpc3plcm8oZXEoc2xvYWQoYWRkKHNoYTMoMHg2MCwweDIwKSxsb3cpKSwgdmFsdWUpKSkNCiAgICAgICAgZm91bmQgOj0gMQ0KICAgICAgICBpbmRleCA6PSBsb3cNCiAgICAgICAganVtcChkb25lKQ0KICAgICAgICBsb29wOg0KICAgICAgICAgIGxvdyA6PSBhZGQobG93LDEpDQogICAgICAgICAganVtcGkodW5zb3J0ZWQsIGx0KGxvdywgc2xvYWQoc2VsZl9zbG90KSkpDQogICAgICBkb25lOg0KICAgIH0NCiAgfQ0KDQogIC8vLyBAZGV2IFV0aWxpdHkgZnVuY3Rpb24gZm9yIGhlYXBTb3J0DQogIC8vLyBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIGNoaWxkIG5vZGUNCiAgLy8vIEByZXR1cm4gcEkgVGhlIHBhcmVudCBub2RlIGluZGV4DQogIGZ1bmN0aW9uIGdldFBhcmVudEkodWludDI1NiBpbmRleCkgY29uc3RhbnQgcHJpdmF0ZSByZXR1cm5zICh1aW50MjU2IHBJKSB7DQogICAgdWludDI1NiBpID0gaW5kZXggLSAxOw0KICAgIHBJID0gaS8yOw0KICB9DQoNCiAgLy8vIEBkZXYgVXRpbGl0eSBmdW5jdGlvbiBmb3IgaGVhcFNvcnQNCiAgLy8vIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgcGFyZW50IG5vZGUNCiAgLy8vIEByZXR1cm4gbGNJIFRoZSBpbmRleCBvZiBsZWZ0IGNoaWxkDQogIGZ1bmN0aW9uIGdldExlZnRDaGlsZEkodWludDI1NiBpbmRleCkgY29uc3RhbnQgcHJpdmF0ZSByZXR1cm5zICh1aW50MjU2IGxjSSkgew0KICAgIHVpbnQyNTYgaSA9IGluZGV4ICogMjsNCiAgICBsY0kgPSBpICsgMTsNCiAgfQ0KDQogIC8vLyBAZGV2IFNvcnRzIGdpdmVuIGFycmF5IGluIHBsYWNlDQogIC8vLyBAcGFyYW0gc2VsZiBTdG9yYWdlIGFycmF5IGNvbnRhaW5pbmcgdWludDI1NiB0eXBlIHZhcmlhYmxlcw0KICBmdW5jdGlvbiBoZWFwU29ydCh1aW50MjU2W10gc3RvcmFnZSBzZWxmKSB7DQogICAgdWludDI1NiBlbmQgPSBzZWxmLmxlbmd0aCAtIDE7DQogICAgdWludDI1NiBzdGFydCA9IGdldFBhcmVudEkoZW5kKTsNCiAgICB1aW50MjU2IHJvb3QgPSBzdGFydDsNCiAgICB1aW50MjU2IGxDaGlsZDsNCiAgICB1aW50MjU2IHJDaGlsZDsNCiAgICB1aW50MjU2IHN3YXA7DQogICAgdWludDI1NiB0ZW1wOw0KICAgIHdoaWxlKHN0YXJ0ID49IDApew0KICAgICAgcm9vdCA9IHN0YXJ0Ow0KICAgICAgbENoaWxkID0gZ2V0TGVmdENoaWxkSShzdGFydCk7DQogICAgICB3aGlsZShsQ2hpbGQgPD0gZW5kKXsNCiAgICAgICAgckNoaWxkID0gbENoaWxkICsgMTsNCiAgICAgICAgc3dhcCA9IHJvb3Q7DQogICAgICAgIGlmKHNlbGZbc3dhcF0gPCBzZWxmW2xDaGlsZF0pDQogICAgICAgICAgc3dhcCA9IGxDaGlsZDsNCiAgICAgICAgaWYoKHJDaGlsZCA8PSBlbmQpICYmIChzZWxmW3N3YXBdPHNlbGZbckNoaWxkXSkpDQogICAgICAgICAgc3dhcCA9IHJDaGlsZDsNCiAgICAgICAgaWYoc3dhcCA9PSByb290KQ0KICAgICAgICAgIGxDaGlsZCA9IGVuZCsxOw0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICB0ZW1wID0gc2VsZltzd2FwXTsNCiAgICAgICAgICBzZWxmW3N3YXBdID0gc2VsZltyb290XTsNCiAgICAgICAgICBzZWxmW3Jvb3RdID0gdGVtcDsNCiAgICAgICAgICByb290ID0gc3dhcDsNCiAgICAgICAgICBsQ2hpbGQgPSBnZXRMZWZ0Q2hpbGRJKHJvb3QpOw0KICAgICAgICB9DQogICAgICB9DQogICAgICBpZihzdGFydCA9PSAwKQ0KICAgICAgICBicmVhazsNCiAgICAgIGVsc2UNCiAgICAgICAgc3RhcnQgPSBzdGFydCAtIDE7DQogICAgfQ0KICAgIHdoaWxlKGVuZCA+IDApew0KICAgICAgdGVtcCA9IHNlbGZbZW5kXTsNCiAgICAgIHNlbGZbZW5kXSA9IHNlbGZbMF07DQogICAgICBzZWxmWzBdID0gdGVtcDsNCiAgICAgIGVuZCA9IGVuZCAtIDE7DQogICAgICByb290ID0gMDsNCiAgICAgIGxDaGlsZCA9IGdldExlZnRDaGlsZEkoMCk7DQogICAgICB3aGlsZShsQ2hpbGQgPD0gZW5kKXsNCiAgICAgICAgckNoaWxkID0gbENoaWxkICsgMTsNCiAgICAgICAgc3dhcCA9IHJvb3Q7DQogICAgICAgIGlmKHNlbGZbc3dhcF0gPCBzZWxmW2xDaGlsZF0pDQogICAgICAgICAgc3dhcCA9IGxDaGlsZDsNCiAgICAgICAgaWYoKHJDaGlsZCA8PSBlbmQpICYmIChzZWxmW3N3YXBdPHNlbGZbckNoaWxkXSkpDQogICAgICAgICAgc3dhcCA9IHJDaGlsZDsNCiAgICAgICAgaWYoc3dhcCA9PSByb290KQ0KICAgICAgICAgIGxDaGlsZCA9IGVuZCArIDE7DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIHRlbXAgPSBzZWxmW3N3YXBdOw0KICAgICAgICAgIHNlbGZbc3dhcF0gPSBzZWxmW3Jvb3RdOw0KICAgICAgICAgIHNlbGZbcm9vdF0gPSB0ZW1wOw0KICAgICAgICAgIHJvb3QgPSBzd2FwOw0KICAgICAgICAgIGxDaGlsZCA9IGdldExlZnRDaGlsZEkocm9vdCk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogIH0NCn0='