base 64 content
base64arrayUtilsLib1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoqDQogKiBAdGl0bGUgQXJyYXkgVXRpbGl0aWVzIExpYnJhcnkNCiAqIEBhdXRob3IgTWFqb29sci5pbw0KICoNCiAqIHZlcnNpb24gMS4wLjANCiAqIENvcHlyaWdodCAoYykgMjAxNyBNYWpvb2xyLCBMTEMNCiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKQ0KICogaHR0cHM6Ly9naXRodWIuY29tL01ham9vbHIvZXRoZXJldW0tbGlicmFyaWVzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UNCiAqDQogKiBUaGUgQXJyYXkgVXRpbGl0aWVzIExpYnJhcnkgcHJvdmlkZXMgYSBmZXcgdXRpbGl0eSBmdW5jdGlvbnMgdG8gd29yayB3aXRoDQogKiBzdG9yYWdlIGFycmF5cyBpbiBwbGFjZS4gTWFqb29sciB3b3JrcyBvbiBvcGVuIHNvdXJjZSBwcm9qZWN0cyBpbiB0aGUgRXRoZXJldW0NCiAqIGNvbW11bml0eSB3aXRoIHRoZSBwdXJwb3NlIG9mIHRlc3RpbmcsIGRvY3VtZW50aW5nLCBhbmQgZGVwbG95aW5nIHJldXNhYmxlDQogKiBjb2RlIG9udG8gdGhlIGJsb2NrY2hhaW4gdG8gaW1wcm92ZSBzZWN1cml0eSBhbmQgdXNhYmlsaXR5IG9mIHNtYXJ0DQogKiBjb250cmFjdHMuIE1ham9vbHIgYWxzbyBzdHJpdmVzIHRvIGVkdWNhdGUgbm9uLXByb2ZpdHMsIHNjaG9vbHMsIGFuZCBvdGhlcg0KICogY29tbXVuaXR5IG1lbWJlcnMgYWJvdXQgdGhlIGFwcGxpY2F0aW9uIG9mIGJsb2NrY2hhaW4gdGVjaG5vbG9neS4NCiAqIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uOiBtYWpvb2xyLmlvDQogKg0KICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MNCiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YNCiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4NCiAqIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZDQogKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULA0KICogVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUNCiAqIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLg0KICovDQoNCmxpYnJhcnkgQXJyYXlVdGlsc0xpYiB7DQoNCiAgLy8vIEBkZXYgU3VtIHZlY3Rvcg0KICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMNCiAgLy8vIEByZXR1cm4gc3VtIFRoZSBzdW0gb2YgYWxsIGVsZW1lbnRzLCBkb2VzIG5vdCBjaGVjayBmb3Igb3ZlcmZsb3cNCiAgZnVuY3Rpb24gc3VtRWxlbWVudHModWludDI1NltdIHN0b3JhZ2Ugc2VsZikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IHN1bSl7DQogICAgYXNzZW1ibHkgeyBtc3RvcmUoMHg2MCxzZWxmX3Nsb3QpIH0NCg0KICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IHNlbGYubGVuZ3RoOyBpKyspIHsNCiAgICAgIGFzc2VtYmx5IHsNCiAgICAgICAgc3VtIDo9IGFkZChzbG9hZChhZGQoc2hhMygweDYwLDB4MjApLGkpKSxzdW0pDQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgLy8vIEBkZXYgUmV0dXJucyB0aGUgbWF4IHZhbHVlIGluIGFuIGFycmF5Lg0KICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMNCiAgLy8vIEByZXR1cm4gbWF4VmFsdWUgVGhlIGhpZ2hlc3QgdmFsdWUgaW4gdGhlIGFycmF5DQogIGZ1bmN0aW9uIGdldE1heCh1aW50MjU2W10gc3RvcmFnZSBzZWxmKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgbWF4VmFsdWUpIHsNCiAgICBhc3NlbWJseSB7IG1zdG9yZSgweDYwLHNlbGZfc2xvdCkgfQ0KDQogICAgZm9yICh1aW50MjU2IGkgPSAxOyBpIDwgc2VsZi5sZW5ndGg7IGkrKykgew0KICAgICAgYXNzZW1ibHkgew0KICAgICAgICBtYXhWYWx1ZSA6PSBzbG9hZChzaGEzKDB4NjAsMHgyMCkpDQogICAgICAgIGp1bXBpKHNraXAsIGx0KHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksaSkpLCBtYXhWYWx1ZSkpDQogICAgICAgIG1heFZhbHVlIDo9IHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksaSkpDQogICAgICAgIHNraXA6DQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgLy8vIEBkZXYgRmluZHMgdGhlIGluZGV4IG9mIGEgZ2l2ZW4gdmFsdWUgaW4gYW4gYXJyYXkNCiAgLy8vIEBwYXJhbSBzZWxmIFN0b3JhZ2UgYXJyYXkgY29udGFpbmluZyB1aW50MjU2IHR5cGUgdmFyaWFibGVzDQogIC8vLyBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3INCiAgLy8vIEBwYXJhbSBpc1NvcnRlZCBUcnVlIGlmIHRoZSBhcnJheSBpcyBzb3J0ZWQsIGZhbHNlIG90aGVyd2lzZQ0KICAvLy8gQHJldHVybiBmb3VuZCBUcnVlIGlmIHRoZSB2YWx1ZSB3YXMgZm91bmQsIGZhbHNlIG90aGVyd2lzZQ0KICAvLy8gQHJldHVybiBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGdpdmVuIHZhbHVlLCByZXR1cm5zIDAgaWYgZm91bmQgaXMgZmFsc2UNCiAgZnVuY3Rpb24gaW5kZXhPZih1aW50MjU2W10gc3RvcmFnZSBzZWxmLCB1aW50MjU2IHZhbHVlLCBib29sIGlzU29ydGVkKSBjb25zdGFudA0KICAgICAgICAgICByZXR1cm5zKGJvb2wgZm91bmQsIHVpbnQyNTYgaW5kZXgpIHsNCiAgICBhc3NlbWJseXsNCiAgICAgIG1zdG9yZSgweDYwLHNlbGZfc2xvdCkNCiAgICAgIGxldCBsb3cgOj0gMA0KICAgICAgbGV0IGhpZ2ggOj0gc3ViKHNsb2FkKHNlbGZfc2xvdCksMSkNCiAgICAgIGxldCBtaWQgOj0gMA0KICAgICAganVtcGkodW5zb3J0ZWQsIGlzemVybyhpc1NvcnRlZCkpDQogICAgICBzb3J0ZWQ6DQogICAgICAgIGp1bXBpKGRvbmUsIGd0KGxvdyxoaWdoKSkNCiAgICAgICAgbWlkIDo9IGRpdihhZGQobG93LGhpZ2gpLDIpDQogICAgICAgIGp1bXBpKHNldEgsIGx0KHZhbHVlLHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksbWlkKSkpKQ0KICAgICAgICBqdW1waShzZXRMLCBndCh2YWx1ZSxzbG9hZChhZGQoc2hhMygweDYwLDB4MjApLG1pZCkpKSkNCiAgICAgICAgZm91bmQgOj0gMQ0KICAgICAgICBpbmRleCA6PSBtaWQNCiAgICAgICAganVtcChkb25lKQ0KICAgICAgICBzZXRIOg0KICAgICAgICAgIGhpZ2ggOj0gc3ViKG1pZCwxKQ0KICAgICAgICAgIGp1bXAoc29ydGVkKQ0KICAgICAgICBzZXRMOg0KICAgICAgICAgIGxvdyA6PSBhZGQobWlkLDEpDQogICAgICAgICAganVtcChzb3J0ZWQpDQogICAgICB1bnNvcnRlZDoNCiAgICAgICAganVtcGkobG9vcCwgaXN6ZXJvKGVxKHNsb2FkKGFkZChzaGEzKDB4NjAsMHgyMCksbG93KSksIHZhbHVlKSkpDQogICAgICAgIGZvdW5kIDo9IDENCiAgICAgICAgaW5kZXggOj0gbG93DQogICAgICAgIGp1bXAoZG9uZSkNCiAgICAgICAgbG9vcDoNCiAgICAgICAgICBsb3cgOj0gYWRkKGxvdywxKQ0KICAgICAgICAgIGp1bXBpKHVuc29ydGVkLCBsdChsb3csIHNsb2FkKHNlbGZfc2xvdCkpKQ0KICAgICAgZG9uZToNCiAgICB9DQogIH0NCg0KICAvLy8gQGRldiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBoZWFwU29ydA0KICAvLy8gQHBhcmFtIGluZGV4IFRoZSBpbmRleCBvZiBjaGlsZCBub2RlDQogIC8vLyBAcmV0dXJuIHBJIFRoZSBwYXJlbnQgbm9kZSBpbmRleA0KICBmdW5jdGlvbiBnZXRQYXJlbnRJKHVpbnQyNTYgaW5kZXgpIGNvbnN0YW50IHByaXZhdGUgcmV0dXJucyAodWludDI1NiBwSSkgew0KICAgIHVpbnQyNTYgaSA9IGluZGV4IC0gMTsNCiAgICBwSSA9IGkvMjsNCiAgfQ0KDQogIC8vLyBAZGV2IFV0aWxpdHkgZnVuY3Rpb24gZm9yIGhlYXBTb3J0DQogIC8vLyBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHBhcmVudCBub2RlDQogIC8vLyBAcmV0dXJuIGxjSSBUaGUgaW5kZXggb2YgbGVmdCBjaGlsZA0KICBmdW5jdGlvbiBnZXRMZWZ0Q2hpbGRJKHVpbnQyNTYgaW5kZXgpIGNvbnN0YW50IHByaXZhdGUgcmV0dXJucyAodWludDI1NiBsY0kpIHsNCiAgICB1aW50MjU2IGkgPSBpbmRleCAqIDI7DQogICAgbGNJID0gaSArIDE7DQogIH0NCg0KICAvLy8gQGRldiBTb3J0cyBnaXZlbiBhcnJheSBpbiBwbGFjZQ0KICAvLy8gQHBhcmFtIHNlbGYgU3RvcmFnZSBhcnJheSBjb250YWluaW5nIHVpbnQyNTYgdHlwZSB2YXJpYWJsZXMNCiAgZnVuY3Rpb24gaGVhcFNvcnQodWludDI1NltdIHN0b3JhZ2Ugc2VsZikgew0KICAgIHVpbnQyNTYgZW5kID0gc2VsZi5sZW5ndGggLSAxOw0KICAgIHVpbnQyNTYgc3RhcnQgPSBnZXRQYXJlbnRJKGVuZCk7DQogICAgdWludDI1NiByb290ID0gc3RhcnQ7DQogICAgdWludDI1NiBsQ2hpbGQ7DQogICAgdWludDI1NiByQ2hpbGQ7DQogICAgdWludDI1NiBzd2FwOw0KICAgIHVpbnQyNTYgdGVtcDsNCiAgICB3aGlsZShzdGFydCA+PSAwKXsNCiAgICAgIHJvb3QgPSBzdGFydDsNCiAgICAgIGxDaGlsZCA9IGdldExlZnRDaGlsZEkoc3RhcnQpOw0KICAgICAgd2hpbGUobENoaWxkIDw9IGVuZCl7DQogICAgICAgIHJDaGlsZCA9IGxDaGlsZCArIDE7DQogICAgICAgIHN3YXAgPSByb290Ow0KICAgICAgICBpZihzZWxmW3N3YXBdIDwgc2VsZltsQ2hpbGRdKQ0KICAgICAgICAgIHN3YXAgPSBsQ2hpbGQ7DQogICAgICAgIGlmKChyQ2hpbGQgPD0gZW5kKSAmJiAoc2VsZltzd2FwXTxzZWxmW3JDaGlsZF0pKQ0KICAgICAgICAgIHN3YXAgPSByQ2hpbGQ7DQogICAgICAgIGlmKHN3YXAgPT0gcm9vdCkNCiAgICAgICAgICBsQ2hpbGQgPSBlbmQrMTsNCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgdGVtcCA9IHNlbGZbc3dhcF07DQogICAgICAgICAgc2VsZltzd2FwXSA9IHNlbGZbcm9vdF07DQogICAgICAgICAgc2VsZltyb290XSA9IHRlbXA7DQogICAgICAgICAgcm9vdCA9IHN3YXA7DQogICAgICAgICAgbENoaWxkID0gZ2V0TGVmdENoaWxkSShyb290KTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgaWYoc3RhcnQgPT0gMCkNCiAgICAgICAgYnJlYWs7DQogICAgICBlbHNlDQogICAgICAgIHN0YXJ0ID0gc3RhcnQgLSAxOw0KICAgIH0NCiAgICB3aGlsZShlbmQgPiAwKXsNCiAgICAgIHRlbXAgPSBzZWxmW2VuZF07DQogICAgICBzZWxmW2VuZF0gPSBzZWxmWzBdOw0KICAgICAgc2VsZlswXSA9IHRlbXA7DQogICAgICBlbmQgPSBlbmQgLSAxOw0KICAgICAgcm9vdCA9IDA7DQogICAgICBsQ2hpbGQgPSBnZXRMZWZ0Q2hpbGRJKDApOw0KICAgICAgd2hpbGUobENoaWxkIDw9IGVuZCl7DQogICAgICAgIHJDaGlsZCA9IGxDaGlsZCArIDE7DQogICAgICAgIHN3YXAgPSByb290Ow0KICAgICAgICBpZihzZWxmW3N3YXBdIDwgc2VsZltsQ2hpbGRdKQ0KICAgICAgICAgIHN3YXAgPSBsQ2hpbGQ7DQogICAgICAgIGlmKChyQ2hpbGQgPD0gZW5kKSAmJiAoc2VsZltzd2FwXTxzZWxmW3JDaGlsZF0pKQ0KICAgICAgICAgIHN3YXAgPSByQ2hpbGQ7DQogICAgICAgIGlmKHN3YXAgPT0gcm9vdCkNCiAgICAgICAgICBsQ2hpbGQgPSBlbmQgKyAxOw0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICB0ZW1wID0gc2VsZltzd2FwXTsNCiAgICAgICAgICBzZWxmW3N3YXBdID0gc2VsZltyb290XTsNCiAgICAgICAgICBzZWxmW3Jvb3RdID0gdGVtcDsNCiAgICAgICAgICByb290ID0gc3dhcDsNCiAgICAgICAgICBsQ2hpbGQgPSBnZXRMZWZ0Q2hpbGRJKHJvb3QpOw0KICAgICAgICB9DQogICAgICB9DQogICAgfQ0KICB9DQp9'