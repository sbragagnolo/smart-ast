base 64 content
base64authenticationManager
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyogVGhlIGF1dGhlbnRpY2F0aW9uIG1hbmFnZXIgZGV0YWlscyB1c2VyIGFjY291bnRzIHRoYXQgaGF2ZSBhY2Nlc3MgdG8gY2VydGFpbiBwcml2aWxlZGdlcyBhbmQga2VlcHMgYSBwZXJtYW5lbnQgbGVkZ2VyIG9mIHdobyBoYXMgYW5kIGhhcyBoYWQgdGhlc2UgcmlnaHRzLiAqLw0KY29udHJhY3QgQXV0aGVudGljYXRpb25NYW5hZ2VyIHsNCiAgICAvKiBNYXAgYWRkcmVzc2VzIHRvIGFkbWlucyAqLw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgYWRtaW5BZGRyZXNzZXM7DQoNCiAgICAvKiBNYXAgYWRkcmVzc2VzIHRvIGFjY291bnQgcmVhZGVycyAqLw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgYWNjb3VudFJlYWRlckFkZHJlc3NlczsNCg0KICAgIC8qIERldGFpbHMgb2YgYWxsIGFkbWlucyB0aGF0IGhhdmUgZXZlciBleGlzdGVkICovDQogICAgYWRkcmVzc1tdIGFkbWluQXVkaXQ7DQoNCiAgICAvKiBEZXRhaWxzIG9mIGFsbCBhY2NvdW50IHJlYWRlcnMgdGhhdCBoYXZlIGV2ZXIgZXhpc3RlZCAqLw0KICAgIGFkZHJlc3NbXSBhY2NvdW50UmVhZGVyQXVkaXQ7DQoNCiAgICAvKiBGaXJlZCB3aGVuZXZlciBhbiBhZG1pbiBpcyBhZGRlZCB0byB0aGUgY29udHJhY3QuICovDQogICAgZXZlbnQgQWRtaW5BZGRlZChhZGRyZXNzIGFkZGVkQnksIGFkZHJlc3MgYWRtaW4pOw0KDQogICAgLyogRmlyZWQgd2hlbmV2ZXIgYW4gYWRtaW4gaXMgcmVtb3ZlZCBmcm9tIHRoZSBjb250cmFjdC4gKi8NCiAgICBldmVudCBBZG1pblJlbW92ZWQoYWRkcmVzcyByZW1vdmVkQnksIGFkZHJlc3MgYWRtaW4pOw0KDQogICAgLyogRmlyZWQgd2hlbmV2ZXIgYW4gYWNjb3VudC1yZWFkZXIgY29udHJhY3QgaXMgYWRkZWQuICovDQogICAgZXZlbnQgQWNjb3VudFJlYWRlckFkZGVkKGFkZHJlc3MgYWRkZWRCeSwgYWRkcmVzcyBhY2NvdW50KTsNCg0KICAgIC8qIEZpcmVkIHdoZW5ldmVyIGFuIGFjY291bnQtcmVhZGVyIGNvbnRyYWN0IGlzIHJlbW92ZWQuICovDQogICAgZXZlbnQgQWNjb3VudFJlYWRlclJlbW92ZWQoYWRkcmVzcyByZW1vdmVkQnksIGFkZHJlc3MgYWNjb3VudCk7DQoNCiAgICAvKiBXaGVuIHRoaXMgY29udHJhY3QgaXMgZmlyc3Qgc2V0dXAgd2UgdXNlIHRoZSBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhZG1pbiAqLyAgICANCiAgICBmdW5jdGlvbiBBdXRoZW50aWNhdGlvbk1hbmFnZXIoKSB7DQogICAgICAgIC8qIFNldCB0aGUgZmlyc3QgYWRtaW4gdG8gYmUgdGhlIHBlcnNvbiBjcmVhdGluZyB0aGUgY29udHJhY3QgKi8NCiAgICAgICAgYWRtaW5BZGRyZXNzZXNbbXNnLnNlbmRlcl0gPSB0cnVlOw0KICAgICAgICBBZG1pbkFkZGVkKDAsIG1zZy5zZW5kZXIpOw0KICAgICAgICBhZG1pbkF1ZGl0Lmxlbmd0aCsrOw0KICAgICAgICBhZG1pbkF1ZGl0W2FkbWluQXVkaXQubGVuZ3RoIC0gMV0gPSBtc2cuc2VuZGVyOw0KICAgIH0NCg0KICAgIC8qIEdldHMgdGhlIGNvbnRyYWN0IHZlcnNpb24gZm9yIHZhbGlkYXRpb24gKi8NCiAgICBmdW5jdGlvbiBjb250cmFjdFZlcnNpb24oKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsNCiAgICAgICAgLy8gQWRtaW4gY29udHJhY3QgaWRlbnRpZmllcyBhcyAxMDBZWVlZTU1EREhITU0NCiAgICAgICAgcmV0dXJuIDEwMDIwMTcwNzE3MTUwMzsNCiAgICB9DQoNCiAgICAvKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSBzcGVjaWZpZWQgYWRkcmVzcyBpcyBjdXJyZW50bHkgYW4gYWRtaW4gKi8NCiAgICBmdW5jdGlvbiBpc0N1cnJlbnRBZG1pbihhZGRyZXNzIF9hZGRyZXNzKSBjb25zdGFudCByZXR1cm5zIChib29sKSB7DQogICAgICAgIHJldHVybiBhZG1pbkFkZHJlc3Nlc1tfYWRkcmVzc107DQogICAgfQ0KDQogICAgLyogR2V0cyB3aGV0aGVyIG9yIG5vdCB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgaGFzIGV2ZXIgYmVlbiBhbiBhZG1pbiAqLw0KICAgIGZ1bmN0aW9uIGlzQ3VycmVudE9yUGFzdEFkbWluKGFkZHJlc3MgX2FkZHJlc3MpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgYWRtaW5BdWRpdC5sZW5ndGg7IGkrKykNCiAgICAgICAgICAgIGlmIChhZG1pbkF1ZGl0W2ldID09IF9hZGRyZXNzKQ0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLyogR2V0cyB3aGV0aGVyIG9yIG5vdCB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgaXMgY3VycmVudGx5IGFuIGFjY291bnQgcmVhZGVyICovDQogICAgZnVuY3Rpb24gaXNDdXJyZW50QWNjb3VudFJlYWRlcihhZGRyZXNzIF9hZGRyZXNzKSBjb25zdGFudCByZXR1cm5zIChib29sKSB7DQogICAgICAgIHJldHVybiBhY2NvdW50UmVhZGVyQWRkcmVzc2VzW19hZGRyZXNzXTsNCiAgICB9DQoNCiAgICAvKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSBzcGVjaWZpZWQgYWRkcmVzcyBoYXMgZXZlciBiZWVuIGFuIGFkbWluICovDQogICAgZnVuY3Rpb24gaXNDdXJyZW50T3JQYXN0QWNjb3VudFJlYWRlcihhZGRyZXNzIF9hZGRyZXNzKSBjb25zdGFudCByZXR1cm5zIChib29sKSB7DQogICAgICAgIGZvciAodWludDI1NiBpID0gMDsgaSA8IGFjY291bnRSZWFkZXJBdWRpdC5sZW5ndGg7IGkrKykNCiAgICAgICAgICAgIGlmIChhY2NvdW50UmVhZGVyQXVkaXRbaV0gPT0gX2FkZHJlc3MpDQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAvKiBBZGRzIGEgdXNlciB0byBvdXIgbGlzdCBvZiBhZG1pbnMgKi8NCiAgICBmdW5jdGlvbiBhZGRBZG1pbihhZGRyZXNzIF9hZGRyZXNzKSB7DQogICAgICAgIC8qIEVuc3VyZSB3ZSdyZSBhbiBhZG1pbiAqLw0KICAgICAgICBpZiAoIWlzQ3VycmVudEFkbWluKG1zZy5zZW5kZXIpKQ0KICAgICAgICAgICAgdGhyb3c7DQoNCiAgICAgICAgLy8gRmFpbCBpZiB0aGlzIGFjY291bnQgaXMgYWxyZWFkeSBhZG1pbg0KICAgICAgICBpZiAoYWRtaW5BZGRyZXNzZXNbX2FkZHJlc3NdKQ0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIA0KICAgICAgICAvLyBBZGQgdGhlIHVzZXINCiAgICAgICAgYWRtaW5BZGRyZXNzZXNbX2FkZHJlc3NdID0gdHJ1ZTsNCiAgICAgICAgQWRtaW5BZGRlZChtc2cuc2VuZGVyLCBfYWRkcmVzcyk7DQogICAgICAgIGFkbWluQXVkaXQubGVuZ3RoKys7DQogICAgICAgIGFkbWluQXVkaXRbYWRtaW5BdWRpdC5sZW5ndGggLSAxXSA9IF9hZGRyZXNzOw0KICAgIH0NCg0KICAgIC8qIFJlbW92ZXMgYSB1c2VyIGZyb20gb3VyIGxpc3Qgb2YgYWRtaW5zIGJ1dCBrZWVwcyB0aGVtIGluIHRoZSBoaXN0b3J5IGF1ZGl0ICovDQogICAgZnVuY3Rpb24gcmVtb3ZlQWRtaW4oYWRkcmVzcyBfYWRkcmVzcykgew0KICAgICAgICAvKiBFbnN1cmUgd2UncmUgYW4gYWRtaW4gKi8NCiAgICAgICAgaWYgKCFpc0N1cnJlbnRBZG1pbihtc2cuc2VuZGVyKSkNCiAgICAgICAgICAgIHRocm93Ow0KDQogICAgICAgIC8qIERvbid0IGFsbG93IHJlbW92YWwgb2Ygc2VsZiAqLw0KICAgICAgICBpZiAoX2FkZHJlc3MgPT0gbXNnLnNlbmRlcikNCiAgICAgICAgICAgIHRocm93Ow0KDQogICAgICAgIC8vIEZhaWwgaWYgdGhpcyBhY2NvdW50IGlzIGFscmVhZHkgbm9uLWFkbWluDQogICAgICAgIGlmICghYWRtaW5BZGRyZXNzZXNbX2FkZHJlc3NdKQ0KICAgICAgICAgICAgdGhyb3c7DQoNCiAgICAgICAgLyogUmVtb3ZlIHRoaXMgYWRtaW4gdXNlciAqLw0KICAgICAgICBhZG1pbkFkZHJlc3Nlc1tfYWRkcmVzc10gPSBmYWxzZTsNCiAgICAgICAgQWRtaW5SZW1vdmVkKG1zZy5zZW5kZXIsIF9hZGRyZXNzKTsNCiAgICB9DQoNCiAgICAvKiBBZGRzIGEgdXNlci9jb250cmFjdCB0byBvdXIgbGlzdCBvZiBhY2NvdW50IHJlYWRlcnMgKi8NCiAgICBmdW5jdGlvbiBhZGRBY2NvdW50UmVhZGVyKGFkZHJlc3MgX2FkZHJlc3MpIHsNCiAgICAgICAgLyogRW5zdXJlIHdlJ3JlIGFuIGFkbWluICovDQogICAgICAgIGlmICghaXNDdXJyZW50QWRtaW4obXNnLnNlbmRlcikpDQogICAgICAgICAgICB0aHJvdzsNCg0KICAgICAgICAvLyBGYWlsIGlmIHRoaXMgYWNjb3VudCBpcyBhbHJlYWR5IGluIHRoZSBsaXN0DQogICAgICAgIGlmIChhY2NvdW50UmVhZGVyQWRkcmVzc2VzW19hZGRyZXNzXSkNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICANCiAgICAgICAgLy8gQWRkIHRoZSB1c2VyDQogICAgICAgIGFjY291bnRSZWFkZXJBZGRyZXNzZXNbX2FkZHJlc3NdID0gdHJ1ZTsNCiAgICAgICAgQWNjb3VudFJlYWRlckFkZGVkKG1zZy5zZW5kZXIsIF9hZGRyZXNzKTsNCiAgICAgICAgYWNjb3VudFJlYWRlckF1ZGl0Lmxlbmd0aCsrOw0KICAgICAgICBhY2NvdW50UmVhZGVyQXVkaXRbYWRtaW5BdWRpdC5sZW5ndGggLSAxXSA9IF9hZGRyZXNzOw0KICAgIH0NCg0KICAgIC8qIFJlbW92ZXMgYSB1c2VyL2NvbnRyYWN0cyBmcm9tIG91ciBsaXN0IG9mIGFjY291bnQgcmVhZGVycyBidXQga2VlcHMgdGhlbSBpbiB0aGUgaGlzdG9yeSBhdWRpdCAqLw0KICAgIGZ1bmN0aW9uIHJlbW92ZUFjY291bnRSZWFkZXIoYWRkcmVzcyBfYWRkcmVzcykgew0KICAgICAgICAvKiBFbnN1cmUgd2UncmUgYW4gYWRtaW4gKi8NCiAgICAgICAgaWYgKCFpc0N1cnJlbnRBZG1pbihtc2cuc2VuZGVyKSkNCiAgICAgICAgICAgIHRocm93Ow0KDQogICAgICAgIC8vIEZhaWwgaWYgdGhpcyBhY2NvdW50IGlzIGFscmVhZHkgbm90IGluIHRoZSBsaXN0DQogICAgICAgIGlmICghYWNjb3VudFJlYWRlckFkZHJlc3Nlc1tfYWRkcmVzc10pDQogICAgICAgICAgICB0aHJvdzsNCg0KICAgICAgICAvKiBSZW1vdmUgdGhpcyBhZG1pbiB1c2VyICovDQogICAgICAgIGFjY291bnRSZWFkZXJBZGRyZXNzZXNbX2FkZHJlc3NdID0gZmFsc2U7DQogICAgICAgIEFjY291bnRSZWFkZXJSZW1vdmVkKG1zZy5zZW5kZXIsIF9hZGRyZXNzKTsNCiAgICB9DQp9'