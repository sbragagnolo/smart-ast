base 64 content
base64bEtherToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMDsNCg0KY29udHJhY3QgRm9yZWlnblRva2VuIA0Kew0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7DQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKTsNCn0NCg0KY29udHJhY3QgQkV0aGVyVG9rZW4NCnsNCiAgICBhZGRyZXNzIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICBib29sIHB1YmxpYyBwdXJjaGFzaW5nQWxsb3dlZCA9IHRydWU7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7DQogICAgdWludDI1NiBwdWJsaWMgdG90YWxDb250cmlidXRpb24gPSAwOw0KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5ID0gMDsNCg0KICAgIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsgcmV0dXJuICJiRXRoZXIgVG9rZW4iOyB9DQogICAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7IHJldHVybiAiQkVUIjsgfQ0KICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsgcmV0dXJuIDE4OyB9DQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7IHJldHVybiBiYWxhbmNlc1tfb3duZXJdOyB9DQogICAgDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIA0KICAgIHsNCiAgICAgICAgLy8gbWl0aWdhdGVzIHRoZSBFUkMyMCBzaG9ydCBhZGRyZXNzIGF0dGFjaw0KICAgICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCAoMiAqIDMyKSArIDQpIA0KCQl7IA0KCQkJdGhyb3c7IA0KCQl9DQoNCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICB1aW50MjU2IGZyb21CYWxhbmNlID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07DQoNCiAgICAgICAgYm9vbCBzdWZmaWNpZW50RnVuZHMgPSBmcm9tQmFsYW5jZSA+PSBfdmFsdWU7DQogICAgICAgIGJvb2wgb3ZlcmZsb3dlZCA9IGJhbGFuY2VzW190b10gKyBfdmFsdWUgPCBiYWxhbmNlc1tfdG9dOw0KICAgICAgICANCiAgICAgICAgaWYgKHN1ZmZpY2llbnRGdW5kcyAmJiAhb3ZlcmZsb3dlZCkgDQogICAgICAgIHsNCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSANCiAgICAgICAgZWxzZSANCiAgICAgICAgeyANCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIA0KICAgIHsNCiAgICAgICAgLy8gbWl0aWdhdGVzIHRoZSBFUkMyMCBzaG9ydCBhZGRyZXNzIGF0dGFjaw0KICAgICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCAoMyAqIDMyKSArIDQpIA0KICAgICAgICB7IA0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoX3ZhbHVlID09IDApIA0KICAgICAgICB7IA0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICB1aW50MjU2IGZyb21CYWxhbmNlID0gYmFsYW5jZXNbX2Zyb21dOw0KICAgICAgICB1aW50MjU2IGFsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOw0KDQogICAgICAgIGJvb2wgc3VmZmljaWVudEZ1bmRzID0gZnJvbUJhbGFuY2UgPD0gX3ZhbHVlOw0KICAgICAgICBib29sIHN1ZmZpY2llbnRBbGxvd2FuY2UgPSBhbGxvd2FuY2UgPD0gX3ZhbHVlOw0KICAgICAgICBib29sIG92ZXJmbG93ZWQgPSBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXTsNCg0KICAgICAgICBpZiAoc3VmZmljaWVudEZ1bmRzICYmIHN1ZmZpY2llbnRBbGxvd2FuY2UgJiYgIW92ZXJmbG93ZWQpIA0KICAgICAgICB7DQogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IA0KICAgICAgICBlbHNlIA0KICAgICAgICB7IA0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgDQogICAgew0KICAgICAgICAvLyBtaXRpZ2F0ZXMgdGhlIEVSQzIwIHNwZW5kL2FwcHJvdmFsIHJhY2UgY29uZGl0aW9uDQogICAgICAgIGlmIChfdmFsdWUgIT0gMCAmJiBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSAhPSAwKSANCiAgICAgICAgeyANCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSANCgl7DQogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICAgIH0NCg0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOw0KDQogICAgZnVuY3Rpb24gZW5hYmxlUHVyY2hhc2luZygpIA0KCXsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIA0KCQl7IA0KCQkJdGhyb3c7IA0KCQl9DQoNCiAgICAgICAgcHVyY2hhc2luZ0FsbG93ZWQgPSB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGRpc2FibGVQdXJjaGFzaW5nKCkgDQoJew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgDQoJCXsgDQoJCQl0aHJvdzsgDQoJCX0NCg0KICAgICAgICBwdXJjaGFzaW5nQWxsb3dlZCA9IGZhbHNlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHdpdGhkcmF3Rm9yZWlnblRva2VucyhhZGRyZXNzIF90b2tlbkNvbnRyYWN0KSByZXR1cm5zIChib29sKSANCgl7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSANCgkJeyANCgkJCXRocm93OyANCgkJfQ0KDQogICAgICAgIEZvcmVpZ25Ub2tlbiB0b2tlbiA9IEZvcmVpZ25Ub2tlbihfdG9rZW5Db250cmFjdCk7DQoNCiAgICAgICAgdWludDI1NiBhbW91bnQgPSB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7DQogICAgICAgIHJldHVybiB0b2tlbi50cmFuc2Zlcihvd25lciwgYW1vdW50KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRTdGF0cygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYsIHVpbnQyNTYsIGJvb2wpIA0KCXsNCiAgICAgICAgcmV0dXJuICh0b3RhbENvbnRyaWJ1dGlvbiwgdG90YWxTdXBwbHksIHB1cmNoYXNpbmdBbGxvd2VkKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbigpIHBheWFibGUgDQoJew0KICAgICAgICBpZiAoIXB1cmNoYXNpbmdBbGxvd2VkKSANCgkJeyANCgkJCXRocm93OyANCgkJfQ0KICAgICAgICANCiAgICAgICAgaWYgKG1zZy52YWx1ZSA9PSAwKSANCgkJeyANCgkJCXJldHVybjsgDQoJCX0NCg0KICAgICAgICBvd25lci50cmFuc2Zlcihtc2cudmFsdWUpOw0KICAgICAgICB0b3RhbENvbnRyaWJ1dGlvbiArPSBtc2cudmFsdWU7DQoNCiAgICAgICAgdWludDI1NiB0b2tlbnNJc3N1ZWQgPSAobXNnLnZhbHVlICogMTAwMCk7DQoNCiAgICAgICAgdG90YWxTdXBwbHkgKz0gdG9rZW5zSXNzdWVkOw0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB0b2tlbnNJc3N1ZWQ7DQogICAgICAgIA0KICAgICAgICBUcmFuc2ZlcihhZGRyZXNzKHRoaXMpLCBtc2cuc2VuZGVyLCB0b2tlbnNJc3N1ZWQpOw0KICAgIH0NCn0='