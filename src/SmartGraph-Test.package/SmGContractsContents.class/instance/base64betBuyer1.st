base 64 content
base64betBuyer1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoNCg0KQkVUIEJ1eWVyDQo9PT09PT09PT09PT09PT09PT09PT09PT0NCg0KQnV5cyBCRVQgdG9rZW5zIGZyb20gdGhlIERBTy5DYXNpbm8gY3Jvd2RzYWxlIG9uIHlvdXIgYmVoYWxmLg0KQXV0aG9yOiAvdS9DaW50aXgNCg0KKi8NCg0KLy8gSW50ZXJmYWNlIHRvIEJFVCBJQ08gQ29udHJhY3QNCmNvbnRyYWN0IERhb0Nhc2lub1Rva2VuIHsNCiAgdWludDI1NiBwdWJsaWMgQ0FQOw0KICB1aW50MjU2IHB1YmxpYyB0b3RhbEV0aGVyczsNCiAgZnVuY3Rpb24gcHJveHlQYXltZW50KGFkZHJlc3MgcGFydGljaXBhbnQpIHBheWFibGU7DQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQp9DQoNCmNvbnRyYWN0IEJldEJ1eWVyIHsNCiAgLy8gU3RvcmUgdGhlIGFtb3VudCBvZiBFVEggZGVwb3NpdGVkIGJ5IGVhY2ggYWNjb3VudC4NCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZXM7DQogIC8vIFN0b3JlIHdoZXRoZXIgb3Igbm90IGVhY2ggYWNjb3VudCB3b3VsZCBoYXZlIG1hZGUgaXQgaW50byB0aGUgY3Jvd2RzYWxlLg0KICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBjaGVja2VkX2luOw0KICAvLyBCb3VudHkgZm9yIGV4ZWN1dGluZyBidXkuDQogIHVpbnQyNTYgcHVibGljIGJvdW50eTsNCiAgLy8gVHJhY2sgd2hldGhlciB0aGUgY29udHJhY3QgaGFzIGJvdWdodCB0aGUgdG9rZW5zIHlldC4NCiAgYm9vbCBwdWJsaWMgYm91Z2h0X3Rva2VuczsNCiAgLy8gUmVjb3JkIHRoZSB0aW1lIHRoZSBjb250cmFjdCBib3VnaHQgdGhlIHRva2Vucy4NCiAgdWludDI1NiBwdWJsaWMgdGltZV9ib3VnaHQ7DQogIC8vIEVtZXJnZW5jeSBraWxsIHN3aXRjaCBpbiBjYXNlIGEgY3JpdGljYWwgYnVnIGlzIGZvdW5kLg0KICBib29sIHB1YmxpYyBraWxsX3N3aXRjaDsNCiAgDQogIC8vIFJhdGlvIG9mIEJFVCB0b2tlbnMgcmVjZWl2ZWQgdG8gRVRIIGNvbnRyaWJ1dGVkDQogIHVpbnQyNTYgYmV0X3Blcl9ldGggPSAyMDAwOw0KICANCiAgLy8gVGhlIEJFVCBUb2tlbiBhZGRyZXNzIGFuZCBzYWxlIGFkZHJlc3MgYXJlIHRoZSBzYW1lLg0KICBEYW9DYXNpbm9Ub2tlbiBwdWJsaWMgdG9rZW4gPSBEYW9DYXNpbm9Ub2tlbigweDJCMDliNTJkNDJEZkI0ZTBjQkE0M0Y2MDdkRDI3MmVhM0ZFMUZCOUYpOw0KICAvLyBUaGUgZGV2ZWxvcGVyIGFkZHJlc3MuDQogIGFkZHJlc3MgZGV2ZWxvcGVyID0gMHgwMDBGYjgzNjk2NzdiMzA2NWRFNTgyMWE4NkJjOTU1MWQ1ZTVFQWI5Ow0KICANCiAgLy8gQWxsb3dzIHRoZSBkZXZlbG9wZXIgdG8gc2h1dCBkb3duIGV2ZXJ5dGhpbmcgZXhjZXB0IHdpdGhkcmF3YWxzIGluIGVtZXJnZW5jaWVzLg0KICBmdW5jdGlvbiBhY3RpdmF0ZV9raWxsX3N3aXRjaCgpIHsNCiAgICAvLyBPbmx5IGFsbG93IHRoZSBkZXZlbG9wZXIgdG8gYWN0aXZhdGUgdGhlIGtpbGwgc3dpdGNoLg0KICAgIGlmIChtc2cuc2VuZGVyICE9IGRldmVsb3BlcikgdGhyb3c7DQogICAgLy8gSXJyZXZlcnNpYmx5IGFjdGl2YXRlIHRoZSBraWxsIHN3aXRjaC4NCiAgICBraWxsX3N3aXRjaCA9IHRydWU7DQogIH0NCiAgDQogIC8vIFdpdGhkcmF3cyBhbGwgRVRIIGRlcG9zaXRlZCBvciBCRVQgcHVyY2hhc2VkIGJ5IHRoZSBzZW5kZXIuDQogIGZ1bmN0aW9uIHdpdGhkcmF3KCl7DQogICAgLy8gSWYgY2FsbGVkIGJlZm9yZSB0aGUgSUNPLCBjYW5jZWwgY2FsbGVyJ3MgcGFydGljaXBhdGlvbiBpbiB0aGUgc2FsZS4NCiAgICBpZiAoIWJvdWdodF90b2tlbnMpIHsNCiAgICAgIC8vIFN0b3JlIHRoZSB1c2VyJ3MgYmFsYW5jZSBwcmlvciB0byB3aXRoZHJhd2FsIGluIGEgdGVtcG9yYXJ5IHZhcmlhYmxlLg0KICAgICAgdWludDI1NiBldGhfYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07DQogICAgICAvLyBVcGRhdGUgdGhlIHVzZXIncyBiYWxhbmNlIHByaW9yIHRvIHNlbmRpbmcgRVRIIHRvIHByZXZlbnQgcmVjdXJzaXZlIGNhbGwuDQogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7DQogICAgICAvLyBSZXR1cm4gdGhlIHVzZXIncyBmdW5kcy4gIFRocm93cyBvbiBmYWlsdXJlIHRvIHByZXZlbnQgbG9zcyBvZiBmdW5kcy4NCiAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoZXRoX2Ftb3VudCk7DQogICAgfQ0KICAgIC8vIFdpdGhkcmF3IHRoZSBzZW5kZXIncyB0b2tlbnMgaWYgdGhlIGNvbnRyYWN0IGhhcyBhbHJlYWR5IHB1cmNoYXNlZCB0aGVtLg0KICAgIGVsc2Ugew0KICAgICAgLy8gU3RvcmUgdGhlIHVzZXIncyBCRVQgYmFsYW5jZSBpbiBhIHRlbXBvcmFyeSB2YXJpYWJsZSAoMSBFVEhXZWkgLT4gMjAwMCBCRVRXZWkpLg0KICAgICAgdWludDI1NiBiZXRfYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0gKiBiZXRfcGVyX2V0aDsNCiAgICAgIC8vIFVwZGF0ZSB0aGUgdXNlcidzIGJhbGFuY2UgcHJpb3IgdG8gc2VuZGluZyBCRVQgdG8gcHJldmVudCByZWN1cnNpdmUgY2FsbC4NCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsNCiAgICAgIC8vIE5vIGZlZSBmb3Igd2l0aGRyYXdpbmcgaWYgdGhlIHVzZXIgd291bGQgaGF2ZSBtYWRlIGl0IGludG8gdGhlIGNyb3dkc2FsZSBhbG9uZS4NCiAgICAgIHVpbnQyNTYgZmVlID0gMDsNCiAgICAgIC8vIDElIGZlZSBpZiB0aGUgdXNlciBkaWRuJ3QgY2hlY2sgaW4gZHVyaW5nIHRoZSBjcm93ZHNhbGUuDQogICAgICBpZiAoIWNoZWNrZWRfaW5bbXNnLnNlbmRlcl0pIHsNCiAgICAgICAgZmVlID0gYmV0X2Ftb3VudCAvIDEwMDsNCiAgICAgICAgLy8gU2VuZCBhbnkgbm9uLXplcm8gZmVlcyB0byBkZXZlbG9wZXIuDQogICAgICAgIGlmKCF0b2tlbi50cmFuc2ZlcihkZXZlbG9wZXIsIGZlZSkpIHRocm93Ow0KICAgICAgfQ0KICAgICAgLy8gU2VuZCB0aGUgdXNlciB0aGVpciB0b2tlbnMuICBUaHJvd3MgaWYgdGhlIGNyb3dkc2FsZSBpc24ndCBvdmVyLg0KICAgICAgaWYoIXRva2VuLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGJldF9hbW91bnQgLSBmZWUpKSB0aHJvdzsNCiAgICB9DQogIH0NCiAgDQogIC8vIEFsbG93IGRldmVsb3BlciB0byBhZGQgRVRIIHRvIHRoZSBidXkgZXhlY3V0aW9uIGJvdW50eS4NCiAgZnVuY3Rpb24gYWRkX3RvX2JvdW50eSgpIHBheWFibGUgew0KICAgIC8vIE9ubHkgYWxsb3cgdGhlIGRldmVsb3BlciB0byBjb250cmlidXRlIHRvIHRoZSBidXkgZXhlY3V0aW9uIGJvdW50eS4NCiAgICBpZiAobXNnLnNlbmRlciAhPSBkZXZlbG9wZXIpIHRocm93Ow0KICAgIC8vIERpc2FsbG93IGFkZGluZyB0byBib3VudHkgaWYga2lsbCBzd2l0Y2ggaXMgYWN0aXZlLg0KICAgIGlmIChraWxsX3N3aXRjaCkgdGhyb3c7DQogICAgLy8gRGlzYWxsb3cgYWRkaW5nIHRvIHRoZSBib3VudHkgaWYgY29udHJhY3QgaGFzIGFscmVhZHkgYm91Z2h0IHRoZSB0b2tlbnMuDQogICAgaWYgKGJvdWdodF90b2tlbnMpIHRocm93Ow0KICAgIC8vIFVwZGF0ZSBib3VudHkgdG8gaW5jbHVkZSByZWNlaXZlZCBhbW91bnQuDQogICAgYm91bnR5ICs9IG1zZy52YWx1ZTsNCiAgfQ0KICANCiAgLy8gQnV5cyB0b2tlbnMgaW4gdGhlIGNyb3dkc2FsZSBhbmQgcmV3YXJkcyB0aGUgY2FsbGVyLCBjYWxsYWJsZSBieSBhbnlvbmUuDQogIGZ1bmN0aW9uIGNsYWltX2JvdW50eSgpew0KICAgIC8vIFNob3J0IGNpcmN1aXQgdG8gc2F2ZSBnYXMgaWYgdGhlIGNvbnRyYWN0IGhhcyBhbHJlYWR5IGJvdWdodCB0b2tlbnMuDQogICAgaWYgKGJvdWdodF90b2tlbnMpIHJldHVybjsNCiAgICAvLyBEaXNhbGxvdyBidXlpbmcgaW50byB0aGUgY3Jvd2RzYWxlIGlmIGtpbGwgc3dpdGNoIGlzIGFjdGl2ZS4NCiAgICBpZiAoa2lsbF9zd2l0Y2gpIHRocm93Ow0KICAgIC8vIFJlY29yZCB0aGF0IHRoZSBjb250cmFjdCBoYXMgYm91Z2h0IHRoZSB0b2tlbnMuDQogICAgYm91Z2h0X3Rva2VucyA9IHRydWU7DQogICAgLy8gUmVjb3JkIHRoZSB0aW1lIHRoZSBjb250cmFjdCBib3VnaHQgdGhlIHRva2Vucy4NCiAgICB0aW1lX2JvdWdodCA9IG5vdzsNCiAgICAvLyBUcmFuc2ZlciBhbGwgdGhlIGZ1bmRzIChsZXNzIHRoZSBib3VudHkpIHRvIHRoZSBCRVQgY3Jvd2RzYWxlIGNvbnRyYWN0DQogICAgLy8gdG8gYnV5IHRva2Vucy4gIFRocm93cyBpZiB0aGUgY3Jvd2RzYWxlIGhhc24ndCBzdGFydGVkIHlldCBvciBoYXMNCiAgICAvLyBhbHJlYWR5IGNvbXBsZXRlZCwgcHJldmVudGluZyBsb3NzIG9mIGZ1bmRzLg0KICAgIHRva2VuLnByb3h5UGF5bWVudC52YWx1ZSh0aGlzLmJhbGFuY2UgLSBib3VudHkpKGFkZHJlc3ModGhpcykpOw0KICAgIC8vIFNlbmQgdGhlIGNhbGxlciB0aGVpciBib3VudHkgZm9yIGJ1eWluZyB0b2tlbnMgZm9yIHRoZSBjb250cmFjdC4NCiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGJvdW50eSk7DQogIH0NCiAgDQogIC8vIEEgaGVscGVyIGZ1bmN0aW9uIGZvciB0aGUgZGVmYXVsdCBmdW5jdGlvbiwgYWxsb3dpbmcgY29udHJhY3RzIHRvIGludGVyYWN0Lg0KICBmdW5jdGlvbiBkZWZhdWx0X2hlbHBlcigpIHBheWFibGUgew0KICAgIC8vIFRyZWF0IG5lYXItemVybyBFVEggdHJhbnNhY3Rpb25zIGFzIGNoZWNrIGlucyBhbmQgd2l0aGRyYXdhbCByZXF1ZXN0cy4NCiAgICBpZiAobXNnLnZhbHVlIDw9IDEgZmlubmV5KSB7DQogICAgICAvLyBDaGVjayBpbiBkdXJpbmcgdGhlIGNyb3dkc2FsZSBiZWZvcmUgaXQgaGFzIHJlYWNoZWQgdGhlIGNhcC4NCiAgICAgIGlmIChib3VnaHRfdG9rZW5zICYmIHRva2VuLnRvdGFsRXRoZXJzKCkgPCB0b2tlbi5DQVAoKSkgew0KICAgICAgICAvLyBNYXJrIHVzZXIgYXMgY2hlY2tlZCBpbiwgbWVhbmluZyB0aGV5IHdvdWxkIGhhdmUgYmVlbiBhYmxlIHRvIGVudGVyIGFsb25lLg0KICAgICAgICBjaGVja2VkX2luW21zZy5zZW5kZXJdID0gdHJ1ZTsNCiAgICAgIH0NCiAgICAgIC8vIFdpdGhkcmF3IGZ1bmRzIGlmIHRoZSBjcm93ZHNhbGUgaGFzbid0IGJlZ3VuIHlldCBvciBpcyBhbHJlYWR5IG92ZXIuDQogICAgICBlbHNlIHsNCiAgICAgICAgd2l0aGRyYXcoKTsNCiAgICAgIH0NCiAgICB9DQogICAgLy8gRGVwb3NpdCB0aGUgdXNlcidzIGZ1bmRzIGZvciB1c2UgaW4gcHVyY2hhc2luZyB0b2tlbnMuDQogICAgZWxzZSB7DQogICAgICAvLyBEaXNhbGxvdyBkZXBvc2l0cyBpZiBraWxsIHN3aXRjaCBpcyBhY3RpdmUuDQogICAgICBpZiAoa2lsbF9zd2l0Y2gpIHRocm93Ow0KICAgICAgLy8gT25seSBhbGxvdyBkZXBvc2l0cyBpZiB0aGUgY29udHJhY3QgaGFzbid0IGFscmVhZHkgcHVyY2hhc2VkIHRoZSB0b2tlbnMuDQogICAgICBpZiAoYm91Z2h0X3Rva2VucykgdGhyb3c7DQogICAgICAvLyBVcGRhdGUgcmVjb3JkcyBvZiBkZXBvc2l0ZWQgRVRIIHRvIGluY2x1ZGUgdGhlIHJlY2VpdmVkIGFtb3VudC4NCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IG1zZy52YWx1ZTsNCiAgICB9DQogIH0NCiAgDQogIC8vIERlZmF1bHQgZnVuY3Rpb24uICBDYWxsZWQgd2hlbiBhIHVzZXIgc2VuZHMgRVRIIHRvIHRoZSBjb250cmFjdC4NCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7DQogICAgLy8gRGVsZWdhdGUgdG8gdGhlIGhlbHBlciBmdW5jdGlvbi4NCiAgICBkZWZhdWx0X2hlbHBlcigpOw0KICB9DQp9'