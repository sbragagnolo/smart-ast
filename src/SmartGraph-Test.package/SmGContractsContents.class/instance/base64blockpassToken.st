base 64 content
base64blockpassToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMDsNCg0KY29udHJhY3QgRm9yZWlnblRva2VuIHsNCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KTsNCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKTsNCn0NCg0KY29udHJhY3QgQmxvY2twYXNzVG9rZW4gew0KDQogIGFkZHJlc3Mgb3duZXIgPSBtc2cuc2VuZGVyOw0KDQogIGJvb2wgcHVibGljIHB1cmNoYXNpbmdBbGxvd2VkID0gZmFsc2U7DQoNCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsNCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOw0KDQogIHVpbnQyNTYgcHVibGljIHRvdGFsQ29udHJpYnV0aW9uID0gMDsNCiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOw0KICB1aW50MjU2IHB1YmxpYyBzdGFydGluZ0Jsb2NrID0gYmxvY2subnVtYmVyOw0KDQogIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsgcmV0dXJuICJCbG9ja3Bhc3MgVG9rZW4iOyB9DQogIGZ1bmN0aW9uIHN5bWJvbCgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZykgeyByZXR1cm4gIkJQVCI7IH0NCiAgZnVuY3Rpb24gZGVjaW1hbHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCkgeyByZXR1cm4gMTg7IH0NCg0KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07IH0NCg0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgaWYobXNnLmRhdGEubGVuZ3RoIDwgKDIgKiAzMikgKyA0KSB7IHRocm93OyB9DQoNCiAgICBpZiAoX3ZhbHVlID09IDApIHsgcmV0dXJuIGZhbHNlOyB9DQoNCiAgICB1aW50MjU2IGZyb21CYWxhbmNlID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07DQoNCiAgICBib29sIHN1ZmZpY2llbnRGdW5kcyA9IGZyb21CYWxhbmNlID49IF92YWx1ZTsNCiAgICBib29sIG92ZXJmbG93ZWQgPSBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZXNbX3RvXTsNCg0KICAgIGlmIChzdWZmaWNpZW50RnVuZHMgJiYgIW92ZXJmbG93ZWQpIHsNCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KDQogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCAoMyAqIDMyKSArIDQpIHsgdGhyb3c7IH0NCg0KICAgICAgaWYgKF92YWx1ZSA9PSAwKSB7IHJldHVybiBmYWxzZTsgfQ0KDQogICAgICB1aW50MjU2IGZyb21CYWxhbmNlID0gYmFsYW5jZXNbX2Zyb21dOw0KICAgICAgdWludDI1NiBhbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsNCg0KICAgICAgYm9vbCBzdWZmaWNpZW50RnVuZHMgPSBmcm9tQmFsYW5jZSA8PSBfdmFsdWU7DQogICAgICBib29sIHN1ZmZpY2llbnRBbGxvd2FuY2UgPSBhbGxvd2FuY2UgPD0gX3ZhbHVlOw0KICAgICAgYm9vbCBvdmVyZmxvd2VkID0gYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b107DQoNCiAgICAgIGlmIChzdWZmaWNpZW50RnVuZHMgJiYgc3VmZmljaWVudEFsbG93YW5jZSAmJiAhb3ZlcmZsb3dlZCkgew0KICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsNCg0KICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQoNCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQ0KICAgICAgfQ0KDQogICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgICAgICBpZiAoX3ZhbHVlICE9IDAgJiYgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkgeyByZXR1cm4gZmFsc2U7IH0NCg0KICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsNCg0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICB9DQoNCiAgICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikgew0KICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCiAgICAgIH0NCg0KICAgICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQogICAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsNCg0KICAgICAgZnVuY3Rpb24gZW5hYmxlUHVyY2hhc2luZygpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsgdGhyb3c7IH0NCg0KICAgICAgICBwdXJjaGFzaW5nQWxsb3dlZCA9IHRydWU7DQogICAgICB9DQoNCiAgICAgIGZ1bmN0aW9uIGRpc2FibGVQdXJjaGFzaW5nKCkgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgeyB0aHJvdzsgfQ0KDQogICAgICAgIHB1cmNoYXNpbmdBbGxvd2VkID0gZmFsc2U7DQogICAgICB9DQoNCiAgICAgIGZ1bmN0aW9uIHdpdGhkcmF3Rm9yZWlnblRva2VucyhhZGRyZXNzIF90b2tlbkNvbnRyYWN0KSByZXR1cm5zIChib29sKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7IHRocm93OyB9DQoNCiAgICAgICAgRm9yZWlnblRva2VuIHRva2VuID0gRm9yZWlnblRva2VuKF90b2tlbkNvbnRyYWN0KTsNCg0KICAgICAgICB1aW50MjU2IGFtb3VudCA9IHRva2VuLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKTsNCiAgICAgICAgcmV0dXJuIHRva2VuLnRyYW5zZmVyKG93bmVyLCBhbW91bnQpOw0KICAgICAgfQ0KDQogICAgICBmdW5jdGlvbiBnZXRTdGF0cygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYsIHVpbnQyNTYsIGJvb2wpIHsNCiAgICAgICAgcmV0dXJuICh0b3RhbENvbnRyaWJ1dGlvbiwgdG90YWxTdXBwbHksIHB1cmNoYXNpbmdBbGxvd2VkKTsNCiAgICAgIH0NCg0KICAgICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsNCiAgICAgICAgaWYgKCFwdXJjaGFzaW5nQWxsb3dlZCkgeyB0aHJvdzsgfQ0KDQogICAgICAgIGlmIChtc2cudmFsdWUgPT0gMCkgeyByZXR1cm47IH0NCg0KICAgICAgICAvL3RoZSBsYXN0IHZhbGlkIGJsb2NrIGZvciB0aGUgY3Jvd2RzYWxlDQogICAgICAgIGlmKGJsb2NrLm51bWJlciA+PSA0MzcwMDAwKXsgdGhyb3c7IH0NCg0KICAgICAgICB1aW50MjU2IEJQVHBlckV0aCA9IDEwMDA7DQoNCiAgICAgICAgaWYoYmxvY2subnVtYmVyID49IChzdGFydGluZ0Jsb2NrICsgODA2MDApKXsNCiAgICAgICAgICBCUFRwZXJFdGggPSA4MDA7DQogICAgICAgIH0NCg0KICAgICAgICBpZihibG9jay5udW1iZXIgPj0gKHN0YXJ0aW5nQmxvY2sgKyAxNjEyMDApKXsNCiAgICAgICAgICBCUFRwZXJFdGggPSA2NDA7DQogICAgICAgIH0NCg0KICAgICAgICBpZihibG9jay5udW1iZXIgPj0gKHN0YXJ0aW5nQmxvY2sgKyAyNDE4MDApKXsNCiAgICAgICAgICBCUFRwZXJFdGggPSA1MTI7DQogICAgICAgIH0NCg0KICAgICAgICBpZihibG9jay5udW1iZXIgPj0gKHN0YXJ0aW5nQmxvY2sgKyAzMjI0MDApKXsNCiAgICAgICAgICBCUFRwZXJFdGggPSA0MTA7DQogICAgICAgIH0NCg0KICAgICAgICAgIG93bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7DQogICAgICAgICAgdG90YWxDb250cmlidXRpb24gKz0gbXNnLnZhbHVlOw0KICAgICAgICAgIHVpbnQyNTYgdG9rZW5zSXNzdWVkID0gKG1zZy52YWx1ZSAqIEJQVHBlckV0aCk7DQoNCiAgICAgICAgICB0b3RhbFN1cHBseSArPSB0b2tlbnNJc3N1ZWQ7DQogICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdG9rZW5zSXNzdWVkOw0KDQogICAgICAgICAgVHJhbnNmZXIoYWRkcmVzcyh0aGlzKSwgbXNnLnNlbmRlciwgdG9rZW5zSXNzdWVkKTsNCg0KICAgICAgfQ0KICAgIH0='