base 64 content
base64clitCrowdFunder
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoNCiAgIENvcHlyaWdodCAyMDE3IERhcHBIdWIsIExMQw0KDQogICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsNCiAgIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAgIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KDQogICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoNCiAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAgIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAgIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKi8NCg0KLy8gQWJzdHJhY3QgY29udHJhY3QgZm9yIHRoZSBmdWxsIEVSQyAyMCBUb2tlbiBzdGFuZGFyZA0KLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwDQoNCmNvbnRyYWN0IEVSQzIwVG9rZW4gew0KCWZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBzdXBwbHkpOw0KDQoJLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZA0KCS8vLyBAcmV0dXJuIFRoZSBiYWxhbmNlDQoJZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOw0KDQoJLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYA0KCS8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQNCgkvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkDQoJLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90DQoJZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KDQoJLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBfZnJvbWAgb24gdGhlIGNvbmRpdGlvbiBpdCBpcyBhcHByb3ZlZCBieSBgX2Zyb21gDQoJLy8vIEBwYXJhbSBfZnJvbSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VuZGVyDQoJLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudA0KCS8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2YgdG9rZW4gdG8gYmUgdHJhbnNmZXJyZWQNCgkvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QNCglmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KDQoJLy8vIEBub3RpY2UgYG1zZy5zZW5kZXJgIGFwcHJvdmVzIGBfc3BlbmRlcmAgdG8gc3BlbmQgYF92YWx1ZWAgdG9rZW5zDQoJLy8vIEBwYXJhbSBfc3BlbmRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMNCgkvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXINCgkvLy8gQHJldHVybiBXaGV0aGVyIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bCBvciBub3QNCglmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KDQoJLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2Vucw0KCS8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zDQoJLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudA0KCWZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOw0KDQoJZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQoJZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7DQp9DQoNCnByYWdtYSBzb2xpZGl0eSBeMC40LjExOw0KDQovKg0KICAgIENvcHlyaWdodCAyMDE2LCBKb3JkaSBCYXlsaW5hDQoNCiAgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQ0KICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLg0KDQogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQogICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YNCiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCg0KICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uDQogKi8NCg0KLy8vIEB0aXRsZSBNaW5pTWVUb2tlbiBDb250cmFjdA0KLy8vIEBhdXRob3IgSm9yZGkgQmF5bGluYQ0KLy8vIEBkZXYgVGhpcyB0b2tlbiBjb250cmFjdCdzIGdvYWwgaXMgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gY2xvbmUgdGhpcw0KLy8vICB0b2tlbiB1c2luZyB0aGUgdG9rZW4gZGlzdHJpYnV0aW9uIGF0IGEgZ2l2ZW4gYmxvY2ssIHRoaXMgd2lsbCBhbGxvdyBEQU8ncw0KLy8vICBhbmQgREFwcHMgdG8gdXBncmFkZSB0aGVpciBmZWF0dXJlcyBpbiBhIGRlY2VudHJhbGl6ZWQgbWFubmVyIHdpdGhvdXQNCi8vLyAgYWZmZWN0aW5nIHRoZSBvcmlnaW5hbCB0b2tlbg0KLy8vIEBkZXYgSXQgaXMgRVJDMjAgY29tcGxpYW50LCBidXQgc3RpbGwgbmVlZHMgdG8gdW5kZXIgZ28gZnVydGhlciB0ZXN0aW5nLg0KDQoNCi8vLyBAZGV2IFRoZSB0b2tlbiBjb250cm9sbGVyIGNvbnRyYWN0IG11c3QgaW1wbGVtZW50IHRoZXNlIGZ1bmN0aW9ucw0KY29udHJhY3QgVG9rZW5Db250cm9sbGVyIHsNCiAgICAvLy8gQG5vdGljZSBDYWxsZWQgd2hlbiBgX293bmVyYCBzZW5kcyBldGhlciB0byB0aGUgTWluaU1lIFRva2VuIGNvbnRyYWN0DQogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCBzZW50IHRoZSBldGhlciB0byBjcmVhdGUgdG9rZW5zDQogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZXRoZXIgaXMgYWNjZXB0ZWQsIGZhbHNlIGlmIGl0IHRocm93cw0KICAgIGZ1bmN0aW9uIHByb3h5UGF5bWVudChhZGRyZXNzIF9vd25lcikgcGF5YWJsZSByZXR1cm5zKGJvb2wpOw0KDQogICAgLy8vIEBub3RpY2UgTm90aWZpZXMgdGhlIGNvbnRyb2xsZXIgYWJvdXQgYSB0b2tlbiB0cmFuc2ZlciBhbGxvd2luZyB0aGUNCiAgICAvLy8gIGNvbnRyb2xsZXIgdG8gcmVhY3QgaWYgZGVzaXJlZA0KICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIG9yaWdpbiBvZiB0aGUgdHJhbnNmZXINCiAgICAvLy8gQHBhcmFtIF90byBUaGUgZGVzdGluYXRpb24gb2YgdGhlIHRyYW5zZmVyDQogICAgLy8vIEBwYXJhbSBfYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIHRyYW5zZmVyDQogICAgLy8vIEByZXR1cm4gRmFsc2UgaWYgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgYXV0aG9yaXplIHRoZSB0cmFuc2Zlcg0KICAgIGZ1bmN0aW9uIG9uVHJhbnNmZXIoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX2Ftb3VudCkgcmV0dXJucyhib29sKTsNCg0KICAgIC8vLyBAbm90aWNlIE5vdGlmaWVzIHRoZSBjb250cm9sbGVyIGFib3V0IGFuIGFwcHJvdmFsIGFsbG93aW5nIHRoZQ0KICAgIC8vLyAgY29udHJvbGxlciB0byByZWFjdCBpZiBkZXNpcmVkDQogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCBjYWxscyBgYXBwcm92ZSgpYA0KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIHNwZW5kZXIgaW4gdGhlIGBhcHByb3ZlKClgIGNhbGwNCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBpbiB0aGUgYGFwcHJvdmUoKWAgY2FsbA0KICAgIC8vLyBAcmV0dXJuIEZhbHNlIGlmIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGF1dGhvcml6ZSB0aGUgYXBwcm92YWwNCiAgICBmdW5jdGlvbiBvbkFwcHJvdmUoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2Ftb3VudCkNCiAgICAgICAgcmV0dXJucyhib29sKTsNCn0NCg0KY29udHJhY3QgQ29udHJvbGxlZCB7DQogICAgLy8vIEBub3RpY2UgVGhlIGFkZHJlc3Mgb2YgdGhlIGNvbnRyb2xsZXIgaXMgdGhlIG9ubHkgYWRkcmVzcyB0aGF0IGNhbiBjYWxsDQogICAgLy8vICBhIGZ1bmN0aW9uIHdpdGggdGhpcyBtb2RpZmllcg0KICAgIG1vZGlmaWVyIG9ubHlDb250cm9sbGVyIHsgaWYgKG1zZy5zZW5kZXIgIT0gY29udHJvbGxlcikgdGhyb3c7IF87IH0NCg0KICAgIGFkZHJlc3MgcHVibGljIGNvbnRyb2xsZXI7DQoNCiAgICBmdW5jdGlvbiBDb250cm9sbGVkKCkgeyBjb250cm9sbGVyID0gbXNnLnNlbmRlcjt9DQoNCiAgICAvLy8gQG5vdGljZSBDaGFuZ2VzIHRoZSBjb250cm9sbGVyIG9mIHRoZSBjb250cmFjdA0KICAgIC8vLyBAcGFyYW0gX25ld0NvbnRyb2xsZXIgVGhlIG5ldyBjb250cm9sbGVyIG9mIHRoZSBjb250cmFjdA0KICAgIGZ1bmN0aW9uIGNoYW5nZUNvbnRyb2xsZXIoYWRkcmVzcyBfbmV3Q29udHJvbGxlcikgb25seUNvbnRyb2xsZXIgew0KICAgICAgICBjb250cm9sbGVyID0gX25ld0NvbnRyb2xsZXI7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBBcHByb3ZlQW5kQ2FsbEZhbGxCYWNrIHsNCiAgICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBmcm9tLCB1aW50MjU2IF9hbW91bnQsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZGF0YSk7DQp9DQoNCi8vLyBAZGV2IFRoZSBhY3R1YWwgdG9rZW4gY29udHJhY3QsIHRoZSBkZWZhdWx0IGNvbnRyb2xsZXIgaXMgdGhlIG1zZy5zZW5kZXINCi8vLyAgdGhhdCBkZXBsb3lzIHRoZSBjb250cmFjdCwgc28gdXN1YWxseSB0aGlzIHRva2VuIHdpbGwgYmUgZGVwbG95ZWQgYnkgYQ0KLy8vICB0b2tlbiBjb250cm9sbGVyIGNvbnRyYWN0LCB3aGljaCBHaXZldGggd2lsbCBjYWxsIGEgIkNhbXBhaWduIg0KY29udHJhY3QgTWluaU1lVG9rZW4gaXMgQ29udHJvbGxlZCwgRVJDMjBUb2tlbiB7DQoNCiAgICBzdHJpbmcgcHVibGljIG5hbWU7ICAgICAgICAgICAgICAgIC8vVGhlIFRva2VuJ3MgbmFtZTogZS5nLiBEaWdpeERBTyBUb2tlbnMNCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7ICAgICAgICAgICAgIC8vTnVtYmVyIG9mIGRlY2ltYWxzIG9mIHRoZSBzbWFsbGVzdCB1bml0DQogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7ICAgICAgICAgICAgICAvL0FuIGlkZW50aWZpZXI6IGUuZy4gUkVQDQogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ01NVF8wLjEnOyAvL0FuIGFyYml0cmFyeSB2ZXJzaW9uaW5nIHNjaGVtZQ0KDQogICAgLy8vIEBkZXYgYENoZWNrcG9pbnRgIGlzIHRoZSBzdHJ1Y3R1cmUgdGhhdCBhdHRhY2hlcyBhIGJsb2NrIG51bWJlciB0byBhDQogICAgLy8vICBnaXZlbiB2YWx1ZSwgdGhlIGJsb2NrIG51bWJlciBhdHRhY2hlZCBpcyB0aGUgb25lIHRoYXQgbGFzdCBjaGFuZ2VkIHRoZQ0KICAgIC8vLyAgdmFsdWUNCiAgICBzdHJ1Y3QgIENoZWNrcG9pbnQgew0KDQogICAgICAgIC8vIGBmcm9tQmxvY2tgIGlzIHRoZSBibG9jayBudW1iZXIgdGhhdCB0aGUgdmFsdWUgd2FzIGdlbmVyYXRlZCBmcm9tDQogICAgICAgIHVpbnQxMjggZnJvbUJsb2NrOw0KDQogICAgICAgIC8vIGB2YWx1ZWAgaXMgdGhlIGFtb3VudCBvZiB0b2tlbnMgYXQgYSBzcGVjaWZpYyBibG9jayBudW1iZXINCiAgICAgICAgdWludDEyOCB2YWx1ZTsNCiAgICB9DQoNCiAgICAvLyBgcGFyZW50VG9rZW5gIGlzIHRoZSBUb2tlbiBhZGRyZXNzIHRoYXQgd2FzIGNsb25lZCB0byBwcm9kdWNlIHRoaXMgdG9rZW47DQogICAgLy8gIGl0IHdpbGwgYmUgMHgwIGZvciBhIHRva2VuIHRoYXQgd2FzIG5vdCBjbG9uZWQNCiAgICBNaW5pTWVUb2tlbiBwdWJsaWMgcGFyZW50VG9rZW47DQoNCiAgICAvLyBgcGFyZW50U25hcFNob3RCbG9ja2AgaXMgdGhlIGJsb2NrIG51bWJlciBmcm9tIHRoZSBQYXJlbnQgVG9rZW4gdGhhdCB3YXMNCiAgICAvLyAgdXNlZCB0byBkZXRlcm1pbmUgdGhlIGluaXRpYWwgZGlzdHJpYnV0aW9uIG9mIHRoZSBDbG9uZSBUb2tlbg0KICAgIHVpbnQgcHVibGljIHBhcmVudFNuYXBTaG90QmxvY2s7DQoNCiAgICAvLyBgY3JlYXRpb25CbG9ja2AgaXMgdGhlIGJsb2NrIG51bWJlciB0aGF0IHRoZSBDbG9uZSBUb2tlbiB3YXMgY3JlYXRlZA0KICAgIHVpbnQgcHVibGljIGNyZWF0aW9uQmxvY2s7DQoNCiAgICAvLyBgYmFsYW5jZXNgIGlzIHRoZSBtYXAgdGhhdCB0cmFja3MgdGhlIGJhbGFuY2Ugb2YgZWFjaCBhZGRyZXNzLCBpbiB0aGlzDQogICAgLy8gIGNvbnRyYWN0IHdoZW4gdGhlIGJhbGFuY2UgY2hhbmdlcyB0aGUgYmxvY2sgbnVtYmVyIHRoYXQgdGhlIGNoYW5nZQ0KICAgIC8vICBvY2N1cnJlZCBpcyBhbHNvIGluY2x1ZGVkIGluIHRoZSBtYXANCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IENoZWNrcG9pbnRbXSkgYmFsYW5jZXM7DQoNCiAgICAvLyBgYWxsb3dlZGAgdHJhY2tzIGFueSBleHRyYSB0cmFuc2ZlciByaWdodHMgYXMgaW4gYWxsIEVSQzIwIHRva2Vucw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsNCg0KICAgIC8vIFRyYWNrcyB0aGUgaGlzdG9yeSBvZiB0aGUgYHRvdGFsU3VwcGx5YCBvZiB0aGUgdG9rZW4NCiAgICBDaGVja3BvaW50W10gdG90YWxTdXBwbHlIaXN0b3J5Ow0KDQogICAgLy8gRmxhZyB0aGF0IGRldGVybWluZXMgaWYgdGhlIHRva2VuIGlzIHRyYW5zZmVyYWJsZSBvciBub3QuDQogICAgYm9vbCBwdWJsaWMgdHJhbnNmZXJzRW5hYmxlZDsNCg0KICAgIC8vIFRoZSBmYWN0b3J5IHVzZWQgdG8gY3JlYXRlIG5ldyBjbG9uZSB0b2tlbnMNCiAgICBNaW5pTWVUb2tlbkZhY3RvcnkgcHVibGljIHRva2VuRmFjdG9yeTsNCg0KLy8vLy8vLy8vLy8vLy8vLw0KLy8gQ29uc3RydWN0b3INCi8vLy8vLy8vLy8vLy8vLy8NCg0KICAgIC8vLyBAbm90aWNlIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIE1pbmlNZVRva2VuDQogICAgLy8vIEBwYXJhbSBfdG9rZW5GYWN0b3J5IFRoZSBhZGRyZXNzIG9mIHRoZSBNaW5pTWVUb2tlbkZhY3RvcnkgY29udHJhY3QgdGhhdA0KICAgIC8vLyAgd2lsbCBjcmVhdGUgdGhlIENsb25lIHRva2VuIGNvbnRyYWN0cywgdGhlIHRva2VuIGZhY3RvcnkgbmVlZHMgdG8gYmUNCiAgICAvLy8gIGRlcGxveWVkIGZpcnN0DQogICAgLy8vIEBwYXJhbSBfcGFyZW50VG9rZW4gQWRkcmVzcyBvZiB0aGUgcGFyZW50IHRva2VuLCBzZXQgdG8gMHgwIGlmIGl0IGlzIGENCiAgICAvLy8gIG5ldyB0b2tlbg0KICAgIC8vLyBAcGFyYW0gX3BhcmVudFNuYXBTaG90QmxvY2sgQmxvY2sgb2YgdGhlIHBhcmVudCB0b2tlbiB0aGF0IHdpbGwNCiAgICAvLy8gIGRldGVybWluZSB0aGUgaW5pdGlhbCBkaXN0cmlidXRpb24gb2YgdGhlIGNsb25lIHRva2VuLCBzZXQgdG8gMCBpZiBpdA0KICAgIC8vLyAgaXMgYSBuZXcgdG9rZW4NCiAgICAvLy8gQHBhcmFtIF90b2tlbk5hbWUgTmFtZSBvZiB0aGUgbmV3IHRva2VuDQogICAgLy8vIEBwYXJhbSBfZGVjaW1hbFVuaXRzIE51bWJlciBvZiBkZWNpbWFscyBvZiB0aGUgbmV3IHRva2VuDQogICAgLy8vIEBwYXJhbSBfdG9rZW5TeW1ib2wgVG9rZW4gU3ltYm9sIGZvciB0aGUgbmV3IHRva2VuDQogICAgLy8vIEBwYXJhbSBfdHJhbnNmZXJzRW5hYmxlZCBJZiB0cnVlLCB0b2tlbnMgd2lsbCBiZSBhYmxlIHRvIGJlIHRyYW5zZmVycmVkDQogICAgZnVuY3Rpb24gTWluaU1lVG9rZW4oDQogICAgICAgIGFkZHJlc3MgX3Rva2VuRmFjdG9yeSwNCiAgICAgICAgYWRkcmVzcyBfcGFyZW50VG9rZW4sDQogICAgICAgIHVpbnQgX3BhcmVudFNuYXBTaG90QmxvY2ssDQogICAgICAgIHN0cmluZyBfdG9rZW5OYW1lLA0KICAgICAgICB1aW50OCBfZGVjaW1hbFVuaXRzLA0KICAgICAgICBzdHJpbmcgX3Rva2VuU3ltYm9sLA0KICAgICAgICBib29sIF90cmFuc2ZlcnNFbmFibGVkDQogICAgKSB7DQogICAgICAgIHRva2VuRmFjdG9yeSA9IE1pbmlNZVRva2VuRmFjdG9yeShfdG9rZW5GYWN0b3J5KTsNCiAgICAgICAgbmFtZSA9IF90b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lDQogICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGVjaW1hbHMNCiAgICAgICAgc3ltYm9sID0gX3Rva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wNCiAgICAgICAgcGFyZW50VG9rZW4gPSBNaW5pTWVUb2tlbihfcGFyZW50VG9rZW4pOw0KICAgICAgICBwYXJlbnRTbmFwU2hvdEJsb2NrID0gX3BhcmVudFNuYXBTaG90QmxvY2s7DQogICAgICAgIHRyYW5zZmVyc0VuYWJsZWQgPSBfdHJhbnNmZXJzRW5hYmxlZDsNCiAgICAgICAgY3JlYXRpb25CbG9jayA9IGJsb2NrLm51bWJlcjsNCiAgICB9DQoNCg0KLy8vLy8vLy8vLy8vLy8vLy8vLw0KLy8gRVJDMjAgTWV0aG9kcw0KLy8vLy8vLy8vLy8vLy8vLy8vLw0KDQoJLyoqDQoJKg0KCSogRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sNCgkqDQoJKiBodHRwOi8vdmVzc2VuZXMuY29tL3RoZS1lcmMyMC1zaG9ydC1hZGRyZXNzLWF0dGFjay1leHBsYWluZWQvDQoJKi8NCgltb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7DQoJCWlmKG1zZy5kYXRhLmxlbmd0aCAhPSBzaXplICsgNCkgew0KCQl0aHJvdzsNCgkJfQ0KCQlfOw0KCX0NCg0KCS8vLyBAbm90aWNlIFNlbmQgYF9hbW91bnRgIHRva2VucyB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYA0KCS8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQNCgkvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQNCgkvLy8gQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QNCglmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCgkJaWYgKCF0cmFuc2ZlcnNFbmFibGVkKSB0aHJvdzsNCgkJcmV0dXJuIGRvVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsNCiAgICB9DQoNCiAgICAvLy8gQG5vdGljZSBTZW5kIGBfYW1vdW50YCB0b2tlbnMgdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQNCiAgICAvLy8gIGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWANCiAgICAvLy8gQHBhcmFtIF9mcm9tIFRoZSBhZGRyZXNzIGhvbGRpbmcgdGhlIHRva2VucyBiZWluZyB0cmFuc2ZlcnJlZA0KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQNCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQNCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bA0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50DQogICAgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgICAgICAvLyBUaGUgY29udHJvbGxlciBvZiB0aGlzIGNvbnRyYWN0IGNhbiBtb3ZlIHRva2VucyBhcm91bmQgYXQgd2lsbCwNCiAgICAgICAgLy8gIHRoaXMgaXMgaW1wb3J0YW50IHRvIHJlY29nbml6ZSEgQ29uZmlybSB0aGF0IHlvdSB0cnVzdCB0aGUNCiAgICAgICAgLy8gIGNvbnRyb2xsZXIgb2YgdGhpcyBjb250cmFjdCwgd2hpY2ggaW4gbW9zdCBzaXR1YXRpb25zIHNob3VsZCBiZQ0KICAgICAgICAvLyAgYW5vdGhlciBvcGVuIHNvdXJjZSBzbWFydCBjb250cmFjdCBvciAweDANCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gY29udHJvbGxlcikgew0KICAgICAgICAgICAgaWYgKCF0cmFuc2ZlcnNFbmFibGVkKSB0aHJvdzsNCg0KICAgICAgICAgICAgLy8gVGhlIHN0YW5kYXJkIEVSQyAyMCB0cmFuc2ZlckZyb20gZnVuY3Rpb25hbGl0eQ0KICAgICAgICAgICAgaWYgKGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIDwgX2Ftb3VudCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZG9UcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBUaGlzIGlzIHRoZSBhY3R1YWwgdHJhbnNmZXIgZnVuY3Rpb24gaW4gdGhlIHRva2VuIGNvbnRyYWN0LCBpdCBjYW4NCiAgICAvLy8gIG9ubHkgYmUgY2FsbGVkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGlzIGNvbnRyYWN0Lg0KICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgdG9rZW5zIGJlaW5nIHRyYW5zZmVycmVkDQogICAgLy8vIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudA0KICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZA0KICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRyYW5zZmVyIHdhcyBzdWNjZXNzZnVsDQogICAgZnVuY3Rpb24gZG9UcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfYW1vdW50DQogICAgKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpIHsNCg0KICAgICAgICAgICBpZiAoX2Ftb3VudCA9PSAwKSB7DQogICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgfQ0KDQogICAgICAgICAgIGlmIChwYXJlbnRTbmFwU2hvdEJsb2NrID49IGJsb2NrLm51bWJlcikgdGhyb3c7DQoNCiAgICAgICAgICAgLy8gRG8gbm90IGFsbG93IHRyYW5zZmVyIHRvIDB4MCBvciB0aGUgdG9rZW4gY29udHJhY3QgaXRzZWxmDQogICAgICAgICAgIGlmICgoX3RvID09IDApIHx8IChfdG8gPT0gYWRkcmVzcyh0aGlzKSkpIHRocm93Ow0KDQogICAgICAgICAgIC8vIElmIHRoZSBhbW91bnQgYmVpbmcgdHJhbnNmZXJlZCBpcyBtb3JlIHRoYW4gdGhlIGJhbGFuY2Ugb2YgdGhlDQogICAgICAgICAgIC8vICBhY2NvdW50IHRoZSB0cmFuc2ZlciByZXR1cm5zIGZhbHNlDQogICAgICAgICAgIHZhciBwcmV2aW91c0JhbGFuY2VGcm9tID0gYmFsYW5jZU9mQXQoX2Zyb20sIGJsb2NrLm51bWJlcik7DQogICAgICAgICAgIGlmIChwcmV2aW91c0JhbGFuY2VGcm9tIDwgX2Ftb3VudCkgew0KICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICB9DQoNCiAgICAgICAgICAgLy8gQWxlcnRzIHRoZSB0b2tlbiBjb250cm9sbGVyIG9mIHRoZSB0cmFuc2Zlcg0KICAgICAgICAgICBpZiAoaXNDb250cmFjdChjb250cm9sbGVyKSkgew0KICAgICAgICAgICAgICAgaWYgKCFUb2tlbkNvbnRyb2xsZXIoY29udHJvbGxlcikub25UcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KSkNCiAgICAgICAgICAgICAgIHRocm93Ow0KICAgICAgICAgICB9DQoNCiAgICAgICAgICAgLy8gRmlyc3QgdXBkYXRlIHRoZSBiYWxhbmNlIGFycmF5IHdpdGggdGhlIG5ldyB2YWx1ZSBmb3IgdGhlIGFkZHJlc3MNCiAgICAgICAgICAgLy8gIHNlbmRpbmcgdGhlIHRva2Vucw0KICAgICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW19mcm9tXSwgcHJldmlvdXNCYWxhbmNlRnJvbSAtIF9hbW91bnQpOw0KDQogICAgICAgICAgIC8vIFRoZW4gdXBkYXRlIHRoZSBiYWxhbmNlIGFycmF5IHdpdGggdGhlIG5ldyB2YWx1ZSBmb3IgdGhlIGFkZHJlc3MNCiAgICAgICAgICAgLy8gIHJlY2VpdmluZyB0aGUgdG9rZW5zDQogICAgICAgICAgIHZhciBwcmV2aW91c0JhbGFuY2VUbyA9IGJhbGFuY2VPZkF0KF90bywgYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgaWYgKHByZXZpb3VzQmFsYW5jZVRvICsgX2Ftb3VudCA8IHByZXZpb3VzQmFsYW5jZVRvKSB0aHJvdzsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93DQogICAgICAgICAgIHVwZGF0ZVZhbHVlQXROb3coYmFsYW5jZXNbX3RvXSwgcHJldmlvdXNCYWxhbmNlVG8gKyBfYW1vdW50KTsNCg0KICAgICAgICAgICAvLyBBbiBldmVudCB0byBtYWtlIHRoZSB0cmFuc2ZlciBlYXN5IHRvIGZpbmQgb24gdGhlIGJsb2NrY2hhaW4NCiAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7DQoNCiAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCdzIGJhbGFuY2UgaXMgYmVpbmcgcmVxdWVzdGVkDQogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2Ugb2YgYF9vd25lcmAgYXQgdGhlIGN1cnJlbnQgYmxvY2sNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgICAgICByZXR1cm4gYmFsYW5jZU9mQXQoX293bmVyLCBibG9jay5udW1iZXIpOw0KICAgIH0NCg0KICAgIC8vLyBAbm90aWNlIGBtc2cuc2VuZGVyYCBhcHByb3ZlcyBgX3NwZW5kZXJgIHRvIHNwZW5kIGBfYW1vdW50YCB0b2tlbnMgb24NCiAgICAvLy8gIGl0cyBiZWhhbGYuIFRoaXMgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHRoZSBFUkMyMCBhcHByb3ZlIGZ1bmN0aW9uDQogICAgLy8vICB0byBiZSBhIGxpdHRsZSBiaXQgc2FmZXINCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2Vucw0KICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXINCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSBhcHByb3ZhbCB3YXMgc3VjY2Vzc2Z1bA0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgaWYgKCF0cmFuc2ZlcnNFbmFibGVkKSB0aHJvdzsNCg0KICAgICAgICAvLyBUbyBjaGFuZ2UgdGhlIGFwcHJvdmUgYW1vdW50IHlvdSBmaXJzdCBoYXZlIHRvIHJlZHVjZSB0aGUgYWRkcmVzc2VzYA0KICAgICAgICAvLyAgYWxsb3dhbmNlIHRvIHplcm8gYnkgY2FsbGluZyBgYXBwcm92ZShfc3BlbmRlciwwKWAgaWYgaXQgaXMgbm90DQogICAgICAgIC8vICBhbHJlYWR5IDAgdG8gbWl0aWdhdGUgdGhlIHJhY2UgY29uZGl0aW9uIGRlc2NyaWJlZCBoZXJlOg0KICAgICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkNCiAgICAgICAgaWYgKChfYW1vdW50IT0wKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0wKSkgdGhyb3c7DQoNCiAgICAgICAgLy8gQWxlcnRzIHRoZSB0b2tlbiBjb250cm9sbGVyIG9mIHRoZSBhcHByb3ZlIGZ1bmN0aW9uIGNhbGwNCiAgICAgICAgaWYgKGlzQ29udHJhY3QoY29udHJvbGxlcikpIHsNCiAgICAgICAgICAgIGlmICghVG9rZW5Db250cm9sbGVyKGNvbnRyb2xsZXIpLm9uQXBwcm92ZShtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCkpDQogICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCg0KICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLy8vIEBkZXYgVGhpcyBmdW5jdGlvbiBtYWtlcyBpdCBlYXN5IHRvIHJlYWQgdGhlIGBhbGxvd2VkW11gIG1hcA0KICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRoYXQgb3ducyB0aGUgdG9rZW4NCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2Vucw0KICAgIC8vLyBAcmV0dXJuIEFtb3VudCBvZiByZW1haW5pbmcgdG9rZW5zIG9mIF9vd25lciB0aGF0IF9zcGVuZGVyIGlzIGFsbG93ZWQNCiAgICAvLy8gIHRvIHNwZW5kDQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyDQogICAgKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgew0KICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCiAgICB9DQoNCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzZW5kIGBfYW1vdW50YCB0b2tlbnMgb24NCiAgICAvLy8gIGl0cyBiZWhhbGYsIGFuZCB0aGVuIGEgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIGluIHRoZSBjb250cmFjdCB0aGF0IGlzDQogICAgLy8vICBiZWluZyBhcHByb3ZlZCwgYF9zcGVuZGVyYC4gVGhpcyBhbGxvd3MgdXNlcnMgdG8gdXNlIHRoZWlyIHRva2VucyB0bw0KICAgIC8vLyAgaW50ZXJhY3Qgd2l0aCBjb250cmFjdHMgaW4gb25lIGZ1bmN0aW9uIGNhbGwgaW5zdGVhZCBvZiB0d28NCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCBhYmxlIHRvIHRyYW5zZmVyIHRoZSB0b2tlbnMNCiAgICAvLy8gQHBhcmFtIF9hbW91bnQgVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyDQogICAgLy8vIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZnVuY3Rpb24gY2FsbCB3YXMgc3VjY2Vzc2Z1bA0KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCwgYnl0ZXMgX2V4dHJhRGF0YQ0KICAgICkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmICghYXBwcm92ZShfc3BlbmRlciwgX2Ftb3VudCkpIHRocm93Ow0KDQogICAgICAgIEFwcHJvdmVBbmRDYWxsRmFsbEJhY2soX3NwZW5kZXIpLnJlY2VpdmVBcHByb3ZhbCgNCiAgICAgICAgICAgIG1zZy5zZW5kZXIsDQogICAgICAgICAgICBfYW1vdW50LA0KICAgICAgICAgICAgdGhpcywNCiAgICAgICAgICAgIF9leHRyYURhdGENCiAgICAgICAgKTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBUaGlzIGZ1bmN0aW9uIG1ha2VzIGl0IGVhc3kgdG8gZ2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zDQogICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMNCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5QXQoYmxvY2subnVtYmVyKTsNCiAgICB9DQoNCg0KLy8vLy8vLy8vLy8vLy8vLw0KLy8gUXVlcnkgYmFsYW5jZSBhbmQgdG90YWxTdXBwbHkgaW4gSGlzdG9yeQ0KLy8vLy8vLy8vLy8vLy8vLw0KDQogICAgLy8vIEBkZXYgUXVlcmllcyB0aGUgYmFsYW5jZSBvZiBgX293bmVyYCBhdCBhIHNwZWNpZmljIGBfYmxvY2tOdW1iZXJgDQogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgZnJvbSB3aGljaCB0aGUgYmFsYW5jZSB3aWxsIGJlIHJldHJpZXZlZA0KICAgIC8vLyBAcGFyYW0gX2Jsb2NrTnVtYmVyIFRoZSBibG9jayBudW1iZXIgd2hlbiB0aGUgYmFsYW5jZSBpcyBxdWVyaWVkDQogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UgYXQgYF9ibG9ja051bWJlcmANCiAgICBmdW5jdGlvbiBiYWxhbmNlT2ZBdChhZGRyZXNzIF9vd25lciwgdWludCBfYmxvY2tOdW1iZXIpIGNvbnN0YW50DQogICAgICAgIHJldHVybnMgKHVpbnQpIHsNCg0KICAgICAgICAvLyBUaGVzZSBuZXh0IGZldyBsaW5lcyBhcmUgdXNlZCB3aGVuIHRoZSBiYWxhbmNlIG9mIHRoZSB0b2tlbiBpcw0KICAgICAgICAvLyAgcmVxdWVzdGVkIGJlZm9yZSBhIGNoZWNrIHBvaW50IHdhcyBldmVyIGNyZWF0ZWQgZm9yIHRoaXMgdG9rZW4sIGl0DQogICAgICAgIC8vICByZXF1aXJlcyB0aGF0IHRoZSBgcGFyZW50VG9rZW4uYmFsYW5jZU9mQXRgIGJlIHF1ZXJpZWQgYXQgdGhlDQogICAgICAgIC8vICBnZW5lc2lzIGJsb2NrIGZvciB0aGF0IHRva2VuIGFzIHRoaXMgY29udGFpbnMgaW5pdGlhbCBiYWxhbmNlIG9mDQogICAgICAgIC8vICB0aGlzIHRva2VuDQogICAgICAgIGlmICgoYmFsYW5jZXNbX293bmVyXS5sZW5ndGggPT0gMCkNCiAgICAgICAgICAgIHx8IChiYWxhbmNlc1tfb3duZXJdWzBdLmZyb21CbG9jayA+IF9ibG9ja051bWJlcikpIHsNCiAgICAgICAgICAgIGlmIChhZGRyZXNzKHBhcmVudFRva2VuKSAhPSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFRva2VuLmJhbGFuY2VPZkF0KF9vd25lciwgbWluKF9ibG9ja051bWJlciwgcGFyZW50U25hcFNob3RCbG9jaykpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAvLyBIYXMgbm8gcGFyZW50DQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgZXhwZWN0ZWQgYmFsYW5jZSBkdXJpbmcgbm9ybWFsIHNpdHVhdGlvbnMNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBnZXRWYWx1ZUF0KGJhbGFuY2VzW19vd25lcl0sIF9ibG9ja051bWJlcik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLy8gQG5vdGljZSBUb3RhbCBhbW91bnQgb2YgdG9rZW5zIGF0IGEgc3BlY2lmaWMgYF9ibG9ja051bWJlcmAuDQogICAgLy8vIEBwYXJhbSBfYmxvY2tOdW1iZXIgVGhlIGJsb2NrIG51bWJlciB3aGVuIHRoZSB0b3RhbFN1cHBseSBpcyBxdWVyaWVkDQogICAgLy8vIEByZXR1cm4gVGhlIHRvdGFsIGFtb3VudCBvZiB0b2tlbnMgYXQgYF9ibG9ja051bWJlcmANCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseUF0KHVpbnQgX2Jsb2NrTnVtYmVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsNCg0KICAgICAgICAvLyBUaGVzZSBuZXh0IGZldyBsaW5lcyBhcmUgdXNlZCB3aGVuIHRoZSB0b3RhbFN1cHBseSBvZiB0aGUgdG9rZW4gaXMNCiAgICAgICAgLy8gIHJlcXVlc3RlZCBiZWZvcmUgYSBjaGVjayBwb2ludCB3YXMgZXZlciBjcmVhdGVkIGZvciB0aGlzIHRva2VuLCBpdA0KICAgICAgICAvLyAgcmVxdWlyZXMgdGhhdCB0aGUgYHBhcmVudFRva2VuLnRvdGFsU3VwcGx5QXRgIGJlIHF1ZXJpZWQgYXQgdGhlDQogICAgICAgIC8vICBnZW5lc2lzIGJsb2NrIGZvciB0aGlzIHRva2VuIGFzIHRoYXQgY29udGFpbnMgdG90YWxTdXBwbHkgb2YgdGhpcw0KICAgICAgICAvLyAgdG9rZW4gYXQgdGhpcyBibG9jayBudW1iZXIuDQogICAgICAgIGlmICgodG90YWxTdXBwbHlIaXN0b3J5Lmxlbmd0aCA9PSAwKQ0KICAgICAgICAgICAgfHwgKHRvdGFsU3VwcGx5SGlzdG9yeVswXS5mcm9tQmxvY2sgPiBfYmxvY2tOdW1iZXIpKSB7DQogICAgICAgICAgICBpZiAoYWRkcmVzcyhwYXJlbnRUb2tlbikgIT0gMCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRUb2tlbi50b3RhbFN1cHBseUF0KG1pbihfYmxvY2tOdW1iZXIsIHBhcmVudFNuYXBTaG90QmxvY2spKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgZXhwZWN0ZWQgdG90YWxTdXBwbHkgZHVyaW5nIG5vcm1hbCBzaXR1YXRpb25zDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gZ2V0VmFsdWVBdCh0b3RhbFN1cHBseUhpc3RvcnksIF9ibG9ja051bWJlcik7DQogICAgICAgIH0NCiAgICB9DQoNCi8vLy8vLy8vLy8vLy8vLy8NCi8vIENsb25lIFRva2VuIE1ldGhvZA0KLy8vLy8vLy8vLy8vLy8vLw0KDQogICAgLy8vIEBub3RpY2UgQ3JlYXRlcyBhIG5ldyBjbG9uZSB0b2tlbiB3aXRoIHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBiZWluZw0KICAgIC8vLyAgdGhpcyB0b2tlbiBhdCBgX3NuYXBzaG90QmxvY2tgDQogICAgLy8vIEBwYXJhbSBfY2xvbmVUb2tlbk5hbWUgTmFtZSBvZiB0aGUgY2xvbmUgdG9rZW4NCiAgICAvLy8gQHBhcmFtIF9jbG9uZURlY2ltYWxVbml0cyBOdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIHNtYWxsZXN0IHVuaXQNCiAgICAvLy8gQHBhcmFtIF9jbG9uZVRva2VuU3ltYm9sIFN5bWJvbCBvZiB0aGUgY2xvbmUgdG9rZW4NCiAgICAvLy8gQHBhcmFtIF9zbmFwc2hvdEJsb2NrIEJsb2NrIHdoZW4gdGhlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgcGFyZW50IHRva2VuIGlzDQogICAgLy8vICBjb3BpZWQgdG8gc2V0IHRoZSBpbml0aWFsIGRpc3RyaWJ1dGlvbiBvZiB0aGUgbmV3IGNsb25lIHRva2VuOw0KICAgIC8vLyAgaWYgdGhlIGJsb2NrIGlzIHplcm8gdGhhbiB0aGUgYWN0dWFsIGJsb2NrLCB0aGUgY3VycmVudCBibG9jayBpcyB1c2VkDQogICAgLy8vIEBwYXJhbSBfdHJhbnNmZXJzRW5hYmxlZCBUcnVlIGlmIHRyYW5zZmVycyBhcmUgYWxsb3dlZCBpbiB0aGUgY2xvbmUNCiAgICAvLy8gQHJldHVybiBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IE1pbmlNZVRva2VuIENvbnRyYWN0DQogICAgZnVuY3Rpb24gY3JlYXRlQ2xvbmVUb2tlbigNCiAgICAgICAgc3RyaW5nIF9jbG9uZVRva2VuTmFtZSwNCiAgICAgICAgdWludDggX2Nsb25lRGVjaW1hbFVuaXRzLA0KICAgICAgICBzdHJpbmcgX2Nsb25lVG9rZW5TeW1ib2wsDQogICAgICAgIHVpbnQgX3NuYXBzaG90QmxvY2ssDQogICAgICAgIGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQNCiAgICAgICAgKSBvbmx5Q29udHJvbGxlciByZXR1cm5zKGFkZHJlc3MpIHsNCiAgICAgICAgaWYgKF9zbmFwc2hvdEJsb2NrID09IDApIF9zbmFwc2hvdEJsb2NrID0gYmxvY2subnVtYmVyOw0KICAgICAgICBNaW5pTWVUb2tlbiBjbG9uZVRva2VuID0gdG9rZW5GYWN0b3J5LmNyZWF0ZUNsb25lVG9rZW4oDQogICAgICAgICAgICB0aGlzLA0KICAgICAgICAgICAgX3NuYXBzaG90QmxvY2ssDQogICAgICAgICAgICBfY2xvbmVUb2tlbk5hbWUsDQogICAgICAgICAgICBfY2xvbmVEZWNpbWFsVW5pdHMsDQogICAgICAgICAgICBfY2xvbmVUb2tlblN5bWJvbCwNCiAgICAgICAgICAgIF90cmFuc2ZlcnNFbmFibGVkDQogICAgICAgICAgICApOw0KDQogICAgICAgIGNsb25lVG9rZW4uY2hhbmdlQ29udHJvbGxlcihtc2cuc2VuZGVyKTsNCg0KICAgICAgICAvLyBBbiBldmVudCB0byBtYWtlIHRoZSB0b2tlbiBlYXN5IHRvIGZpbmQgb24gdGhlIGJsb2NrY2hhaW4NCiAgICAgICAgTmV3Q2xvbmVUb2tlbihhZGRyZXNzKGNsb25lVG9rZW4pLCBfc25hcHNob3RCbG9jayk7DQogICAgICAgIHJldHVybiBhZGRyZXNzKGNsb25lVG9rZW4pOw0KICAgIH0NCg0KLy8vLy8vLy8vLy8vLy8vLw0KLy8gR2VuZXJhdGUgYW5kIGRlc3Ryb3kgdG9rZW5zDQovLy8vLy8vLy8vLy8vLy8vDQoNCiAgICAvLy8gQG5vdGljZSBHZW5lcmF0ZXMgYF9hbW91bnRgIHRva2VucyB0aGF0IGFyZSBhc3NpZ25lZCB0byBgX293bmVyYA0KICAgIC8vLyBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0aGUgbmV3IHRva2Vucw0KICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgcXVhbnRpdHkgb2YgdG9rZW5zIGdlbmVyYXRlZA0KICAgIC8vLyBAcmV0dXJuIFRydWUgaWYgdGhlIHRva2VucyBhcmUgZ2VuZXJhdGVkIGNvcnJlY3RseQ0KICAgIGZ1bmN0aW9uIGdlbmVyYXRlVG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IF9hbW91bnQpIG9ubHlDb250cm9sbGVyIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgdWludCBjdXJUb3RhbFN1cHBseSA9IGdldFZhbHVlQXQodG90YWxTdXBwbHlIaXN0b3J5LCBibG9jay5udW1iZXIpOw0KICAgICAgICBpZiAoY3VyVG90YWxTdXBwbHkgKyBfYW1vdW50IDwgY3VyVG90YWxTdXBwbHkpIHRocm93OyAvLyBDaGVjayBmb3Igb3ZlcmZsb3cNCgkJDQogICAgICAgIHVwZGF0ZVZhbHVlQXROb3codG90YWxTdXBwbHlIaXN0b3J5LCBjdXJUb3RhbFN1cHBseSArIF9hbW91bnQpOw0KICAgICAgICB2YXIgcHJldmlvdXNCYWxhbmNlVG8gPSBiYWxhbmNlT2YoX293bmVyKTsNCiAgICAgICAgaWYgKHByZXZpb3VzQmFsYW5jZVRvICsgX2Ftb3VudCA8IHByZXZpb3VzQmFsYW5jZVRvKSB0aHJvdzsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93DQoJCQ0KICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KGJhbGFuY2VzW19vd25lcl0sIHByZXZpb3VzQmFsYW5jZVRvICsgX2Ftb3VudCk7DQogICAgICAgIFRyYW5zZmVyKDAsIF9vd25lciwgX2Ftb3VudCk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KDQogICAgLy8vIEBub3RpY2UgQnVybnMgYF9hbW91bnRgIHRva2VucyBmcm9tIGBfb3duZXJgDQogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3MgdGhhdCB3aWxsIGxvc2UgdGhlIHRva2Vucw0KICAgIC8vLyBAcGFyYW0gX2Ftb3VudCBUaGUgcXVhbnRpdHkgb2YgdG9rZW5zIHRvIGJ1cm4NCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIHRoZSB0b2tlbnMgYXJlIGJ1cm5lZCBjb3JyZWN0bHkNCiAgICBmdW5jdGlvbiBkZXN0cm95VG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IF9hbW91bnQNCiAgICApIG9ubHlDb250cm9sbGVyIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgdWludCBjdXJUb3RhbFN1cHBseSA9IGdldFZhbHVlQXQodG90YWxTdXBwbHlIaXN0b3J5LCBibG9jay5udW1iZXIpOw0KICAgICAgICBpZiAoY3VyVG90YWxTdXBwbHkgPCBfYW1vdW50KSB0aHJvdzsNCiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFN1cHBseUhpc3RvcnksIGN1clRvdGFsU3VwcGx5IC0gX2Ftb3VudCk7DQogICAgICAgIHZhciBwcmV2aW91c0JhbGFuY2VGcm9tID0gYmFsYW5jZU9mKF9vd25lcik7DQogICAgICAgIGlmIChwcmV2aW91c0JhbGFuY2VGcm9tIDwgX2Ftb3VudCkgdGhyb3c7DQogICAgICAgIHVwZGF0ZVZhbHVlQXROb3coYmFsYW5jZXNbX293bmVyXSwgcHJldmlvdXNCYWxhbmNlRnJvbSAtIF9hbW91bnQpOw0KICAgICAgICBUcmFuc2Zlcihfb3duZXIsIDAsIF9hbW91bnQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCi8vLy8vLy8vLy8vLy8vLy8NCi8vIEVuYWJsZSB0b2tlbnMgdHJhbnNmZXJzDQovLy8vLy8vLy8vLy8vLy8vDQoNCg0KICAgIC8vLyBAbm90aWNlIEVuYWJsZXMgdG9rZW4gaG9sZGVycyB0byB0cmFuc2ZlciB0aGVpciB0b2tlbnMgZnJlZWx5IGlmIHRydWUNCiAgICAvLy8gQHBhcmFtIF90cmFuc2ZlcnNFbmFibGVkIFRydWUgaWYgdHJhbnNmZXJzIGFyZSBhbGxvd2VkIGluIHRoZSBjbG9uZQ0KICAgIGZ1bmN0aW9uIGVuYWJsZVRyYW5zZmVycyhib29sIF90cmFuc2ZlcnNFbmFibGVkKSBvbmx5Q29udHJvbGxlciB7DQogICAgICAgIHRyYW5zZmVyc0VuYWJsZWQgPSBfdHJhbnNmZXJzRW5hYmxlZDsNCiAgICB9DQoNCi8vLy8vLy8vLy8vLy8vLy8NCi8vIEludGVybmFsIGhlbHBlciBmdW5jdGlvbnMgdG8gcXVlcnkgYW5kIHNldCBhIHZhbHVlIGluIGEgc25hcHNob3QgYXJyYXkNCi8vLy8vLy8vLy8vLy8vLy8NCg0KICAgIC8vLyBAZGV2IGBnZXRWYWx1ZUF0YCByZXRyaWV2ZXMgdGhlIG51bWJlciBvZiB0b2tlbnMgYXQgYSBnaXZlbiBibG9jayBudW1iZXINCiAgICAvLy8gQHBhcmFtIGNoZWNrcG9pbnRzIFRoZSBoaXN0b3J5IG9mIHZhbHVlcyBiZWluZyBxdWVyaWVkDQogICAgLy8vIEBwYXJhbSBfYmxvY2sgVGhlIGJsb2NrIG51bWJlciB0byByZXRyaWV2ZSB0aGUgdmFsdWUgYXQNCiAgICAvLy8gQHJldHVybiBUaGUgbnVtYmVyIG9mIHRva2VucyBiZWluZyBxdWVyaWVkDQogICAgZnVuY3Rpb24gZ2V0VmFsdWVBdChDaGVja3BvaW50W10gc3RvcmFnZSBjaGVja3BvaW50cywgdWludCBfYmxvY2sNCiAgICApIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgaWYgKGNoZWNrcG9pbnRzLmxlbmd0aCA9PSAwKSByZXR1cm4gMDsNCg0KICAgICAgICAvLyBTaG9ydGN1dCBmb3IgdGhlIGFjdHVhbCB2YWx1ZQ0KICAgICAgICBpZiAoX2Jsb2NrID49IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aC0xXS5mcm9tQmxvY2spDQogICAgICAgICAgICByZXR1cm4gY2hlY2twb2ludHNbY2hlY2twb2ludHMubGVuZ3RoLTFdLnZhbHVlOw0KICAgICAgICBpZiAoX2Jsb2NrIDwgY2hlY2twb2ludHNbMF0uZnJvbUJsb2NrKSByZXR1cm4gMDsNCg0KICAgICAgICAvLyBCaW5hcnkgc2VhcmNoIG9mIHRoZSB2YWx1ZSBpbiB0aGUgYXJyYXkNCiAgICAgICAgdWludCBtaW4gPSAwOw0KICAgICAgICB1aW50IG1heCA9IGNoZWNrcG9pbnRzLmxlbmd0aC0xOw0KICAgICAgICB3aGlsZSAobWF4ID4gbWluKSB7DQogICAgICAgICAgICB1aW50IG1pZCA9IChtYXggKyBtaW4gKyAxKS8gMjsNCiAgICAgICAgICAgIGlmIChjaGVja3BvaW50c1ttaWRdLmZyb21CbG9jazw9X2Jsb2NrKSB7DQogICAgICAgICAgICAgICAgbWluID0gbWlkOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBtYXggPSBtaWQtMTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gY2hlY2twb2ludHNbbWluXS52YWx1ZTsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBgdXBkYXRlVmFsdWVBdE5vd2AgdXNlZCB0byB1cGRhdGUgdGhlIGBiYWxhbmNlc2AgbWFwIGFuZCB0aGUNCiAgICAvLy8gIGB0b3RhbFN1cHBseUhpc3RvcnlgDQogICAgLy8vIEBwYXJhbSBjaGVja3BvaW50cyBUaGUgaGlzdG9yeSBvZiBkYXRhIGJlaW5nIHVwZGF0ZWQNCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgbmV3IG51bWJlciBvZiB0b2tlbnMNCiAgICBmdW5jdGlvbiB1cGRhdGVWYWx1ZUF0Tm93KENoZWNrcG9pbnRbXSBzdG9yYWdlIGNoZWNrcG9pbnRzLCB1aW50IF92YWx1ZQ0KICAgICkgaW50ZXJuYWwgIHsNCiAgICAgICAgaWYgKChjaGVja3BvaW50cy5sZW5ndGggPT0gMCkNCiAgICAgICAgfHwgKGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtMV0uZnJvbUJsb2NrIDwgYmxvY2subnVtYmVyKSkgew0KICAgICAgICAgICAgICAgQ2hlY2twb2ludCBuZXdDaGVja1BvaW50ID0gY2hlY2twb2ludHNbIGNoZWNrcG9pbnRzLmxlbmd0aCsrIF07DQogICAgICAgICAgICAgICBuZXdDaGVja1BvaW50LmZyb21CbG9jayA9ICB1aW50MTI4KGJsb2NrLm51bWJlcik7DQogICAgICAgICAgICAgICBuZXdDaGVja1BvaW50LnZhbHVlID0gdWludDEyOChfdmFsdWUpOw0KICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgQ2hlY2twb2ludCBvbGRDaGVja1BvaW50ID0gY2hlY2twb2ludHNbY2hlY2twb2ludHMubGVuZ3RoLTFdOw0KICAgICAgICAgICAgICAgb2xkQ2hlY2tQb2ludC52YWx1ZSA9IHVpbnQxMjgoX3ZhbHVlKTsNCiAgICAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8vLyBAZGV2IEludGVybmFsIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBhbiBhZGRyZXNzIGlzIGEgY29udHJhY3QNCiAgICAvLy8gQHBhcmFtIF9hZGRyIFRoZSBhZGRyZXNzIGJlaW5nIHF1ZXJpZWQNCiAgICAvLy8gQHJldHVybiBUcnVlIGlmIGBfYWRkcmAgaXMgYSBjb250cmFjdA0KICAgIGZ1bmN0aW9uIGlzQ29udHJhY3QoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7DQogICAgICAgIHVpbnQgc2l6ZTsNCiAgICAgICAgaWYgKF9hZGRyID09IDApIHJldHVybiBmYWxzZTsNCiAgICAgICAgYXNzZW1ibHkgew0KICAgICAgICAgICAgc2l6ZSA6PSBleHRjb2Rlc2l6ZShfYWRkcikNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gc2l6ZT4wOw0KICAgIH0NCg0KICAgIC8vLyBAZGV2IEhlbHBlciBmdW5jdGlvbiB0byByZXR1cm4gYSBtaW4gYmV0d2VuIHRoZSB0d28gdWludHMNCiAgICBmdW5jdGlvbiBtaW4odWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7DQogICAgfQ0KDQogICAgLy8vIEBub3RpY2UgVGhlIGZhbGxiYWNrIGZ1bmN0aW9uOiBJZiB0aGUgY29udHJhY3QncyBjb250cm9sbGVyIGhhcyBub3QgYmVlbg0KICAgIC8vLyAgc2V0IHRvIDAsIHRoZW4gdGhlIGBwcm94eVBheW1lbnRgIG1ldGhvZCBpcyBjYWxsZWQgd2hpY2ggcmVsYXlzIHRoZQ0KICAgIC8vLyAgZXRoZXIgYW5kIGNyZWF0ZXMgdG9rZW5zIGFzIGRlc2NyaWJlZCBpbiB0aGUgdG9rZW4gY29udHJvbGxlciBjb250cmFjdA0KICAgIGZ1bmN0aW9uICgpICBwYXlhYmxlIHsNCiAgICAgICAgaWYgKGlzQ29udHJhY3QoY29udHJvbGxlcikpIHsNCiAgICAgICAgICAgIGlmICghIFRva2VuQ29udHJvbGxlcihjb250cm9sbGVyKS5wcm94eVBheW1lbnQudmFsdWUobXNnLnZhbHVlKShtc2cuc2VuZGVyKSkNCiAgICAgICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgfQ0KDQoNCgkvLy8vLy8vLy8vLy8vLy8vDQoJLy8gRXZlbnRzDQoJLy8vLy8vLy8vLy8vLy8vLw0KCWV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfYW1vdW50KTsNCglldmVudCBOZXdDbG9uZVRva2VuKGFkZHJlc3MgaW5kZXhlZCBfY2xvbmVUb2tlbiwgdWludCBfc25hcHNob3RCbG9jayk7DQoJZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpOw0KDQp9DQoNCi8vLy8vLy8vLy8vLy8vLy8NCi8vIE1pbmlNZVRva2VuRmFjdG9yeQ0KLy8vLy8vLy8vLy8vLy8vLw0KDQovLy8gQGRldiBUaGlzIGNvbnRyYWN0IGlzIHVzZWQgdG8gZ2VuZXJhdGUgY2xvbmUgY29udHJhY3RzIGZyb20gYSBjb250cmFjdC4NCi8vLyAgSW4gc29saWRpdHkgdGhpcyBpcyB0aGUgd2F5IHRvIGNyZWF0ZSBhIGNvbnRyYWN0IGZyb20gYSBjb250cmFjdCBvZiB0aGUNCi8vLyAgc2FtZSBjbGFzcw0KY29udHJhY3QgTWluaU1lVG9rZW5GYWN0b3J5IHsNCg0KICAgIC8vLyBAbm90aWNlIFVwZGF0ZSB0aGUgREFwcCBieSBjcmVhdGluZyBhIG5ldyB0b2tlbiB3aXRoIG5ldyBmdW5jdGlvbmFsaXRpZXMNCiAgICAvLy8gIHRoZSBtc2cuc2VuZGVyIGJlY29tZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhpcyBjbG9uZSB0b2tlbg0KICAgIC8vLyBAcGFyYW0gX3BhcmVudFRva2VuIEFkZHJlc3Mgb2YgdGhlIHRva2VuIGJlaW5nIGNsb25lZA0KICAgIC8vLyBAcGFyYW0gX3NuYXBzaG90QmxvY2sgQmxvY2sgb2YgdGhlIHBhcmVudCB0b2tlbiB0aGF0IHdpbGwNCiAgICAvLy8gIGRldGVybWluZSB0aGUgaW5pdGlhbCBkaXN0cmlidXRpb24gb2YgdGhlIGNsb25lIHRva2VuDQogICAgLy8vIEBwYXJhbSBfdG9rZW5OYW1lIE5hbWUgb2YgdGhlIG5ldyB0b2tlbg0KICAgIC8vLyBAcGFyYW0gX2RlY2ltYWxVbml0cyBOdW1iZXIgb2YgZGVjaW1hbHMgb2YgdGhlIG5ldyB0b2tlbg0KICAgIC8vLyBAcGFyYW0gX3Rva2VuU3ltYm9sIFRva2VuIFN5bWJvbCBmb3IgdGhlIG5ldyB0b2tlbg0KICAgIC8vLyBAcGFyYW0gX3RyYW5zZmVyc0VuYWJsZWQgSWYgdHJ1ZSwgdG9rZW5zIHdpbGwgYmUgYWJsZSB0byBiZSB0cmFuc2ZlcnJlZA0KICAgIC8vLyBAcmV0dXJuIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgdG9rZW4gY29udHJhY3QNCiAgICBmdW5jdGlvbiBjcmVhdGVDbG9uZVRva2VuKA0KICAgICAgICBhZGRyZXNzIF9wYXJlbnRUb2tlbiwNCiAgICAgICAgdWludCBfc25hcHNob3RCbG9jaywNCiAgICAgICAgc3RyaW5nIF90b2tlbk5hbWUsDQogICAgICAgIHVpbnQ4IF9kZWNpbWFsVW5pdHMsDQogICAgICAgIHN0cmluZyBfdG9rZW5TeW1ib2wsDQogICAgICAgIGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQNCiAgICApIHJldHVybnMgKE1pbmlNZVRva2VuKSB7DQogICAgICAgIE1pbmlNZVRva2VuIG5ld1Rva2VuID0gbmV3IE1pbmlNZVRva2VuKA0KICAgICAgICAgICAgdGhpcywNCiAgICAgICAgICAgIF9wYXJlbnRUb2tlbiwNCiAgICAgICAgICAgIF9zbmFwc2hvdEJsb2NrLA0KICAgICAgICAgICAgX3Rva2VuTmFtZSwNCiAgICAgICAgICAgIF9kZWNpbWFsVW5pdHMsDQogICAgICAgICAgICBfdG9rZW5TeW1ib2wsDQogICAgICAgICAgICBfdHJhbnNmZXJzRW5hYmxlZA0KICAgICAgICAgICAgKTsNCg0KICAgICAgICBuZXdUb2tlbi5jaGFuZ2VDb250cm9sbGVyKG1zZy5zZW5kZXIpOw0KICAgICAgICByZXR1cm4gbmV3VG9rZW47DQogICAgfQ0KfQ0KDQovLy8gQHRpdGxlIENsaXQgVG9rZW4gKENMSVQpIC0gQ3Jvd2QgZnVuZGluZyBjb2RlIGZvciBDTElUIENvaW4gcHJvamVjdA0KLy8vIA0KDQoNCmNvbnRyYWN0IENsaXRDb2luVG9rZW4gaXMgTWluaU1lVG9rZW4gew0KDQoNCglmdW5jdGlvbiBDbGl0Q29pblRva2VuKA0KCQkvL2FkZHJlc3MgX3Rva2VuRmFjdG9yeQ0KCSkgTWluaU1lVG9rZW4oDQoJCTB4MCwNCgkJMHgwLCAgICAgICAgICAgIC8vIG5vIHBhcmVudCB0b2tlbg0KCQkwLCAgICAgICAgICAgICAgLy8gbm8gc25hcHNob3QgYmxvY2sgbnVtYmVyIGZyb20gcGFyZW50DQoJCSJDTElUIFRva2VuIiwgCS8vIFRva2VuIG5hbWUNCgkJMCwgICAgICAgICAgICAgIC8vIERlY2ltYWxzDQoJCSJDTElUIiwgICAgICAgICAvLyBTeW1ib2wNCgkJZmFsc2UgICAgICAgICAgICAvLyBFbmFibGUgdHJhbnNmZXJzDQoJKSB7DQoJCXZlcnNpb24gPSAiQ0xJVCAxLjAiOw0KCX0NCg0KDQp9DQoNCi8qDQogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzDQogKi8NCmNvbnRyYWN0IFNhZmVNYXRoIHsNCiAgZnVuY3Rpb24gbXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgdWludCBjID0gYSAqIGI7DQogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KDQogIGZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIGFzc2VydChiID4gMCk7DQogICAgdWludCBjID0gYSAvIGI7DQogICAgYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICBhc3NlcnQoYiA8PSBhKTsNCiAgICByZXR1cm4gYSAtIGI7DQogIH0NCg0KICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICB1aW50IGMgPSBhICsgYjsNCiAgICBhc3NlcnQoYyA+PSBhKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KfQ0KDQoNCmNvbnRyYWN0IENsaXRDcm93ZEZ1bmRlciBpcyBDb250cm9sbGVkLCBTYWZlTWF0aCB7DQoNCglhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOw0KICAgIGFkZHJlc3MgcHVibGljIGZ1bmRSZWNpcGllbnQ7DQoJDQoJLy8gU3RhdGUgdmFyaWFibGVzDQogICAgU3RhdGUgcHVibGljIHN0YXRlID0gU3RhdGUuRnVuZHJhaXNpbmc7IC8vIGluaXRpYWxpemUgb24gY3JlYXRlCQ0KICAgIHVpbnQgcHVibGljIGZ1bmRpbmdHb2FsOyANCgl1aW50IHB1YmxpYyB0b3RhbFJhaXNlZDsNCgl1aW50IHB1YmxpYyBjdXJyZW50QmFsYW5jZTsNCgl1aW50IHB1YmxpYyBpc3N1ZWRUb2tlbkJhbGFuY2U7DQoJdWludCBwdWJsaWMgdG90YWxUb2tlbnNJc3N1ZWQ7DQoJdWludCBwdWJsaWMgY2FwVG9rZW5BbW91bnQ7DQoJdWludCBwdWJsaWMgc3RhcnRCbG9ja051bWJlcjsNCgl1aW50IHB1YmxpYyBlbmRCbG9ja051bWJlcjsNCgl1aW50IHB1YmxpYyBlb2xCbG9ja051bWJlcjsNCgkNCgl1aW50IHB1YmxpYyBmaXJzdEV4Y2hhbmdlUmF0ZVBlcmlvZDsNCgl1aW50IHB1YmxpYyBzZWNvbmRFeGNoYW5nZVJhdGVQZXJpb2Q7DQoJdWludCBwdWJsaWMgdGhpcmRFeGNoYW5nZVJhdGVQZXJpb2Q7DQoJdWludCBwdWJsaWMgZm91cnRoRXhjaGFuZ2VSYXRlUGVyaW9kOw0KCQ0KCXVpbnQgcHVibGljIGZpcnN0VG9rZW5FeGNoYW5nZVJhdGU7DQoJdWludCBwdWJsaWMgc2Vjb25kVG9rZW5FeGNoYW5nZVJhdGU7DQoJdWludCBwdWJsaWMgdGhpcmRUb2tlbkV4Y2hhbmdlUmF0ZTsNCgl1aW50IHB1YmxpYyBmb3VydGhUb2tlbkV4Y2hhbmdlUmF0ZTsNCgl1aW50IHB1YmxpYyBmaW5hbFRva2VuRXhjaGFuZ2VSYXRlOwkNCgkNCglib29sIHB1YmxpYyBmdW5kaW5nR29hbFJlYWNoZWQ7DQoJDQogICAgQ2xpdENvaW5Ub2tlbiBwdWJsaWMgZXhjaGFuZ2VUb2tlbjsNCgkNCgkvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8NCglldmVudCBIYXJkQ2FwUmVhY2hlZChhZGRyZXNzIGZ1bmRSZWNpcGllbnQsIHVpbnQgYW1vdW50UmFpc2VkKTsNCglldmVudCBHb2FsUmVhY2hlZChhZGRyZXNzIGZ1bmRSZWNpcGllbnQsIHVpbnQgYW1vdW50UmFpc2VkKTsNCglldmVudCBGdW5kVHJhbnNmZXIoYWRkcmVzcyBiYWNrZXIsIHVpbnQgYW1vdW50LCBib29sIGlzQ29udHJpYnV0aW9uKTsJDQoJZXZlbnQgRnJvemVuRnVuZHMoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJvemVuKTsNCglldmVudCBSZWZ1bmRQZXJpb2RTdGFydGVkKCk7DQoNCgkvKiBkYXRhIHN0cnVjdHVyZSB0byBob2xkIGluZm9ybWF0aW9uIGFib3V0IGNhbXBhaWduIGNvbnRyaWJ1dG9ycyAqLw0KCW1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwcml2YXRlIGJhbGFuY2VPZjsNCgltYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHByaXZhdGUgZnJvemVuQWNjb3VudDsNCgkNCgkvLyBEYXRhIHN0cnVjdHVyZXMNCiAgICBlbnVtIFN0YXRlIHsNCgkJRnVuZHJhaXNpbmcsDQoJCUV4cGlyZWRSZWZ1bmQsDQoJCVN1Y2Nlc3NmdWwsDQoJCUNsb3NlZA0KCX0NCgkNCgkvKg0KICAgICAqICBNb2RpZmllcnMNCiAgICAgKi8NCg0KCW1vZGlmaWVyIGluU3RhdGUoU3RhdGUgX3N0YXRlKSB7DQogICAgICAgIGlmIChzdGF0ZSAhPSBfc3RhdGUpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCgkNCgkvLyBBZGQgb25lIHdlZWsgdG8gZW5kQmxvY2tOdW1iZXINCgltb2RpZmllciBhdEVuZE9mTGlmZWN5Y2xlKCkgew0KICAgICAgICBpZighKChzdGF0ZSA9PSBTdGF0ZS5FeHBpcmVkUmVmdW5kICYmIGJsb2NrLm51bWJlciA+IGVvbEJsb2NrTnVtYmVyKSB8fCBzdGF0ZSA9PSBTdGF0ZS5TdWNjZXNzZnVsKSkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgXzsNCiAgICB9DQoJDQoJbW9kaWZpZXIgYWNjb3VudE5vdEZyb3plbigpIHsNCiAgICAgICAgaWYgKGZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0gPT0gdHJ1ZSkgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KCQ0KICAgIG1vZGlmaWVyIG1pbkludmVzdG1lbnQoKSB7DQogICAgICAvLyBVc2VyIGhhcyB0byBzZW5kIGF0IGxlYXN0IDAuMDEgRXRoDQogICAgICByZXF1aXJlKG1zZy52YWx1ZSA+PSAxMCAqKiAxNik7DQogICAgICBfOw0KICAgIH0NCgkNCgltb2RpZmllciBpc1N0YXJ0ZWQoKSB7DQoJCXJlcXVpcmUoYmxvY2subnVtYmVyID49IHN0YXJ0QmxvY2tOdW1iZXIpOw0KCQlfOw0KCX0NCg0KCS8qICBhdCBpbml0aWFsaXphdGlvbiwgc2V0dXAgdGhlIG93bmVyICovDQoJZnVuY3Rpb24gQ2xpdENyb3dkRnVuZGVyKA0KCQlhZGRyZXNzIF9mdW5kUmVjaXBpZW50LA0KCQl1aW50IF9kZWxheVN0YXJ0SG91cnMsDQoJCUNsaXRDb2luVG9rZW4gX2FkZHJlc3NPZkV4Y2hhbmdlVG9rZW4NCgkpIHsNCgkJY3JlYXRvciA9IG1zZy5zZW5kZXI7DQoJCQ0KCQlmdW5kUmVjaXBpZW50ID0gX2Z1bmRSZWNpcGllbnQ7DQoJCWZ1bmRpbmdHb2FsID0gNzAwMCAqIDEgZXRoZXI7DQoJCWNhcFRva2VuQW1vdW50ID0gMTQwICogMTAgKiogNjsNCgkJc3RhdGUgPSBTdGF0ZS5GdW5kcmFpc2luZzsNCgkJZnVuZGluZ0dvYWxSZWFjaGVkID0gZmFsc2U7DQoJCQ0KCQl0b3RhbFJhaXNlZCA9IDA7DQoJCWN1cnJlbnRCYWxhbmNlID0gMDsNCgkJdG90YWxUb2tlbnNJc3N1ZWQgPSAwOw0KCQlpc3N1ZWRUb2tlbkJhbGFuY2UgPSAwOw0KCQkNCgkJc3RhcnRCbG9ja051bWJlciA9IGJsb2NrLm51bWJlciArIGRpdihtdWwoMzYwMCwgX2RlbGF5U3RhcnRIb3VycyksIDE0KTsNCgkJZW5kQmxvY2tOdW1iZXIgPSBzdGFydEJsb2NrTnVtYmVyICsgZGl2KG11bCgzNjAwLCAxMDgwKSwgMTQpOyAvLyA0NSBkYXlzIA0KCQllb2xCbG9ja051bWJlciA9IGVuZEJsb2NrTnVtYmVyICsgZGl2KG11bCgzNjAwLCAxNjgpLCAxNCk7ICAvLyBvbmUgd2VlayAtIGNvbnRyYWN0IGVuZCBvZiBsaWZlDQoNCgkJZmlyc3RFeGNoYW5nZVJhdGVQZXJpb2QgPSBzdGFydEJsb2NrTnVtYmVyICsgZGl2KG11bCgzNjAwLCAyNCksIDE0KTsgICAvLyBGaXJzdCAyNCBob3VyIHNhbGUgDQoJCXNlY29uZEV4Y2hhbmdlUmF0ZVBlcmlvZCA9IGZpcnN0RXhjaGFuZ2VSYXRlUGVyaW9kICsgZGl2KG11bCgzNjAwLCAyNDApLCAxNCk7IC8vIE5leHQgMTAgZGF5cw0KCQl0aGlyZEV4Y2hhbmdlUmF0ZVBlcmlvZCA9IHNlY29uZEV4Y2hhbmdlUmF0ZVBlcmlvZCArIGRpdihtdWwoMzYwMCwgMjQwKSwgMTQpOyAvLyBOZXh0IDEwIGRheXMNCgkJZm91cnRoRXhjaGFuZ2VSYXRlUGVyaW9kID0gdGhpcmRFeGNoYW5nZVJhdGVQZXJpb2QgKyBkaXYobXVsKDM2MDAsIDI0MCksIDE0KTsgLy8gTmV4dCAxMCBkYXlzDQoJCQ0KCQl1aW50IF90b2tlbkV4Y2hhbmdlUmF0ZSA9IDEwMDA7DQoJCWZpcnN0VG9rZW5FeGNoYW5nZVJhdGUgPSAoX3Rva2VuRXhjaGFuZ2VSYXRlICsgMTAwMCk7CQ0KCQlzZWNvbmRUb2tlbkV4Y2hhbmdlUmF0ZSA9IChfdG9rZW5FeGNoYW5nZVJhdGUgKyA1MDApOw0KCQl0aGlyZFRva2VuRXhjaGFuZ2VSYXRlID0gKF90b2tlbkV4Y2hhbmdlUmF0ZSArIDMwMCk7DQoJCWZvdXJ0aFRva2VuRXhjaGFuZ2VSYXRlID0gKF90b2tlbkV4Y2hhbmdlUmF0ZSArIDEwMCk7DQoJCWZpbmFsVG9rZW5FeGNoYW5nZVJhdGUgPSBfdG9rZW5FeGNoYW5nZVJhdGU7DQoJCQ0KCQlleGNoYW5nZVRva2VuID0gQ2xpdENvaW5Ub2tlbihfYWRkcmVzc09mRXhjaGFuZ2VUb2tlbik7DQoJfQ0KCQ0KCWZ1bmN0aW9uIGZyZWV6ZUFjY291bnQoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJlZXplKSBvbmx5Q29udHJvbGxlciB7DQogICAgICAgIGZyb3plbkFjY291bnRbdGFyZ2V0XSA9IGZyZWV6ZTsNCiAgICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOw0KICAgIH0JDQoJDQoJZnVuY3Rpb24gZ2V0Q3VycmVudEV4Y2hhbmdlUmF0ZSh1aW50IGFtb3VudCkgcHVibGljIGNvbnN0YW50IHJldHVybnModWludCkgew0KCQlpZiAoYmxvY2subnVtYmVyIDw9IGZpcnN0RXhjaGFuZ2VSYXRlUGVyaW9kKSB7DQoJCQlyZXR1cm4gZmlyc3RUb2tlbkV4Y2hhbmdlUmF0ZSAqIGFtb3VudCAvIDEgZXRoZXI7DQoJCX0gZWxzZSBpZiAoYmxvY2subnVtYmVyIDw9IHNlY29uZEV4Y2hhbmdlUmF0ZVBlcmlvZCkgew0KCQkJcmV0dXJuIHNlY29uZFRva2VuRXhjaGFuZ2VSYXRlICogYW1vdW50IC8gMSBldGhlcjsNCgkJfSBlbHNlIGlmIChibG9jay5udW1iZXIgPD0gdGhpcmRFeGNoYW5nZVJhdGVQZXJpb2QpIHsNCgkJCXJldHVybiB0aGlyZFRva2VuRXhjaGFuZ2VSYXRlICogYW1vdW50IC8gMSBldGhlcjsNCgkJfSBlbHNlIGlmIChibG9jay5udW1iZXIgPD0gZm91cnRoRXhjaGFuZ2VSYXRlUGVyaW9kKSB7DQoJCQlyZXR1cm4gZm91cnRoVG9rZW5FeGNoYW5nZVJhdGUgKiBhbW91bnQgLyAxIGV0aGVyOw0KCQl9IGVsc2UgaWYgKGJsb2NrLm51bWJlciA8PSBlbmRCbG9ja051bWJlcikgew0KCQkJcmV0dXJuIGZpbmFsVG9rZW5FeGNoYW5nZVJhdGUgKiBhbW91bnQgLyAxIGV0aGVyOw0KCQl9DQoJCQ0KCQlyZXR1cm4gZmluYWxUb2tlbkV4Y2hhbmdlUmF0ZSAqIGFtb3VudCAvIDEgZXRoZXI7DQoJfQ0KDQoJZnVuY3Rpb24gaW52ZXN0bWVudCgpIHB1YmxpYyBpblN0YXRlKFN0YXRlLkZ1bmRyYWlzaW5nKSBpc1N0YXJ0ZWQgYWNjb3VudE5vdEZyb3plbiBtaW5JbnZlc3RtZW50IHBheWFibGUgcmV0dXJucyh1aW50KSAgew0KCQkNCgkJdWludCBhbW91bnQgPSBtc2cudmFsdWU7DQoJCWlmIChhbW91bnQgPT0gMCkgdGhyb3c7DQoJCQ0KCQliYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gYW1vdW50OwkNCgkJDQoJCXRvdGFsUmFpc2VkICs9IGFtb3VudDsNCgkJY3VycmVudEJhbGFuY2UgKz0gYW1vdW50Ow0KCQkJCQkJDQoJCXVpbnQgdG9rZW5BbW91bnQgPSBnZXRDdXJyZW50RXhjaGFuZ2VSYXRlKGFtb3VudCk7DQoJCWV4Y2hhbmdlVG9rZW4uZ2VuZXJhdGVUb2tlbnMobXNnLnNlbmRlciwgdG9rZW5BbW91bnQpOw0KCQl0b3RhbFRva2Vuc0lzc3VlZCArPSB0b2tlbkFtb3VudDsNCgkJaXNzdWVkVG9rZW5CYWxhbmNlICs9IHRva2VuQW1vdW50Ow0KCQkNCgkJRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgdHJ1ZSk7IA0KCQkNCgkJY2hlY2tJZkZ1bmRpbmdDb21wbGV0ZU9yRXhwaXJlZCgpOw0KCQkNCgkJcmV0dXJuIGJhbGFuY2VPZlttc2cuc2VuZGVyXTsNCgl9DQoNCglmdW5jdGlvbiBjaGVja0lmRnVuZGluZ0NvbXBsZXRlT3JFeHBpcmVkKCkgew0KCQlpZiAoYmxvY2subnVtYmVyID4gZW5kQmxvY2tOdW1iZXIgfHwgdG90YWxUb2tlbnNJc3N1ZWQgPj0gY2FwVG9rZW5BbW91bnQgKSB7DQoJCQkvLyBIYXJkIGxpbWl0IHJlYWNoZWQNCgkJCWlmIChjdXJyZW50QmFsYW5jZSA+IGZ1bmRpbmdHb2FsIHx8IGZ1bmRpbmdHb2FsUmVhY2hlZCA9PSB0cnVlKSB7DQoJCQkJc3RhdGUgPSBTdGF0ZS5TdWNjZXNzZnVsOw0KCQkJCXBheU91dCgpOw0KCQkJCQ0KCQkJCUhhcmRDYXBSZWFjaGVkKGZ1bmRSZWNpcGllbnQsIHRvdGFsUmFpc2VkKTsNCgkJCQkNCgkJCQkvLyBDb250cmFjdCBjYW4gYmUgaW1tZWRpYXRlbHkgY2xvc2VkIG91dA0KCQkJCXJlbW92ZUNvbnRyYWN0KCk7DQoNCgkJCX0gZWxzZSAgew0KCQkJCXN0YXRlID0gU3RhdGUuRXhwaXJlZFJlZnVuZDsgLy8gYmFja2VycyBjYW4gbm93IGNvbGxlY3QgcmVmdW5kcyBieSBjYWxsaW5nIGdldFJlZnVuZCgpDQoJCQkJDQoJCQkJUmVmdW5kUGVyaW9kU3RhcnRlZCgpOw0KCQkJfQ0KCQl9IGVsc2UgaWYgKGN1cnJlbnRCYWxhbmNlID4gZnVuZGluZ0dvYWwgJiYgZnVuZGluZ0dvYWxSZWFjaGVkID09IGZhbHNlKSB7DQoJCQkvLyBPbmNlIGdvYWwgcmVhY2hlZA0KCQkJZnVuZGluZ0dvYWxSZWFjaGVkID0gdHJ1ZTsNCgkJCQ0KCQkJc3RhdGUgPSBTdGF0ZS5TdWNjZXNzZnVsOw0KCQkJcGF5T3V0KCk7DQoJCQkNCgkJCS8vIENvbnRpbnVlIGFsbG93aW5nIHVzZXJzIHRvIGJ1eSBpbg0KCQkJc3RhdGUgPSBTdGF0ZS5GdW5kcmFpc2luZzsNCgkJCQ0KCQkJLy8gY3VycmVudEJhbGFuY2UgaXMgemVybyBhZnRlciBwYXkgb3V0DQoJCQlHb2FsUmVhY2hlZChmdW5kUmVjaXBpZW50LCB0b3RhbFJhaXNlZCk7DQoJCX0NCgl9DQoNCglmdW5jdGlvbiBwYXlPdXQoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5TdWNjZXNzZnVsKSB7DQoJCS8vIEV0aGVyZXVtIGJhbGFuY2UNCgkJdmFyIGFtb3VudCA9IGN1cnJlbnRCYWxhbmNlOw0KCQljdXJyZW50QmFsYW5jZSA9IDA7DQoNCgkJZnVuZFJlY2lwaWVudC50cmFuc2ZlcihhbW91bnQpOw0KCQkNCgkJLy8gVXBkYXRlIHRoZSB0b2tlbiByZXNlcnZlIGFtb3VudCBzbyB0aGF0IDUwJSBvZiB0b2tlbnMgcmVtYWluIGluIHJlc2VydmUNCgkJdmFyIHRva2VuQ291bnQgPSBpc3N1ZWRUb2tlbkJhbGFuY2U7DQoJCWlzc3VlZFRva2VuQmFsYW5jZSA9IDA7DQoJCQ0KCQlleGNoYW5nZVRva2VuLmdlbmVyYXRlVG9rZW5zKGZ1bmRSZWNpcGllbnQsIHRva2VuQ291bnQpOwkJDQoJfQ0KDQoJZnVuY3Rpb24gZ2V0UmVmdW5kKCkgcHVibGljIGluU3RhdGUoU3RhdGUuRXhwaXJlZFJlZnVuZCkgewkNCgkJdWludCBhbW91bnRUb1JlZnVuZCA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXTsNCgkJYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gMDsNCgkJDQoJCS8vIHRocm93cyBlcnJvciBpZiBmYWlscw0KCQltc2cuc2VuZGVyLnRyYW5zZmVyKGFtb3VudFRvUmVmdW5kKTsNCgkJY3VycmVudEJhbGFuY2UgLT0gYW1vdW50VG9SZWZ1bmQ7DQoJCQ0KCQlGdW5kVHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50VG9SZWZ1bmQsIGZhbHNlKTsNCgl9DQoJDQoJZnVuY3Rpb24gcmVtb3ZlQ29udHJhY3QoKSBwdWJsaWMgYXRFbmRPZkxpZmVjeWNsZSB7CQkNCgkJc3RhdGUgPSBTdGF0ZS5DbG9zZWQ7DQoJCQ0KCQkvLyBBbGxvdyBjbGl0IG93bmVycyB0byBmcmVlbHkgdHJhZGUgY29pbnMgb24gdGhlIG9wZW4gbWFya2V0DQoJCWV4Y2hhbmdlVG9rZW4uZW5hYmxlVHJhbnNmZXJzKHRydWUpOw0KCQkNCgkJLy8gUmVzdG9yZSBvd25lcnNoaXAgdG8gY29udHJvbGxlcg0KCQlleGNoYW5nZVRva2VuLmNoYW5nZUNvbnRyb2xsZXIoY29udHJvbGxlcik7DQoNCgkJc2VsZmRlc3RydWN0KG1zZy5zZW5kZXIpOw0KCX0NCgkNCgkvKiBUaGUgZnVuY3Rpb24gd2l0aG91dCBuYW1lIGlzIHRoZSBkZWZhdWx0IGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW5ldmVyIGFueW9uZSBzZW5kcyBmdW5kcyB0byBhIGNvbnRyYWN0ICovDQoJZnVuY3Rpb24gKCkgcGF5YWJsZSB7IA0KCQlpbnZlc3RtZW50KCk7IA0KCX0JDQoNCn0='