base 64 content
base64controller3
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMDsNCg0KLy9jb3B5cmlnaHQgMjAxNyBOZXdBbGNoZW15DQovL1dyaXR0ZW4gYnkgRGVubmlzIFBldGVyc29uDQoNCmNvbnRyYWN0IEFic3RyYWN0U3dlZXBlciB7DQogICAgLy9hYnN0cmFjdDoNCiAgICBmdW5jdGlvbiBzd2VlcChhZGRyZXNzIHRva2VuLCB1aW50IGFtb3VudCkgcmV0dXJucyAoYm9vbCk7DQoNCiAgICAvL2NvbmNyZXRlOg0KICAgIGZ1bmN0aW9uICgpIHsgdGhyb3c7IH0NCg0KICAgIENvbnRyb2xsZXIgY29udHJvbGxlcjsNCg0KICAgIGZ1bmN0aW9uIEFic3RyYWN0U3dlZXBlcihhZGRyZXNzIF9jb250cm9sbGVyKSB7DQogICAgICAgIGNvbnRyb2xsZXIgPSBDb250cm9sbGVyKF9jb250cm9sbGVyKTsNCiAgICB9DQoNCiAgICBtb2RpZmllciBjYW5Td2VlcCgpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gY29udHJvbGxlci5hdXRob3JpemVkQ2FsbGVyKCkgJiYgbXNnLnNlbmRlciAhPSBjb250cm9sbGVyLm93bmVyKCkpIHRocm93Ow0KICAgICAgICBpZiAoY29udHJvbGxlci5oYWx0ZWQoKSkgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KfQ0KDQpjb250cmFjdCBUb2tlbiB7DQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgYSkgcmV0dXJucyAodWludCkge3JldHVybiAwO30NCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIGEsIHVpbnQgdmFsKSByZXR1cm5zIChib29sKSB7cmV0dXJuIGZhbHNlO30NCn0NCg0KY29udHJhY3QgRGVmYXVsdFN3ZWVwZXIgaXMgQWJzdHJhY3RTd2VlcGVyIHsNCiAgICBmdW5jdGlvbiBEZWZhdWx0U3dlZXBlcihhZGRyZXNzIGNvbnRyb2xsZXIpIA0KICAgICAgICAgICAgIEFic3RyYWN0U3dlZXBlcihjb250cm9sbGVyKSB7fQ0KDQogICAgZnVuY3Rpb24gc3dlZXAoYWRkcmVzcyBfdG9rZW4sIHVpbnQgX2Ftb3VudCkgIA0KICAgIGNhblN3ZWVwDQogICAgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICBUb2tlbiB0b2tlbiA9IFRva2VuKF90b2tlbik7DQogICAgICAgIHVpbnQgYW1vdW50ID0gX2Ftb3VudDsNCiAgICAgICAgaWYgKGFtb3VudCA+IHRva2VuLmJhbGFuY2VPZih0aGlzKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgYWRkcmVzcyBkZXN0aW5hdGlvbiA9IGNvbnRyb2xsZXIuZGVzdGluYXRpb24oKTsNCg0KCS8vIEJlY2F1c2Ugc3dlZXAgaXMgY2FsbGVkIHdpdGggZGVsZWdhdGVjYWxsLCB0aGlzIHR5cGljYWxseQ0KCS8vIGNvbWVzIGZyb20gdGhlIFVzZXJXYWxsZXQuDQogICAgICAgIGJvb2wgc3VjY2VzcyA9IHRva2VuLnRyYW5zZmVyKGRlc3RpbmF0aW9uLCBhbW91bnQpOyANCiAgICAgICAgaWYgKHN1Y2Nlc3MpIHsgDQogICAgICAgICAgICBjb250cm9sbGVyLmxvZ1N3ZWVwKHRoaXMsIF90b2tlbiwgX2Ftb3VudCk7DQogICAgICAgIH0gDQogICAgICAgIHJldHVybiBzdWNjZXNzOw0KICAgIH0NCn0NCg0KY29udHJhY3QgVXNlcldhbGxldCB7DQogICAgQWJzdHJhY3RTd2VlcGVyTGlzdCBjOw0KICAgIGZ1bmN0aW9uIFVzZXJXYWxsZXQoYWRkcmVzcyBfc3dlZXBlcmxpc3QpIHsNCiAgICAgICAgYyA9IEFic3RyYWN0U3dlZXBlckxpc3QoX3N3ZWVwZXJsaXN0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzd2VlcChhZGRyZXNzIF90b2tlbiwgdWludCBfYW1vdW50KSANCiAgICByZXR1cm5zIChib29sKSB7DQogICAgICAgIHJldHVybiBjLnN3ZWVwZXJPZihfdG9rZW4pLmRlbGVnYXRlY2FsbChtc2cuZGF0YSk7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBBYnN0cmFjdFN3ZWVwZXJMaXN0IHsNCiAgICBmdW5jdGlvbiBzd2VlcGVyT2YoYWRkcmVzcyBfdG9rZW4pIHJldHVybnMgKGFkZHJlc3MpOw0KfQ0KDQpjb250cmFjdCBDb250cm9sbGVyIGlzIEFic3RyYWN0U3dlZXBlckxpc3Qgew0KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOw0KICAgIGFkZHJlc3MgcHVibGljIGF1dGhvcml6ZWRDYWxsZXI7DQoNCiAgICAvL2Rlc3RpbmF0aW9uIGRlZmF1bHRzIHRvIHNhbWUgYXMgb3duZXINCiAgICAvL2J1dCBpcyBzZXBhcmF0ZSB0byBhbGxvdyBuZXZlciBleHBvc2luZyBjb2xkIHN0b3JhZ2UNCiAgICBhZGRyZXNzIHB1YmxpYyBkZXN0aW5hdGlvbjsgDQoNCiAgICBib29sIHB1YmxpYyBoYWx0ZWQ7DQoNCiAgICBldmVudCBMb2dOZXdXYWxsZXQoYWRkcmVzcyByZWNlaXZlcik7DQogICAgZXZlbnQgTG9nU3dlZXAoYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRva2VuLCB1aW50IGFtb3VudCk7DQogICAgDQogICAgbW9kaWZpZXIgb25seU93bmVyKCkgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7IA0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlBdXRob3JpemVkQ2FsbGVyKCkgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBhdXRob3JpemVkQ2FsbGVyKSB0aHJvdzsgDQogICAgICAgIF87DQogICAgfQ0KDQogICAgbW9kaWZpZXIgb25seUFkbWlucygpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gYXV0aG9yaXplZENhbGxlciAmJiBtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsgDQogICAgICAgIF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gQ29udHJvbGxlcigpIA0KICAgIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgICAgICBkZXN0aW5hdGlvbiA9IG1zZy5zZW5kZXI7DQogICAgICAgIGF1dGhvcml6ZWRDYWxsZXIgPSBtc2cuc2VuZGVyOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoYW5nZUF1dGhvcml6ZWRDYWxsZXIoYWRkcmVzcyBfbmV3Q2FsbGVyKSBvbmx5T3duZXIgew0KICAgICAgICBhdXRob3JpemVkQ2FsbGVyID0gX25ld0NhbGxlcjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjaGFuZ2VEZXN0aW5hdGlvbihhZGRyZXNzIF9kZXN0KSBvbmx5T3duZXIgew0KICAgICAgICBkZXN0aW5hdGlvbiA9IF9kZXN0Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoYW5nZU93bmVyKGFkZHJlc3MgX293bmVyKSBvbmx5T3duZXIgew0KICAgICAgICBvd25lciA9IF9vd25lcjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtYWtlV2FsbGV0KCkgb25seUFkbWlucyByZXR1cm5zIChhZGRyZXNzIHdhbGxldCkgIHsNCiAgICAgICAgd2FsbGV0ID0gYWRkcmVzcyhuZXcgVXNlcldhbGxldCh0aGlzKSk7DQogICAgICAgIExvZ05ld1dhbGxldCh3YWxsZXQpOw0KICAgIH0NCg0KICAgIC8vYXNzdW1pbmcgaGFsdCBiZWNhdXNlIGNhbGxlciBpcyBjb21wcm9taXNlZA0KICAgIC8vc28gbGV0IGNhbGxlciBzdG9wIGZvciBzcGVlZCwgb25seSBvd25lciBjYW4gcmVzdGFydA0KDQogICAgZnVuY3Rpb24gaGFsdCgpIG9ubHlBZG1pbnMgew0KICAgICAgICBoYWx0ZWQgPSB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHN0YXJ0KCkgb25seU93bmVyIHsNCiAgICAgICAgaGFsdGVkID0gZmFsc2U7DQogICAgfQ0KDQogICAgLy8qKioqKioqKioqKg0KICAgIC8vU3dlZXBlckxpc3QNCiAgICAvLyoqKioqKioqKioqDQogICAgYWRkcmVzcyBwdWJsaWMgZGVmYXVsdFN3ZWVwZXIgPSBhZGRyZXNzKG5ldyBEZWZhdWx0U3dlZXBlcih0aGlzKSk7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBhZGRyZXNzKSBzd2VlcGVyczsNCg0KICAgIGZ1bmN0aW9uIGFkZFN3ZWVwZXIoYWRkcmVzcyBfdG9rZW4sIGFkZHJlc3MgX3N3ZWVwZXIpIG9ubHlPd25lciB7DQogICAgICAgIHN3ZWVwZXJzW190b2tlbl0gPSBfc3dlZXBlcjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzd2VlcGVyT2YoYWRkcmVzcyBfdG9rZW4pIHJldHVybnMgKGFkZHJlc3MpIHsNCiAgICAgICAgYWRkcmVzcyBzd2VlcGVyID0gc3dlZXBlcnNbX3Rva2VuXTsNCiAgICAgICAgaWYgKHN3ZWVwZXIgPT0gMCkgc3dlZXBlciA9IGRlZmF1bHRTd2VlcGVyOw0KICAgICAgICByZXR1cm4gc3dlZXBlcjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2dTd2VlcChhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG9rZW4sIHVpbnQgYW1vdW50KSB7DQogICAgICAgIExvZ1N3ZWVwKGZyb20sIHRva2VuLCBhbW91bnQpOw0KICAgIH0NCn0='