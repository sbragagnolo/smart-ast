base 64 content
base64crowdsale1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KbGlicmFyeSBTYWZlTWF0aCB7DQogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgcmV0dXJucyAodWludDI1Nikgew0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOw0KICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDANCiAgICB1aW50MjU2IGMgPSBhIC8gYjsNCiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZA0KICAgIHJldHVybiBjOw0KICB9DQoNCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQoNCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgdWludDI1NiBjID0gYSArIGI7DQogICAgYXNzZXJ0KGMgPj0gYSk7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgew0KICAgIHJldHVybiBhID49IGIgPyBhIDogYjsNCiAgfQ0KDQogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7DQogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7DQogIH0NCg0KICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7DQogIH0NCg0KICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsNCiAgfQ0KDQp9DQoNCi8vIEludGVyZmFjdGluZyBEZXBsb3llZCBOZXJ0aWEgVG9rZW4gDQpjb250cmFjdCBLYWlyb3NUb2tlbnsNCiAgZnVuY3Rpb24gZ2V0RXhjaGFuZ2VSYXRlKCkgcmV0dXJucyAodWludDI1NiBleGNoYW5nZVJhdGUpOw0KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7DQogIGZ1bmN0aW9uIGdldE93bmVyKCkgcmV0dXJucyAoYWRkcmVzcyBvd25lcik7DQogIGZ1bmN0aW9uIGdldERlY2ltYWxzKCkgcmV0dXJucyAodWludDI1NiBkZWNpbWFscyk7DQogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQp9DQoNCg0KLyoqDQogKiBJQ08gY29udHJhY3QgZm9yIHRoZSBOZXJ0aWEgVG9rZW4NCiAqLw0KY29udHJhY3QgQ3Jvd2RzYWxlIHsNCg0KICB1c2luZyBTYWZlTWF0aCBmb3IgdWludDI1NjsNCg0KICBhZGRyZXNzIHB1YmxpYyBldGhPd25lcjsNCiAgYWRkcmVzcyBwdWJsaWMga2Fpcm9zT3duZXI7DQoNCiAgS2Fpcm9zVG9rZW4gcHVibGljIHRva2VuOw0KDQogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBldGhlckJsYW5jZTsNCg0KICB1aW50MjU2IHB1YmxpYyBkZWNpbWFsczsNCiAgdWludDI1NiBwdWJsaWMgaWNvTWluQ2FwOw0KICAgIA0KICBib29sIHB1YmxpYyBpc0ZpbmFsaXplZDsNCiAgdWludDI1NiBwdWJsaWMgaWNvU3RhcnRCbG9jazsNCiAgdWludDI1NiBwdWJsaWMgaWNvRW5kQmxvY2s7DQogIHVpbnQyNTYgcHVibGljIGljb1N0YXJ0VGltZTsNCiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQogIHVpbnQyNTYgcHVibGljIGV4Y2hhbmdlUmF0ZTsNCg0KICBldmVudCBSZWZ1bmQoYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICBldmVudCBSZWZ1bmRFcnJvcihhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQogICAgDQogIGZ1bmN0aW9uIENyb3dkc2FsZSgpIHsNCiAgICB0b2tlbiAgICAgICAgICA9IEthaXJvc1Rva2VuKDB4YTZDOWU0RDRCMzRENDMyZDRhZWE3OTNGYThDMzgwYjk5NDBhNTI3OSk7DQogICAgZGVjaW1hbHMgICAgICAgPSB0b2tlbi5nZXREZWNpbWFscygpOw0KICAgIGV4Y2hhbmdlUmF0ZSAgID0gMjA7DQogICAgaXNGaW5hbGl6ZWQgICAgPSBmYWxzZTsNCiAgICBpY29TdGFydFRpbWUgICA9IG5vdzsNCiAgICBpY29TdGFydEJsb2NrICA9IGJsb2NrLm51bWJlci5hZGQoMTUyNDcpOw0KICAgIGljb0VuZEJsb2NrICAgID0gaWNvU3RhcnRCbG9jay5hZGQoMTUyNDcwKTsNCiAgICBldGhPd25lciAgICAgICA9IDB4MGZlNzc3RkE0NDRGYWUxMjgxNjk3NTQ4NzdkNTFiNjY1ZUU1NTdFZTsNCiAgICBrYWlyb3NPd25lciAgICA9IDB4YTZDOWU0RDRCMzRENDMyZDRhZWE3OTNGYThDMzgwYjk5NDBhNTI3OTsNCiAgICBpY29NaW5DYXAgICAgICA9IDE1ICogKDEwKio2KSAqIDEwKipkZWNpbWFsczsNCiAgfQ0KDQoNCiAgLy8vIEBkZXYgRW5kcyB0aGUgZnVuZGluZyBwZXJpb2QgYW5kIHNlbmRzIHRoZSBFVEggaG9tZQ0KICBmdW5jdGlvbiBmaW5hbGl6ZSgpIGV4dGVybmFsIHsNCiAgICBpZihpc0ZpbmFsaXplZCkgdGhyb3c7DQogICAgaWYobXNnLnNlbmRlciAhPSBldGhPd25lcikgdGhyb3c7IC8vIGxvY2tzIGZpbmFsaXplIHRvIHRoZSB1bHRpbWF0ZSBFVEggb3duZXINCiAgICAvL2lmKHRvdGFsU3VwcGx5IDwgaWNvTWluQ2FwKSB0aHJvdzsgICAgICAvLyBoYXZlIHRvIHNlbGwgbWluaW11bSB0byBtb3ZlIHRvIG9wZXJhdGlvbmFsDQogICAgaWYoYmxvY2subnVtYmVyIDw9IGljb0VuZEJsb2NrKSB0aHJvdzsNCiAgICANCiAgICAvLyBtb3ZlIHRvIG9wZXJhdGlvbmFsDQogICAgaXNGaW5hbGl6ZWQgPSB0cnVlOw0KICAgIGlmKCFldGhPd25lci5zZW5kKHRoaXMuYmFsYW5jZSkpIHRocm93OyAgLy8gc2VuZCB0aGUgZXRoIHRvIE5lcnRpYSBPd25lcg0KICB9DQoNCg0KICBmdW5jdGlvbiByZWZ1bmQoKXsNCiAgICBpZihpc0ZpbmFsaXplZCkgdGhyb3c7DQogICAgaWYoYmxvY2subnVtYmVyIDw9IGljb0VuZEJsb2NrKSB0aHJvdzsNCiAgICBpZihtc2cuc2VuZGVyID09IHRva2VuLmdldE93bmVyKCkgKSB0aHJvdzsNCg0KICAgIHVpbnQyNTYgdXNlckJhbGFuY2UgPSB0b2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcik7DQogICAgaWYodXNlckJhbGFuY2UgPT0gMCkgdGhyb3c7DQoNCiAgICB1aW50MjU2IHVzZXJFdGhlcnMgPSBldGhlckJsYW5jZVttc2cuc2VuZGVyXTsNCiAgICBpZih1c2VyRXRoZXJzID09IDApIHRocm93OyAgICANCiAgICANCiAgICBldGhlckJsYW5jZVttc2cuc2VuZGVyXSA9IDA7DQogICAgDQogICAgaWYoIXRva2VuLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLGthaXJvc093bmVyLCB1c2VyQmFsYW5jZSkpIHRocm93Ow0KDQogICAgaWYobXNnLnNlbmRlci5zZW5kKHVzZXJFdGhlcnMpKXsNCiAgICAgIFJlZnVuZChtc2cuc2VuZGVyLCB1c2VyRXRoZXJzKTsNCiAgICB9ZWxzZXsNCiAgICAgIGV0aGVyQmxhbmNlW21zZy5zZW5kZXJdID0gdXNlckV0aGVyczsNCiAgICAgIFJlZnVuZEVycm9yKG1zZy5zZW5kZXIsIHVzZXJFdGhlcnMpOw0KICAgICAgdGhyb3c7DQogICAgfQ0KICB9DQoNCg0KICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsNCiAgICBpZihpc0ZpbmFsaXplZCAmJiBtc2cudmFsdWUgPD0gMCkgdGhyb3c7DQoNCiAgICBpZihibG9jay5udW1iZXIgPCBpY29TdGFydEJsb2NrKSB0aHJvdzsNCiAgICBpZihibG9jay5udW1iZXIgPiBpY29FbmRCbG9jaykgdGhyb3c7DQoNCiAgICAvLyBzdG9yaW5nIHVzZXIgZXRoZXJzOw0KICAgIGV0aGVyQmxhbmNlW21zZy5zZW5kZXJdICs9IG1zZy52YWx1ZTsNCg0KICAgIC8vIGNhbGN1bGF0aW5nIGJvbnVzDQogICAgdWludDI1NiB2YWwgPSBtc2cudmFsdWU7DQogICAgdWludDI1NiBib251cyAgPSAgY2FsY0JvbnVzKHZhbCk7DQogICAgdWludDI1NiBsZXZlbDJib251cyA9IGNhbGNMZXZlbDJCb251cyh2YWwpOw0KICAgIHVpbnQyNTYgdG9rZW5zID0gbXNnLnZhbHVlLmFkZChsZXZlbDJib251cykuYWRkKGJvbnVzKS5tdWwoZXhjaGFuZ2VSYXRlKTsgICAgDQogICAgdWludDI1NiBjaGVja2VkU3VwcGx5ID0gdG90YWxTdXBwbHkuYWRkKHRva2Vucyk7DQogICAgdG90YWxTdXBwbHkgPSBjaGVja2VkU3VwcGx5Ow0KICAgIGJvb2wgdHJhbnNmZXIgPSB0b2tlbi50cmFuc2ZlckZyb20oIHRva2VuLmdldE93bmVyKCksbXNnLnNlbmRlciwgdG9rZW5zKTsNCiAgICBpZighdHJhbnNmZXIpew0KICAgICAgICB0b3RhbFN1cHBseSA9IHRvdGFsU3VwcGx5LnN1Yih0b2tlbnMpOw0KICAgICAgICB0aHJvdzsNCiAgICB9DQogIH0NCiAgDQogIC8vIENhbGN1bGF0aW5nIGJvdW51cyB0b2tlbnMNCiAgZnVuY3Rpb24gY2FsY0JvbnVzKHVpbnQyNTYgX3ZhbCkgcHJpdmF0ZSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KXsNCiAgICByZXR1cm4gX3ZhbC5kaXYoMTAwKS5tdWwoZ2V0UGVyY2VudGFnZSgpKTsgICAgICAgICAgICANCiAgfSAgDQoNCiAgLy8gQ2FsY3VsYXRpbmcgYm9udXMgcGVyY2VudGFnZSANCiAgZnVuY3Rpb24gZ2V0UGVyY2VudGFnZSgpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyAodWludCl7DQogICAgdWludCBkdXJhdGlvbiA9IG5vdy5zdWIoaWNvU3RhcnRUaW1lKTsNCiAgICBpZihkdXJhdGlvbiA+IDIxIGRheXMpew0KICAgICAgcmV0dXJuIDA7DQogICAgfSBlbHNlIGlmKGR1cmF0aW9uIDw9IDIxIGRheXMgJiYgZHVyYXRpb24gPiAxNCBkYXlzKXsNCiAgICAgIHJldHVybiAxOw0KICAgIH0gZWxzZSBpZihkdXJhdGlvbiA8PSAxNCBkYXlzICYmIGR1cmF0aW9uID4gNyBkYXlzKXsNCiAgICAgIHJldHVybiAzOw0KICAgIH0gZWxzZSB7DQogICAgICByZXR1cm4gNTsNCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBjYWxjTGV2ZWwyQm9udXModWludDI1NiBfdmFsKSBwcml2YXRlIGNvbnN0YW50IHJldHVybnModWludDI1Nikgew0KICAgIHJldHVybiBfdmFsLmRpdigxMDApLm11bChsZXZlbDJCb251cyhfdmFsKSk7DQogIH0NCg0KICAvLyBjYWxjdWxhdGluZyAybmQgbGV2ZWwgYm9udXMNCiAgZnVuY3Rpb24gbGV2ZWwyQm9udXModWludDI1NiB0b2tlbnMpIHByaXZhdGUgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2KSB7DQogICAgICBpZih0b2tlbnMgPiAxMDAwMDAwKXsNCiAgICAgICAgcmV0dXJuIDU7ICAgDQogICAgICB9ZWxzZSBpZih0b2tlbnMgPD0gOTk5OTk5ICYmIHRva2VucyA+PSAxMDAwMDApew0KICAgICAgICByZXR1cm4gMzsNCiAgICAgIH1lbHNlIGlmKHRva2VucyA8PSA5OTk5OSAmJiB0b2tlbnMgPj0gNTAwMDAgKXsNCiAgICAgICAgcmV0dXJuIDI7DQogICAgICB9ZWxzZSBpZiggdG9rZW5zIDw9IDQ5OTk5ICYmIHRva2VucyA+PSAxMDAwMCl7DQogICAgICAgIHJldHVybiAxOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIDA7DQogIH0NCg0KDQp9'