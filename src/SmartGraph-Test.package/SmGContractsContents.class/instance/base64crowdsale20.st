base 64 content
base64crowdsale20
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC42Ow0KDQpjb250cmFjdCB0b2tlbiB7DQoJZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3Mgc2VuZGVyLCBhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCkgcmV0dXJucyhib29sIHN1Y2Nlc3Mpe30NCglmdW5jdGlvbiBidXJuKCkge30NCn0NCg0KLyoqDQoqCUNyb3dkc2FsZSBmb3IgRWRnZWxlc3MgVG9rZW5zLg0KKglBdXRob3I6IEp1bGlhIEFsdGVucmllZA0KKiovDQpjb250cmFjdCBDcm93ZHNhbGUgew0KICAgIC8qIGlmIHN1Y2Nlc3NmdWwsIHRoZSBmdW5kcyB3aWxsIGJlIHJldHJpZXZhYmxlIGJ5IHRoaXMgYWRkcmVzcyAqLw0KCWFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5ID0gMHgwMDMyMzBiYmU2NGVjY2Q2NmY2MjkxMzY3OWM4OTY2Y2Y5ZjQxMTY2Ow0KCS8qIGlmIHRoZSBmdW5kaW5nIGdvYWwgaXMgbm90IHJlYWNoZWQsIGludmVzdG9ycyBtYXkgd2l0aGRyYXcgdGhlaXIgZnVuZHMgKi8NCgl1aW50IHB1YmxpYyBmdW5kaW5nR29hbCA9IDUwMDAwMDAwOw0KCS8qIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc29sZCAqLw0KCXVpbnQgcHVibGljIG1heEdvYWwgPSA0NDAwMDAwMDA7DQoJLyogaG93IG11Y2ggaGFzIGJlZW4gcmFpc2VkIGJ5IGNyb3dkYWxlIChpbiBFVEgpICovDQoJdWludCBwdWJsaWMgYW1vdW50UmFpc2VkOw0KCS8qIHRoZSBzdGFydCBkYXRlIG9mIHRoZSBjcm93ZHNhbGUgKi8NCgl1aW50IHB1YmxpYyBzdGFydCA9IDE0ODgyOTQwMDA7DQoJLyogdGhlIG51bWJlciBvZiB0b2tlbnMgYWxyZWFkeSBzb2xkICovDQoJdWludCBwdWJsaWMgdG9rZW5zU29sZDsNCgkvKiB0aGVyZSBhcmUgZGlmZmVyZW50IHByaWNlcyBpbiBkaWZmZXJlbnQgdGltZSBpbnRlcnZhbHMgKi8NCgl1aW50WzRdIHB1YmxpYyBkZWFkbGluZXMgPSBbMTQ4ODI5NzYwMCwgMTQ4ODkwMjQwMCwgMTQ4OTUwNzIwMCwxNDkwMTEyMDAwXTsNCgl1aW50WzRdIHB1YmxpYyBwcmljZXMgPSBbODMzMzMzMzMzMzMzMzMzLCA5MDkwOTA5MDkwOTA5MDksOTUyMzgwOTUyMzgwOTUyLCAxMDAwMDAwMDAwMDAwMDAwXTsNCgkvKiB0aGUgYWRkcmVzcyBvZiB0aGUgdG9rZW4gY29udHJhY3QgKi8NCgl0b2tlbiBwdWJsaWMgdG9rZW5SZXdhcmQ7DQoJLyogdGhlIGJhbGFuY2VzIChpbiBFVEgpIG9mIGFsbCBpbnZlc3RvcnMgKi8NCgltYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsNCglib29sIGZ1bmRpbmdHb2FsUmVhY2hlZCA9IGZhbHNlOw0KCWJvb2wgY3Jvd2RzYWxlQ2xvc2VkID0gZmFsc2U7DQoJLyogbm90aWZ5aW5nIHRyYW5zZmVycyBhbmQgdGhlIHN1Y2Nlc3Mgb2YgdGhlIGNyb3dkc2FsZSovDQoJZXZlbnQgR29hbFJlYWNoZWQoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludCBhbW91bnRSYWlzZWQpOw0KCWV2ZW50IEZ1bmRUcmFuc2ZlcihhZGRyZXNzIGJhY2tlciwgdWludCBhbW91bnQsIGJvb2wgaXNDb250cmlidXRpb24pOw0KDQoNCg0KICAgIC8qICBpbml0aWFsaXphdGlvbiwgc2V0IHRoZSB0b2tlbiBhZGRyZXNzICovDQogICAgZnVuY3Rpb24gQ3Jvd2RzYWxlKCApIHsNCiAgICAgICAgdG9rZW5SZXdhcmQgPSB0b2tlbigweGJlODdlODc5NjViOTZkODE3NGVhZTRlMzcyNGE2ZDc0MTdjNDg4YjApOw0KICAgIH0NCg0KICAgIC8qIHdoZW5ldmVyIGFueW9uZSBzZW5kcyBmdW5kcyB0byBhIGNvbnRyYWN0LCB0aGUgY29ycmVzcG9uZGluZyBhbW91bnQgb2YgdG9rZW5zIGlzIHRyYW5zZmVyZWQgdG8gdGhlIHNlbmRlcg0KICAgIAlpZiB0aGUgY3Jvd2RzYWxlIHN0YXJ0ZWQgYW5kIGhhc24ndCBiZWVuIGNsb3NlZCBhbHJlYWR5IGFuZCB0aGUgbWF4R29hbCB3YXNuJ3QgcmVhY2hlZCB5ZXQuKi8NCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlew0KICAgICAgICBpbnZlc3QobXNnLnNlbmRlcik7DQogICAgfQ0KDQogICAgLyogaWYgdGhlIGNyb3dkc2FsZSBzdGFydGVkIGFuZCBoYXNuJ3QgYmVlbiBjbG9zZWQgYWxyZWFkeSBhbmQgdGhlIG1heEdvYWwgd2Fzbid0IHJlYWNoZWQgeWV0IHRva2VucyBhcmUgdHJhbnNmZXJlZCB0byB0aGUgcmVjZWl2ZXIuDQogICAgdG8gYmUgY2FsbGVkIGluIGNhc2UgdGhlIG1zZy5zZW5kZXIgaXMgbm90IHRoZSBvbmUgdG8gcmVjZWl2ZSB0aGUgdG9rZW5zLiovDQogICAgZnVuY3Rpb24gaW52ZXN0KGFkZHJlc3MgcmVjZWl2ZXIpIHBheWFibGV7DQogICAgCXVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOw0KCXVpbnQgbnVtVG9rZW5zID0gYW1vdW50IC8gZ2V0UHJpY2UoKTsNCglpZiAoY3Jvd2RzYWxlQ2xvc2VkfHxub3c8c3RhcnR8fHRva2Vuc1NvbGQrbnVtVG9rZW5zPm1heEdvYWwpIHRocm93Ow0KCWJhbGFuY2VPZltyZWNlaXZlcl0gKz0gYW1vdW50Ow0KCWFtb3VudFJhaXNlZCArPSBhbW91bnQ7DQoJdG9rZW5zU29sZCs9bnVtVG9rZW5zOw0KCWlmKCF0b2tlblJld2FyZC50cmFuc2ZlckZyb20oYmVuZWZpY2lhcnksIHJlY2VpdmVyLCBudW1Ub2tlbnMpKSB0aHJvdzsNCiAgICAgICAgRnVuZFRyYW5zZmVyKHJlY2VpdmVyLCBhbW91bnQsIHRydWUpOw0KICAgIH0NCg0KICAgIC8qIGxvb2tzIHVwIHRoZSBjdXJyZW50IHRva2VuIHByaWNlICovDQogICAgZnVuY3Rpb24gZ2V0UHJpY2UoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHByaWNlKXsNCiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGRlYWRsaW5lcy5sZW5ndGg7IGkrKykNCiAgICAgICAgICAgIGlmKG5vdzxkZWFkbGluZXNbaV0pDQogICAgICAgICAgICAgICAgcmV0dXJuIHByaWNlc1tpXTsNCiAgICAgICAgcmV0dXJuIHByaWNlc1twcmljZXMubGVuZ3RoLTFdOy8vc2hvdWxkIG5ldmVyIGJlIHJldHVybmVkLCBidXQgdG8gYmUgc3VyZSB0byBub3QgZGl2aWRlIGJ5IDANCiAgICB9DQoNCiAgICBtb2RpZmllciBhZnRlckRlYWRsaW5lKCkgeyBpZiAobm93ID49IGRlYWRsaW5lc1tkZWFkbGluZXMubGVuZ3RoLTFdKSBfOyB9DQoNCiAgICAvKiBjaGVja3MgaWYgdGhlIGdvYWwgb3IgdGltZSBsaW1pdCBoYXMgYmVlbiByZWFjaGVkIGFuZCBlbmRzIHRoZSBjYW1wYWlnbiAqLw0KICAgIGZ1bmN0aW9uIGNoZWNrR29hbFJlYWNoZWQoKSBhZnRlckRlYWRsaW5lIHsNCiAgICAgICAgaWYgKHRva2Vuc1NvbGQgPj0gZnVuZGluZ0dvYWwpew0KICAgICAgICAgICAgZnVuZGluZ0dvYWxSZWFjaGVkID0gdHJ1ZTsNCiAgICAgICAgICAgIEdvYWxSZWFjaGVkKGJlbmVmaWNpYXJ5LCBhbW91bnRSYWlzZWQpOw0KICAgICAgICB9DQogICAgICAgIGNyb3dkc2FsZUNsb3NlZCA9IHRydWU7DQogICAgfQ0KDQogICAgLyogYWxsb3dzIHRoZSBiZW5lZmljaWFyeSBhbmQvb3IgdGhlIGZ1bmRlcnMgdG8gd2l0aGRyYXcgdGhlaXIgZnVuZHMgKi8NCiAgICBmdW5jdGlvbiBzYWZlV2l0aGRyYXdhbCgpIGFmdGVyRGVhZGxpbmUgew0KICAgICAgICAvLyBpZiB0aGUgZ29hbCBoYXNuJ3QgYmVlbiByZWFjaGVkLCBpbnZlc3RvcnMgbWF5IHdpdGhkcmF3IHRoZWlyIGZ1bmRzDQogICAgICAgIGlmICghZnVuZGluZ0dvYWxSZWFjaGVkKSB7DQogICAgICAgICAgICB1aW50IGFtb3VudCA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXTsNCiAgICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDA7DQogICAgICAgICAgICBpZiAoYW1vdW50ID4gMCkgew0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyLnNlbmQoYW1vdW50KSkgew0KICAgICAgICAgICAgICAgICAgICBGdW5kVHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50LCBmYWxzZSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gYW1vdW50Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAvL2lmIHRoZSBnb2FsIGhhcyBiZW5uIHJlYWNoZWQgYW5kIHRoZSBiZW5lZmljaWFyeSBoaW1zZWxmIGlzIHRoZSBzZW5kZXIsIGhlIG1heSB3aXRoZHJhdyBldmVyeXRoaW5nDQogICAgICAgIGlmIChmdW5kaW5nR29hbFJlYWNoZWQgJiYgYmVuZWZpY2lhcnkgPT0gbXNnLnNlbmRlcikgew0KICAgICAgICAgICAgdG9rZW5SZXdhcmQuYnVybigpOyAvL2J1cm4gcmVtYWluaW5nIHRva2VucyBidXQgNjAgMDAwIDAwMA0KICAgICAgICAgICAgaWYgKGJlbmVmaWNpYXJ5LnNlbmQoYW1vdW50UmFpc2VkKSkgew0KICAgICAgICAgICAgICAgIEZ1bmRUcmFuc2ZlcihiZW5lZmljaWFyeSwgYW1vdW50UmFpc2VkLCBmYWxzZSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIC8vSWYgd2UgZmFpbCB0byBzZW5kIHRoZSBmdW5kcyB0byBiZW5lZmljaWFyeSwgdW5sb2NrIGZ1bmRlcnMgYmFsYW5jZQ0KICAgICAgICAgICAgICAgIGZ1bmRpbmdHb2FsUmVhY2hlZCA9IGZhbHNlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ=='