base 64 content
base64crowdsaleController
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoNCiAgICBPdmVyZmxvdyBwcm90ZWN0ZWQgbWF0aCBmdW5jdGlvbnMNCiovDQpjb250cmFjdCBTYWZlTWF0aCB7DQogICAgLyoqDQogICAgICAgIGNvbnN0cnVjdG9yDQogICAgKi8NCiAgICBmdW5jdGlvbiBTYWZlTWF0aCgpIHsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBzdW0gb2YgX3ggYW5kIF95LCBhc3NlcnRzIGlmIHRoZSBjYWxjdWxhdGlvbiBvdmVyZmxvd3MNCg0KICAgICAgICBAcGFyYW0gX3ggICB2YWx1ZSAxDQogICAgICAgIEBwYXJhbSBfeSAgIHZhbHVlIDINCg0KICAgICAgICBAcmV0dXJuIHN1bQ0KICAgICovDQogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgICAgIHVpbnQyNTYgeiA9IF94ICsgX3k7DQogICAgICAgIGFzc2VydCh6ID49IF94KTsNCiAgICAgICAgcmV0dXJuIHo7DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiBfeCBtaW51cyBfeSwgYXNzZXJ0cyBpZiB0aGUgc3VidHJhY3Rpb24gcmVzdWx0cyBpbiBhIG5lZ2F0aXZlIG51bWJlcg0KDQogICAgICAgIEBwYXJhbSBfeCAgIG1pbnVlbmQNCiAgICAgICAgQHBhcmFtIF95ICAgc3VidHJhaGVuZA0KDQogICAgICAgIEByZXR1cm4gZGlmZmVyZW5jZQ0KICAgICovDQogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgICAgIGFzc2VydChfeCA+PSBfeSk7DQogICAgICAgIHJldHVybiBfeCAtIF95Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAgICBAZGV2IHJldHVybnMgdGhlIHByb2R1Y3Qgb2YgbXVsdGlwbHlpbmcgX3ggYnkgX3ksIGFzc2VydHMgaWYgdGhlIGNhbGN1bGF0aW9uIG92ZXJmbG93cw0KDQogICAgICAgIEBwYXJhbSBfeCAgIGZhY3RvciAxDQogICAgICAgIEBwYXJhbSBfeSAgIGZhY3RvciAyDQoNCiAgICAgICAgQHJldHVybiBwcm9kdWN0DQogICAgKi8NCiAgICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQyNTYgX3gsIHVpbnQyNTYgX3kpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICAgICAgdWludDI1NiB6ID0gX3ggKiBfeTsNCiAgICAgICAgYXNzZXJ0KF94ID09IDAgfHwgeiAvIF94ID09IF95KTsNCiAgICAgICAgcmV0dXJuIHo7DQogICAgfQ0KfQ0KDQovKg0KICAgIE93bmVkIGNvbnRyYWN0IGludGVyZmFjZQ0KKi8NCmNvbnRyYWN0IElPd25lZCB7DQogICAgLy8gdGhpcyBmdW5jdGlvbiBpc24ndCBhYnN0cmFjdCBzaW5jZSB0aGUgY29tcGlsZXIgZW1pdHMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZ2V0dGVyIGZ1bmN0aW9ucyBhcyBleHRlcm5hbA0KICAgIGZ1bmN0aW9uIG93bmVyKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3Mgb3duZXIpIHsgb3duZXI7IH0NCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWM7DQogICAgZnVuY3Rpb24gYWNjZXB0T3duZXJzaGlwKCkgcHVibGljOw0KfQ0KDQovKg0KICAgIFByb3ZpZGVzIHN1cHBvcnQgYW5kIHV0aWxpdGllcyBmb3IgY29udHJhY3Qgb3duZXJzaGlwDQoqLw0KY29udHJhY3QgT3duZWQgaXMgSU93bmVkIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCiAgICBhZGRyZXNzIHB1YmxpYyBuZXdPd25lcjsNCg0KICAgIGV2ZW50IE93bmVyVXBkYXRlKGFkZHJlc3MgX3ByZXZPd25lciwgYWRkcmVzcyBfbmV3T3duZXIpOw0KDQogICAgLyoqDQogICAgICAgIEBkZXYgY29uc3RydWN0b3INCiAgICAqLw0KICAgIGZ1bmN0aW9uIE93bmVkKCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgfQ0KDQogICAgLy8gYWxsb3dzIGV4ZWN1dGlvbiBieSB0aGUgb3duZXIgb25seQ0KICAgIG1vZGlmaWVyIG93bmVyT25seSB7DQogICAgICAgIGFzc2VydChtc2cuc2VuZGVyID09IG93bmVyKTsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBhbGxvd3MgdHJhbnNmZXJyaW5nIHRoZSBjb250cmFjdCBvd25lcnNoaXANCiAgICAgICAgdGhlIG5ldyBvd25lciBzdGlsbCBuZWVkIHRvIGFjY2VwdCB0aGUgdHJhbnNmZXINCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBvd25lcg0KDQogICAgICAgIEBwYXJhbSBfbmV3T3duZXIgICAgbmV3IGNvbnRyYWN0IG93bmVyDQogICAgKi8NCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljIG93bmVyT25seSB7DQogICAgICAgIHJlcXVpcmUoX25ld093bmVyICE9IG93bmVyKTsNCiAgICAgICAgbmV3T3duZXIgPSBfbmV3T3duZXI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgdXNlZCBieSBhIG5ldyBvd25lciB0byBhY2NlcHQgYW4gb3duZXJzaGlwIHRyYW5zZmVyDQogICAgKi8NCiAgICBmdW5jdGlvbiBhY2NlcHRPd25lcnNoaXAoKSBwdWJsaWMgew0KICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gbmV3T3duZXIpOw0KICAgICAgICBPd25lclVwZGF0ZShvd25lciwgbmV3T3duZXIpOw0KICAgICAgICBvd25lciA9IG5ld093bmVyOw0KICAgICAgICBuZXdPd25lciA9IDB4MDsNCiAgICB9DQp9DQoNCi8qDQogICAgRVJDMjAgU3RhbmRhcmQgVG9rZW4gaW50ZXJmYWNlDQoqLw0KY29udHJhY3QgSUVSQzIwVG9rZW4gew0KICAgIC8vIHRoZXNlIGZ1bmN0aW9ucyBhcmVuJ3QgYWJzdHJhY3Qgc2luY2UgdGhlIGNvbXBpbGVyIGVtaXRzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGdldHRlciBmdW5jdGlvbnMgYXMgZXh0ZXJuYWwNCiAgICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBuYW1lKSB7IG5hbWU7IH0NCiAgICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIHN5bWJvbCkgeyBzeW1ib2w7IH0NCiAgICBmdW5jdGlvbiBkZWNpbWFscygpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50OCBkZWNpbWFscykgeyBkZWNpbWFsczsgfQ0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxTdXBwbHkpIHsgdG90YWxTdXBwbHk7IH0NCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsgX293bmVyOyBiYWxhbmNlOyB9DQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsgX293bmVyOyBfc3BlbmRlcjsgcmVtYWluaW5nOyB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KfQ0KDQovKg0KICAgIFRva2VuIEhvbGRlciBpbnRlcmZhY2UNCiovDQpjb250cmFjdCBJVG9rZW5Ib2xkZXIgaXMgSU93bmVkIHsNCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VucyhJRVJDMjBUb2tlbiBfdG9rZW4sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYzsNCn0NCg0KLyoNCiAgICBXZSBjb25zaWRlciBldmVyeSBjb250cmFjdCB0byBiZSBhICd0b2tlbiBob2xkZXInIHNpbmNlIGl0J3MgY3VycmVudGx5IG5vdCBwb3NzaWJsZQ0KICAgIGZvciBhIGNvbnRyYWN0IHRvIGRlbnkgcmVjZWl2aW5nIHRva2Vucy4NCg0KICAgIFRoZSBUb2tlbkhvbGRlcidzIGNvbnRyYWN0IHNvbGUgcHVycG9zZSBpcyB0byBwcm92aWRlIGEgc2FmZXR5IG1lY2hhbmlzbSB0aGF0IGFsbG93cw0KICAgIHRoZSBvd25lciB0byBzZW5kIHRva2VucyB0aGF0IHdlcmUgc2VudCB0byB0aGUgY29udHJhY3QgYnkgbWlzdGFrZSBiYWNrIHRvIHRoZWlyIHNlbmRlci4NCiovDQpjb250cmFjdCBUb2tlbkhvbGRlciBpcyBJVG9rZW5Ib2xkZXIsIE93bmVkIHsNCiAgICAvKioNCiAgICAgICAgQGRldiBjb25zdHJ1Y3Rvcg0KICAgICovDQogICAgZnVuY3Rpb24gVG9rZW5Ib2xkZXIoKSB7DQogICAgfQ0KDQogICAgLy8gdmFsaWRhdGVzIGFuIGFkZHJlc3MgLSBjdXJyZW50bHkgb25seSBjaGVja3MgdGhhdCBpdCBpc24ndCBudWxsDQogICAgbW9kaWZpZXIgdmFsaWRBZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MpIHsNCiAgICAgICAgcmVxdWlyZShfYWRkcmVzcyAhPSAweDApOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIC8vIHZlcmlmaWVzIHRoYXQgdGhlIGFkZHJlc3MgaXMgZGlmZmVyZW50IHRoYW4gdGhpcyBjb250cmFjdCBhZGRyZXNzDQogICAgbW9kaWZpZXIgbm90VGhpcyhhZGRyZXNzIF9hZGRyZXNzKSB7DQogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gYWRkcmVzcyh0aGlzKSk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgd2l0aGRyYXdzIHRva2VucyBoZWxkIGJ5IHRoZSBjb250cmFjdCBhbmQgc2VuZHMgdGhlbSB0byBhbiBhY2NvdW50DQogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgb3duZXINCg0KICAgICAgICBAcGFyYW0gX3Rva2VuICAgRVJDMjAgdG9rZW4gY29udHJhY3QgYWRkcmVzcw0KICAgICAgICBAcGFyYW0gX3RvICAgICAgYWNjb3VudCB0byByZWNlaXZlIHRoZSBuZXcgYW1vdW50DQogICAgICAgIEBwYXJhbSBfYW1vdW50ICBhbW91bnQgdG8gd2l0aGRyYXcNCiAgICAqLw0KICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW5zKElFUkMyMFRva2VuIF90b2tlbiwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkNCiAgICAgICAgcHVibGljDQogICAgICAgIG93bmVyT25seQ0KICAgICAgICB2YWxpZEFkZHJlc3MoX3Rva2VuKQ0KICAgICAgICB2YWxpZEFkZHJlc3MoX3RvKQ0KICAgICAgICBub3RUaGlzKF90bykNCiAgICB7DQogICAgICAgIGFzc2VydChfdG9rZW4udHJhbnNmZXIoX3RvLCBfYW1vdW50KSk7DQogICAgfQ0KfQ0KDQovKg0KICAgIFNtYXJ0IFRva2VuIGludGVyZmFjZQ0KKi8NCmNvbnRyYWN0IElTbWFydFRva2VuIGlzIElUb2tlbkhvbGRlciwgSUVSQzIwVG9rZW4gew0KICAgIGZ1bmN0aW9uIGRpc2FibGVUcmFuc2ZlcnMoYm9vbCBfZGlzYWJsZSkgcHVibGljOw0KICAgIGZ1bmN0aW9uIGlzc3VlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYzsNCiAgICBmdW5jdGlvbiBkZXN0cm95KGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljOw0KfQ0KDQovKg0KICAgIFRoZSBzbWFydCB0b2tlbiBjb250cm9sbGVyIGlzIGFuIHVwZ3JhZGFibGUgcGFydCBvZiB0aGUgc21hcnQgdG9rZW4gdGhhdCBhbGxvd3MNCiAgICBtb3JlIGZ1bmN0aW9uYWxpdHkgYXMgd2VsbCBhcyBmaXhlcyBmb3IgYnVncy9leHBsb2l0cy4NCiAgICBPbmNlIGl0IGFjY2VwdHMgb3duZXJzaGlwIG9mIHRoZSB0b2tlbiwgaXQgYmVjb21lcyB0aGUgdG9rZW4ncyBzb2xlIGNvbnRyb2xsZXINCiAgICB0aGF0IGNhbiBleGVjdXRlIGFueSBvZiBpdHMgZnVuY3Rpb25zLg0KDQogICAgVG8gdXBncmFkZSB0aGUgY29udHJvbGxlciwgb3duZXJzaGlwIG11c3QgYmUgdHJhbnNmZXJyZWQgdG8gYSBuZXcgY29udHJvbGxlciwgYWxvbmcgd2l0aA0KICAgIGFueSByZWxldmFudCBkYXRhLg0KDQogICAgVGhlIHNtYXJ0IHRva2VuIG11c3QgYmUgc2V0IG9uIGNvbnN0cnVjdGlvbiBhbmQgY2Fubm90IGJlIGNoYW5nZWQgYWZ0ZXJ3YXJkcy4NCiAgICBXcmFwcGVycyBhcmUgcHJvdmlkZWQgKGFzIG9wcG9zZWQgdG8gYSBzaW5nbGUgJ2V4ZWN1dGUnIGZ1bmN0aW9uKSBmb3IgZWFjaCBvZiB0aGUgdG9rZW4ncyBmdW5jdGlvbnMsIGZvciBlYXNpZXIgYWNjZXNzLg0KDQogICAgTm90ZSB0aGF0IHRoZSBjb250cm9sbGVyIGNhbiB0cmFuc2ZlciB0b2tlbiBvd25lcnNoaXAgdG8gYSBuZXcgY29udHJvbGxlciB0aGF0DQogICAgZG9lc24ndCBhbGxvdyBleGVjdXRpbmcgYW55IGZ1bmN0aW9uIG9uIHRoZSB0b2tlbiwgZm9yIGEgdHJ1c3RsZXNzIHNvbHV0aW9uLg0KICAgIERvaW5nIHRoYXQgd2lsbCBhbHNvIHJlbW92ZSB0aGUgb3duZXIncyBhYmlsaXR5IHRvIHVwZ3JhZGUgdGhlIGNvbnRyb2xsZXIuDQoqLw0KY29udHJhY3QgU21hcnRUb2tlbkNvbnRyb2xsZXIgaXMgVG9rZW5Ib2xkZXIgew0KICAgIElTbWFydFRva2VuIHB1YmxpYyB0b2tlbjsgICAvLyBzbWFydCB0b2tlbg0KDQogICAgLyoqDQogICAgICAgIEBkZXYgY29uc3RydWN0b3INCiAgICAqLw0KICAgIGZ1bmN0aW9uIFNtYXJ0VG9rZW5Db250cm9sbGVyKElTbWFydFRva2VuIF90b2tlbikNCiAgICAgICAgdmFsaWRBZGRyZXNzKF90b2tlbikNCiAgICB7DQogICAgICAgIHRva2VuID0gX3Rva2VuOw0KICAgIH0NCg0KICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgY29udHJvbGxlciBpcyB0aGUgdG9rZW4ncyBvd25lcg0KICAgIG1vZGlmaWVyIGFjdGl2ZSgpIHsNCiAgICAgICAgYXNzZXJ0KHRva2VuLm93bmVyKCkgPT0gYWRkcmVzcyh0aGlzKSk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgLy8gZW5zdXJlcyB0aGF0IHRoZSBjb250cm9sbGVyIGlzIG5vdCB0aGUgdG9rZW4ncyBvd25lcg0KICAgIG1vZGlmaWVyIGluYWN0aXZlKCkgew0KICAgICAgICBhc3NlcnQodG9rZW4ub3duZXIoKSAhPSBhZGRyZXNzKHRoaXMpKTsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBhbGxvd3MgdHJhbnNmZXJyaW5nIHRoZSB0b2tlbiBvd25lcnNoaXANCiAgICAgICAgdGhlIG5ldyBvd25lciBzdGlsbCBuZWVkIHRvIGFjY2VwdCB0aGUgdHJhbnNmZXINCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBvd25lcg0KDQogICAgICAgIEBwYXJhbSBfbmV3T3duZXIgICAgbmV3IHRva2VuIG93bmVyDQogICAgKi8NCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRva2VuT3duZXJzaGlwKGFkZHJlc3MgX25ld093bmVyKSBwdWJsaWMgb3duZXJPbmx5IHsNCiAgICAgICAgdG9rZW4udHJhbnNmZXJPd25lcnNoaXAoX25ld093bmVyKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiB1c2VkIGJ5IGEgbmV3IG93bmVyIHRvIGFjY2VwdCBhIHRva2VuIG93bmVyc2hpcCB0cmFuc2Zlcg0KICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IG93bmVyDQogICAgKi8NCiAgICBmdW5jdGlvbiBhY2NlcHRUb2tlbk93bmVyc2hpcCgpIHB1YmxpYyBvd25lck9ubHkgew0KICAgICAgICB0b2tlbi5hY2NlcHRPd25lcnNoaXAoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBkaXNhYmxlcy9lbmFibGVzIHRva2VuIHRyYW5zZmVycw0KICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IG93bmVyDQoNCiAgICAgICAgQHBhcmFtIF9kaXNhYmxlICAgIHRydWUgdG8gZGlzYWJsZSB0cmFuc2ZlcnMsIGZhbHNlIHRvIGVuYWJsZSB0aGVtDQogICAgKi8NCiAgICBmdW5jdGlvbiBkaXNhYmxlVG9rZW5UcmFuc2ZlcnMoYm9vbCBfZGlzYWJsZSkgcHVibGljIG93bmVyT25seSB7DQogICAgICAgIHRva2VuLmRpc2FibGVUcmFuc2ZlcnMoX2Rpc2FibGUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAgICBAZGV2IGFsbG93cyB0aGUgb3duZXIgdG8gZXhlY3V0ZSB0aGUgdG9rZW4ncyBpc3N1ZSBmdW5jdGlvbg0KDQogICAgICAgIEBwYXJhbSBfdG8gICAgICAgICBhY2NvdW50IHRvIHJlY2VpdmUgdGhlIG5ldyBhbW91bnQNCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgIGFtb3VudCB0byBpbmNyZWFzZSB0aGUgc3VwcGx5IGJ5DQogICAgKi8NCiAgICBmdW5jdGlvbiBpc3N1ZVRva2VucyhhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSBwdWJsaWMgb3duZXJPbmx5IHsNCiAgICAgICAgdG9rZW4uaXNzdWUoX3RvLCBfYW1vdW50KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBhbGxvd3MgdGhlIG93bmVyIHRvIGV4ZWN1dGUgdGhlIHRva2VuJ3MgZGVzdHJveSBmdW5jdGlvbg0KDQogICAgICAgIEBwYXJhbSBfZnJvbSAgICAgICBhY2NvdW50IHRvIHJlbW92ZSB0aGUgYW1vdW50IGZyb20NCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgIGFtb3VudCB0byBkZWNyZWFzZSB0aGUgc3VwcGx5IGJ5DQogICAgKi8NCiAgICBmdW5jdGlvbiBkZXN0cm95VG9rZW5zKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljIG93bmVyT25seSB7DQogICAgICAgIHRva2VuLmRlc3Ryb3koX2Zyb20sIF9hbW91bnQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAgICBAZGV2IHdpdGhkcmF3cyB0b2tlbnMgaGVsZCBieSB0aGUgdG9rZW4gYW5kIHNlbmRzIHRoZW0gdG8gYW4gYWNjb3VudA0KICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyDQoNCiAgICAgICAgQHBhcmFtIF90b2tlbiAgIEVSQzIwIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MNCiAgICAgICAgQHBhcmFtIF90byAgICAgIGFjY291bnQgdG8gcmVjZWl2ZSB0aGUgbmV3IGFtb3VudA0KICAgICAgICBAcGFyYW0gX2Ftb3VudCAgYW1vdW50IHRvIHdpdGhkcmF3DQogICAgKi8NCiAgICBmdW5jdGlvbiB3aXRoZHJhd0Zyb21Ub2tlbihJRVJDMjBUb2tlbiBfdG9rZW4sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYyBvd25lck9ubHkgew0KICAgICAgICB0b2tlbi53aXRoZHJhd1Rva2VucyhfdG9rZW4sIF90bywgX2Ftb3VudCk7DQogICAgfQ0KfQ0KDQovKg0KICAgIENyb3dkc2FsZSB2MC4xDQoNCiAgICBUaGUgY3Jvd2RzYWxlIHZlcnNpb24gb2YgdGhlIHNtYXJ0IHRva2VuIGNvbnRyb2xsZXIsIGFsbG93cyBjb250cmlidXRpbmcgZXRoZXIgaW4gZXhjaGFuZ2UgZm9yIEJhbmNvciB0b2tlbnMNCiAgICBUaGUgcHJpY2UgcmVtYWlucyBmaXhlZCBmb3IgdGhlIGVudGlyZSBkdXJhdGlvbiBvZiB0aGUgY3Jvd2RzYWxlDQogICAgTm90ZSB0aGF0IDIwJSBvZiB0aGUgY29udHJpYnV0aW9ucyBhcmUgdGhlIEJhbmNvciB0b2tlbidzIHJlc2VydmUNCiovDQpjb250cmFjdCBDcm93ZHNhbGVDb250cm9sbGVyIGlzIFNtYXJ0VG9rZW5Db250cm9sbGVyLCBTYWZlTWF0aCB7DQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgRFVSQVRJT04gPSAxNCBkYXlzOyAgICAgICAgICAgICAgICAgLy8gY3Jvd2RzYWxlIGR1cmF0aW9uDQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgVE9LRU5fUFJJQ0VfTiA9IDE7ICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhbCBwcmljZSBpbiB3ZWkgKG51bWVyYXRvcikNCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBUT0tFTl9QUklDRV9EID0gMTAwOyAgICAgICAgICAgICAgICAvLyBpbml0aWFsIHByaWNlIGluIHdlaSAoZGVub21pbmF0b3IpDQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgQlRDU19FVEhFUl9DQVAgPSA1MDAwMCBldGhlcjsgICAgICAgLy8gbWF4aW11bSBiaXRjb2luIHN1aXNzZSBldGhlciBjb250cmlidXRpb24NCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBNQVhfR0FTX1BSSUNFID0gNTAwMDAwMDAwMDAgd2VpOyAgICAvLyBtYXhpbXVtIGdhcyBwcmljZSBmb3IgY29udHJpYnV0aW9uIHRyYW5zYWN0aW9ucw0KDQogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJzAuMSc7DQoNCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWUgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBjcm93ZHNhbGUgc3RhcnQgdGltZSAoaW4gc2Vjb25kcykNCiAgICB1aW50MjU2IHB1YmxpYyBlbmRUaW1lID0gMDsgICAgICAgICAgICAgICAgICAgICAvLyBjcm93ZHNhbGUgZW5kIHRpbWUgKGluIHNlY29uZHMpDQogICAgdWludDI1NiBwdWJsaWMgdG90YWxFdGhlckNhcCA9IDEwMDAwMDAgZXRoZXI7ICAgLy8gY3VycmVudCBldGhlciBjb250cmlidXRpb24gY2FwLCBpbml0aWFsaXplZCB3aXRoIGEgdGVtcCB2YWx1ZSBhcyBhIHNhZmV0eSBtZWNoYW5pc20gdW50aWwgdGhlIHJlYWwgY2FwIGlzIHJldmVhbGVkDQogICAgdWludDI1NiBwdWJsaWMgdG90YWxFdGhlckNvbnRyaWJ1dGVkID0gMDsgICAgICAgLy8gZXRoZXIgY29udHJpYnV0ZWQgc28gZmFyDQogICAgYnl0ZXMzMiBwdWJsaWMgcmVhbEV0aGVyQ2FwSGFzaDsgICAgICAgICAgICAgICAgLy8gZW5zdXJlcyB0aGF0IHRoZSByZWFsIGNhcCBpcyBwcmVkZWZpbmVkIG9uIGRlcGxveW1lbnQgYW5kIGNhbm5vdCBiZSBjaGFuZ2VkIGxhdGVyDQogICAgYWRkcmVzcyBwdWJsaWMgYmVuZWZpY2lhcnkgPSAweDA7ICAgICAgICAgICAgICAgLy8gYWRkcmVzcyB0byByZWNlaXZlIGFsbCBldGhlciBjb250cmlidXRpb25zDQogICAgYWRkcmVzcyBwdWJsaWMgYnRjcyA9IDB4MDsgICAgICAgICAgICAgICAgICAgICAgLy8gYml0Y29pbiBzdWlzc2UgYWRkcmVzcw0KDQogICAgLy8gdHJpZ2dlcmVkIG9uIGVhY2ggY29udHJpYnV0aW9uDQogICAgZXZlbnQgQ29udHJpYnV0aW9uKGFkZHJlc3MgaW5kZXhlZCBfY29udHJpYnV0b3IsIHVpbnQyNTYgX2Ftb3VudCwgdWludDI1NiBfcmV0dXJuKTsNCg0KICAgIC8qKg0KICAgICAgICBAZGV2IGNvbnN0cnVjdG9yDQoNCiAgICAgICAgQHBhcmFtIF90b2tlbiAgICAgICAgICBzbWFydCB0b2tlbiB0aGUgY3Jvd2RzYWxlIGlzIGZvcg0KICAgICAgICBAcGFyYW0gX3N0YXJ0VGltZSAgICAgIGNyb3dkc2FsZSBzdGFydCB0aW1lDQogICAgICAgIEBwYXJhbSBfYmVuZWZpY2lhcnkgICAgYWRkcmVzcyB0byByZWNlaXZlIGFsbCBldGhlciBjb250cmlidXRpb25zDQogICAgICAgIEBwYXJhbSBfYnRjcyAgICAgICAgICAgYml0Y29pbiBzdWlzc2UgYWRkcmVzcw0KICAgICovDQogICAgZnVuY3Rpb24gQ3Jvd2RzYWxlQ29udHJvbGxlcihJU21hcnRUb2tlbiBfdG9rZW4sIHVpbnQyNTYgX3N0YXJ0VGltZSwgYWRkcmVzcyBfYmVuZWZpY2lhcnksIGFkZHJlc3MgX2J0Y3MsIGJ5dGVzMzIgX3JlYWxFdGhlckNhcEhhc2gpDQogICAgICAgIFNtYXJ0VG9rZW5Db250cm9sbGVyKF90b2tlbikNCiAgICAgICAgdmFsaWRBZGRyZXNzKF9iZW5lZmljaWFyeSkNCiAgICAgICAgdmFsaWRBZGRyZXNzKF9idGNzKQ0KICAgICAgICBlYXJsaWVyVGhhbihfc3RhcnRUaW1lKQ0KICAgICAgICB2YWxpZEFtb3VudCh1aW50MjU2KF9yZWFsRXRoZXJDYXBIYXNoKSkNCiAgICB7DQogICAgICAgIHN0YXJ0VGltZSA9IF9zdGFydFRpbWU7DQogICAgICAgIGVuZFRpbWUgPSBzdGFydFRpbWUgKyBEVVJBVElPTjsNCiAgICAgICAgYmVuZWZpY2lhcnkgPSBfYmVuZWZpY2lhcnk7DQogICAgICAgIGJ0Y3MgPSBfYnRjczsNCiAgICAgICAgcmVhbEV0aGVyQ2FwSGFzaCA9IF9yZWFsRXRoZXJDYXBIYXNoOw0KICAgIH0NCg0KICAgIC8vIHZlcmlmaWVzIHRoYXQgYW4gYW1vdW50IGlzIGdyZWF0ZXIgdGhhbiB6ZXJvDQogICAgbW9kaWZpZXIgdmFsaWRBbW91bnQodWludDI1NiBfYW1vdW50KSB7DQogICAgICAgIHJlcXVpcmUoX2Ftb3VudCA+IDApOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIC8vIHZlcmlmaWVzIHRoYXQgdGhlIGdhcyBwcmljZSBpcyBsb3dlciB0aGFuIDUwIGd3ZWkNCiAgICBtb2RpZmllciB2YWxpZEdhc1ByaWNlKCkgew0KICAgICAgICBhc3NlcnQodHguZ2FzcHJpY2UgPD0gTUFYX0dBU19QUklDRSk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgLy8gdmVyaWZpZXMgdGhhdCB0aGUgZXRoZXIgY2FwIGlzIHZhbGlkIGJhc2VkIG9uIHRoZSBrZXkgcHJvdmlkZWQNCiAgICBtb2RpZmllciB2YWxpZEV0aGVyQ2FwKHVpbnQyNTYgX2NhcCwgdWludDI1NiBfa2V5KSB7DQogICAgICAgIHJlcXVpcmUoY29tcHV0ZVJlYWxDYXAoX2NhcCwgX2tleSkgPT0gcmVhbEV0aGVyQ2FwSGFzaCk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgLy8gZW5zdXJlcyB0aGF0IGl0J3MgZWFybGllciB0aGFuIHRoZSBnaXZlbiB0aW1lDQogICAgbW9kaWZpZXIgZWFybGllclRoYW4odWludDI1NiBfdGltZSkgew0KICAgICAgICBhc3NlcnQobm93IDwgX3RpbWUpOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgY3VycmVudCB0aW1lIGlzIGJldHdlZW4gX3N0YXJ0VGltZSAoaW5jbHVzaXZlKSBhbmQgX2VuZFRpbWUgKGV4Y2x1c2l2ZSkNCiAgICBtb2RpZmllciBiZXR3ZWVuKHVpbnQyNTYgX3N0YXJ0VGltZSwgdWludDI1NiBfZW5kVGltZSkgew0KICAgICAgICBhc3NlcnQobm93ID49IF9zdGFydFRpbWUgJiYgbm93IDwgX2VuZFRpbWUpOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIC8vIGVuc3VyZXMgdGhhdCB0aGUgc2VuZGVyIGlzIGJpdGNvaW4gc3Vpc3NlDQogICAgbW9kaWZpZXIgYnRjc09ubHkoKSB7DQogICAgICAgIGFzc2VydChtc2cuc2VuZGVyID09IGJ0Y3MpOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIC8vIGVuc3VyZXMgdGhhdCB3ZSBkaWRuJ3QgcmVhY2ggdGhlIGV0aGVyIGNhcA0KICAgIG1vZGlmaWVyIGV0aGVyQ2FwTm90UmVhY2hlZCh1aW50MjU2IF9jb250cmlidXRpb24pIHsNCiAgICAgICAgYXNzZXJ0KHNhZmVBZGQodG90YWxFdGhlckNvbnRyaWJ1dGVkLCBfY29udHJpYnV0aW9uKSA8PSB0b3RhbEV0aGVyQ2FwKTsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICAvLyBlbnN1cmVzIHRoYXQgd2UgZGlkbid0IHJlYWNoIHRoZSBiaXRjb2luIHN1aXNzZSBldGhlciBjYXANCiAgICBtb2RpZmllciBidGNzRXRoZXJDYXBOb3RSZWFjaGVkKHVpbnQyNTYgX2V0aENvbnRyaWJ1dGlvbikgew0KICAgICAgICBhc3NlcnQoc2FmZUFkZCh0b3RhbEV0aGVyQ29udHJpYnV0ZWQsIF9ldGhDb250cmlidXRpb24pIDw9IEJUQ1NfRVRIRVJfQ0FQKTsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBjb21wdXRlcyB0aGUgcmVhbCBjYXAgYmFzZWQgb24gdGhlIGdpdmVuIGNhcCAmIGtleQ0KDQogICAgICAgIEBwYXJhbSBfY2FwICAgIGNhcA0KICAgICAgICBAcGFyYW0gX2tleSAgICBrZXkgdXNlZCB0byBjb21wdXRlIHRoZSBjYXAgaGFzaA0KDQogICAgICAgIEByZXR1cm4gY29tcHV0ZWQgcmVhbCBjYXAgaGFzaA0KICAgICovDQogICAgZnVuY3Rpb24gY29tcHV0ZVJlYWxDYXAodWludDI1NiBfY2FwLCB1aW50MjU2IF9rZXkpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChieXRlczMyKSB7DQogICAgICAgIHJldHVybiBrZWNjYWsyNTYoX2NhcCwgX2tleSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgZW5hYmxlcyB0aGUgcmVhbCBjYXAgZGVmaW5lZCBvbiBkZXBsb3ltZW50DQoNCiAgICAgICAgQHBhcmFtIF9jYXAgICAgcHJlZGVmaW5lZCBjYXANCiAgICAgICAgQHBhcmFtIF9rZXkgICAga2V5IHVzZWQgdG8gY29tcHV0ZSB0aGUgY2FwIGhhc2gNCiAgICAqLw0KICAgIGZ1bmN0aW9uIGVuYWJsZVJlYWxDYXAodWludDI1NiBfY2FwLCB1aW50MjU2IF9rZXkpDQogICAgICAgIHB1YmxpYw0KICAgICAgICBvd25lck9ubHkNCiAgICAgICAgYWN0aXZlDQogICAgICAgIGJldHdlZW4oc3RhcnRUaW1lLCBlbmRUaW1lKQ0KICAgICAgICB2YWxpZEV0aGVyQ2FwKF9jYXAsIF9rZXkpDQogICAgew0KICAgICAgICByZXF1aXJlKF9jYXAgPCB0b3RhbEV0aGVyQ2FwKTsgLy8gdmFsaWRhdGUgaW5wdXQNCiAgICAgICAgdG90YWxFdGhlckNhcCA9IF9jYXA7DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgY29tcHV0ZXMgdGhlIG51bWJlciBvZiB0b2tlbnMgdGhhdCBzaG91bGQgYmUgaXNzdWVkIGZvciBhIGdpdmVuIGNvbnRyaWJ1dGlvbg0KDQogICAgICAgIEBwYXJhbSBfY29udHJpYnV0aW9uICAgIGNvbnRyaWJ1dGlvbiBhbW91bnQNCg0KICAgICAgICBAcmV0dXJuIGNvbXB1dGVkIG51bWJlciBvZiB0b2tlbnMNCiAgICAqLw0KICAgIGZ1bmN0aW9uIGNvbXB1dGVSZXR1cm4odWludDI1NiBfY29udHJpYnV0aW9uKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikgew0KICAgICAgICByZXR1cm4gc2FmZU11bChfY29udHJpYnV0aW9uLCBUT0tFTl9QUklDRV9EKSAvIFRPS0VOX1BSSUNFX047DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgRVRIIGNvbnRyaWJ1dGlvbg0KICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgZHVyaW5nIHRoZSBjcm93ZHNhbGUNCg0KICAgICAgICBAcmV0dXJuIHRva2VucyBpc3N1ZWQgaW4gcmV0dXJuDQogICAgKi8NCiAgICBmdW5jdGlvbiBjb250cmlidXRlRVRIKCkNCiAgICAgICAgcHVibGljDQogICAgICAgIHBheWFibGUNCiAgICAgICAgYmV0d2VlbihzdGFydFRpbWUsIGVuZFRpbWUpDQogICAgICAgIHJldHVybnMgKHVpbnQyNTYgYW1vdW50KQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIHByb2Nlc3NDb250cmlidXRpb24oKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBDb250cmlidXRpb24gdGhyb3VnaCBCVENzIChCaXRjb2luIFN1aXNzZSBvbmx5KQ0KICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYmVmb3JlIHRoZSBjcm93ZHNhbGUgc3RhcnRlZA0KDQogICAgICAgIEByZXR1cm4gdG9rZW5zIGlzc3VlZCBpbiByZXR1cm4NCiAgICAqLw0KICAgIGZ1bmN0aW9uIGNvbnRyaWJ1dGVCVENzKCkNCiAgICAgICAgcHVibGljDQogICAgICAgIHBheWFibGUNCiAgICAgICAgYnRjc09ubHkNCiAgICAgICAgYnRjc0V0aGVyQ2FwTm90UmVhY2hlZChtc2cudmFsdWUpDQogICAgICAgIGVhcmxpZXJUaGFuKHN0YXJ0VGltZSkNCiAgICAgICAgcmV0dXJucyAodWludDI1NiBhbW91bnQpDQogICAgew0KICAgICAgICByZXR1cm4gcHJvY2Vzc0NvbnRyaWJ1dGlvbigpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAgICBAZGV2IGhhbmRsZXMgY29udHJpYnV0aW9uIGxvZ2ljDQogICAgICAgIG5vdGUgdGhhdCB0aGUgQ29udHJpYnV0aW9uIGV2ZW50IGlzIHRyaWdnZXJlZCB1c2luZyB0aGUgc2VuZGVyIGFzIHRoZSBjb250cmlidXRvciwgcmVnYXJkbGVzcyBvZiB0aGUgYWN0dWFsIGNvbnRyaWJ1dG9yDQoNCiAgICAgICAgQHJldHVybiB0b2tlbnMgaXNzdWVkIGluIHJldHVybg0KICAgICovDQogICAgZnVuY3Rpb24gcHJvY2Vzc0NvbnRyaWJ1dGlvbigpIHByaXZhdGUNCiAgICAgICAgYWN0aXZlDQogICAgICAgIGV0aGVyQ2FwTm90UmVhY2hlZChtc2cudmFsdWUpDQogICAgICAgIHZhbGlkR2FzUHJpY2UNCiAgICAgICAgcmV0dXJucyAodWludDI1NiBhbW91bnQpDQogICAgew0KICAgICAgICB1aW50MjU2IHRva2VuQW1vdW50ID0gY29tcHV0ZVJldHVybihtc2cudmFsdWUpOw0KICAgICAgICBhc3NlcnQoYmVuZWZpY2lhcnkuc2VuZChtc2cudmFsdWUpKTsgLy8gdHJhbnNmZXIgdGhlIGV0aGVyIHRvIHRoZSBiZW5lZmljaWFyeSBhY2NvdW50DQogICAgICAgIHRvdGFsRXRoZXJDb250cmlidXRlZCA9IHNhZmVBZGQodG90YWxFdGhlckNvbnRyaWJ1dGVkLCBtc2cudmFsdWUpOyAvLyB1cGRhdGUgdGhlIHRvdGFsIGNvbnRyaWJ1dGlvbiBhbW91bnQNCiAgICAgICAgdG9rZW4uaXNzdWUobXNnLnNlbmRlciwgdG9rZW5BbW91bnQpOyAvLyBpc3N1ZSBuZXcgZnVuZHMgdG8gdGhlIGNvbnRyaWJ1dG9yIGluIHRoZSBzbWFydCB0b2tlbg0KICAgICAgICB0b2tlbi5pc3N1ZShiZW5lZmljaWFyeSwgdG9rZW5BbW91bnQpOyAvLyBpc3N1ZSB0b2tlbnMgdG8gdGhlIGJlbmVmaWNpYXJ5DQoNCiAgICAgICAgQ29udHJpYnV0aW9uKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgdG9rZW5BbW91bnQpOw0KICAgICAgICByZXR1cm4gdG9rZW5BbW91bnQ7DQogICAgfQ0KDQogICAgLy8gZmFsbGJhY2sNCiAgICBmdW5jdGlvbigpIHBheWFibGUgew0KICAgICAgICBjb250cmlidXRlRVRIKCk7DQogICAgfQ0KfQ=='