base 64 content
base64custodial
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMDsNCg0KLyoqDQogKiBDdXN0b2RpYWwgU21hcnQgQ29udHJhY3QgdGhhdCB0aGF0IGNoYXJnZXMgZmVlIGZvciBrZWVwaW5nIGV0aGVyLg0KICovDQpjb250cmFjdCBDdXN0b2RpYWwgew0KICB1aW50MjU2IGNvbnN0YW50IFRXT18xMjggPSAweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsgLy8gMl4xMjgNCiAgdWludDI1NiBjb25zdGFudCBUV09fMTI3ID0gMHg4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsgLy8gMl4xMjcNCg0KICAvKioNCiAgICogQWRkcmVzcyBvZiB0aGUgY2xpZW50LCBpLmUuIG93bmVyIG9mIHRoZSBldGhlciBrZXB0IGJ5IHRoZSBjb250cmFjdC4NCiAgICovDQogIGFkZHJlc3MgY2xpZW50Ow0KDQogIC8qKg0KICAgKiBBZGRyZXNzIG9mIHRoZSBhZHZpc29yLCBpLmUuIHRoZSBvbmUgd2hvIHJlY2VpdmVzIGZlZSBjaGFyZ2VkIGJ5IHRoZQ0KICAgKiBjb250cmFjdCBmb3Iga2VlcGluZyBjbGllbnQncyBldGhlci4NCiAgICovDQogIGFkZHJlc3MgYWR2aXNvcjsNCg0KICAvKioNCiAgICogQ2FwaXRhbCwgaS5lLiBhbW91bnQgb2YgY2xpZW50J3MgZXRoZXIgKGluIFdlaSkga2VwdCBieSB0aGUgY29udHJhY3QuDQogICAqLw0KICB1aW50MjU2IGNhcGl0YWw7DQoNCiAgLyoqDQogICAqIFRpbWUgd2hlbiBjYXBpdGFsIHdhcyBsYXN0IHVwZGF0ZWQgKGluIHNlY29uZHMgc2luY2UgZXBvY2gpLg0KICAgKi8NCiAgdWludDI1NiBjYXBpdGFsVGltZXN0YW1wOw0KDQogIC8qKg0KICAgKiBGZWUgZmFjdG9yLCB0aGUgY2FwaXRhbCBpcyBtdWx0aXBsaWVkIGJ5IGVhY2ggc2Vjb25kIG11bHRpcGxpZWQgYnkgMl4xMjguDQogICAqIEkuZS4gY2FwaXRhbCh0KzEpID0gY2FwaXRhbCAodCkgKiBmZWVGYWN0b3IgLyAyXjEyOC4NCiAgICovDQogIHVpbnQyNTYgZmVlRmFjdG9yOw0KDQogIC8qKg0KICAgKiBDcmVhdGUgbmV3IEN1c3RvZGlhbCBjb250cmFjdCB3aXRoIGdpdmVuIGNsaWVudCBhZGRyZXNzLCBhZHZpc29yIGFkZHJlc3MNCiAgICogYW5kIGZlZSBmYWN0b3IuDQogICAqDQogICAqIEBwYXJhbSBfY2xpZW50IGNsaWVudCBhZGRyZXNzDQogICAqIEBwYXJhbSBfYWR2aXNvciBhZHZpc29yIGFkZHJlc3MNCiAgICogQHBhcmFtIF9mZWVGYWN0b3IgZmVlIGZhY3Rvcg0KICAgKi8NCiAgZnVuY3Rpb24gQ3VzdG9kaWFsIChhZGRyZXNzIF9jbGllbnQsIGFkZHJlc3MgX2Fkdmlzb3IsIHVpbnQyNTYgX2ZlZUZhY3Rvcikgew0KICAgIGlmIChfZmVlRmFjdG9yID4gVFdPXzEyOCkNCiAgICAgIHRocm93OyAvLyBGZWUgZmFjdG9yIG11c3QgYmUgbGVzcyB0aGVuIG9yIGVxdWFsIHRvIDJeMTI4DQoNCiAgICBjbGllbnQgPSBfY2xpZW50Ow0KICAgIGFkdmlzb3IgPSBfYWR2aXNvcjsNCiAgICBmZWVGYWN0b3IgPSBfZmVlRmFjdG9yOw0KICB9DQoNCiAgLyoqDQogICAqIEdldCBjbGllbnQncyBjYXBpdGFsIChpbiBXZWkpLg0KICAgKg0KICAgKiBAcGFyYW0gX2N1cnJlbnRUaW1lIGN1cnJlbnQgdGltZSBpbiBzZWNvbmRzIHNpbmNlIGVwb2NoDQogICAqIEByZXR1cm4gY2xpZW50J3MgY2FwaXRhbA0KICAgKi8NCiAgZnVuY3Rpb24gZ2V0Q2FwaXRhbCAodWludDI1NiBfY3VycmVudFRpbWUpDQogIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgX3Jlc3VsdCkgew0KICAgIF9yZXN1bHQgPSBjYXBpdGFsOw0KICAgIGlmIChjYXBpdGFsID4gMCAmJiBjYXBpdGFsVGltZXN0YW1wIDwgX2N1cnJlbnRUaW1lICYmIGZlZUZhY3RvciA8IFRXT18xMjgpIHsNCiAgICAgIF9yZXN1bHQgPSBtdWwgKF9yZXN1bHQsIHBvdyAoZmVlRmFjdG9yLCBfY3VycmVudFRpbWUgLSBjYXBpdGFsVGltZXN0YW1wKSk7DQogICAgfQ0KICB9DQoNCiAgLyoqDQogICAqIERlcG9zaXQgZXRoZXIgb24gdGhlIGNsaWVudCdzIGFjY291bnQuDQogICAqLw0KICBmdW5jdGlvbiBkZXBvc2l0ICgpIHBheWFibGUgew0KICAgIGlmIChtc2cudmFsdWUgPiAwKSB7DQogICAgICB1cGRhdGVDYXBpdGFsICgpOw0KICAgICAgaWYgKG1zZy52YWx1ZSA+PSBUV09fMTI4IC0gY2FwaXRhbCkNCiAgICAgICAgdGhyb3c7IC8vIENhcGl0YWwgc2hvdWxkIG5ldmVyIGV4Y2VlZCAyXjEyOCBXZWkNCiAgICAgIGNhcGl0YWwgKz0gbXNnLnZhbHVlOw0KICAgICAgRGVwb3NpdCAobXNnLnNlbmRlciwgbXNnLnZhbHVlKTsNCiAgICB9DQogIH0NCg0KICAvKioNCiAgICogV2l0aGRyYXcgZXRoZXIgZnJvbSBjbGllbnQncyBhY2NvdW50IGFuZCBzZW50IGl0IHRvIHRoZSBjbGllbnQncyBhZGRyZXNzLg0KICAgKiBNYXkgb25seSBiZSBjYWxsZWQgYnkgY2xpZW50Lg0KICAgKg0KICAgKiBAcGFyYW0gX3ZhbHVlIHZhbHVlIHRvIHdpdGhkcmF3IChpbiBXZWkpDQogICAqIEByZXR1cm4gdHJ1ZSBpZiBldGhlciB3YXMgc3VjY2Vzc2Z1bGx5IHdpdGhkcmF3biwgZmFsc2Ugb3RoZXJ3aXNlDQogICAqLw0KICBmdW5jdGlvbiB3aXRoZHJhdyAodWludDI1NiBfdmFsdWUpDQogIHJldHVybnMgKGJvb2wgX3N1Y2Nlc3MpIHsNCiAgICBpZiAobXNnLnNlbmRlciAhPSBjbGllbnQpIHRocm93Ow0KDQogICAgaWYgKF92YWx1ZSA+IDApIHsNCiAgICAgIHVwZGF0ZUNhcGl0YWwgKCk7DQogICAgICBpZiAoX3ZhbHVlIDw9IGNhcGl0YWwpIHsNCiAgICAgICAgaWYgKGNsaWVudC5zZW5kIChfdmFsdWUpKSB7DQogICAgICAgICAgV2l0aGRyYXdhbCAoX3ZhbHVlKTsNCiAgICAgICAgICBjYXBpdGFsIC09IF92YWx1ZTsNCiAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsNCiAgICAgIH0gZWxzZSByZXR1cm4gZmFsc2U7DQogICAgfSBlbHNlIHJldHVybiB0cnVlOw0KICB9DQoNCiAgLyoqDQogICAqIFdpdGhkcmF3IGFsbCBldGhlciBmcm9tIGNsaWVudCdzIGFjY291bnQgYW5kIHNlbnQgaXQgdG8gdGhlIGNsaWVudCdzDQogICAqIGFkZHJlc3MuICBNYXkgb25seSBiZSBjYWxsZWQgYnkgY2xpZW50Lg0KICAgKg0KICAgKiBAcmV0dXJuIHRydWUgaWYgZXRoZXIgd2FzIHN1Y2Nlc3NmdWxseSB3aXRoZHJhd24sIGZhbHNlIG90aGVyd2lzZQ0KICAgKi8NCiAgZnVuY3Rpb24gd2l0aGRyYXdBbGwgKCkNCiAgcmV0dXJucyAoYm9vbCBfc3VjY2Vzcykgew0KICAgIGlmIChtc2cuc2VuZGVyICE9IGNsaWVudCkgdGhyb3c7DQoNCiAgICB1cGRhdGVDYXBpdGFsICgpOw0KICAgIGlmIChjYXBpdGFsID4gMCkgew0KICAgICAgaWYgKGNsaWVudC5zZW5kIChjYXBpdGFsKSkgew0KICAgICAgICBXaXRoZHJhd2FsIChjYXBpdGFsKTsNCiAgICAgICAgY2FwaXRhbCA9IDA7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgfSBlbHNlIHJldHVybiBmYWxzZTsNCiAgICB9IGVsc2UgcmV0dXJuIHRydWU7DQogIH0NCg0KICAvKioNCiAgICogV2l0aGRyYXcgZmVlIGNoYXJnZWQgYnkgdGhlIGNvbnRyYWN0IGFzIHdlbGwgYXMgYWxsIHVuYWNjb3VudGVkIGV0aGVyIG9uDQogICAqIGNvbnRyYWN0J3MgYmFsYW5jZSBhbmQgc2VuZCBpdCB0byB0aGUgYWR2aXNvcidzIGFkZHJlc3MuICBNYXkgb25seSBiZQ0KICAgKiBjYWxsZWQgYnkgYWR2aXNvci4NCiAgICoNCiAgICogQHJldHVybiB0cnVlIGlmIGZlZSBhbmQgdW5hY2NvdW50ZWQgZXRoZXIgd2FzIHN1Y2Nlc3NmdWxseSB3aXRoZHJhd24sDQogICAqICAgICAgICAgIGZhbHNlIG90aGVyd2lzZQ0KICAgKi8NCiAgZnVuY3Rpb24gd2l0aGRyYXdGZWUgKCkNCiAgcmV0dXJucyAoYm9vbCBfc3VjY2Vzcykgew0KICAgIGlmIChtc2cuc2VuZGVyICE9IGFkdmlzb3IpIHRocm93Ow0KDQogICAgdWludDI1NiBfdmFsdWUgPSB0aGlzLmJhbGFuY2UgLSBnZXRDYXBpdGFsIChub3cpOw0KICAgIGlmIChfdmFsdWUgPiAwKSB7DQogICAgICByZXR1cm4gYWR2aXNvci5zZW5kIChfdmFsdWUpOw0KICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIC8qKg0KICAgKiBUZXJtaW5hdGUgYWNjb3VudCBhbmQgc2VuZCBhbGwgaXRzIGJhbGFuY2UgdG8gYWR2aXNvci4gIE1heSBvbmx5IGJlIGNhbGxlZA0KICAgKiBieSBhZHZpc29yIHdoZW4gY2FwaXRhbCBpcyB6ZXJvLg0KICAgKi8NCiAgZnVuY3Rpb24gdGVybWluYXRlICgpIHsNCiAgICBpZiAobXNnLnNlbmRlciAhPSBhZHZpc29yKSB0aHJvdzsNCg0KICAgIGlmIChjYXBpdGFsID4gMCkgdGhyb3c7DQogICAgaWYgKHRoaXMuYmFsYW5jZSA+IDApIHsNCiAgICAgIGlmICghYWR2aXNvci5zZW5kICh0aGlzLmJhbGFuY2UpKSB7DQogICAgICAgIC8vIElnbm9yZSBlcnJvcg0KICAgICAgfQ0KICAgIH0NCiAgICBzdWljaWRlIChhZHZpc29yKTsNCiAgfQ0KDQogIC8qKg0KICAgKiBVcGRhdGUgY2FwaXRhbCwgaS5lLiBjaGFyZ2UgZmVlIGZyb20gaXQuDQogICAqLw0KICBmdW5jdGlvbiB1cGRhdGVDYXBpdGFsICgpDQogIGludGVybmFsIHsNCiAgICBpZiAoY2FwaXRhbCA+IDAgJiYgY2FwaXRhbFRpbWVzdGFtcCA8IG5vdyAmJiBmZWVGYWN0b3IgPCBUV09fMTI4KSB7DQogICAgICBjYXBpdGFsID0gbXVsIChjYXBpdGFsLCBwb3cgKGZlZUZhY3Rvciwgbm93IC0gY2FwaXRhbFRpbWVzdGFtcCkpOw0KICAgIH0NCiAgICBjYXBpdGFsVGltZXN0YW1wID0gbm93Ow0KICB9DQoNCiAgLyoqDQogICAqIE11bHRpcGx5IF9hIGJ5IF9iIC8gMl4xMjguICBQYXJhbWV0ZXIgX2Egc2hvdWxkIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0bw0KICAgKiAyXjEyOCBhbmQgcGFyYW1ldGVyIF9iIHNob3VsZCBiZSBsZXNzIHRoYW4gMl4xMjguDQogICAqDQogICAqIEBwYXJhbSBfYSBsZWZ0IGFyZ3VtZW50DQogICAqIEBwYXJhbSBfYiByaWdodCBhcmd1bWVudA0KICAgKiBAcmV0dXJuIF9hICogX2IgLyAyXjEyOA0KICAgKi8NCiAgZnVuY3Rpb24gbXVsICh1aW50MjU2IF9hLCB1aW50MjU2IF9iKQ0KICBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9yZXN1bHQpIHsNCiAgICBpZiAoX2EgPiBUV09fMTI4KSB0aHJvdzsNCiAgICBpZiAoX2IgPj0gVFdPXzEyOCkgdGhyb3c7DQogICAgcmV0dXJuIChfYSAqIF9iICsgVFdPXzEyNykgPj4gMTI4Ow0KICB9DQoNCiAgLyoqDQogICAqIENhbGN1bGF0ZSAoX2EgLyAyXjEyOCleX2IgKiAyXjEyOC4gIFBhcmFtZXRlciBfYSBzaG91bGQgYmUgbGVzcyB0aGFuIDJeMTI4Lg0KICAgKg0KICAgKiBAcGFyYW0gX2EgbGVmdCBhcmd1bWVudA0KICAgKiBAcGFyYW0gX2IgcmlnaHQgYXJndW1lbnQNCiAgICogQHJldHVybiAoX2EgLyAyXjEyOCleX2IgKiAyXjEyOA0KICAgKi8NCiAgZnVuY3Rpb24gcG93ICh1aW50MjU2IF9hLCB1aW50MjU2IF9iKQ0KICBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9yZXN1bHQpIHsNCiAgICBpZiAoX2EgPj0gVFdPXzEyOCkgdGhyb3c7DQoNCiAgICBfcmVzdWx0ID0gVFdPXzEyODsNCiAgICB3aGlsZSAoX2IgPiAwKSB7DQogICAgICBpZiAoX2IgJiAxID09IDApIHsNCiAgICAgICAgX2EgPSBtdWwgKF9hLCBfYSk7DQogICAgICAgIF9iID4+PSAxOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgX3Jlc3VsdCA9IG11bCAoX3Jlc3VsdCwgX2EpOw0KICAgICAgICBfYiAtPSAxOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIC8qKg0KICAgKiBMb2dnZWQgd2hlbiBldGhlciB3YXMgZGVwb3NpdGVkIG9uIGNsaWVudCdzIGFjY291bnQuDQogICAqDQogICAqIEBwYXJhbSBmcm9tIGFkZHJlc3MgZXRoZXIgY2FtZSBmcm9tDQogICAqIEBwYXJhbSB2YWx1ZSBhbW91bnQgb2YgZXRoZXIgZGVwb3NpdGVkIChpbiBXZWkpDQogICAqLw0KICBldmVudCBEZXBvc2l0IChhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludDI1NiB2YWx1ZSk7DQoNCiAgLyoqDQogICAqIExvZ2dlZCB3aGVuIGV0aGVyIHdhcyB3aXRoZHJhd24gZnJvbSBjbGllbnQncyBhY2NvdW50Lg0KICAgKg0KICAgKiBAcGFyYW0gdmFsdWUgYW1vdW50IG9mIGV0aGVyIHdpdGhkcmF3biAoaW4gV2VpKQ0KICAgKi8NCiAgZXZlbnQgV2l0aGRyYXdhbCAodWludDI1NiB2YWx1ZSk7DQp9'