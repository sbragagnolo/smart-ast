base 64 content
base64dASToken2
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KIC8qIFJlY2VpdmVyIG11c3QgaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24gdG8gcmVjZWl2ZSB0b2tlbnMNCiAqICBvdGhlcndpc2UgdG9rZW4gdHJhbnNhY3Rpb24gd2lsbCBmYWlsDQogKi8NCiANCiBjb250cmFjdCBDb250cmFjdFJlY2VpdmVyIHsNCiAgICBmdW5jdGlvbiB0b2tlbkZhbGxiYWNrKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZGF0YSl7DQogICAgICBfZnJvbSA9IF9mcm9tOw0KICAgICAgX3ZhbHVlID0gX3ZhbHVlOw0KICAgICAgX2RhdGEgPSBfZGF0YTsNCiAgICAgIC8vIEluY29taW5nIHRyYW5zYWN0aW9uIGNvZGUgaGVyZQ0KICAgIH0NCn0NCiANCiAvKiBOZXcgRVJDMjMgY29udHJhY3QgaW50ZXJmYWNlICovDQoNCmNvbnRyYWN0IEVSQzIzIHsNCiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7DQogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOw0KDQogIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgX25hbWUpOw0KICBmdW5jdGlvbiBzeW1ib2woKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgX3N5bWJvbCk7DQogIGZ1bmN0aW9uIGRlY2ltYWxzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDggX2RlY2ltYWxzKTsNCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF9zdXBwbHkpOw0KDQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOw0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlLCBieXRlcyBkYXRhKSByZXR1cm5zIChib29sIG9rKTsNCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludDI1NiB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7DQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsNCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7DQogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUsIGJ5dGVzIGRhdGEpOw0KICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsNCn0NCg0KDQogLyoqDQogKiBFUkMyMyB0b2tlbiBieSBEZXhhcmFuDQogKg0KICogaHR0cHM6Ly9naXRodWIuY29tL0RleGFyYW4vRVJDMjMtdG9rZW5zDQogKi8NCiANCmNvbnRyYWN0IEVSQzIzVG9rZW4gaXMgRVJDMjMgew0KDQogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsNCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOw0KDQogIHN0cmluZyBwdWJsaWMgbmFtZTsNCiAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7DQogIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsNCiAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQoNCiAgLy8gRnVuY3Rpb24gdG8gYWNjZXNzIG5hbWUgb2YgdG9rZW4gLg0KICBmdW5jdGlvbiBuYW1lKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIF9uYW1lKSB7DQogICAgICByZXR1cm4gbmFtZTsNCiAgfQ0KICAvLyBGdW5jdGlvbiB0byBhY2Nlc3Mgc3ltYm9sIG9mIHRva2VuIC4NCiAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIF9zeW1ib2wpIHsNCiAgICAgIHJldHVybiBzeW1ib2w7DQogIH0NCiAgLy8gRnVuY3Rpb24gdG8gYWNjZXNzIGRlY2ltYWxzIG9mIHRva2VuIC4NCiAgZnVuY3Rpb24gZGVjaW1hbHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCBfZGVjaW1hbHMpIHsNCiAgICAgIHJldHVybiBkZWNpbWFsczsNCiAgfQ0KICAvLyBGdW5jdGlvbiB0byBhY2Nlc3MgdG90YWwgc3VwcGx5IG9mIHRva2VucyAuDQogIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBfdG90YWxTdXBwbHkpIHsNCiAgICAgIHJldHVybiB0b3RhbFN1cHBseTsNCiAgfQ0KDQogIC8vZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiBhIHVzZXIgb3IgYW5vdGhlciBjb250cmFjdCB3YW50cyB0byB0cmFuc2ZlciBmdW5kcw0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9kYXRhKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgDQogICAgLy9maWx0ZXJpbmcgaWYgdGhlIHRhcmdldCBpcyBhIGNvbnRyYWN0IHdpdGggYnl0ZWNvZGUgaW5zaWRlIGl0DQogICAgaWYoaXNDb250cmFjdChfdG8pKSB7DQogICAgICAgIHRyYW5zZmVyVG9Db250cmFjdChfdG8sIF92YWx1ZSwgX2RhdGEpOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgdHJhbnNmZXJUb0FkZHJlc3MoX3RvLCBfdmFsdWUsIF9kYXRhKTsNCiAgICB9DQogICAgcmV0dXJuIHRydWU7DQogIH0NCiAgDQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICANCiAgICAvL3N0YW5kYXJkIGZ1bmN0aW9uIHRyYW5zZmVyIHNpbWlsYXIgdG8gRVJDMjAgdHJhbnNmZXIgd2l0aCBubyBfZGF0YQ0KICAgIC8vYWRkZWQgZHVlIHRvIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnMNCiAgICBieXRlcyBtZW1vcnkgZW1wdHk7DQogICAgaWYoaXNDb250cmFjdChfdG8pKSB7DQogICAgICAgIHRyYW5zZmVyVG9Db250cmFjdChfdG8sIF92YWx1ZSwgZW1wdHkpOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgdHJhbnNmZXJUb0FkZHJlc3MoX3RvLCBfdmFsdWUsIGVtcHR5KTsNCiAgICB9DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICAvL2Z1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gdHJhbnNhY3Rpb24gdGFyZ2V0IGlzIGFuIGFkZHJlc3MNCiAgZnVuY3Rpb24gdHJhbnNmZXJUb0FkZHJlc3MoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHJpdmF0ZSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOw0KICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlLCBfZGF0YSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCiAgDQogIC8vZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0cmFuc2FjdGlvbiB0YXJnZXQgaXMgYSBjb250cmFjdA0KICBmdW5jdGlvbiB0cmFuc2ZlclRvQ29udHJhY3QoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHJpdmF0ZSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQogICAgQ29udHJhY3RSZWNlaXZlciByZWNpZXZlciA9IENvbnRyYWN0UmVjZWl2ZXIoX3RvKTsNCiAgICByZWNpZXZlci50b2tlbkZhbGxiYWNrKG1zZy5zZW5kZXIsIF92YWx1ZSwgX2RhdGEpOw0KICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX2RhdGEpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQogIA0KICAvL2Fzc2VtYmxlIHRoZSBnaXZlbiBhZGRyZXNzIGJ5dGVjb2RlLiBJZiBieXRlY29kZSBleGlzdHMgdGhlbiB0aGUgX2FkZHIgaXMgYSBjb250cmFjdC4NCiAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIF9hZGRyKSBwcml2YXRlIHJldHVybnMgKGJvb2wgaXNfY29udHJhY3QpIHsNCiAgICAgIF9hZGRyID0gX2FkZHI7DQogICAgICB1aW50MjU2IGxlbmd0aDsNCiAgICAgIGFzc2VtYmx5IHsNCiAgICAgICAgICAgIC8vcmV0cmlldmUgdGhlIHNpemUgb2YgdGhlIGNvZGUgb24gdGFyZ2V0IGFkZHJlc3MsIHRoaXMgbmVlZHMgYXNzZW1ibHkNCiAgICAgICAgICAgIGxlbmd0aCA6PSBleHRjb2Rlc2l6ZShfYWRkcikNCiAgICAgICAgfQ0KICAgICAgICBpZihsZW5ndGg+MCkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsNCiAgICANCiAgICBpZihfdmFsdWUgPiBfYWxsb3dhbmNlKSB7DQogICAgICAgIHRocm93Ow0KICAgIH0NCg0KICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7DQogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOw0KICB9DQoNCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7DQogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQogIH0NCn0NCg0KDQovLyBFUkMyMjMgdG9rZW4gd2l0aCB0aGUgYWJpbGl0eSBmb3IgdGhlIG93bmVyIHRvIGJsb2NrIGFueSBhY2NvdW50DQpjb250cmFjdCBEQVNUb2tlbiBpcyBFUkMyM1Rva2VuIHsNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIGJsb2NrZWRBY2NvdW50czsNCiAgICBhZGRyZXNzIHB1YmxpYyBzZWNyZXRhcnlHZW5lcmFsOw0KDQoNCiAgICAvLyBDb25zdHJ1Y3Rvcg0KICAgIGZ1bmN0aW9uIERBU1Rva2VuKA0KICAgICAgICAgICAgc3RyaW5nIF9uYW1lLA0KICAgICAgICAgICAgc3RyaW5nIF9zeW1ib2wsDQogICAgICAgICAgICB1aW50OCBfZGVjaW1hbHMsDQogICAgICAgICAgICB1aW50MjU2IF90b3RhbFN1cHBseSwNCiAgICAgICAgICAgIGFkZHJlc3MgX2luaXRpYWxUb2tlbnNIb2xkZXIpIHsNCiAgICAgICAgc2VjcmV0YXJ5R2VuZXJhbCA9IG1zZy5zZW5kZXI7DQogICAgICAgIG5hbWUgPSBfbmFtZTsNCiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsNCiAgICAgICAgZGVjaW1hbHMgPSBfZGVjaW1hbHM7DQogICAgICAgIHRvdGFsU3VwcGx5ID0gX3RvdGFsU3VwcGx5Ow0KICAgICAgICBiYWxhbmNlc1tfaW5pdGlhbFRva2Vuc0hvbGRlcl0gPSBfdG90YWxTdXBwbHk7DQogICAgfQ0KDQoNCiAgICBtb2RpZmllciBvbmx5U2VjcmV0YXJ5R2VuZXJhbCB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IHNlY3JldGFyeUdlbmVyYWwpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KDQogICAgLy8gYmxvY2sgYWNjb3VudA0KICAgIGZ1bmN0aW9uIGJsb2NrQWNjb3VudChhZGRyZXNzIF9hY2NvdW50KSBvbmx5U2VjcmV0YXJ5R2VuZXJhbCB7DQogICAgICAgIGJsb2NrZWRBY2NvdW50c1tfYWNjb3VudF0gPSB0cnVlOw0KICAgIH0NCg0KICAgIC8vIHVuYmxvY2sgYWNjb3VudA0KICAgIGZ1bmN0aW9uIHVuYmxvY2tBY2NvdW50KGFkZHJlc3MgX2FjY291bnQpIG9ubHlTZWNyZXRhcnlHZW5lcmFsIHsNCiAgICAgICAgYmxvY2tlZEFjY291bnRzW19hY2NvdW50XSA9IGZhbHNlOw0KICAgIH0NCg0KICAgIC8vIGNoZWNrIGlzIGFjY291bnQgYmxvY2tlZA0KICAgIGZ1bmN0aW9uIGlzQWNjb3VudEJsb2NrZWQoYWRkcmVzcyBfYWNjb3VudCkgcmV0dXJucyAoYm9vbCl7DQogICAgICAgIHJldHVybiBibG9ja2VkQWNjb3VudHNbX2FjY291bnRdOw0KICAgIH0NCg0KICAgIC8vIG92ZXJyaWRlIHRyYW5zZmVyIG1ldGhvZHMgdG8gdGhyb3cgb24gYmxvY2tlZCBhY2NvdW50cw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBpZiAoYmxvY2tlZEFjY291bnRzW21zZy5zZW5kZXJdKSB7DQogICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gRVJDMjNUb2tlbi50cmFuc2ZlcihfdG8sIF92YWx1ZSwgX2RhdGEpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChibG9ja2VkQWNjb3VudHNbbXNnLnNlbmRlcl0pIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIGJ5dGVzIG1lbW9yeSBlbXB0eTsNCiAgICAgICAgcmV0dXJuIEVSQzIzVG9rZW4udHJhbnNmZXIoX3RvLCBfdmFsdWUsIGVtcHR5KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgaWYgKGJsb2NrZWRBY2NvdW50c1tfZnJvbV0pIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIHJldHVybiBFUkMyM1Rva2VuLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgIH0NCn0='