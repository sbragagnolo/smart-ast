base 64 content
base64dDFToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KDQovKg0KICogT3duYWJsZQ0KICoNCiAqIEJhc2UgY29udHJhY3Qgd2l0aCBhbiBvd25lci4NCiAqIFByb3ZpZGVzIG9ubHlPd25lciBtb2RpZmllciwgd2hpY2ggcHJldmVudHMgZnVuY3Rpb24gZnJvbSBydW5uaW5nIGlmIGl0IGlzIGNhbGxlZCBieSBhbnlvbmUgb3RoZXIgdGhhbiB0aGUgb3duZXIuDQogKi8NCmNvbnRyYWN0IE93bmFibGUgew0KICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCg0KICBmdW5jdGlvbiBPd25hYmxlKCkgew0KICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgfQ0KDQogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsNCiAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgew0KICAgICAgdGhyb3c7DQogICAgfQ0KICAgIF87DQogIH0NCg0KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgew0KICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSB7DQogICAgICBvd25lciA9IG5ld093bmVyOw0KICAgIH0NCiAgfQ0KDQp9DQoNCi8qIHRha2luZyBpZGVhcyBmcm9tIEZpcnN0Qmxvb2QgdG9rZW4gKi8NCmNvbnRyYWN0IFNhZmVNYXRoIHsNCg0KICAgIC8qIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgeyAqLw0KICAgIC8qICAgaWYgKCFhc3NlcnRpb24pIHsgKi8NCiAgICAvKiAgICAgdGhyb3c7ICovDQogICAgLyogICB9ICovDQogICAgLyogfSAgICAgIC8vIGFzc2VydCBubyBsb25nZXIgbmVlZGVkIG9uY2Ugc29saWRpdHkgaXMgb24gMC40LjEwICovDQoNCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsNCiAgICAgIHVpbnQyNTYgeiA9IHggKyB5Ow0KICAgICAgYXNzZXJ0KCh6ID49IHgpICYmICh6ID49IHkpKTsNCiAgICAgIHJldHVybiB6Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNhZmVTdWJ0cmFjdCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7DQogICAgICBhc3NlcnQoeCA+PSB5KTsNCiAgICAgIHVpbnQyNTYgeiA9IHggLSB5Ow0KICAgICAgcmV0dXJuIHo7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2FmZU11bHQodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1Nikgew0KICAgICAgdWludDI1NiB6ID0geCAqIHk7DQogICAgICBhc3NlcnQoKHggPT0gMCl8fCh6L3ggPT0geSkpOw0KICAgICAgcmV0dXJuIHo7DQogICAgfQ0KDQp9DQoNCmNvbnRyYWN0IFRva2VuIHsNCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7DQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsNCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsNCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsNCn0NCg0KDQovKiAgRVJDIDIwIHRva2VuICovDQpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsNCg0KICBtb2RpZmllciBvbmx5UGF5bG9hZFNpemUodWludCBzaXplKSB7DQogICAgIGlmKG1zZy5kYXRhLmxlbmd0aCA8IHNpemUgKyA0KSB7DQogICAgICAgdGhyb3c7DQogICAgIH0NCiAgICAgXzsNCiAgfQ0KDQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7DQogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDMgKiAzMikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgew0KICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsNCiAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7DQogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCiAgICB9DQoNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsNCn0NCg0KY29udHJhY3Qgc3BsaXR0ZXJDb250cmFjdCBpcyBPd25hYmxlew0KDQogICAgZXZlbnQgZXYoc3RyaW5nIG1zZywgYWRkcmVzcyB3aG9tLCB1aW50MjU2IHZhbCk7DQoNCiAgICBzdHJ1Y3QgeFJlYyB7DQogICAgICAgIGJvb2wgaW5MaXN0Ow0KICAgICAgICBhZGRyZXNzIG5leHQ7DQogICAgICAgIGFkZHJlc3MgcHJldjsNCiAgICAgICAgdWludDI1NiB2YWw7DQogICAgfQ0KDQogICAgc3RydWN0IGw4ciB7DQogICAgICAgIGFkZHJlc3Mgd2hvbTsNCiAgICAgICAgdWludDI1NiB2YWw7DQogICAgfQ0KICAgIGFkZHJlc3MgcHVibGljIG15QWRkcmVzcyA9IHRoaXM7DQogICAgYWRkcmVzcyBwdWJsaWMgZmlyc3Q7DQogICAgYWRkcmVzcyBwdWJsaWMgbGFzdDsNCiAgICBhZGRyZXNzIHB1YmxpYyBkZGY7DQogICAgYm9vbCAgICBwdWJsaWMgdGhpbmtNb2RlOw0KICAgIHVpbnQyNTYgcHVibGljIHBvczsNCg0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4geFJlYykgcHVibGljIHRoZUxpc3Q7DQoNCiAgICBsOHJbXSAgYWZ0ZXJQYXJ0eTsNCg0KICAgIG1vZGlmaWVyIG9ubHlNZU9yRERGKCkgew0KICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBkZGYgfHwgbXNnLnNlbmRlciA9PSBteUFkZHJlc3MgfHwgbXNnLnNlbmRlciA9PSBvd25lcikgew0KICAgICAgICAgICAgXzsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldERERihhZGRyZXNzIGRkZl8pIG9ubHlPd25lciB7DQogICAgICAgIGRkZiA9IGRkZl87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc3BsaXR0ZXJDb250cmFjdChhZGRyZXNzIHNlZWQsIHVpbnQyNTYgc2VlZFZhbCkgew0KICAgICAgICBmaXJzdCA9IHNlZWQ7DQogICAgICAgIGxhc3QgPSBzZWVkOw0KICAgICAgICB0aGVMaXN0W3NlZWRdID0geFJlYyh0cnVlLDB4MCwweDAsc2VlZFZhbCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc3RhcnRUaGlua2luZygpIG9ubHlPd25lciB7DQogICAgICAgIHRoaW5rTW9kZSA9IHRydWU7DQogICAgICAgIHBvcyA9IDA7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc3RvcFRoaW5raW5nKHVpbnQyNTYgbnVtKSBvbmx5T3duZXIgew0KICAgICAgICB0aGlua01vZGUgPSBmYWxzZTsNCiAgICAgICAgZm9yICh1aW50MjU2IGkgPSAwOyBpIDwgbnVtOyBpKyspIHsNCiAgICAgICAgICAgIGlmIChwb3MgPj0gYWZ0ZXJQYXJ0eS5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICBkZWxldGUgYWZ0ZXJQYXJ0eTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICB1cGRhdGUoYWZ0ZXJQYXJ0eVtwb3NdLndob20sYWZ0ZXJQYXJ0eVtwb3NdLnZhbCk7DQogICAgICAgICAgICBwb3MrKzsNCiAgICAgICAgfQ0KICAgICAgICB0aGlua01vZGUgPSB0cnVlOw0KICAgIH0gDQoNCiAgICBmdW5jdGlvbiB0aGlua0xlbmd0aCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICAgICAgcmV0dXJuIGFmdGVyUGFydHkubGVuZ3RoOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFkZFJlYzRMOFIoYWRkcmVzcyB3aG9tLCB1aW50MjU2IHZhbCkgaW50ZXJuYWwgew0KICAgICAgICBhZnRlclBhcnR5LnB1c2gobDhyKHdob20sdmFsKSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYWRkKGFkZHJlc3Mgd2hvbSwgdWludDI1NiB2YWx1ZSkgaW50ZXJuYWwgew0KICAgICAgICB0aGVMaXN0W3dob21dID0geFJlYyh0cnVlLDB4MCxsYXN0LHZhbHVlKTsNCiAgICAgICAgdGhlTGlzdFtsYXN0XS5uZXh0ID0gd2hvbTsNCiAgICAgICAgbGFzdCA9IHdob207DQogICAgICAgIGV2KCJhZGQiLHdob20sdmFsdWUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbW92ZShhZGRyZXNzIHdob20pIGludGVybmFsIHsNCiAgICAgICAgaWYgKGZpcnN0ID09IHdob20pIHsNCiAgICAgICAgICAgIGZpcnN0ID0gdGhlTGlzdFt3aG9tXS5uZXh0Ow0KICAgICAgICAgICAgdGhlTGlzdFt3aG9tXSA9IHhSZWMoZmFsc2UsMHgwLDB4MCwwKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBhZGRyZXNzIG5leHQgPSB0aGVMaXN0W3dob21dLm5leHQ7DQogICAgICAgIGFkZHJlc3MgcHJldiA9IHRoZUxpc3Rbd2hvbV0ucHJldjsNCiAgICAgICAgaWYgKHByZXYgIT0gMHgwKSB7DQogICAgICAgICAgICB0aGVMaXN0W3ByZXZdLm5leHQgPSBuZXh0Ow0KICAgICAgICB9DQogICAgICAgIGlmIChuZXh0ICE9IDB4MCkgew0KICAgICAgICAgICAgdGhlTGlzdFtuZXh0XS5wcmV2ID0gcHJldjsNCiAgICAgICAgfQ0KICAgICAgICB0aGVMaXN0W3dob21dID0geFJlYyhmYWxzZSwweDAsMHgwLDApOw0KICAgICAgICBldigicmVtb3ZlIix3aG9tLDApOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVwZGF0ZShhZGRyZXNzIHdob20sIHVpbnQyNTYgdmFsdWUpIG9ubHlNZU9yRERGIHsNCiAgICAgICAgaWYgKHRoaW5rTW9kZSkgew0KICAgICAgICAgICAgYWRkUmVjNEw4Uih3aG9tLHZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAodmFsdWUgIT0gMCkgew0KICAgICAgICAgICAgaWYgKCF0aGVMaXN0W3dob21dLmluTGlzdCkgew0KICAgICAgICAgICAgICAgIGFkZCh3aG9tLHZhbHVlKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdGhlTGlzdFt3aG9tXS52YWwgPSB2YWx1ZTsNCiAgICAgICAgICAgICAgICBldigidXBkYXRlIix3aG9tLHZhbHVlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAodGhlTGlzdFt3aG9tXS5pbkxpc3QpIHsNCiAgICAgICAgICAgICAgICByZW1vdmUod2hvbSk7DQogICAgICAgIH0NCiAgICB9DQoNCn0NCg0KDQoNCmNvbnRyYWN0IERERlRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIFNhZmVNYXRoIHsNCg0KICAgIC8vIG1ldGFkYXRhDQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIkRpZ2l0YWwgRGV2ZWxvcGVycyBGdW5kIFRva2VuIjsNCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJEREYiOw0KICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7DQogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gIjEuMCI7DQoNCiAgICAvLyBjb250cmFjdHMNCiAgICBhZGRyZXNzIHB1YmxpYyBldGhGdW5kRGVwb3NpdDsgICAgICAvLyBkZXBvc2l0IGFkZHJlc3MgZm9yIEVUSCBmb3IgRG9tYWluIERldmVsb3BtZW50IEZ1bmQNCiAgICBhZGRyZXNzIHB1YmxpYyBkZGZ0RnVuZERlcG9zaXQ7ICAgICAvLyBkZXBvc2l0IGFkZHJlc3MgZm9yIERvbWFpbiBEZXZlbG9wbWVudCBGdW5kIHJlc2VydmUNCiAgICBhZGRyZXNzIHB1YmxpYyBzcGxpdHRlcjsgICAgICAgICAgLy8gREEgOC82LzIwMTcgLSBzcGxpdHRlciBjb250cmFjdA0KDQogICAgLy8gY3Jvd2RzYWxlIHBhcmFtZXRlcnMNCiAgICBib29sIHB1YmxpYyBpc0ZpbmFsaXplZDsgICAgICAgICAgICAgIC8vIHN3aXRjaGVkIHRvIHRydWUgaW4gb3BlcmF0aW9uYWwgc3RhdGUNCiAgICB1aW50MjU2IHB1YmxpYyBmdW5kaW5nU3RhcnRUaW1lOw0KICAgIHVpbnQyNTYgcHVibGljIGZ1bmRpbmdFbmRUaW1lOw0KICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IGRkZnRGdW5kID0gMjUgKiAoMTAqKjUpICogMTAqKmRlY2ltYWxzOyAgIC8vIDFtIERERlQgcmVzZXJ2ZWQgZm9yIERERiB1c2UNCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkV4Y2hhbmdlUmF0ZSA9IDEwMDA7ICAgICAgICAgICAgICAgLy8gMTAwMCBEREZUIHRva2VucyBwZXIgMSBFVEgNCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkNyZWF0aW9uQ2FwID0gIDI1MCAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7DQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5DcmVhdGlvbk1pbiA9ICAxICogKDEwKio2KSAqIDEwKipkZWNpbWFsczsNCg0KDQogICAgLy8gZXZlbnRzDQogICAgZXZlbnQgTG9nUmVmdW5kKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsNCiAgICBldmVudCBDcmVhdGVEREZUKGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsNCg0KICAgIC8vIGNvbnN0cnVjdG9yDQogICAgZnVuY3Rpb24gRERGVG9rZW4oDQogICAgICAgIGFkZHJlc3MgX2V0aEZ1bmREZXBvc2l0LA0KICAgICAgICBhZGRyZXNzIF9kZGZ0RnVuZERlcG9zaXQsDQogICAgICAgIGFkZHJlc3MgX3NwbGl0dGVyLCAvLyBEQSA4LzYvMjAxNw0KICAgICAgICB1aW50MjU2IF9mdW5kaW5nU3RhcnRUaW1lLA0KICAgICAgICB1aW50MjU2IGR1cmF0aW9uKQ0KICAgIHsNCiAgICAgIGlzRmluYWxpemVkID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgIC8vY29udHJvbHMgcHJlIHRocm91Z2ggY3Jvd2RzYWxlIHN0YXRlDQogICAgICBldGhGdW5kRGVwb3NpdCA9IF9ldGhGdW5kRGVwb3NpdDsNCiAgICAgIGRkZnRGdW5kRGVwb3NpdCA9IF9kZGZ0RnVuZERlcG9zaXQ7DQogICAgICBzcGxpdHRlciA9ICBfc3BsaXR0ZXIgOyAgICAgICAgICAgICAgICAgIC8vIERBIDgvNi8yMDE3DQogICAgICBmdW5kaW5nU3RhcnRUaW1lID0gX2Z1bmRpbmdTdGFydFRpbWU7DQogICAgICBmdW5kaW5nRW5kVGltZSA9IGZ1bmRpbmdTdGFydFRpbWUgKyBkdXJhdGlvbiAqIDEgZGF5czsNCiAgICAgIHRvdGFsU3VwcGx5ID0gZGRmdEZ1bmQ7DQogICAgICBiYWxhbmNlc1tkZGZ0RnVuZERlcG9zaXRdID0gZGRmdEZ1bmQ7ICAgIC8vIERlcG9zaXQgRERGIHNoYXJlDQogICAgICBDcmVhdGVEREZUKGRkZnRGdW5kRGVwb3NpdCwgZGRmdEZ1bmQpOyAgLy8gbG9ncyBEREYgZnVuZA0KICAgIH0NCg0KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgeyAgICAgICAgICAgLy8gREEgOC82LzIwMTcgcHJlZmVyIHRvIHVzZSBmYWxsYmFjayBmdW5jdGlvbg0KICAgICAgY3JlYXRlVG9rZW5zKG1zZy52YWx1ZSk7DQogICAgfQ0KDQogICAgLy8vIEBkZXYgQWNjZXB0cyBldGhlciBhbmQgY3JlYXRlcyBuZXcgRERGVCB0b2tlbnMuDQogICAgZnVuY3Rpb24gY3JlYXRlVG9rZW5zKHVpbnQyNTYgX3ZhbHVlKSAgaW50ZXJuYWwgew0KICAgICAgaWYgKGlzRmluYWxpemVkKSB0aHJvdzsNCiAgICAgIGlmIChub3cgPCBmdW5kaW5nU3RhcnRUaW1lKSB0aHJvdzsNCiAgICAgIGlmIChub3cgPiBmdW5kaW5nRW5kVGltZSkgdGhyb3c7DQogICAgICBpZiAobXNnLnZhbHVlID09IDApIHRocm93Ow0KDQogICAgICB1aW50MjU2IHRva2VucyA9IHNhZmVNdWx0KF92YWx1ZSwgdG9rZW5FeGNoYW5nZVJhdGUpOyAvLyBjaGVjayB0aGF0IHdlJ3JlIG5vdCBvdmVyIHRvdGFscw0KICAgICAgdWludDI1NiBjaGVja2VkU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG9rZW5zKTsNCg0KICAgICAgLy8gREEgOC82LzIwMTcgdG8gZmFpcmx5IGFsbG9jYXRlIHRoZSBsYXN0IGZldyB0b2tlbnMNCiAgICAgIGlmICh0b2tlbkNyZWF0aW9uQ2FwIDwgY2hlY2tlZFN1cHBseSkgew0KICAgICAgICBpZiAodG9rZW5DcmVhdGlvbkNhcCA8PSB0b3RhbFN1cHBseSkgdGhyb3c7ICAvLyBDQVAgcmVhY2hlZCBubyBtb3JlIHBsZWFzZQ0KICAgICAgICB1aW50MjU2IHRva2Vuc1RvQWxsb2NhdGUgPSBzYWZlU3VidHJhY3QodG9rZW5DcmVhdGlvbkNhcCx0b3RhbFN1cHBseSk7DQogICAgICAgIHVpbnQyNTYgdG9rZW5zVG9SZWZ1bmQgICA9IHNhZmVTdWJ0cmFjdCh0b2tlbnMsdG9rZW5zVG9BbGxvY2F0ZSk7DQogICAgICAgIHRvdGFsU3VwcGx5ID0gdG9rZW5DcmVhdGlvbkNhcDsNCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdG9rZW5zVG9BbGxvY2F0ZTsgIC8vIHNhZmVBZGQgbm90IG5lZWRlZDsgYmFkIHNlbWFudGljcyB0byB1c2UgaGVyZQ0KICAgICAgICB1aW50MjU2IGV0aGVyVG9SZWZ1bmQgPSB0b2tlbnNUb1JlZnVuZCAvIHRva2VuRXhjaGFuZ2VSYXRlOw0KICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGV0aGVyVG9SZWZ1bmQpOw0KICAgICAgICBDcmVhdGVEREZUKG1zZy5zZW5kZXIsIHRva2Vuc1RvQWxsb2NhdGUpOyAgLy8gbG9ncyB0b2tlbiBjcmVhdGlvbg0KICAgICAgICBMb2dSZWZ1bmQobXNnLnNlbmRlcixldGhlclRvUmVmdW5kKTsNCiAgICAgICAgc3BsaXR0ZXJDb250cmFjdChzcGxpdHRlcikudXBkYXRlKG1zZy5zZW5kZXIsYmFsYW5jZXNbbXNnLnNlbmRlcl0pOw0KICAgICAgICByZXR1cm47DQogICAgICB9DQogICAgICAvLyBEQSA4LzYvMjAxNyBlbmQgb2YgZmFpciBhbGxvY2F0aW9uIGNvZGUNCiAgICAgIHRvdGFsU3VwcGx5ID0gY2hlY2tlZFN1cHBseTsNCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IHRva2VuczsgIC8vIHNhZmVBZGQgbm90IG5lZWRlZDsgYmFkIHNlbWFudGljcyB0byB1c2UgaGVyZQ0KICAgICAgQ3JlYXRlRERGVChtc2cuc2VuZGVyLCB0b2tlbnMpOyAgLy8gbG9ncyB0b2tlbiBjcmVhdGlvbg0KICAgICAgc3BsaXR0ZXJDb250cmFjdChzcGxpdHRlcikudXBkYXRlKG1zZy5zZW5kZXIsYmFsYW5jZXNbbXNnLnNlbmRlcl0pOw0KICAgIH0NCg0KICAgIC8vLyBAZGV2IEVuZHMgdGhlIGZ1bmRpbmcgcGVyaW9kIGFuZCBzZW5kcyB0aGUgRVRIIGhvbWUNCiAgICBmdW5jdGlvbiBmaW5hbGl6ZSgpIGV4dGVybmFsIHsNCiAgICAgIGlmIChpc0ZpbmFsaXplZCkgdGhyb3c7DQogICAgICBpZiAobXNnLnNlbmRlciAhPSBldGhGdW5kRGVwb3NpdCkgdGhyb3c7IC8vIGxvY2tzIGZpbmFsaXplIHRvIHRoZSB1bHRpbWF0ZSBFVEggb3duZXINCiAgICAgIGlmKHRvdGFsU3VwcGx5IDwgdG9rZW5DcmVhdGlvbk1pbiArIGRkZnRGdW5kKSB0aHJvdzsgICAgICAvLyBoYXZlIHRvIHNlbGwgbWluaW11bSB0byBtb3ZlIHRvIG9wZXJhdGlvbmFsDQogICAgICBpZihub3cgPD0gZnVuZGluZ0VuZFRpbWUgJiYgdG90YWxTdXBwbHkgIT0gdG9rZW5DcmVhdGlvbkNhcCkgdGhyb3c7DQogICAgICAvLyBtb3ZlIHRvIG9wZXJhdGlvbmFsDQogICAgICBpc0ZpbmFsaXplZCA9IHRydWU7DQogICAgICAvLyBEQSA4LzYvMjAxNyBjaGFuZ2Ugc2VuZC90aHJvdyB0byB0cmFuc2Zlcg0KICAgICAgZXRoRnVuZERlcG9zaXQudHJhbnNmZXIodGhpcy5iYWxhbmNlKTsgIC8vIHNlbmQgdGhlIGV0aCB0byBEREYNCiAgICB9DQoNCiAgICAvLy8gQGRldiBBbGxvd3MgY29udHJpYnV0b3JzIHRvIHJlY292ZXIgdGhlaXIgZXRoZXIgaW4gdGhlIGNhc2Ugb2YgYSBmYWlsZWQgZnVuZGluZyBjYW1wYWlnbi4NCiAgICBmdW5jdGlvbiByZWZ1bmQoKSBleHRlcm5hbCB7DQogICAgICBpZihpc0ZpbmFsaXplZCkgdGhyb3c7ICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmV2ZW50cyByZWZ1bmQgaWYgb3BlcmF0aW9uYWwNCiAgICAgIGlmIChub3cgPD0gZnVuZGluZ0VuZFRpbWUpIHRocm93OyAvLyBwcmV2ZW50cyByZWZ1bmQgdW50aWwgc2FsZSBwZXJpb2QgaXMgb3Zlcg0KICAgICAgaWYodG90YWxTdXBwbHkgPj0gdG9rZW5DcmVhdGlvbk1pbiArIGRkZnRGdW5kKSB0aHJvdzsgIC8vIG5vIHJlZnVuZHMgaWYgd2Ugc29sZCBlbm91Z2gNCiAgICAgIGlmKG1zZy5zZW5kZXIgPT0gZGRmdEZ1bmREZXBvc2l0KSB0aHJvdzsgICAgLy8gRERGIG5vdCBlbnRpdGxlZCB0byBhIHJlZnVuZA0KICAgICAgdWludDI1NiBkZGZ0VmFsID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07DQogICAgICBpZiAoZGRmdFZhbCA9PSAwKSB0aHJvdzsNCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsNCiAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZVN1YnRyYWN0KHRvdGFsU3VwcGx5LCBkZGZ0VmFsKTsgLy8gZXh0cmEgc2FmZQ0KICAgICAgdWludDI1NiBldGhWYWwgPSBkZGZ0VmFsIC8gdG9rZW5FeGNoYW5nZVJhdGU7ICAgICAvLyBzaG91bGQgYmUgc2FmZTsgcHJldmlvdXMgdGhyb3dzIGNvdmVycyBlZGdlcw0KICAgICAgTG9nUmVmdW5kKG1zZy5zZW5kZXIsIGV0aFZhbCk7ICAgICAgICAgICAgICAgLy8gbG9nIGl0IA0KICAgICAgLy8gREEgOC82LzIwMTcgY2hhbmdlIHNlbmQvdGhyb3cgdG8gdHJhbnNmZXINCiAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoZXRoVmFsKTsgICAgICAgICAgICAgICAgIC8vIGlmIHlvdSdyZSB1c2luZyBhIGNvbnRyYWN0OyBtYWtlIHN1cmUgaXQgd29ya3Mgd2l0aCAuc2VuZCBnYXMgbGltaXRzDQogICAgfQ0KDQogICAgLy8gREEgOC82LzIwMTcNCiAgICAvLy8gQGRldiBVcGRhdGVzIHNwbGl0dGVyIGNvbnRyYWN0IHdpdGggb3duZXJzaGlwIGNoYW5nZXMNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2VzcykgIHsNCiAgICAgIHN1Y2Nlc3MgPSBzdXBlci50cmFuc2ZlcihfdG8sX3ZhbHVlKTsNCiAgICAgIHNwbGl0dGVyQ29udHJhY3Qgc2MgPSBzcGxpdHRlckNvbnRyYWN0KHNwbGl0dGVyKTsNCiAgICAgIHNjLnVwZGF0ZShtc2cuc2VuZGVyLGJhbGFuY2VzW21zZy5zZW5kZXJdKTsNCiAgICAgIHNjLnVwZGF0ZShfdG8sYmFsYW5jZXNbX3RvXSk7DQogICAgICByZXR1cm47DQogICAgfQ0KDQp9'