base 64 content
base64defaultFinalizeAgent
	^'LyoqDQogKiBTYWZlIHVuc2lnbmVkIHNhZmUgbWF0aC4NCiAqDQogKiBodHRwczovL2Jsb2cuYXJhZ29uLm9uZS9saWJyYXJ5LWRyaXZlbi1kZXZlbG9wbWVudC1pbi1zb2xpZGl0eS0yYmViY2FmODg3MzYjLjc1MGd3dHdsaQ0KICoNCiAqIE9yaWdpbmFsbHkgZnJvbSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQXJhZ29uT25lL3plcHBlbGluLXNvbGlkaXR5L21hc3Rlci9jb250cmFjdHMvU2FmZU1hdGhMaWIuc29sDQogKg0KICogTWFpbnRhaW5lZCBoZXJlIHVudGlsIG1lcmdlZCB0byBtYWlubGluZSB6ZXBwZWxpbi1zb2xpZGl0eS4NCiAqDQogKi8NCmxpYnJhcnkgU2FmZU1hdGhMaWIgew0KDQogIGZ1bmN0aW9uIHRpbWVzKHVpbnQgYSwgdWludCBiKSByZXR1cm5zICh1aW50KSB7DQogICAgdWludCBjID0gYSAqIGI7DQogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KDQogIGZ1bmN0aW9uIG1pbnVzKHVpbnQgYSwgdWludCBiKSByZXR1cm5zICh1aW50KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQoNCiAgZnVuY3Rpb24gcGx1cyh1aW50IGEsIHVpbnQgYikgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKyBiOw0KICAgIGFzc2VydChjPj1hKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgcHJpdmF0ZSB7DQogICAgaWYgKCFhc3NlcnRpb24pIHRocm93Ow0KICB9DQp9DQoNCg0KDQoNCi8qDQogKiBPd25hYmxlDQogKg0KICogQmFzZSBjb250cmFjdCB3aXRoIGFuIG93bmVyLg0KICogUHJvdmlkZXMgb25seU93bmVyIG1vZGlmaWVyLCB3aGljaCBwcmV2ZW50cyBmdW5jdGlvbiBmcm9tIHJ1bm5pbmcgaWYgaXQgaXMgY2FsbGVkIGJ5IGFueW9uZSBvdGhlciB0aGFuIHRoZSBvd25lci4NCiAqLw0KY29udHJhY3QgT3duYWJsZSB7DQogIGFkZHJlc3MgcHVibGljIG93bmVyOw0KDQogIGZ1bmN0aW9uIE93bmFibGUoKSB7DQogICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICB9DQoNCiAgbW9kaWZpZXIgb25seU93bmVyKCkgew0KICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7DQogICAgICB0aHJvdzsNCiAgICB9DQogICAgXzsNCiAgfQ0KDQogIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7DQogICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsNCiAgICAgIG93bmVyID0gbmV3T3duZXI7DQogICAgfQ0KICB9DQoNCn0NCg0KDQovKg0KICogSGFsdGFibGUNCiAqDQogKiBBYnN0cmFjdCBjb250cmFjdCB0aGF0IGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgYW4NCiAqIGVtZXJnZW5jeSBzdG9wIG1lY2hhbmlzbS4gRGlmZmVycyBmcm9tIFBhdXNhYmxlIGJ5IGNhdXNpbmcgYSB0aHJvdyB3aGVuIGluIGhhbHQgbW9kZS4NCiAqDQogKg0KICogT3JpZ2luYWxseSBlbnZpc2lvbmVkIGluIEZpcnN0Qmxvb2QgSUNPIGNvbnRyYWN0Lg0KICovDQpjb250cmFjdCBIYWx0YWJsZSBpcyBPd25hYmxlIHsNCiAgYm9vbCBwdWJsaWMgaGFsdGVkOw0KDQogIG1vZGlmaWVyIHN0b3BJbkVtZXJnZW5jeSB7DQogICAgaWYgKGhhbHRlZCkgdGhyb3c7DQogICAgXzsNCiAgfQ0KDQogIG1vZGlmaWVyIG9ubHlJbkVtZXJnZW5jeSB7DQogICAgaWYgKCFoYWx0ZWQpIHRocm93Ow0KICAgIF87DQogIH0NCg0KICAvLyBjYWxsZWQgYnkgdGhlIG93bmVyIG9uIGVtZXJnZW5jeSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQ0KICBmdW5jdGlvbiBoYWx0KCkgZXh0ZXJuYWwgb25seU93bmVyIHsNCiAgICBoYWx0ZWQgPSB0cnVlOw0KICB9DQoNCiAgLy8gY2FsbGVkIGJ5IHRoZSBvd25lciBvbiBlbmQgb2YgZW1lcmdlbmN5LCByZXR1cm5zIHRvIG5vcm1hbCBzdGF0ZQ0KICBmdW5jdGlvbiB1bmhhbHQoKSBleHRlcm5hbCBvbmx5T3duZXIgb25seUluRW1lcmdlbmN5IHsNCiAgICBoYWx0ZWQgPSBmYWxzZTsNCiAgfQ0KDQp9DQoNCg0KLyoqDQogKiBJbnRlcmZhY2UgZm9yIGRlZmluaW5nIGNyb3dkc2FsZSBwcmljaW5nLg0KICovDQpjb250cmFjdCBQcmljaW5nU3RyYXRlZ3kgew0KDQogIC8qKiBJbnRlcmZhY2UgZGVjbGFyYXRpb24uICovDQogIGZ1bmN0aW9uIGlzUHJpY2luZ1N0cmF0ZWd5KCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsNCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIC8qKiBTZWxmIGNoZWNrIGlmIGFsbCByZWZlcmVuY2VzIGFyZSBjb3JyZWN0bHkgc2V0Lg0KICAgKg0KICAgKiBDaGVja3MgdGhhdCBwcmljaW5nIHN0cmF0ZWd5IG1hdGNoZXMgY3Jvd2RzYWxlIHBhcmFtZXRlcnMuDQogICAqLw0KICBmdW5jdGlvbiBpc1NhbmUoYWRkcmVzcyBjcm93ZHNhbGUpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sKSB7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICAvKioNCiAgICogV2hlbiBzb21lYm9keSB0cmllcyB0byBidXkgdG9rZW5zIGZvciBYIGV0aCwgY2FsY3VsYXRlIGhvdyBtYW55IHRva2VucyB0aGV5IGdldC4NCiAgICoNCiAgICoNCiAgICogQHBhcmFtIHZhbHVlIC0gV2hhdCBpcyB0aGUgdmFsdWUgb2YgdGhlIHRyYW5zYWN0aW9uIHNlbmQgaW4gYXMgd2VpDQogICAqIEBwYXJhbSB0b2tlbnNTb2xkIC0gaG93IG11Y2ggdG9rZW5zIGhhdmUgYmVlbiBzb2xkIHRoaXMgZmFyDQogICAqIEBwYXJhbSB3ZWlSYWlzZWQgLSBob3cgbXVjaCBtb25leSBoYXMgYmVlbiByYWlzZWQgdGhpcyBmYXINCiAgICogQHBhcmFtIG1zZ1NlbmRlciAtIHdobyBpcyB0aGUgaW52ZXN0b3Igb2YgdGhpcyB0cmFuc2FjdGlvbg0KICAgKiBAcGFyYW0gZGVjaW1hbHMgLSBob3cgbWFueSBkZWNpbWFsIHVuaXRzIHRoZSB0b2tlbiBoYXMNCiAgICogQHJldHVybiBBbW91bnQgb2YgdG9rZW5zIHRoZSBpbnZlc3RvciByZWNlaXZlcw0KICAgKi8NCiAgZnVuY3Rpb24gY2FsY3VsYXRlUHJpY2UodWludCB2YWx1ZSwgdWludCB3ZWlSYWlzZWQsIHVpbnQgdG9rZW5zU29sZCwgYWRkcmVzcyBtc2dTZW5kZXIsIHVpbnQgZGVjaW1hbHMpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50IHRva2VuQW1vdW50KTsNCn0NCg0KDQovKioNCiAqIEZpbmFsaXplIGFnZW50IGRlZmluZXMgd2hhdCBoYXBwZW5zIGF0IHRoZSBlbmQgb2Ygc3VjY2VzZWZ1bCBjcm93ZHNhbGUuDQogKg0KICogLSBBbGxvY2F0ZSB0b2tlbnMgZm9yIGZvdW5kZXJzLCBib3VudGllcyBhbmQgY29tbXVuaXR5DQogKiAtIE1ha2UgdG9rZW5zIHRyYW5zZmVyYWJsZQ0KICogLSBldGMuDQogKi8NCmNvbnRyYWN0IEZpbmFsaXplQWdlbnQgew0KDQogIGZ1bmN0aW9uIGlzRmluYWxpemVBZ2VudCgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zKGJvb2wpIHsNCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIC8qKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBjYW4gcnVuIGZpbmFsaXplQ3Jvd2RzYWxlKCkgcHJvcGVybHkuDQogICAqDQogICAqIFRoaXMgaXMgYSBzYWZldHkgY2hlY2sgZnVuY3Rpb24gdGhhdCBkb2Vzbid0IGFsbG93IGNyb3dkc2FsZSB0byBiZWdpbg0KICAgKiB1bmxlc3MgdGhlIGZpbmFsaXplciBoYXMgYmVlbiBzZXQgdXAgcHJvcGVybHkuDQogICAqLw0KICBmdW5jdGlvbiBpc1NhbmUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCk7DQoNCiAgLyoqIENhbGxlZCBvbmNlIGJ5IGNyb3dkc2FsZSBmaW5hbGl6ZSgpIGlmIHRoZSBzYWxlIHdhcyBzdWNjZXNzLiAqLw0KICBmdW5jdGlvbiBmaW5hbGl6ZUNyb3dkc2FsZSgpOw0KDQp9DQoNCg0KDQoNCi8qDQogKiBFUkMyMCBpbnRlcmZhY2UNCiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjANCiAqLw0KY29udHJhY3QgRVJDMjAgew0KICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseTsNCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3Mgd2hvKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsNCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7DQoNCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7DQogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOw0KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7DQogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOw0KICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHZhbHVlKTsNCn0NCg0KDQovKioNCiAqIEEgdG9rZW4gdGhhdCBkZWZpbmVzIGZyYWN0aW9uYWwgdW5pdHMgYXMgZGVjaW1hbHMuDQogKi8NCmNvbnRyYWN0IEZyYWN0aW9uYWxFUkMyMCBpcyBFUkMyMCB7DQoNCiAgdWludCBwdWJsaWMgZGVjaW1hbHM7DQoNCn0NCg0KDQoNCi8qKg0KICogQWJzdHJhY3QgYmFzZSBjb250cmFjdCBmb3IgdG9rZW4gc2FsZXMuDQogKg0KICogSGFuZGxlDQogKiAtIHN0YXJ0IGFuZCBlbmQgZGF0ZXMNCiAqIC0gYWNjZXB0aW5nIGludmVzdG1lbnRzDQogKiAtIG1pbmltdW0gZnVuZGluZyBnb2FsIGFuZCByZWZ1bmQNCiAqIC0gdmFyaW91cyBzdGF0aXN0aWNzIGR1cmluZyB0aGUgY3Jvd2RmdW5kDQogKiAtIGRpZmZlcmVudCBwcmljaW5nIHN0cmF0ZWdpZXMNCiAqIC0gZGlmZmVyZW50IGludmVzdG1lbnQgcG9saWNpZXMgKHJlcXVpcmUgc2VydmVyIHNpZGUgY3VzdG9tZXIgaWQsIGFsbG93IG9ubHkgd2hpdGVsaXN0ZWQgYWRkcmVzc2VzKQ0KICoNCiAqLw0KY29udHJhY3QgQ3Jvd2RzYWxlIGlzIEhhbHRhYmxlIHsNCg0KICAvKiBNYXggaW52ZXN0bWVudCBjb3VudCB3aGVuIHdlIGFyZSBzdGlsbCBhbGxvd2VkIHRvIGNoYW5nZSB0aGUgbXVsdGlzaWcgYWRkcmVzcyAqLw0KICB1aW50IHB1YmxpYyBNQVhfSU5WRVNUTUVOVFNfQkVGT1JFX01VTFRJU0lHX0NIQU5HRSA9IDU7DQoNCiAgdXNpbmcgU2FmZU1hdGhMaWIgZm9yIHVpbnQ7DQoNCiAgLyogVGhlIHRva2VuIHdlIGFyZSBzZWxsaW5nICovDQogIEZyYWN0aW9uYWxFUkMyMCBwdWJsaWMgdG9rZW47DQoNCiAgLyogSG93IHdlIGFyZSBnb2luZyB0byBwcmljZSBvdXIgb2ZmZXJpbmcgKi8NCiAgUHJpY2luZ1N0cmF0ZWd5IHB1YmxpYyBwcmljaW5nU3RyYXRlZ3k7DQoNCiAgLyogUG9zdC1zdWNjZXNzIGNhbGxiYWNrICovDQogIEZpbmFsaXplQWdlbnQgcHVibGljIGZpbmFsaXplQWdlbnQ7DQoNCiAgLyogdG9rZW5zIHdpbGwgYmUgdHJhbnNmZXJlZCBmcm9tIHRoaXMgYWRkcmVzcyAqLw0KICBhZGRyZXNzIHB1YmxpYyBtdWx0aXNpZ1dhbGxldDsNCg0KICAvKiBpZiB0aGUgZnVuZGluZyBnb2FsIGlzIG5vdCByZWFjaGVkLCBpbnZlc3RvcnMgbWF5IHdpdGhkcmF3IHRoZWlyIGZ1bmRzICovDQogIHVpbnQgcHVibGljIG1pbmltdW1GdW5kaW5nR29hbDsNCg0KICAvKiB0aGUgVU5JWCB0aW1lc3RhbXAgc3RhcnQgZGF0ZSBvZiB0aGUgY3Jvd2RzYWxlICovDQogIHVpbnQgcHVibGljIHN0YXJ0c0F0Ow0KDQogIC8qIHRoZSBVTklYIHRpbWVzdGFtcCBlbmQgZGF0ZSBvZiB0aGUgY3Jvd2RzYWxlICovDQogIHVpbnQgcHVibGljIGVuZHNBdDsNCg0KICAvKiB0aGUgbnVtYmVyIG9mIHRva2VucyBhbHJlYWR5IHNvbGQgdGhyb3VnaCB0aGlzIGNvbnRyYWN0Ki8NCiAgdWludCBwdWJsaWMgdG9rZW5zU29sZCA9IDA7DQoNCiAgLyogSG93IG1hbnkgd2VpIG9mIGZ1bmRpbmcgd2UgaGF2ZSByYWlzZWQgKi8NCiAgdWludCBwdWJsaWMgd2VpUmFpc2VkID0gMDsNCg0KICAvKiBIb3cgbWFueSBkaXN0aW5jdCBhZGRyZXNzZXMgaGF2ZSBpbnZlc3RlZCAqLw0KICB1aW50IHB1YmxpYyBpbnZlc3RvckNvdW50ID0gMDsNCg0KICAvKiBIb3cgbXVjaCB3ZWkgd2UgaGF2ZSByZXR1cm5lZCBiYWNrIHRvIHRoZSBjb250cmFjdCBhZnRlciBhIGZhaWxlZCBjcm93ZGZ1bmQuICovDQogIHVpbnQgcHVibGljIGxvYWRlZFJlZnVuZCA9IDA7DQoNCiAgLyogSG93IG11Y2ggd2VpIHdlIGhhdmUgZ2l2ZW4gYmFjayB0byBpbnZlc3RvcnMuKi8NCiAgdWludCBwdWJsaWMgd2VpUmVmdW5kZWQgPSAwOw0KDQogIC8qIEhhcyB0aGlzIGNyb3dkc2FsZSBiZWVuIGZpbmFsaXplZCAqLw0KICBib29sIHB1YmxpYyBmaW5hbGl6ZWQ7DQoNCiAgLyogRG8gd2UgbmVlZCB0byBoYXZlIHVuaXF1ZSBjb250cmlidXRvciBpZCBmb3IgZWFjaCBjdXN0b21lciAqLw0KICBib29sIHB1YmxpYyByZXF1aXJlQ3VzdG9tZXJJZCA9IGZhbHNlOw0KDQogIC8qKg0KICAgICogRG8gd2UgdmVyaWZ5IHRoYXQgY29udHJpYnV0b3IgaGFzIGJlZW4gY2xlYXJlZCBvbiB0aGUgc2VydmVyIHNpZGUgKGFjY3JlZGl0ZWQgaW52ZXN0b3JzIG9ubHkpLg0KICAgICogVGhpcyBtZXRob2Qgd2FzIGZpcnN0IHVzZWQgaW4gRmlyc3RCbG9vZCBjcm93ZHNhbGUgdG8gZW5zdXJlIGFsbCBjb250cmlidXRvcnMgaGF2ZSBhY2NlcHRlZCB0ZXJtcyBvbiBzYWxlIChvbiB0aGUgd2ViKS4NCiAgICAqLw0KICBib29sIHB1YmxpYyByZXF1aXJlZFNpZ25lZEFkZHJlc3MgPSBmYWxzZTsNCg0KICAvKiBTZXJ2ZXIgc2lkZSBhZGRyZXNzIHRoYXQgc2lnbmVkIGFsbG93ZWQgY29udHJpYnV0b3JzIChFdGhlcmV1bSBhZGRyZXNzZXMpIHRoYXQgY2FuIHBhcnRpY2lwYXRlIHRoZSBjcm93ZHNhbGUgKi8NCiAgYWRkcmVzcyBwdWJsaWMgc2lnbmVyQWRkcmVzczsNCg0KICAvKiogSG93IG11Y2ggRVRIIGVhY2ggYWRkcmVzcyBoYXMgaW52ZXN0ZWQgdG8gdGhpcyBjcm93ZHNhbGUgKi8NCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgaW52ZXN0ZWRBbW91bnRPZjsNCg0KICAvKiogSG93IG11Y2ggdG9rZW5zIHRoaXMgY3Jvd2RzYWxlIGhhcyBjcmVkaXRlZCBmb3IgZWFjaCBpbnZlc3RvciBhZGRyZXNzICovDQogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIHRva2VuQW1vdW50T2Y7DQoNCiAgLyoqIEFkZHJlc3NlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIGludmVzdCBldmVuIGJlZm9yZSBJQ08gb2ZmaWNhbCBvcGVucy4gRm9yIHRlc3RpbmcsIGZvciBJQ08gcGFydG5lcnMsIGV0Yy4gKi8NCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZWFybHlQYXJ0aWNpcGFudFdoaXRlbGlzdDsNCg0KICAvKiogVGhpcyBpcyBmb3IgbWFudWwgdGVzdGluZyBmb3IgdGhlIGludGVyYWN0aW9uIGZyb20gb3duZXIgd2FsbGV0LiBZb3UgY2FuIHNldCBpdCB0byBhbnkgdmFsdWUgYW5kIGluc3BlY3QgdGhpcyBpbiBibG9ja2NoYWluIGV4cGxvcmVyIHRvIHNlZSB0aGF0IGNyb3dkc2FsZSBpbnRlcmFjdGlvbiB3b3Jrcy4gKi8NCiAgdWludCBwdWJsaWMgb3duZXJUZXN0VmFsdWU7DQoNCiAgLyoqIFN0YXRlIG1hY2hpbmUNCiAgICoNCiAgICogLSBQcmVwYXJpbmc6IEFsbCBjb250cmFjdCBpbml0aWFsaXphdGlvbiBjYWxscyBhbmQgdmFyaWFibGVzIGhhdmUgbm90IGJlZW4gc2V0IHlldA0KICAgKiAtIFByZWZ1bmRpbmc6IFdlIGhhdmUgbm90IHBhc3NlZCBzdGFydCB0aW1lIHlldA0KICAgKiAtIEZ1bmRpbmc6IEFjdGl2ZSBjcm93ZHNhbGUNCiAgICogLSBTdWNjZXNzOiBNaW5pbXVtIGZ1bmRpbmcgZ29hbCByZWFjaGVkDQogICAqIC0gRmFpbHVyZTogTWluaW11bSBmdW5kaW5nIGdvYWwgbm90IHJlYWNoZWQgYmVmb3JlIGVuZGluZyB0aW1lDQogICAqIC0gRmluYWxpemVkOiBUaGUgZmluYWxpemVkIGhhcyBiZWVuIGNhbGxlZCBhbmQgc3VjY2VzZnVsbHkgZXhlY3V0ZWQNCiAgICogLSBSZWZ1bmRpbmc6IFJlZnVuZHMgYXJlIGxvYWRlZCBvbiB0aGUgY29udHJhY3QgZm9yIHJlY2xhaW0uDQogICAqLw0KICBlbnVtIFN0YXRle1Vua25vd24sIFByZXBhcmluZywgUHJlRnVuZGluZywgRnVuZGluZywgU3VjY2VzcywgRmFpbHVyZSwgRmluYWxpemVkLCBSZWZ1bmRpbmd9DQoNCiAgLy8gQSBuZXcgaW52ZXN0bWVudCB3YXMgbWFkZQ0KICBldmVudCBJbnZlc3RlZChhZGRyZXNzIGludmVzdG9yLCB1aW50IHdlaUFtb3VudCwgdWludCB0b2tlbkFtb3VudCwgdWludDEyOCBjdXN0b21lcklkKTsNCg0KICAvLyBSZWZ1bmQgd2FzIHByb2Nlc3NlZCBmb3IgYSBjb250cmlidXRvcg0KICBldmVudCBSZWZ1bmQoYWRkcmVzcyBpbnZlc3RvciwgdWludCB3ZWlBbW91bnQpOw0KDQogIC8vIFRoZSBydWxlcyB3ZXJlIGNoYW5nZWQgd2hhdCBraW5kIG9mIGludmVzdG1lbnRzIHdlIGFjY2VwdA0KICBldmVudCBJbnZlc3RtZW50UG9saWN5Q2hhbmdlZChib29sIHJlcXVpcmVDdXN0b21lcklkLCBib29sIHJlcXVpcmVkU2lnbmVkQWRkcmVzcywgYWRkcmVzcyBzaWduZXJBZGRyZXNzKTsNCg0KICAvLyBBZGRyZXNzIGVhcmx5IHBhcnRpY2lwYXRpb24gd2hpdGVsaXN0IHN0YXR1cyBjaGFuZ2VkDQogIGV2ZW50IFdoaXRlbGlzdGVkKGFkZHJlc3MgYWRkciwgYm9vbCBzdGF0dXMpOw0KDQogIC8vIENyb3dkc2FsZSBzdGFydC9lbmQgdGltZSBoYXMgYmVlbiBjaGFuZ2VkDQogIGV2ZW50IEVuZHNBdENoYW5nZWQodWludCBlbmRzQXQpOw0KICBldmVudCBTdGFydHNBdENoYW5nZWQodWludCBzdGFydHNBdCk7DQoNCiAgZnVuY3Rpb24gQ3Jvd2RzYWxlKGFkZHJlc3MgX3Rva2VuLCBQcmljaW5nU3RyYXRlZ3kgX3ByaWNpbmdTdHJhdGVneSwgYWRkcmVzcyBfbXVsdGlzaWdXYWxsZXQsIHVpbnQgX3N0YXJ0LCB1aW50IF9lbmQsIHVpbnQgX21pbmltdW1GdW5kaW5nR29hbCkgew0KDQogICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KDQogICAgdG9rZW4gPSBGcmFjdGlvbmFsRVJDMjAoX3Rva2VuKTsNCg0KICAgIHNldFByaWNpbmdTdHJhdGVneShfcHJpY2luZ1N0cmF0ZWd5KTsNCg0KICAgIG11bHRpc2lnV2FsbGV0ID0gX211bHRpc2lnV2FsbGV0Ow0KICAgIGlmKG11bHRpc2lnV2FsbGV0ID09IDApIHsNCiAgICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgaWYoX3N0YXJ0ID09IDApIHsNCiAgICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgc3RhcnRzQXQgPSBfc3RhcnQ7DQoNCiAgICBpZihfZW5kID09IDApIHsNCiAgICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgZW5kc0F0ID0gX2VuZDsNCg0KICAgIC8vIERvbid0IG1lc3MgdGhlIGRhdGVzDQogICAgaWYoc3RhcnRzQXQgPj0gZW5kc0F0KSB7DQogICAgICAgIHRocm93Ow0KICAgIH0NCg0KICAgIC8vIE1pbmltdW0gZnVuZGluZyBnb2FsIGNhbiBiZSB6ZXJvDQogICAgbWluaW11bUZ1bmRpbmdHb2FsID0gX21pbmltdW1GdW5kaW5nR29hbDsNCiAgfQ0KDQogIC8qKg0KICAgKiBEb24ndCBleHBlY3QgdG8ganVzdCBzZW5kIGluIG1vbmV5IGFuZCBnZXQgdG9rZW5zLg0KICAgKi8NCiAgZnVuY3Rpb24oKSBwYXlhYmxlIHsNCiAgICB0aHJvdzsNCiAgfQ0KDQogIC8qKg0KICAgKiBNYWtlIGFuIGludmVzdG1lbnQuDQogICAqDQogICAqIENyb3dkc2FsZSBtdXN0IGJlIHJ1bm5pbmcgZm9yIG9uZSB0byBpbnZlc3QuDQogICAqIFdlIG11c3QgaGF2ZSBub3QgcHJlc3NlZCB0aGUgZW1lcmdlbmN5IGJyYWtlLg0KICAgKg0KICAgKiBAcGFyYW0gcmVjZWl2ZXIgVGhlIEV0aGVyZXVtIGFkZHJlc3Mgd2hvIHJlY2VpdmVzIHRoZSB0b2tlbnMNCiAgICogQHBhcmFtIGN1c3RvbWVySWQgKG9wdGlvbmFsKSBVVUlEIHY0IHRvIHRyYWNrIHRoZSBzdWNjZXNzZnVsIHBheW1lbnRzIG9uIHRoZSBzZXJ2ZXIgc2lkZQ0KICAgKg0KICAgKi8NCiAgZnVuY3Rpb24gaW52ZXN0SW50ZXJuYWwoYWRkcmVzcyByZWNlaXZlciwgdWludDEyOCBjdXN0b21lcklkKSBzdG9wSW5FbWVyZ2VuY3kgcHJpdmF0ZSB7DQoNCiAgICAvLyBEZXRlcm1pbmUgaWYgaXQncyBhIGdvb2QgdGltZSB0byBhY2NlcHQgaW52ZXN0bWVudCBmcm9tIHRoaXMgcGFydGljaXBhbnQNCiAgICBTdGF0ZSBzdGF0ZSA9IGdldFN0YXRlKCk7DQogICAgaWYgKHN0YXRlID09IFN0YXRlLkZ1bmRpbmcpIHsNCiAgICAgIC8vIFJldGFpbCBwYXJ0aWNpcGFudHMgY2FuIG9ubHkgY29tZSBpbiB3aGVuIHRoZSBjcm93ZHNhbGUgaXMgcnVubmluZw0KICAgIH0gZWxzZSBpZiAoc3RhdGUgPT0gU3RhdGUuUHJlRnVuZGluZykgew0KICAgICAgLy8gQXJlIHdlIHdoaXRlbGlzdGVkIGZvciBlYXJseSBkZXBvc2l0DQogICAgICBpZiAoIWVhcmx5UGFydGljaXBhbnRXaGl0ZWxpc3RbcmVjZWl2ZXJdKSB7DQogICAgICAgIHRocm93Ow0KICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAvLyBVbndhbnRlZCBzdGF0ZQ0KICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgdWludCB3ZWlBbW91bnQgPSBtc2cudmFsdWU7DQogICAgdWludCB0b2tlbkFtb3VudCA9IHByaWNpbmdTdHJhdGVneS5jYWxjdWxhdGVQcmljZSh3ZWlBbW91bnQsIHdlaVJhaXNlZCwgdG9rZW5zU29sZCwgbXNnLnNlbmRlciwgdG9rZW4uZGVjaW1hbHMoKSk7DQoNCiAgICBpZiAodG9rZW5BbW91bnQgPT0gMCkgew0KICAgICAgLy8gRHVzdCB0cmFuc2FjdGlvbg0KICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgaWYgKGludmVzdGVkQW1vdW50T2ZbcmVjZWl2ZXJdID09IDApIHsNCiAgICAgICAvLyBBIG5ldyBpbnZlc3Rvcg0KICAgICAgIGludmVzdG9yQ291bnQrKzsNCiAgICB9DQoNCiAgICAvLyBVcGRhdGUgaW52ZXN0b3INCiAgICBpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXSA9IGludmVzdGVkQW1vdW50T2ZbcmVjZWl2ZXJdLnBsdXMod2VpQW1vdW50KTsNCiAgICB0b2tlbkFtb3VudE9mW3JlY2VpdmVyXSA9IHRva2VuQW1vdW50T2ZbcmVjZWl2ZXJdLnBsdXModG9rZW5BbW91bnQpOw0KDQogICAgLy8gVXBkYXRlIHRvdGFscw0KICAgIHdlaVJhaXNlZCA9IHdlaVJhaXNlZC5wbHVzKHdlaUFtb3VudCk7DQogICAgdG9rZW5zU29sZCA9IHRva2Vuc1NvbGQucGx1cyh0b2tlbkFtb3VudCk7DQoNCiAgICAvLyBDaGVjayB0aGF0IHdlIGRpZCBub3QgYnVzdCB0aGUgY2FwDQogICAgaWYgKGlzQnJlYWtpbmdDYXAod2VpQW1vdW50LCB0b2tlbkFtb3VudCwgd2VpUmFpc2VkLCB0b2tlbnNTb2xkKSkgew0KICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgYXNzaWduVG9rZW5zKHJlY2VpdmVyLCB0b2tlbkFtb3VudCk7DQoNCiAgICAvLyBQb2NrZXQgdGhlIG1vbmV5DQogICAgaWYgKCFtdWx0aXNpZ1dhbGxldC5zZW5kKHdlaUFtb3VudCkpIHRocm93Ow0KDQogICAgLy8gVGVsbCB1cyBpbnZlc3Qgd2FzIHN1Y2Nlc3MNCiAgICBJbnZlc3RlZChyZWNlaXZlciwgd2VpQW1vdW50LCB0b2tlbkFtb3VudCwgY3VzdG9tZXJJZCk7DQogIH0NCg0KICAvKioNCiAgICogUHJlYWxsb2NhdGUgdG9rZW5zIGZvciB0aGUgZWFybHkgaW52ZXN0b3JzLg0KICAgKg0KICAgKiBQcmVhbGxvY2F0ZWQgdG9rZW5zIGhhdmUgYmVlbiBzb2xkIGJlZm9yZSB0aGUgYWN0dWFsIGNyb3dkc2FsZSBvcGVucy4NCiAgICogVGhpcyBmdW5jdGlvbiBtaW50cyB0aGUgdG9rZW5zIGFuZCBtb3ZlcyB0aGUgY3Jvd2RzYWxlIG5lZWRsZS4NCiAgICoNCiAgICogSW52ZXN0b3IgY291bnQgaXMgbm90IGhhbmRsZWQ7IGl0IGlzIGFzc3VtZWQgdGhpcyBnb2VzIGZvciBtdWx0aXBsZSBpbnZlc3RvcnMNCiAgICogYW5kIHRoZSB0b2tlbiBkaXN0cmlidXRpb24gaGFwcGVucyBvdXRzaWRlIHRoZSBzbWFydCBjb250cmFjdCBmbG93Lg0KICAgKg0KICAgKiBObyBtb25leSBpcyBleGNoYW5nZWQsIGFzIHRoZSBjcm93ZHNhbGUgdGVhbSBhbHJlYWR5IGhhdmUgcmVjZWl2ZWQgdGhlIHBheW1lbnQuDQogICAqDQogICAqIEBwYXJhbSB0b2tlbkFtb3VudCBUb2tlbnMgKGluICJhdG9taWMgdW5pdHMiKSBhbGxvY2F0ZWQgdG8gdGhlIGNvbnRyaWJ1dG9yDQogICAqIEBwYXJhbSB3ZWlBbW91bnQgQ29udHJpYnV0aW9uIGluIHdlaQ0KICAgKg0KICAgKi8NCiAgZnVuY3Rpb24gcHJlYWxsb2NhdGUoYWRkcmVzcyByZWNlaXZlciwgdWludCB0b2tlbkFtb3VudCwgdWludCB3ZWlBbW91bnQpIHB1YmxpYyBvbmx5T3duZXIgew0KICAgIC8vIEZyZWUgcHJlLWFsbG9jYXRpb25zIGRvbid0IGNvdW50IGFzICJzb2xkIHRva2VucyINCiAgICBpZiAod2VpQW1vdW50ID09IDApIHsNCiAgICAgIHRva2VuQW1vdW50T2ZbcmVjZWl2ZXJdID0gdG9rZW5BbW91bnRPZltyZWNlaXZlcl0ucGx1cyh0b2tlbkFtb3VudCk7DQogICAgICBhc3NpZ25Ub2tlbnMocmVjZWl2ZXIsIHRva2VuQW1vdW50KTsNCiAgICB9IGVsc2Ugew0KICAgICAgd2VpUmFpc2VkID0gd2VpUmFpc2VkLnBsdXMod2VpQW1vdW50KTsNCiAgICAgIHRva2Vuc1NvbGQgPSB0b2tlbnNTb2xkLnBsdXModG9rZW5BbW91bnQpOw0KICAgICAgaW52ZXN0ZWRBbW91bnRPZltyZWNlaXZlcl0gPSBpbnZlc3RlZEFtb3VudE9mW3JlY2VpdmVyXS5wbHVzKHdlaUFtb3VudCk7DQogICAgICB0b2tlbkFtb3VudE9mW3JlY2VpdmVyXSA9IHRva2VuQW1vdW50T2ZbcmVjZWl2ZXJdLnBsdXModG9rZW5BbW91bnQpOw0KICAgICAgaW52ZXN0b3JDb3VudCsrOw0KDQogICAgICBhc3NpZ25Ub2tlbnMocmVjZWl2ZXIsIHRva2VuQW1vdW50KTsNCg0KICAgICAgSW52ZXN0ZWQocmVjZWl2ZXIsIHdlaUFtb3VudCwgdG9rZW5BbW91bnQsIDApOw0KICAgIH0NCiAgfQ0KDQogIC8qKg0KICAgKiBBbGxvdyBhbm9ueW1vdXMgY29udHJpYnV0aW9ucyB0byB0aGlzIGNyb3dkc2FsZS4NCiAgICovDQogIGZ1bmN0aW9uIGludmVzdFdpdGhTaWduZWRBZGRyZXNzKGFkZHJlc3MgYWRkciwgdWludDEyOCBjdXN0b21lcklkLCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcykgcHVibGljIHBheWFibGUgew0KICAgICBieXRlczMyIGhhc2ggPSBzaGEyNTYoYWRkcik7DQogICAgIGlmIChlY3JlY292ZXIoaGFzaCwgdiwgciwgcykgIT0gc2lnbmVyQWRkcmVzcykgdGhyb3c7DQogICAgIGlmKGN1c3RvbWVySWQgPT0gMCkgdGhyb3c7ICAvLyBVVUlEdjQgc2FuaXR5IGNoZWNrDQogICAgIGludmVzdEludGVybmFsKGFkZHIsIGN1c3RvbWVySWQpOw0KICB9DQoNCiAgLyoqDQogICAqIFRyYWNrIHdobyBpcyB0aGUgY3VzdG9tZXIgbWFraW5nIHRoZSBwYXltZW50IHNvIHdlIGNhbiBzZW5kIHRoYW5rIHlvdSBlbWFpbC4NCiAgICovDQogIGZ1bmN0aW9uIGludmVzdFdpdGhDdXN0b21lcklkKGFkZHJlc3MgYWRkciwgdWludDEyOCBjdXN0b21lcklkKSBwdWJsaWMgcGF5YWJsZSB7DQogICAgaWYocmVxdWlyZWRTaWduZWRBZGRyZXNzKSB0aHJvdzsgLy8gQ3Jvd2RzYWxlIGFsbG93cyBvbmx5IHNlcnZlci1zaWRlIHNpZ25lZCBwYXJ0aWNpcGFudHMNCiAgICBpZihjdXN0b21lcklkID09IDApIHRocm93OyAgLy8gVVVJRHY0IHNhbml0eSBjaGVjaw0KICAgIGludmVzdEludGVybmFsKGFkZHIsIGN1c3RvbWVySWQpOw0KICB9DQoNCiAgLyoqDQogICAqIEFsbG93IGFub255bW91cyBjb250cmlidXRpb25zIHRvIHRoaXMgY3Jvd2RzYWxlLg0KICAgKi8NCiAgZnVuY3Rpb24gaW52ZXN0KGFkZHJlc3MgYWRkcikgcHVibGljIHBheWFibGUgew0KICAgIGlmKHJlcXVpcmVDdXN0b21lcklkKSB0aHJvdzsgLy8gQ3Jvd2RzYWxlIG5lZWRzIHRvIHRyYWNrIHBhcnRpcGFudHMgZm9yIHRoYW5rIHlvdSBlbWFpbA0KICAgIGlmKHJlcXVpcmVkU2lnbmVkQWRkcmVzcykgdGhyb3c7IC8vIENyb3dkc2FsZSBhbGxvd3Mgb25seSBzZXJ2ZXItc2lkZSBzaWduZWQgcGFydGljaXBhbnRzDQogICAgaW52ZXN0SW50ZXJuYWwoYWRkciwgMCk7DQogIH0NCg0KICAvKioNCiAgICogSW52ZXN0IHRvIHRva2VucywgcmVjb2duaXplIHRoZSBwYXllciBhbmQgY2xlYXIgaGlzIGFkZHJlc3MuDQogICAqDQogICAqLw0KICBmdW5jdGlvbiBidXlXaXRoU2lnbmVkQWRkcmVzcyh1aW50MTI4IGN1c3RvbWVySWQsIHVpbnQ4IHYsIGJ5dGVzMzIgciwgYnl0ZXMzMiBzKSBwdWJsaWMgcGF5YWJsZSB7DQogICAgaW52ZXN0V2l0aFNpZ25lZEFkZHJlc3MobXNnLnNlbmRlciwgY3VzdG9tZXJJZCwgdiwgciwgcyk7DQogIH0NCg0KICAvKioNCiAgICogSW52ZXN0IHRvIHRva2VucywgcmVjb2duaXplIHRoZSBwYXllci4NCiAgICoNCiAgICovDQogIGZ1bmN0aW9uIGJ1eVdpdGhDdXN0b21lcklkKHVpbnQxMjggY3VzdG9tZXJJZCkgcHVibGljIHBheWFibGUgew0KICAgIGludmVzdFdpdGhDdXN0b21lcklkKG1zZy5zZW5kZXIsIGN1c3RvbWVySWQpOw0KICB9DQoNCiAgLyoqDQogICAqIFRoZSBiYXNpYyBlbnRyeSBwb2ludCB0byBwYXJ0aWNpcGF0ZSB0aGUgY3Jvd2RzYWxlIHByb2Nlc3MuDQogICAqDQogICAqIFBheSBmb3IgZnVuZGluZywgZ2V0IGludmVzdGVkIHRva2VucyBiYWNrIGluIHRoZSBzZW5kZXIgYWRkcmVzcy4NCiAgICovDQogIGZ1bmN0aW9uIGJ1eSgpIHB1YmxpYyBwYXlhYmxlIHsNCiAgICBpbnZlc3QobXNnLnNlbmRlcik7DQogIH0NCg0KICAvKioNCiAgICogRmluYWxpemUgYSBzdWNjY2VzZnVsIGNyb3dkc2FsZS4NCiAgICoNCiAgICogVGhlIG93bmVyIGNhbiB0cmlnZ3JlIGEgY2FsbCB0aGUgY29udHJhY3QgdGhhdCBwcm92aWRlcyBwb3N0LWNyb3dkc2FsZSBhY3Rpb25zLCBsaWtlIHJlbGVhc2luZyB0aGUgdG9rZW5zLg0KICAgKi8NCiAgZnVuY3Rpb24gZmluYWxpemUoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5TdWNjZXNzKSBvbmx5T3duZXIgc3RvcEluRW1lcmdlbmN5IHsNCg0KICAgIC8vIEFscmVhZHkgZmluYWxpemVkDQogICAgaWYoZmluYWxpemVkKSB7DQogICAgICB0aHJvdzsNCiAgICB9DQoNCiAgICAvLyBGaW5hbGl6aW5nIGlzIG9wdGlvbmFsLiBXZSBvbmx5IGNhbGwgaXQgaWYgd2UgYXJlIGdpdmVuIGEgZmluYWxpemluZyBhZ2VudC4NCiAgICBpZihhZGRyZXNzKGZpbmFsaXplQWdlbnQpICE9IDApIHsNCiAgICAgIGZpbmFsaXplQWdlbnQuZmluYWxpemVDcm93ZHNhbGUoKTsNCiAgICB9DQoNCiAgICBmaW5hbGl6ZWQgPSB0cnVlOw0KICB9DQoNCiAgLyoqDQogICAqIEFsbG93IHRvIChyZSlzZXQgZmluYWxpemUgYWdlbnQuDQogICAqDQogICAqIERlc2lnbiBjaG9pY2U6IG5vIHN0YXRlIHJlc3RyaWN0aW9ucyBvbiBzZXR0aW5nIHRoaXMsIHNvIHRoYXQgd2UgY2FuIGZpeCBmYXQgZmluZ2VyIG1pc3Rha2VzLg0KICAgKi8NCiAgZnVuY3Rpb24gc2V0RmluYWxpemVBZ2VudChGaW5hbGl6ZUFnZW50IGFkZHIpIG9ubHlPd25lciB7DQogICAgZmluYWxpemVBZ2VudCA9IGFkZHI7DQoNCiAgICAvLyBEb24ndCBhbGxvdyBzZXR0aW5nIGJhZCBhZ2VudA0KICAgIGlmKCFmaW5hbGl6ZUFnZW50LmlzRmluYWxpemVBZ2VudCgpKSB7DQogICAgICB0aHJvdzsNCiAgICB9DQogIH0NCg0KICAvKioNCiAgICogU2V0IHBvbGljeSBkbyB3ZSBuZWVkIHRvIGhhdmUgc2VydmVyLXNpZGUgY3VzdG9tZXIgaWRzIGZvciB0aGUgaW52ZXN0bWVudHMuDQogICAqDQogICAqLw0KICBmdW5jdGlvbiBzZXRSZXF1aXJlQ3VzdG9tZXJJZChib29sIHZhbHVlKSBvbmx5T3duZXIgew0KICAgIHJlcXVpcmVDdXN0b21lcklkID0gdmFsdWU7DQogICAgSW52ZXN0bWVudFBvbGljeUNoYW5nZWQocmVxdWlyZUN1c3RvbWVySWQsIHJlcXVpcmVkU2lnbmVkQWRkcmVzcywgc2lnbmVyQWRkcmVzcyk7DQogIH0NCg0KICAvKioNCiAgICogU2V0IHBvbGljeSBpZiBhbGwgaW52ZXN0b3JzIG11c3QgYmUgY2xlYXJlZCBvbiB0aGUgc2VydmVyIHNpZGUgZmlyc3QuDQogICAqDQogICAqIFRoaXMgaXMgZS5nLiBmb3IgdGhlIGFjY3JlZGl0ZWQgaW52ZXN0b3IgY2xlYXJpbmcuDQogICAqDQogICAqLw0KICBmdW5jdGlvbiBzZXRSZXF1aXJlU2lnbmVkQWRkcmVzcyhib29sIHZhbHVlLCBhZGRyZXNzIF9zaWduZXJBZGRyZXNzKSBvbmx5T3duZXIgew0KICAgIHJlcXVpcmVkU2lnbmVkQWRkcmVzcyA9IHZhbHVlOw0KICAgIHNpZ25lckFkZHJlc3MgPSBfc2lnbmVyQWRkcmVzczsNCiAgICBJbnZlc3RtZW50UG9saWN5Q2hhbmdlZChyZXF1aXJlQ3VzdG9tZXJJZCwgcmVxdWlyZWRTaWduZWRBZGRyZXNzLCBzaWduZXJBZGRyZXNzKTsNCiAgfQ0KDQogIC8qKg0KICAgKiBBbGxvdyBhZGRyZXNzZXMgdG8gZG8gZWFybHkgcGFydGljaXBhdGlvbi4NCiAgICovDQogIGZ1bmN0aW9uIHNldEVhcmx5UGFydGljaXBhbnRXaGl0ZWxpc3QoYWRkcmVzcyBhZGRyLCBib29sIHN0YXR1cykgb25seU93bmVyIHsNCiAgICBlYXJseVBhcnRpY2lwYW50V2hpdGVsaXN0W2FkZHJdID0gc3RhdHVzOw0KICAgIFdoaXRlbGlzdGVkKGFkZHIsIHN0YXR1cyk7DQogIH0NCg0KICAvKioNCiAgICogQWxsb3cgY3Jvd2RzYWxlIG93bmVyIHRvIHBvc3Rwb25lIHRoZSBzdGFydCBvZiB0aGUgY3Jvd2RzYWxlDQogICAqLw0KICBmdW5jdGlvbiBzZXRTdGFydHNBdCh1aW50IHRpbWUpIG9ubHlPd25lciB7DQoNCiAgICAvLyBEb24ndCBwdXQgaW50byBwYXN0DQogICAgaWYgKHRpbWUgPCBub3cpIHsgdGhyb3c7IH0NCg0KICAgIC8vIENoYW5nZSBlbmRzQXQgZmlyc3QuLi4NCiAgICBpZiAodGltZSA+IGVuZHNBdCkgeyB0aHJvdzsgfQ0KDQogICAgLy8gSWYgY3Jvd2RzYWxlIGhhcyBhbHJlYWR5IHN0YXJ0ZWQsIHRoZSBzdGFydCBjYW4ndCBiZSBwb3N0cG9uZWQgYW55bW9yZQ0KICAgIGlmIChzdGFydHNBdCA8IG5vdykgeyB0aHJvdzsgfQ0KDQogICAgc3RhcnRzQXQgPSB0aW1lOw0KICAgIFN0YXJ0c0F0Q2hhbmdlZChlbmRzQXQpOw0KICB9DQoNCiAgLyoqDQogICAqIEFsbG93IGNyb3dkc2FsZSBvd25lciB0byBjbG9zZSBlYXJseSBvciBleHRlbmQgdGhlIGNyb3dkc2FsZS4NCiAgICoNCiAgICogVGhpcyBpcyB1c2VmdWwgZS5nLiBmb3IgYSBtYW51YWwgc29mdCBjYXAgaW1wbGVtZW50YXRpb246DQogICAqIC0gYWZ0ZXIgWCBhbW91bnQgaXMgcmVhY2hlZCBkZXRlcm1pbmUgbWFudWFsIGNsb3NpbmcNCiAgICoNCiAgICogVGhpcyBtYXkgcHV0IHRoZSBjcm93ZHNhbGUgdG8gYW4gaW52YWxpZCBzdGF0ZSwNCiAgICogYnV0IHdlIHRydXN0IG93bmVycyBrbm93IHdoYXQgdGhleSBhcmUgZG9pbmcuDQogICAqDQogICAqLw0KICBmdW5jdGlvbiBzZXRFbmRzQXQodWludCB0aW1lKSBvbmx5T3duZXIgew0KDQogICAgaWYgKG5vdyA+IHRpbWUpIHsNCiAgICAgIHRocm93OyAvLyBEb24ndCBjaGFuZ2UgcGFzdA0KICAgIH0NCg0KICAgIGVuZHNBdCA9IHRpbWU7DQogICAgRW5kc0F0Q2hhbmdlZChlbmRzQXQpOw0KICB9DQoNCiAgLyoqDQogICAqIEFsbG93IHRvIChyZSlzZXQgcHJpY2luZyBzdHJhdGVneS4NCiAgICoNCiAgICogRGVzaWduIGNob2ljZTogbm8gc3RhdGUgcmVzdHJpY3Rpb25zIG9uIHRoZSBzZXQsIHNvIHRoYXQgd2UgY2FuIGZpeCBmYXQgZmluZ2VyIG1pc3Rha2VzLg0KICAgKi8NCiAgZnVuY3Rpb24gc2V0UHJpY2luZ1N0cmF0ZWd5KFByaWNpbmdTdHJhdGVneSBfcHJpY2luZ1N0cmF0ZWd5KSBvbmx5T3duZXIgew0KICAgIHByaWNpbmdTdHJhdGVneSA9IF9wcmljaW5nU3RyYXRlZ3k7DQoNCiAgICAvLyBEb24ndCBhbGxvdyBzZXR0aW5nIGJhZCBhZ2VudA0KICAgIGlmKCFwcmljaW5nU3RyYXRlZ3kuaXNQcmljaW5nU3RyYXRlZ3koKSkgew0KICAgICAgdGhyb3c7DQogICAgfQ0KICB9DQoNCiAgLyoqDQogICAqIEFsbG93IHRvIGNoYW5nZSB0aGUgdGVhbSBtdWx0aXNpZyBhZGRyZXNzIGluIHRoZSBjYXNlIG9mIGVtZXJnZW5jeS4NCiAgICoNCiAgICogVGhpcyBhbGxvd3MgdG8gc2F2ZSBhIGRlcGxveWVkIGNyb3dkc2FsZSB3YWxsZXQgaW4gdGhlIGNhc2UgdGhlIGNyb3dkc2FsZSBoYXMgbm90IHlldCBiZWd1bg0KICAgKiAod2UgaGF2ZSBkb25lIG9ubHkgZmV3IHRlc3QgdHJhbnNhY3Rpb25zKS4gQWZ0ZXIgdGhlIGNyb3dkc2FsZSBpcyBnb2luZw0KICAgKiB0aGVuIG11bHRpc2lnIGFkZHJlc3Mgc3RheXMgbG9ja2VkIGZvciB0aGUgc2FmZXR5IHJlYXNvbnMuDQogICAqLw0KICBmdW5jdGlvbiBzZXRNdWx0aXNpZyhhZGRyZXNzIGFkZHIpIHB1YmxpYyBvbmx5T3duZXIgew0KDQogICAgLy8gQ2hhbmdlDQogICAgaWYoaW52ZXN0b3JDb3VudCA+IE1BWF9JTlZFU1RNRU5UU19CRUZPUkVfTVVMVElTSUdfQ0hBTkdFKSB7DQogICAgICB0aHJvdzsNCiAgICB9DQoNCiAgICBtdWx0aXNpZ1dhbGxldCA9IGFkZHI7DQogIH0NCg0KICAvKioNCiAgICogQWxsb3cgbG9hZCByZWZ1bmRzIGJhY2sgb24gdGhlIGNvbnRyYWN0IGZvciB0aGUgcmVmdW5kaW5nLg0KICAgKg0KICAgKiBUaGUgdGVhbSBjYW4gdHJhbnNmZXIgdGhlIGZ1bmRzIGJhY2sgb24gdGhlIHNtYXJ0IGNvbnRyYWN0IGluIHRoZSBjYXNlIHRoZSBtaW5pbXVtIGdvYWwgd2FzIG5vdCByZWFjaGVkLi4NCiAgICovDQogIGZ1bmN0aW9uIGxvYWRSZWZ1bmQoKSBwdWJsaWMgcGF5YWJsZSBpblN0YXRlKFN0YXRlLkZhaWx1cmUpIHsNCiAgICBpZihtc2cudmFsdWUgPT0gMCkgdGhyb3c7DQogICAgbG9hZGVkUmVmdW5kID0gbG9hZGVkUmVmdW5kLnBsdXMobXNnLnZhbHVlKTsNCiAgfQ0KDQogIC8qKg0KICAgKiBJbnZlc3RvcnMgY2FuIGNsYWltIHJlZnVuZC4NCiAgICoNCiAgICogTm90ZSB0aGF0IGFueSByZWZ1bmRzIGZyb20gcHJveHkgYnV5ZXJzIHNob3VsZCBiZSBoYW5kbGVkIHNlcGFyYXRlbHksDQogICAqIGFuZCBub3QgdGhyb3VnaCB0aGlzIGNvbnRyYWN0Lg0KICAgKi8NCiAgZnVuY3Rpb24gcmVmdW5kKCkgcHVibGljIGluU3RhdGUoU3RhdGUuUmVmdW5kaW5nKSB7DQogICAgdWludDI1NiB3ZWlWYWx1ZSA9IGludmVzdGVkQW1vdW50T2ZbbXNnLnNlbmRlcl07DQogICAgaWYgKHdlaVZhbHVlID09IDApIHRocm93Ow0KICAgIGludmVzdGVkQW1vdW50T2ZbbXNnLnNlbmRlcl0gPSAwOw0KICAgIHdlaVJlZnVuZGVkID0gd2VpUmVmdW5kZWQucGx1cyh3ZWlWYWx1ZSk7DQogICAgUmVmdW5kKG1zZy5zZW5kZXIsIHdlaVZhbHVlKTsNCiAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZCh3ZWlWYWx1ZSkpIHRocm93Ow0KICB9DQoNCiAgLyoqDQogICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgY3Jvd2RzYWxlIGhhcyByYWlzZWQgZW5vdWdoIG1vbmV5IHRvIGJlIGEgc3VjY2Vzc2Z1bC4NCiAgICovDQogIGZ1bmN0aW9uIGlzTWluaW11bUdvYWxSZWFjaGVkKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgcmVhY2hlZCkgew0KICAgIHJldHVybiB3ZWlSYWlzZWQgPj0gbWluaW11bUZ1bmRpbmdHb2FsOw0KICB9DQoNCiAgLyoqDQogICAqIENoZWNrIGlmIHRoZSBjb250cmFjdCByZWxhdGlvbnNoaXAgbG9va3MgZ29vZC4NCiAgICovDQogIGZ1bmN0aW9uIGlzRmluYWxpemVyU2FuZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sIHNhbmUpIHsNCiAgICByZXR1cm4gZmluYWxpemVBZ2VudC5pc1NhbmUoKTsNCiAgfQ0KDQogIC8qKg0KICAgKiBDaGVjayBpZiB0aGUgY29udHJhY3QgcmVsYXRpb25zaGlwIGxvb2tzIGdvb2QuDQogICAqLw0KICBmdW5jdGlvbiBpc1ByaWNpbmdTYW5lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wgc2FuZSkgew0KICAgIHJldHVybiBwcmljaW5nU3RyYXRlZ3kuaXNTYW5lKGFkZHJlc3ModGhpcykpOw0KICB9DQoNCiAgLyoqDQogICAqIENyb3dkZnVuZCBzdGF0ZSBtYWNoaW5lIG1hbmFnZW1lbnQuDQogICAqDQogICAqIFdlIG1ha2UgaXQgYSBmdW5jdGlvbiBhbmQgZG8gbm90IGFzc2lnbiB0aGUgcmVzdWx0IHRvIGEgdmFyaWFibGUsIHNvIHRoZXJlIGlzIG5vIGNoYW5jZSBvZiB0aGUgdmFyaWFibGUgYmVpbmcgc3RhbGUuDQogICAqLw0KICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChTdGF0ZSkgew0KICAgIGlmKGZpbmFsaXplZCkgcmV0dXJuIFN0YXRlLkZpbmFsaXplZDsNCiAgICBlbHNlIGlmIChhZGRyZXNzKGZpbmFsaXplQWdlbnQpID09IDApIHJldHVybiBTdGF0ZS5QcmVwYXJpbmc7DQogICAgZWxzZSBpZiAoIWZpbmFsaXplQWdlbnQuaXNTYW5lKCkpIHJldHVybiBTdGF0ZS5QcmVwYXJpbmc7DQogICAgZWxzZSBpZiAoIXByaWNpbmdTdHJhdGVneS5pc1NhbmUoYWRkcmVzcyh0aGlzKSkpIHJldHVybiBTdGF0ZS5QcmVwYXJpbmc7DQogICAgZWxzZSBpZiAoYmxvY2sudGltZXN0YW1wIDwgc3RhcnRzQXQpIHJldHVybiBTdGF0ZS5QcmVGdW5kaW5nOw0KICAgIGVsc2UgaWYgKGJsb2NrLnRpbWVzdGFtcCA8PSBlbmRzQXQgJiYgIWlzQ3Jvd2RzYWxlRnVsbCgpKSByZXR1cm4gU3RhdGUuRnVuZGluZzsNCiAgICBlbHNlIGlmIChpc01pbmltdW1Hb2FsUmVhY2hlZCgpKSByZXR1cm4gU3RhdGUuU3VjY2VzczsNCiAgICBlbHNlIGlmICghaXNNaW5pbXVtR29hbFJlYWNoZWQoKSAmJiB3ZWlSYWlzZWQgPiAwICYmIGxvYWRlZFJlZnVuZCA+PSB3ZWlSYWlzZWQpIHJldHVybiBTdGF0ZS5SZWZ1bmRpbmc7DQogICAgZWxzZSByZXR1cm4gU3RhdGUuRmFpbHVyZTsNCiAgfQ0KDQogIC8qKiBUaGlzIGlzIGZvciBtYW51YWwgdGVzdGluZyBvZiBtdWx0aXNpZyB3YWxsZXQgaW50ZXJhY3Rpb24gKi8NCiAgZnVuY3Rpb24gc2V0T3duZXJUZXN0VmFsdWUodWludCB2YWwpIG9ubHlPd25lciB7DQogICAgb3duZXJUZXN0VmFsdWUgPSB2YWw7DQogIH0NCg0KICAvKiogSW50ZXJmYWNlIG1hcmtlci4gKi8NCiAgZnVuY3Rpb24gaXNDcm93ZHNhbGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgew0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgLy8NCiAgLy8gTW9kaWZpZXJzDQogIC8vDQoNCiAgLyoqIE1vZGlmaWVkIGFsbG93aW5nIGV4ZWN1dGlvbiBvbmx5IGlmIHRoZSBjcm93ZHNhbGUgaXMgY3VycmVudGx5IHJ1bm5pbmcuICAqLw0KICBtb2RpZmllciBpblN0YXRlKFN0YXRlIHN0YXRlKSB7DQogICAgaWYoZ2V0U3RhdGUoKSAhPSBzdGF0ZSkgdGhyb3c7DQogICAgXzsNCiAgfQ0KDQoNCiAgLy8NCiAgLy8gQWJzdHJhY3QgZnVuY3Rpb25zDQogIC8vDQoNCiAgLyoqDQogICAqIENoZWNrIGlmIHRoZSBjdXJyZW50IGludmVzdGVkIGJyZWFrcyBvdXIgY2FwIHJ1bGVzLg0KICAgKg0KICAgKg0KICAgKiBUaGUgY2hpbGQgY29udHJhY3QgbXVzdCBkZWZpbmUgdGhlaXIgb3duIGNhcCBzZXR0aW5nIHJ1bGVzLg0KICAgKiBXZSBhbGxvdyBhIGxvdCBvZiBmbGV4aWJpbGl0eSB0aHJvdWdoIGRpZmZlcmVudCBjYXBwaW5nIHN0cmF0ZWdpZXMgKEVUSCwgdG9rZW4gY291bnQpDQogICAqIENhbGxlZCBmcm9tIGludmVzdCgpLg0KICAgKg0KICAgKiBAcGFyYW0gd2VpQW1vdW50IFRoZSBhbW91bnQgb2Ygd2VpIHRoZSBpbnZlc3RvciB0cmllcyB0byBpbnZlc3QgaW4gdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24NCiAgICogQHBhcmFtIHRva2VuQW1vdW50IFRoZSBhbW91bnQgb2YgdG9rZW5zIHdlIHRyeSB0byBnaXZlIHRvIHRoZSBpbnZlc3RvciBpbiB0aGUgY3VycmVudCB0cmFuc2FjdGlvbg0KICAgKiBAcGFyYW0gd2VpUmFpc2VkVG90YWwgV2hhdCB3b3VsZCBiZSBvdXIgdG90YWwgcmFpc2VkIGJhbGFuY2UgYWZ0ZXIgdGhpcyB0cmFuc2FjdGlvbg0KICAgKiBAcGFyYW0gdG9rZW5zU29sZFRvdGFsIFdoYXQgd291bGQgYmUgb3VyIHRvdGFsIHNvbGQgdG9rZW5zIGNvdW50IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24NCiAgICoNCiAgICogQHJldHVybiB0cnVlIGlmIHRha2luZyB0aGlzIGludmVzdG1lbnQgd291bGQgYnJlYWsgb3VyIGNhcCBydWxlcw0KICAgKi8NCiAgZnVuY3Rpb24gaXNCcmVha2luZ0NhcCh1aW50IHdlaUFtb3VudCwgdWludCB0b2tlbkFtb3VudCwgdWludCB3ZWlSYWlzZWRUb3RhbCwgdWludCB0b2tlbnNTb2xkVG90YWwpIGNvbnN0YW50IHJldHVybnMgKGJvb2wgbGltaXRCcm9rZW4pOw0KDQogIC8qKg0KICAgKiBDaGVjayBpZiB0aGUgY3VycmVudCBjcm93ZHNhbGUgaXMgZnVsbCBhbmQgd2UgY2FuIG5vIGxvbmdlciBzZWxsIGFueSB0b2tlbnMuDQogICAqLw0KICBmdW5jdGlvbiBpc0Nyb3dkc2FsZUZ1bGwoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAoYm9vbCk7DQoNCiAgLyoqDQogICAqIENyZWF0ZSBuZXcgdG9rZW5zIG9yIHRyYW5zZmVyIGlzc3VlZCB0b2tlbnMgdG8gdGhlIGludmVzdG9yIGRlcGVuZGluZyBvbiB0aGUgY2FwIG1vZGVsLg0KICAgKi8NCiAgZnVuY3Rpb24gYXNzaWduVG9rZW5zKGFkZHJlc3MgcmVjZWl2ZXIsIHVpbnQgdG9rZW5BbW91bnQpIHByaXZhdGU7DQp9DQoNCg0KDQoNCg0KDQovKioNCiAqIERlZmluZSBpbnRlcmZhY2UgZm9yIHJlbGVhc2luZyB0aGUgdG9rZW4gdHJhbnNmZXIgYWZ0ZXIgYSBzdWNjZXNzZnVsIGNyb3dkc2FsZS4NCiAqLw0KY29udHJhY3QgUmVsZWFzYWJsZVRva2VuIGlzIEVSQzIwLCBPd25hYmxlIHsNCg0KICAvKiBUaGUgZmluYWxpemVyIGNvbnRyYWN0IHRoYXQgYWxsb3dzIHVubGlmdCB0aGUgdHJhbnNmZXIgbGltaXRzIG9uIHRoaXMgdG9rZW4gKi8NCiAgYWRkcmVzcyBwdWJsaWMgcmVsZWFzZUFnZW50Ow0KDQogIC8qKiBBIGNyb3dkc2FsZSBjb250cmFjdCBjYW4gcmVsZWFzZSB1cyB0byB0aGUgd2lsZCBpZiBJQ08gc3VjY2Vzcy4gSWYgZmFsc2Ugd2UgYXJlIGFyZSBpbiB0cmFuc2ZlciBsb2NrIHVwIHBlcmlvZC4qLw0KICBib29sIHB1YmxpYyByZWxlYXNlZCA9IGZhbHNlOw0KDQogIC8qKiBNYXAgb2YgYWdlbnRzIHRoYXQgYXJlIGFsbG93ZWQgdG8gdHJhbnNmZXIgdG9rZW5zIHJlZ2FyZGxlc3Mgb2YgdGhlIGxvY2sgZG93biBwZXJpb2QuIFRoZXNlIGFyZSBjcm93ZHNhbGUgY29udHJhY3RzIGFuZCBwb3NzaWJsZSB0aGUgdGVhbSBtdWx0aXNpZyBpdHNlbGYuICovDQogIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIHRyYW5zZmVyQWdlbnRzOw0KDQogIC8qKg0KICAgKiBMaW1pdCB0b2tlbiB0cmFuc2ZlciB1bnRpbCB0aGUgY3Jvd2RzYWxlIGlzIG92ZXIuDQogICAqDQogICAqLw0KICBtb2RpZmllciBjYW5UcmFuc2ZlcihhZGRyZXNzIF9zZW5kZXIpIHsNCg0KICAgIGlmKCFyZWxlYXNlZCkgew0KICAgICAgICBpZighdHJhbnNmZXJBZ2VudHNbX3NlbmRlcl0pIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgfQ0KDQogICAgXzsNCiAgfQ0KDQogIC8qKg0KICAgKiBTZXQgdGhlIGNvbnRyYWN0IHRoYXQgY2FuIGNhbGwgcmVsZWFzZSBhbmQgbWFrZSB0aGUgdG9rZW4gdHJhbnNmZXJhYmxlLg0KICAgKg0KICAgKiBEZXNpZ24gY2hvaWNlLiBBbGxvdyByZXNldCB0aGUgcmVsZWFzZSBhZ2VudCB0byBmaXggZmF0IGZpbmdlciBtaXN0YWtlcy4NCiAgICovDQogIGZ1bmN0aW9uIHNldFJlbGVhc2VBZ2VudChhZGRyZXNzIGFkZHIpIG9ubHlPd25lciBpblJlbGVhc2VTdGF0ZShmYWxzZSkgcHVibGljIHsNCg0KICAgIC8vIFdlIGRvbid0IGRvIGludGVyZmFjZSBjaGVjayBoZXJlIGFzIHdlIG1pZ2h0IHdhbnQgdG8gYSBub3JtYWwgd2FsbGV0IGFkZHJlc3MgdG8gYWN0IGFzIGEgcmVsZWFzZSBhZ2VudA0KICAgIHJlbGVhc2VBZ2VudCA9IGFkZHI7DQogIH0NCg0KICAvKioNCiAgICogT3duZXIgY2FuIGFsbG93IGEgcGFydGljdWxhciBhZGRyZXNzIChhIGNyb3dkc2FsZSBjb250cmFjdCkgdG8gdHJhbnNmZXIgdG9rZW5zIGRlc3BpdGUgdGhlIGxvY2sgdXAgcGVyaW9kLg0KICAgKi8NCiAgZnVuY3Rpb24gc2V0VHJhbnNmZXJBZ2VudChhZGRyZXNzIGFkZHIsIGJvb2wgc3RhdGUpIG9ubHlPd25lciBpblJlbGVhc2VTdGF0ZShmYWxzZSkgcHVibGljIHsNCiAgICB0cmFuc2ZlckFnZW50c1thZGRyXSA9IHN0YXRlOw0KICB9DQoNCiAgLyoqDQogICAqIE9uZSB3YXkgZnVuY3Rpb24gdG8gcmVsZWFzZSB0aGUgdG9rZW5zIHRvIHRoZSB3aWxkLg0KICAgKg0KICAgKiBDYW4gYmUgY2FsbGVkIG9ubHkgZnJvbSB0aGUgcmVsZWFzZSBhZ2VudCB0aGF0IGlzIHRoZSBmaW5hbCBJQ08gY29udHJhY3QuIEl0IGlzIG9ubHkgY2FsbGVkIGlmIHRoZSBjcm93ZHNhbGUgaGFzIGJlZW4gc3VjY2VzcyAoZmlyc3QgbWlsZXN0b25lIHJlYWNoZWQpLg0KICAgKi8NCiAgZnVuY3Rpb24gcmVsZWFzZVRva2VuVHJhbnNmZXIoKSBwdWJsaWMgb25seVJlbGVhc2VBZ2VudCB7DQogICAgcmVsZWFzZWQgPSB0cnVlOw0KICB9DQoNCiAgLyoqIFRoZSBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIG9ubHkgYmVmb3JlIG9yIGFmdGVyIHRoZSB0b2tlbnMgaGF2ZSBiZWVuIHJlbGVhc2VzZCAqLw0KICBtb2RpZmllciBpblJlbGVhc2VTdGF0ZShib29sIHJlbGVhc2VTdGF0ZSkgew0KICAgIGlmKHJlbGVhc2VTdGF0ZSAhPSByZWxlYXNlZCkgew0KICAgICAgICB0aHJvdzsNCiAgICB9DQogICAgXzsNCiAgfQ0KDQogIC8qKiBUaGUgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBvbmx5IGJ5IGEgd2hpdGVsaXN0ZWQgcmVsZWFzZSBhZ2VudC4gKi8NCiAgbW9kaWZpZXIgb25seVJlbGVhc2VBZ2VudCgpIHsNCiAgICBpZihtc2cuc2VuZGVyICE9IHJlbGVhc2VBZ2VudCkgew0KICAgICAgICB0aHJvdzsNCiAgICB9DQogICAgXzsNCiAgfQ0KDQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgY2FuVHJhbnNmZXIobXNnLnNlbmRlcikgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgLy8gQ2FsbCBTdGFuZGFyZFRva2VuLnRyYW5zZmVyKCkNCiAgIHJldHVybiBzdXBlci50cmFuc2ZlcihfdG8sIF92YWx1ZSk7DQogIH0NCg0KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBjYW5UcmFuc2ZlcihfZnJvbSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgLy8gQ2FsbCBTdGFuZGFyZFRva2VuLnRyYW5zZmVyRm9ybSgpDQogICAgcmV0dXJuIHN1cGVyLnRyYW5zZmVyRnJvbShfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICB9DQoNCn0NCg0KDQovKioNCiAqIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGZvciB0aGUgY3Jvd2RzYWxlIGVuZC4NCiAqDQogKiBVbmxvY2sgdG9rZW5zLg0KICovDQpjb250cmFjdCBEZWZhdWx0RmluYWxpemVBZ2VudCBpcyBGaW5hbGl6ZUFnZW50IHsNCg0KICBSZWxlYXNhYmxlVG9rZW4gcHVibGljIHRva2VuOw0KICBDcm93ZHNhbGUgcHVibGljIGNyb3dkc2FsZTsNCg0KICBmdW5jdGlvbiBEZWZhdWx0RmluYWxpemVBZ2VudChSZWxlYXNhYmxlVG9rZW4gX3Rva2VuLCBDcm93ZHNhbGUgX2Nyb3dkc2FsZSkgew0KICAgIHRva2VuID0gX3Rva2VuOw0KICAgIGNyb3dkc2FsZSA9IF9jcm93ZHNhbGU7DQogIH0NCg0KICAvKiogQ2hlY2sgdGhhdCB3ZSBjYW4gcmVsZWFzZSB0aGUgdG9rZW4gKi8NCiAgZnVuY3Rpb24gaXNTYW5lKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsNCiAgICByZXR1cm4gKHRva2VuLnJlbGVhc2VBZ2VudCgpID09IGFkZHJlc3ModGhpcykpOw0KICB9DQoNCiAgLyoqIENhbGxlZCBvbmNlIGJ5IGNyb3dkc2FsZSBmaW5hbGl6ZSgpIGlmIHRoZSBzYWxlIHdhcyBzdWNjZXNzLiAqLw0KICBmdW5jdGlvbiBmaW5hbGl6ZUNyb3dkc2FsZSgpIHB1YmxpYyB7DQogICAgaWYobXNnLnNlbmRlciAhPSBhZGRyZXNzKGNyb3dkc2FsZSkpIHsNCiAgICAgIHRocm93Ow0KICAgIH0NCiAgICB0b2tlbi5yZWxlYXNlVG9rZW5UcmFuc2ZlcigpOw0KICB9DQoNCn0='