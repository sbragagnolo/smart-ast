base 64 content
base64delphiToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMDsNCg0KDQovLy8gQHRpdGxlIEFic3RyYWN0IHRva2VuIGNvbnRyYWN0IC0gRnVuY3Rpb25zIHRvIGJlIGltcGxlbWVudGVkIGJ5IHRva2VuIGNvbnRyYWN0cy4NCmNvbnRyYWN0IFRva2VuIHsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQoNCiAgICAvLyBUaGlzIGlzIG5vdCBhbiBhYnN0cmFjdCBmdW5jdGlvbiwgYmVjYXVzZSBzb2xjIHdvbid0IHJlY29nbml6ZSBnZW5lcmF0ZWQgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgcHVibGljIHZhcmlhYmxlcyBhcyBmdW5jdGlvbnMuDQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7fQ0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIG93bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOw0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsNCg0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOw0KfQ0KDQoNCi8vLyBAdGl0bGUgU3RhbmRhcmQgdG9rZW4gY29udHJhY3QgLSBTdGFuZGFyZCB0b2tlbiBpbnRlcmZhY2UgaW1wbGVtZW50YXRpb24uDQpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIFRva2VuIHsNCg0KICAgIC8qDQogICAgICogIERhdGEgc3RydWN0dXJlcw0KICAgICAqLw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOw0KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Ow0KDQogICAgLyoNCiAgICAgKiAgUHVibGljIGZ1bmN0aW9ucw0KICAgICAqLw0KICAgIC8vLyBAZGV2IFRyYW5zZmVycyBzZW5kZXIncyB0b2tlbnMgdG8gYSBnaXZlbiBhZGRyZXNzLiBSZXR1cm5zIHN1Y2Nlc3MuDQogICAgLy8vIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiB0b2tlbiByZWNlaXZlci4NCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyLg0KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgc3VjY2VzcyBvZiBmdW5jdGlvbiBjYWxsLg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkNCiAgICAgICAgcHVibGljDQogICAgICAgIHJldHVybnMgKGJvb2wpDQogICAgew0KICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHsNCiAgICAgICAgICAgIC8vIEJhbGFuY2UgdG9vIGxvdw0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBBbGxvd3MgYWxsb3dlZCB0aGlyZCBwYXJ0eSB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyLiBSZXR1cm5zIHN1Y2Nlc3MuDQogICAgLy8vIEBwYXJhbSBfZnJvbSBBZGRyZXNzIGZyb20gd2hlcmUgdG9rZW5zIGFyZSB3aXRoZHJhd24uDQogICAgLy8vIEBwYXJhbSBfdG8gQWRkcmVzcyB0byB3aGVyZSB0b2tlbnMgYXJlIHNlbnQuDQogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4NCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHN1Y2Nlc3Mgb2YgZnVuY3Rpb24gY2FsbC4NCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQ0KICAgICAgICBwdWJsaWMNCiAgICAgICAgcmV0dXJucyAoYm9vbCkNCiAgICB7DQogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPCBfdmFsdWUgfHwgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPCBfdmFsdWUpIHsNCiAgICAgICAgICAgIC8vIEJhbGFuY2Ugb3IgYWxsb3dhbmNlIHRvbyBsb3cNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOw0KICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8vLyBAZGV2IFNldHMgYXBwcm92ZWQgYW1vdW50IG9mIHRva2VucyBmb3Igc3BlbmRlci4gUmV0dXJucyBzdWNjZXNzLg0KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgQWRkcmVzcyBvZiBhbGxvd2VkIGFjY291bnQuDQogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIGFwcHJvdmVkIHRva2Vucy4NCiAgICAvLy8gQHJldHVybiBSZXR1cm5zIHN1Y2Nlc3Mgb2YgZnVuY3Rpb24gY2FsbC4NCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKQ0KICAgICAgICBwdWJsaWMNCiAgICAgICAgcmV0dXJucyAoYm9vbCkNCiAgICB7DQogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoNCiAgICAgKiBSZWFkIGZ1bmN0aW9ucw0KICAgICAqLw0KICAgIC8vLyBAZGV2IFJldHVybnMgbnVtYmVyIG9mIGFsbG93ZWQgdG9rZW5zIGZvciBnaXZlbiBhZGRyZXNzLg0KICAgIC8vLyBAcGFyYW0gX293bmVyIEFkZHJlc3Mgb2YgdG9rZW4gb3duZXIuDQogICAgLy8vIEBwYXJhbSBfc3BlbmRlciBBZGRyZXNzIG9mIHRva2VuIHNwZW5kZXIuDQogICAgLy8vIEByZXR1cm4gUmV0dXJucyByZW1haW5pbmcgYWxsb3dhbmNlIGZvciBzcGVuZGVyLg0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikNCiAgICAgICAgY29uc3RhbnQNCiAgICAgICAgcHVibGljDQogICAgICAgIHJldHVybnMgKHVpbnQyNTYpDQogICAgew0KICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiB0b2tlbnMgb3duZWQgYnkgZ2l2ZW4gYWRkcmVzcy4NCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLg0KICAgIC8vLyBAcmV0dXJuIFJldHVybnMgYmFsYW5jZSBvZiBvd25lci4NCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpDQogICAgICAgIGNvbnN0YW50DQogICAgICAgIHB1YmxpYw0KICAgICAgICByZXR1cm5zICh1aW50MjU2KQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07DQogICAgfQ0KfQ0KDQoNCi8vLyBAdGl0bGUgRGVscGhpVG9rZW4gY29udHJhY3QNCi8vLyBAYXV0aG9yIENocmlzdG9waGVyIEdyYW50IC0gPGNocmlzdG9waGVyQGRlbHBoaS5tYXJrZXRzPg0KY29udHJhY3QgRGVscGhpVG9rZW4gaXMgU3RhbmRhcmRUb2tlbiB7DQoNCiAgICAvKg0KICAgICAqICBUb2tlbiBtZXRhIGRhdGENCiAgICAgKi8NCiAgICBzdHJpbmcgY29uc3RhbnQgcHVibGljIG5hbWUgPSAiRGVscGhpIjsNCiAgICBzdHJpbmcgY29uc3RhbnQgcHVibGljIHN5bWJvbCA9ICJERUwiOw0KICAgIHVpbnQ4IGNvbnN0YW50IHB1YmxpYyBkZWNpbWFscyA9IDE4Ow0KDQogICAgLyoNCiAgICAgKiAgUHVibGljIGZ1bmN0aW9ucw0KICAgICAqLw0KDQogICAgLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0ICovDQogICAgZnVuY3Rpb24gRGVscGhpVG9rZW4oKSBwdWJsaWMgew0KICAgICAgICB1aW50MjU2IGluaXRpYWxTdXBwbHkgPSAxMDAwMDAwMCAqIDEwKioxODsNCiAgICAgICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5Ow0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IGluaXRpYWxTdXBwbHk7DQogICAgfQ0KfQ=='