base 64 content
base64display
	^'LyoqDQogKiBUaGlzIGNvbnRyYWN0IG1hbmFnZXMgdGhlIG1lc3NhZ2VzIChvciBhZHMpIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgUHJheTRQcmV5IGFxdWFyaXVtLg0KICoqLw0KDQpjb250cmFjdCBtb3J0YWwgew0KCWFkZHJlc3Mgb3duZXI7DQoNCglmdW5jdGlvbiBtb3J0YWwoKSB7DQoJCW93bmVyID0gbXNnLnNlbmRlcjsNCgl9DQoNCglmdW5jdGlvbiBraWxsKCkgew0KCQlpZiAob3duZXIgPT0gbXNnLnNlbmRlcikNCgkJCXN1aWNpZGUob3duZXIpOw0KCX0NCn0NCg0KY29udHJhY3QgRGlzcGxheSBpcyBtb3J0YWwgew0KCS8qKiB0aGUgcHJpY2UgcGVyIGFkdmVydGlzZW1lbnQgdHlwZSBwZXIgdGltZSBpbnRlcnZhbCAoZGF5LCB3ZWVrLCBtb250aCkuICoqLw0KCXVpbnRbXVtdIHByaWNlczsNCgkvKiogdGhlIGR1cmF0aW9uIG9mIGFuIGludGVydmFsIGluIGRheXMgKiovDQoJdWludDE2W10gZHVyYXRpb247DQoJLyoqIGxpc3Qgb2YgYWR2ZXJ0aXNlbWVudHMgcGVyIGFkZHJlc3MgKiovDQoJQWRbXSBhZHM7DQoJLyoqIHRoZSBleHBpcnkgZGF0ZXMgb2YgdGhlIGxvY2tzIHBlciBhZFR5cGUqLw0KCXVpbnRbXSBsb2NrczsNCg0KCXN0cnVjdCBBZCB7DQoJCS8vdGhlIGlkIG9mIHRoZSBhZA0KCQl1aW50MzIgaWQ7DQoJCS8vIHRoZSB0eXBlIG9mIHRoZSBhZA0KCQl1aW50OCBhZFR5cGU7DQoJCS8vIHRoZSBleHBpcnkgdGltZXN0YW1wIA0KCQl1aW50IGV4cGlyeTsNCgkJLy90aGUgY29ycmVzcG9uZGluZyBhZGRyZXNzDQoJCWFkZHJlc3MgY2xpZW50Ow0KCX0NCg0KCS8qKiANCgkgKiBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlcw0KCSAqKi8NCglmdW5jdGlvbiBEaXNwbGF5KCkgew0KCQlwcmljZXMgPSBbDQoJCQlbMTAwMDAwMDAwMDAwMDAwMDAwLCAzMDAwMDAwMDAwMDAwMDAwMDAsIDUwMDAwMDAwMDAwMDAwMDAwMF0sDQoJCQlbNTAwMDAwMDAwMDAwMDAwMDAwLCAxNTAwMDAwMDAwMDAwMDAwMDAwLCAyNTAwMDAwMDAwMDAwMDAwMDAwXSwNCgkJCVsyMDAwMDAwMDAwMDAwMDAwMDAwLCA1MDAwMDAwMDAwMDAwMDAwMDAwLCA4MDAwMDAwMDAwMDAwMDAwMDAwXQ0KCQldOw0KCQlkdXJhdGlvbiA9IFsxLCA3LCAzMF07DQoJCWxvY2tzID0gW25vdywgbm93LCBub3ddOw0KCX0NCg0KCS8qKiBidXlzIHRoZSBiYXNpYyBhZCAqKi8NCglmdW5jdGlvbigpIHBheWFibGUgew0KCQlidXlBZCgwLCAwKTsNCgl9DQoNCgkvKiogYnV5cyBhIHNwZWNpZmljIGFkKiovDQoJZnVuY3Rpb24gYnV5QWQodWludDggYWRUeXBlLCB1aW50OCBpbnRlcnZhbCkgcGF5YWJsZSB7DQoJCWlmIChhZFR5cGUgPj0gcHJpY2VzLmxlbmd0aCB8fCBpbnRlcnZhbCA+PSBkdXJhdGlvbi5sZW5ndGggfHwgbXNnLnZhbHVlIDwgcHJpY2VzW2ludGVydmFsXVthZFR5cGVdKSB0aHJvdzsNCgkJaWYgKGxvY2tzW2FkVHlwZV0gPiBub3cpIHRocm93Ow0KCQlhZHMucHVzaChBZCh1aW50MzIoYWRzLmxlbmd0aCksIGFkVHlwZSwgbm93ICsgbXNnLnZhbHVlIC8gcHJpY2VzW2ludGVydmFsXVthZFR5cGVdICogZHVyYXRpb25baW50ZXJ2YWxdICogMSBkYXlzLCBtc2cuc2VuZGVyKSk7DQoJfQ0KDQoJLyoqIGNoYW5nZSB0aGUgcHJpY2VzIG9mIGFuIGludGVydmFsICoqLw0KCWZ1bmN0aW9uIGNoYW5nZVByaWNlcyh1aW50WzNdIG5ld1ByaWNlcywgdWludDggaW50ZXJ2YWwpIHsNCgkJcHJpY2VzW2ludGVydmFsXSA9IG5ld1ByaWNlczsNCgl9DQoNCgkvKiogbGV0IHRoZSBvd25lciB3aXRoZHJhdyB0aGUgZnVuZHMgKi8NCglmdW5jdGlvbiB3aXRoZHJhdygpIHsNCgkJaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpDQoJCQlvd25lci5zZW5kKGFkZHJlc3ModGhpcykuYmFsYW5jZSk7DQoJfQ0KDQoJLyogcmV0dXJucyAxMCBhZHMgYmVnaW5uaW5nIGZyb20gc3RhcnRpbmRleCAqLw0KCWZ1bmN0aW9uIGdldDEwQWRzKHVpbnQgc3RhcnRJbmRleCkgY29uc3RhbnQgcmV0dXJucyh1aW50MzJbMTBdIGlkcywgdWludDhbMTBdIGFkVHlwZXMsIHVpbnRbMTBdIGV4cGlyaWVzLCBhZGRyZXNzWzEwXSBjbGllbnRzKSB7DQoJCXVpbnQgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgMTA7DQoJCWlmIChlbmRJbmRleCA+IGFkcy5sZW5ndGgpIGVuZEluZGV4ID0gYWRzLmxlbmd0aDsNCgkJdWludCBqID0gMDsNCgkJZm9yICh1aW50IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykgew0KCQkJaWRzW2pdID0gYWRzW2ldLmlkOw0KCQkJYWRUeXBlc1tqXSA9IChhZHNbaV0uYWRUeXBlKTsNCgkJCWV4cGlyaWVzW2pdID0gKGFkc1tpXS5leHBpcnkpOw0KCQkJY2xpZW50c1tqXSA9IChhZHNbaV0uY2xpZW50KTsNCgkJCWorKzsNCgkJfQ0KCX0NCg0KCS8qKiByZXR1cm5zIHRoZSBudW1iZXIgb2YgYWRzICoqLw0KCWZ1bmN0aW9uIGdldE51bUFkcygpIGNvbnN0YW50IHJldHVybnModWludCkgew0KCQlyZXR1cm4gYWRzLmxlbmd0aDsNCgl9DQoNCgkvKiogcmV0dXJucyB0aGUgcHJpY2VzIG9mIGFuIGludGVydmFsKiovDQoJZnVuY3Rpb24gZ2V0UHJpY2VzUGVySW50ZXJ2YWwodWludDggaW50ZXJ2YWwpIGNvbnN0YW50IHJldHVybnModWludFtdKSB7DQoJCXJldHVybiBwcmljZXNbaW50ZXJ2YWxdOw0KCX0NCg0KCS8qKiByZXR1cm5zIHRoZSBwcmljZSBvZiBhIGdpdmVuIHR5cGUgZm9yIGEgZ2l2ZW4gaW50ZXJ2YWwqKi8NCglmdW5jdGlvbiBnZXRQcmljZSh1aW50OCBhZFR5cGUsIHVpbnQ4IGludGVydmFsKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsNCgkJcmV0dXJuIHByaWNlc1tpbnRlcnZhbF1bYWRUeXBlXTsNCgl9DQoNCgkvKiogbG9ja3MgYSB0eXBlIHVudGlsIGEgZ2l2ZW4gZGF0ZSAqKi8NCglmdW5jdGlvbiBsb2NrKHVpbnQ4IGFkVHlwZSwgdWludCBleHBpcnkpIHsNCgkJbG9ja3NbYWRUeXBlXSA9IGV4cGlyeTsNCgl9DQp9'