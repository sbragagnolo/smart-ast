base 64 content
base64doneToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMzsNCg0KLyogDQpgKiBpcyBvd25lZA0KKi8NCmNvbnRyYWN0IG93bmVkIHsNCg0KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOw0KDQogICAgZnVuY3Rpb24gb3duZWQoKSB7DQogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5T3duZXIgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgcmV2ZXJ0KCk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gb3duZXJUcmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKQ0KICAgICAgICBvbmx5T3duZXINCiAgICB7DQogICAgICAgIG93bmVyID0gbmV3T3duZXI7DQogICAgfQ0KDQp9DQoNCi8qIA0KKiBzYWZlIG1hdGgNCiovDQpjb250cmFjdCBEU1NhZmVBZGRTdWIgew0KDQogICAgZnVuY3Rpb24gc2FmZVRvQWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7DQogICAgICAgIHJldHVybiAoYSArIGIgPj0gYSk7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgaWYgKCFzYWZlVG9BZGQoYSwgYikpIHJldmVydCgpOw0KICAgICAgICByZXR1cm4gYSArIGI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2FmZVRvU3VidHJhY3QodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIChiIDw9IGEpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgaWYgKCFzYWZlVG9TdWJ0cmFjdChhLCBiKSkgcmV2ZXJ0KCk7DQogICAgICAgIHJldHVybiBhIC0gYjsNCiAgICB9IA0KDQp9DQoNCg0KLyoqDQogKg0KICogQHRpdGxlICBEb25lVG9rZW4NCiAqIA0KICogVGhlIG9mZmljaWFsIHRva2VuIHBvd2VyaW5nIERvbmF0aW9uIEVmZmljaWVuY3kuDQogKiBEb25lVG9rZW4gaXMgYSBFUkMuMjAgc3RhbmRhcmQgdG9rZW4gd2l0aCBzb21lIGN1c3RvbSBmdW5jdGlvbmFsaXR5DQogKg0KICovIA0KDQoNCmNvbnRyYWN0IERvbmVUb2tlbiBpcyBvd25lZCwgRFNTYWZlQWRkU3ViIHsNCg0KICAgIC8qIGNoZWNrIGFkZHJlc3MgKi8NCiAgICBtb2RpZmllciBvbmx5QnkoYWRkcmVzcyBfYWNjb3VudCkgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBfYWNjb3VudCkgcmV2ZXJ0KCk7DQogICAgICAgIF87DQogICAgfSAgICANCg0KICAgIC8qIHZhcnMgKi8NCiAgICBzdHJpbmcgcHVibGljIHN0YW5kYXJkID0gJ1Rva2VuIDEuMCc7DQogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIkRPTkUiOw0KICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIkRFVCI7DQogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMTY7DQogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHkgPSAxNTAwMDAwMDAwMDAwMDAwMDAwMDAwMDA7IA0KDQogICAgYWRkcmVzcyBwdWJsaWMgcHJpdmlsZWRnZWRBZGRyZXNzOyAgDQogICAgYm9vbCBwdWJsaWMgdG9rZW5zRnJvemVuOw0KICAgIHVpbnQgcHVibGljIGNyb3dkZnVuZERlYWRsaW5lID0gbm93ICsgMSBob3VyczsgICAgICAgDQogICAgdWludCBwdWJsaWMgbmV4dEZyZWV6ZSA9IG5vdyArIDIgaG91cnM7DQogICAgdWludCBwdWJsaWMgbmV4dFRoYXcgPSBub3cgKyAzIGhvdXJzOw0KICAgDQoNCiAgICAvKiBtYXAgYmFsYW5jZXMgKi8NCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBiYWxhbmNlT2Y7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpKSBwdWJsaWMgYWxsb3dhbmNlOyAgDQoNCiAgICAvKiBldmVudHMgKi8NCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsNCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsNCiAgICBldmVudCBMb2dUb2tlbnNGcm96ZW4oYm9vbCBpbmRleGVkIEZyb3plbik7ICAgIA0KDQogICAgLyoNCiAgICAqICBAbm90aWNlIHNlbmRzIGFsbCB0b2tlbnMgdG8gbXNnLnNlbmRlciBvbiBpbml0ICAgIA0KICAgICovICANCiAgICBmdW5jdGlvbiBEb25lVG9rZW4oKXsNCiAgICAgICAgLyogc2VuZCBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucyAyNSwwMDAsMDAwICovDQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDE1MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDsNCiAgICAgICAgLyogdG9rZW5zIGFyZSBub3QgZnJvemVuICovICANCiAgICAgICAgdG9rZW5zRnJvemVuID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgIH0gIA0KDQogICAgLyoNCiAgICAqICBAbm90aWNlIHB1YmxpYyBmdW5jdGlvbiAgICANCiAgICAqICBAcGFyYW0gX3RvIGFkZHJlc3MgdG8gc2VuZCB0b2tlbnMgdG8gICANCiAgICAqICBAcGFyYW0gX3ZhbHVlIG51bWJlciBvZiB0b2tlbnMgdG8gdHJhbnNmZXIgDQogICAgKiAgQHJldHVybnMgYm9vbGVhbiBzdWNjZXNzICAgICAgICAgDQogICAgKi8gICAgIA0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcHVibGljDQogICAgICAgIHJldHVybnMgKGJvb2wgc3VjY2VzcykgICAgDQogICAgew0KICAgICAgICBpZih0b2tlbnNGcm96ZW4gJiYgbXNnLnNlbmRlciAhPSBwcml2aWxlZGdlZEFkZHJlc3MpIHJldHVybiBmYWxzZTsgIC8qIHRyYW5zZmVyIG9ubHkgYnkgcHJpdmlsZWRnZWRBZGRyZXNzIGR1cmluZyBjcm93ZGZ1bmQgb3IgcmV3YXJkIHBoYXNlcyAqLw0KICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgICAgICAgIC8qIGNoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaCAqLw0KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV0dXJuIGZhbHNlOyAgICAgICAgIC8qIGNoZWNrIGZvciBvdmVyZmxvd3MgKi8gICAgICAgICAgICAgIA0KICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gIF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHN1YnRyYWN0IGZyb20gdGhlIHNlbmRlciAqLw0KICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50ICovDQogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UgKi8NCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfSAgICAgIA0KDQogICAgLyoNCiAgICAqICBAbm90aWNlIHB1YmxpYyBmdW5jdGlvbiAgICANCiAgICAqICBAcGFyYW0gX2Zyb20gYWRkcmVzcyB0byBzZW5kIHRva2VucyBmcm9tIA0KICAgICogIEBwYXJhbSBfdG8gYWRkcmVzcyB0byBzZW5kIHRva2VucyB0byAgIA0KICAgICogIEBwYXJhbSBfdmFsdWUgbnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2ZlciAgICAgDQogICAgKiAgQHJldHVybnMgYm9vbGVhbiBzdWNjZXNzICAgICAgDQogICAgKiAgYW5vdGhlciBjb250cmFjdCBhdHRlbXB0cyB0byBzcGVuZCB0b2tlbnMgb24geW91ciBiZWhhbGYNCiAgICAqLyAgICAgICANCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMNCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSANCiAgICB7ICAgICAgICAgICAgICAgIA0KICAgICAgICBpZih0b2tlbnNGcm96ZW4gJiYgbXNnLnNlbmRlciAhPSBwcml2aWxlZGdlZEFkZHJlc3MpIHJldHVybiBmYWxzZTsgIC8qIHRyYW5zZmVyIG9ubHkgYnkgcHJpdmlsZWRnZWRBZGRyZXNzIGR1cmluZyBjcm93ZGZ1bmQgb3IgcmV3YXJkIHBoYXNlcyAqLw0KICAgICAgICBpZiAoYmFsYW5jZU9mW19mcm9tXSA8IF92YWx1ZSkgcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaCAqLw0KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV0dXJuIGZhbHNlOyAgICAgICAgIC8qIGNoZWNrIGZvciBvdmVyZmxvd3MgKi8gICAgICAgICAgICAgICAgDQogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgLyogY2hlY2sgYWxsb3dhbmNlICovDQogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyICovDQogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogYWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQgKi8NCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiByZWR1Y2UgYWxsb3dhbmNlICovDQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UgKi8NCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfSAgICAgICAgDQogDQogICAgLyoNCiAgICAqICBAbm90aWNlIHB1YmxpYyBmdW5jdGlvbiAgICANCiAgICAqICBAcGFyYW0gX3NwZW5kZXIgYWRkcmVzcyBiZWluZyBncmFudGVkIGFwcHJvdmFsIHRvIHNwZW5kIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyDQogICAgKiAgQHBhcmFtIF92YWx1ZSBudW1iZXIgb2YgdG9rZW5zIGdyYW50ZWQgYXBwcm92YWwgZm9yIF9zcGVuZGVyIHRvIHNwZW5kIG9uIGJlaGFsZiBvZiBtc2cuc2VuZGVyICAgIA0KICAgICogIEByZXR1cm5zIGJvb2xlYW4gc3VjY2VzcyAgICAgIA0KICAgICogIGFwcHJvdmVzIGFub3RoZXIgY29udHJhY3QgdG8gc3BlbmQgc29tZSB0b2tlbnMgb24geW91ciBiZWhhbGYNCiAgICAqLyAgICAgIA0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHB1YmxpYw0KICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpDQogICAgew0KICAgICAgICAvKiBzZXQgYWxsb3dhbmNlIGZvciBfc3BlbmRlciBvbiBiZWhhbGYgb2YgbXNnLnNlbmRlciAqLw0KICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KDQogICAgICAgIC8qIGxvZyBldmVudCBhYm91dCB0cmFuc2FjdGlvbiAqLw0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsgICAgICAgIA0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9IA0KICANCiAgICAvKg0KICAgICogIEBub3RpY2UgYWRkcmVzcyByZXN0cmljdGVkIGZ1bmN0aW9uIA0KICAgICogIGNyb3dkZnVuZCBjb250cmFjdCBjYWxscyB0aGlzIHRvIGJ1cm4gaXRzIHVuc29sZCBjb2lucyANCiAgICAqLyAgICAgDQogICAgZnVuY3Rpb24gcHJpdmlsZWRnZWRBZGRyZXNzQnVyblVuc29sZENvaW5zKCkgcHVibGljDQogICAgICAgIC8qIG9ubHkgY3Jvd2RmdW5kIGNvbnRyYWN0IGNhbiBjYWxsIHRoaXMgKi8NCiAgICAgICAgb25seUJ5KHByaXZpbGVkZ2VkQWRkcmVzcykNCiAgICB7DQogICAgICAgIC8qIHRvdGFsU3VwcGx5IHNob3VsZCBlcXVhbCB0b3RhbCB0b2tlbnMgaW4gY2lyY3VsYXRpb24gKi8NCiAgICAgICAgdG90YWxTdXBwbHkgPSBzYWZlU3ViKHRvdGFsU3VwcGx5LCBiYWxhbmNlT2ZbcHJpdmlsZWRnZWRBZGRyZXNzXSk7IA0KICAgICAgICAvKiBidXJucyB1bnNvbGQgdG9rZW5zIGZyb20gY3Jvd2RmdW5kIGFkZHJlc3MgKi8NCiAgICAgICAgYmFsYW5jZU9mW3ByaXZpbGVkZ2VkQWRkcmVzc10gPSAwOw0KICAgIH0NCg0KICAgIC8qDQogICAgKiAgQG5vdGljZSBwdWJsaWMgZnVuY3Rpb24gDQogICAgKiAgbG9ja3MvdW5sb2NrcyB0b2tlbnMgb24gYSByZWN1cnJpbmcgY3ljbGUNCiAgICAqLyAgICAgICAgIA0KICAgIGZ1bmN0aW9uIHVwZGF0ZVRva2VuU3RhdHVzKCkgcHVibGljDQogICAgew0KICAgICAgICANCiAgICAgICAgLyogbG9ja3MgdG9rZW5zIGR1cmluZyBpbml0aWFsIGNyb3dkZnVuZCBwZXJpb2QgKi8NCiAgICAgICAgaWYobm93IDwgY3Jvd2RmdW5kRGVhZGxpbmUpeyAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICB0b2tlbnNGcm96ZW4gPSB0cnVlOyAgICAgICAgIA0KICAgICAgICAgICAgTG9nVG9rZW5zRnJvemVuKHRva2Vuc0Zyb3plbik7ICANCiAgICAgICAgfSAgDQoNCiAgICAgICAgLyogbG9ja3MgdG9rZW5zICovDQogICAgICAgIGlmKG5vdyA+PSBuZXh0RnJlZXplKXsgICAgICAgICAgDQogICAgICAgICAgICB0b2tlbnNGcm96ZW4gPSB0cnVlOw0KICAgICAgICAgICAgTG9nVG9rZW5zRnJvemVuKHRva2Vuc0Zyb3plbik7ICANCiAgICAgICAgfQ0KDQogICAgICAgIC8qIHVubG9ja3MgdG9rZW5zICovDQogICAgICAgIGlmKG5vdyA+PSBuZXh0VGhhdyl7ICAgICAgICAgDQogICAgICAgICAgICB0b2tlbnNGcm96ZW4gPSBmYWxzZTsNCiAgICAgICAgICAgIG5leHRGcmVlemUgPSBub3cgKyAyIGhvdXJzOw0KICAgICAgICAgICAgbmV4dFRoYXcgPSBub3cgKyAzIGhvdXJzOyAgICAgICAgICAgICAgDQogICAgICAgICAgICBMb2dUb2tlbnNGcm96ZW4odG9rZW5zRnJvemVuKTsgIA0KICAgICAgICB9ICAgICAgICANCiAgICAgIA0KICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KICAgIC8qDQogICAgKiAgQG5vdGljZSBvd25lciByZXN0cmljdGVkIGZ1bmN0aW9uDQogICAgKiAgQHBhcmFtIF9uZXdQcml2aWxlZGdlZEFkZHJlc3MgdGhlIGFkZHJlc3MNCiAgICAqICBvbmx5IHRoaXMgYWRkcmVzcyBjYW4gYnVybiB1bnNvbGQgdG9rZW5zDQogICAgKiAgdHJhbnNmZXIgdG9rZW5zIG9ubHkgYnkgcHJpdmlsZWRnZWRBZGRyZXNzIGR1cmluZyBjcm93ZGZ1bmQgb3IgcmV3YXJkIHBoYXNlcw0KICAgICovICAgICAgDQogICAgZnVuY3Rpb24gb3duZXJTZXRQcml2aWxlZGdlZEFkZHJlc3MoYWRkcmVzcyBfbmV3UHJpdmlsZWRnZWRBZGRyZXNzKSBwdWJsaWMgDQogICAgICAgIG9ubHlPd25lcg0KICAgIHsNCiAgICAgICAgcHJpdmlsZWRnZWRBZGRyZXNzID0gX25ld1ByaXZpbGVkZ2VkQWRkcmVzczsNCiAgICB9ICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgIA0KfQ=='