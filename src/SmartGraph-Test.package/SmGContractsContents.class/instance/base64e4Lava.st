base 64 content
base64e4Lava
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCi8vIFZFUlNJT04gTEFWQShKKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQovLyBoZXJlJ3MgaG93IHRoaXMgd29ya3M6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KLy8gdGhlIGN1cnJlbnQgYW1vdW50IG9mIGRpdmlkZW5kcyBkdWUgdG8gZWFjaCB0b2tlbi1ob2xkZXIncyAgaXM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCi8vICAgcHJldmlvdXNfZHVlICsgWyBwKHgpICogdCh4KS9OIF0gKyBbIHAoeCsxKSAqIHQoeCsxKS9OIF0gKyAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQovLyAgIHdoZXJlIHAoeCkgaXMgdGhlIHgndGggcGF5bWVudCByZWNlaXZlZCBieSB0aGUgY29udHJhY3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KLy8gICAgICAgICB0KHgpIGlzIHRoZSBudW1iZXIgb2YgdG9rZW5zIGhlbGQgYnkgdGhlIHRva2VuLWhvbGRlciBhdCB0aGUgdGltZSBvZiBwKHgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCi8vICAgICAgICAgTiAgICBpcyB0aGUgdG90YWwgbnVtYmVyIG9mIHRva2Vucywgd2hpY2ggbmV2ZXIgY2hhbmdlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KLy8gYXNzdW1lIHRoYXQgdCh4KSB0YWtlcyBvbiAzIHZhbHVlcywgdChhKSwgdChiKSBhbmQgdChjKSwgZHVyaW5nIHBlcmlvZHMgYSwgYiwgYW5kIGMuIHRoZW46DQovLyBmYWN0b3Jpbmc6DQovLyAgIGN1cnJlbnRfZHVlID0geyAodChhKSAqIFtwKHgpICsgcCh4KzEpXSAuLi4pICsNCi8vICAgICAgICAgICAgICAgICAgICh0KGIpICogW3AoeSkgKyBwKHkrMSldIC4uLikgKw0KLy8gICAgICAgICAgICAgICAgICAgKHQoYykgKiBbcCh6KSArIHAoeisxKV0gLi4uKSB9IC8gTg0KLy8NCi8vIG9yDQovLw0KLy8gICBjdXJyZW50X2R1ZSA9IHsgKHQoYSkgKiBwZXJpb2RfYV9mZWVzKSArDQovLyAgICAgICAgICAgICAgICAgICAodChiKSAqIHBlcmlvZF9iX2ZlZXMpICsNCi8vICAgICAgICAgICAgICAgICAgICh0KGMpICogcGVyaW9kX2NfZmVlcykgfSAvIE4NCi8vDQovLyBpZiB3ZSBkZXNpZ25hdGUgY3VycmVudF9kdWUgKiBOIGFzIGN1cnJlbnQtcG9pbnRzLCB0aGVuDQovLw0KLy8gICBjdXJyZW50UG9pbnRzID0geyAgKHQoYSkgKiBwZXJpb2RfYV9mZWVzKSArDQovLyAgICAgICAgICAgICAgICAgICAgICAodChiKSAqIHBlcmlvZF9iX2ZlZXMpICsNCi8vICAgICAgICAgICAgICAgICAgICAgICh0KGMpICogcGVyaW9kX2NfZmVlcykgfQ0KLy8NCi8vIG9yIG1vcmUgc3VjY2ljdGx5LCBpZiB3ZSByZWNvbXB1dGUgY3VycmVudCBwb2ludHMgYmVmb3JlIGEgdG9rZW4taG9sZGVyJ3MgbnVtYmVyIG9mDQovLyB0b2tlbnMsIFQsIGlzIGFib3V0IHRvIGNoYW5nZToNCi8vDQovLyAgIGN1cnJlbnRQb2ludHMgPSBwcmV2aW91c19wb2ludHMgKyAoVCAqIGN1cnJlbnQtcGVyaW9kLWZlZXMpDQovLw0KLy8gd2hlbiB3ZSB3YW50IHRvIGRvIGEgcGF5b3V0LCB3ZSdsbCBjYWxjdWxhdGU6DQovLyAgY3VycmVudF9kdWUgPSBjdXJyZW50LXBvaW50cyAvIE4NCi8vDQovLyB3ZSdsbCBrZWVwIHRyYWNrIG9mIGEgdG9rZW4taG9sZGVyJ3MgY3VycmVudC1wZXJpb2QtcG9pbnRzLCB3aGljaCBpczoNCi8vICAgVCAqIGN1cnJlbnQtcGVyaW9kLWZlZXMNCi8vIGJ5IHRha2luZyBhIHNuYXBzaG90IG9mIGZlZXMgY29sbGVjdGVkIGV4YWN0bHkgd2hlbiB0aGUgY3VycmVudCBwZXJpb2QgYmVnYW47IHRoYXQgaXMsIHRoZSB3aGVuIHRoZQ0KLy8gbnVtYmVyIG9mIHRva2VucyBsYXN0IGNoYW5nZWQuIHRoYXQgaXMsIHdlIGtlZXAgYSBydW5uaW5nIGNvdW50IG9mIHRvdGFsIGZlZXMgcmVjZWl2ZWQNCi8vDQovLyAgIFRvdGFsRmVlc1JlY2VpdmVkID0gcCh4KSArIHAoeCsxKSArIHAoeCsyKQ0KLy8NCi8vICh3aGljaCBoYXBwaWx5IGlzIHRoZSBzYW1lIGZvciBhbGwgdG9rZW4gaG9sZGVycykgdGhlbiwgYmVmb3JlIGFueSB0b2tlbiBob2xkZXIgY2hhbmdlcyB0aGVpciBudW1iZXIgb2YNCi8vIHRva2VucyB3ZSBjb21wdXRlIChmb3IgdGhhdCB0b2tlbiBob2xkZXIpOg0KLy8NCi8vICBmdW5jdGlvbiBjYWxjQ3VyUG9pbnRzRm9yQWNjdChhY2N0KSB7DQovLyAgICBjdXJyZW50UG9pbnRzW2FjY3RdICs9IChUb3RhbEZlZXNSZWNlaXZlZCAtIGxhc3RTbmFwc2hvdFthY2N0XSkgKiBUW2FjY3RdDQovLyAgICBsYXN0U25hcHNob3RbYWNjdF0gPSBUb3RhbEZlZXNSZWNlaXZlZA0KLy8gIH0NCi8vDQovLyBpbiB0aGUgd2l0aGRyYXcgZmNuLCBhbGwgd2UgbmVlZCBpczoNCi8vDQovLyAgZnVuY3Rpb24gd2l0aGRyYXcoYWNjdCkgew0KLy8gICAgY2FsY0N1clBvaW50c0ZvckFjY3QoYWNjdCk7DQovLyAgICBjdXJyZW50X2Ftb3VudF9kdWUgPSBjdXJyZW50UG9pbnRzW2FjY3RdIC8gTg0KLy8gICAgY3VycmVudFBvaW50c1thY2N0XSA9IDA7DQovLyAgICBzZW5kKGN1cnJlbnRfYW1vdW50X2R1ZSk7DQovLyAgfQ0KLy8NCi8vDQovLyBzcGVjaWFsIHByb3Zpc2lvbnMgZm9yIHRyYW5zZmVycyBmcm9tIHRoZSBvbGQgZTRyb3cgY29udHJhY3QgKHRva2VuLXNwbGl0IHRyYW5zZmVycykNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIG5vcm1hbGx5IHdoZW4gYSBuZXcgYWNjdCBpcyBjcmVhdGVkLCBlZyBjdXogdG9rZW5zIGFyZSB0cmFuc2ZlcnJlZCBmcm9tIG9uZSBhY2N0IHRvIGFub3RoZXIsIHdlIGZpcnN0IGNhbGwNCi8vIGNhbGNDdXJQb2ludHNGb3JBY2N0KGFjY3QpIG9uIHRoZSBvbGQgYWNjdDsgb24gdGhlIG5ldyBhY2N0IHdlIHNldDoNCi8vICBjdXJyZW50UG9pbnRzW2FjY3RdID0gMDsNCi8vICBsYXN0U25hcHNob3RbYWNjdF0gPSBUb3RhbEZlZXNSZWNlaXZlZDsNCi8vDQovLyB0aGlzIHN0YXJ0cyB0aGUgbmV3IGFjY291bnQgd2l0aCBubyBjcmVkaXRzIGZvciBhbnkgZGl2aWRlbmRzIHRoYXQgaGF2ZSBiZWVuIGNvbGxlY3RlZCBzbyBmYXIsIHdoaWNoIGlzIHdoYXQNCi8vIHlvdSB3b3VsZCBnZW5lcmFsbHkgd2FudC4gaG93ZXZlciwgdGhlcmUgaXMgYSBjYXNlIGluIHdoaWNoIHRva2VucyBhcmUgdHJhbnNmZXJyZWQgZnJvbSB0aGUgb2xkIGU0cm93IGNvbnRyYWN0Lg0KLy8gaW4gdGhhdCBjYXNlIHRoZSB0b2tlbnMgd2VyZSByZXNlcnZlZCBvbiB0aGlzIGNvbnRyYWN0IGFsbCBhbG9uZywgYW5kIHRoZXkgZWFybiBkaXZpZGVuZHMgZXZlbiBiZWZvcmUgdGhleSBhcmUNCi8vIGFzc2lnbmVkIHRvIGFuIGFjY291bnQuIHNvIGZvciB0b2tlbi1zcGxpdCB0cmFuc2ZlcnM6DQovLyAgY3VycmVudFBvaW50c1thY2N0XSA9IDA7DQovLyAgbGFzdFNuYXBzaG90W2FjY3RdID0gMDsNCi8vDQovLyB0aGVuIGltbWVkaWF0ZWx5IGNhbGwgY2FsY0N1clBvaW50c0ZvckFjY3QoYWNjdCkgZm9yIHRoZSBuZXcgdG9rZW4tc3BsaXQgYWNjb3VudC4gaGUgd2lsbCBnZXQgY3JlZGl0DQovLyBmb3IgYWxsIHRoZSBhY2N1bXVsYXRlZCBwb2ludHMsIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aW1lLg0KLy8NCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCg0KLy8gQWJzdHJhY3QgY29udHJhY3QgZm9yIHRoZSBmdWxsIEVSQyAyMCBUb2tlbiBzdGFuZGFyZA0KLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwDQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLy8gQUJTVFJBQ1Qgc3RhbmRhcmQgdG9rZW4gY2xhc3MNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KY29udHJhY3QgVG9rZW4gew0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOw0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOw0KDQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7DQp9DQoNCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vICBFNFJvd1Jld2FyZHMgLSBhYnN0cmFjdCBlNCBkaXZpZGVuZCBjb250cmFjdA0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCmNvbnRyYWN0IEU0TGF2YVJld2FyZHMNCnsNCiAgICAgICAgZnVuY3Rpb24gY2hlY2tEaXZpZGVuZHMoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgcmV0dXJucyh1aW50IF9hbW91bnQpOw0KICAgICAgICBmdW5jdGlvbiB3aXRoZHJhd0RpdmlkZW5kcygpIHB1YmxpYyByZXR1cm5zICh1aW50IG5hbW91bnQpOw0KICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlckRpdmlkZW5kcyhhZGRyZXNzIF90bykgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICAgICAgZnVuY3Rpb24gZ2V0QWNjb3VudEluZm8oYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgcmV0dXJucyh1aW50IF90b2tlbnMsIHVpbnQgX3NuYXBzaG90LCB1aW50IF9wb2ludHMpOw0KDQp9DQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyAgRTRMYXZhT3B0aW4gLSBhYnN0cmFjdCBlNCBvcHRpbiBjb250cmFjdA0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCmNvbnRyYWN0IEU0TGF2YU9wdEluDQp7DQogICAgICAgIGZ1bmN0aW9uIG9wdEluRnJvbUNsYXNzaWMoKSBwdWJsaWM7DQp9DQoNCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vICBFNFJPVyAoTEFWQSkgLSB0b2tlbiBjb250cmFjdA0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCmNvbnRyYWN0IEU0TGF2YSBpcyBUb2tlbiwgRTRMYXZhUmV3YXJkcywgRTRMYXZhT3B0SW4gew0KICAgICAgICBldmVudCBTdGF0RXZlbnQoc3RyaW5nIG1zZyk7DQogICAgICAgIGV2ZW50IFN0YXRFdmVudEkoc3RyaW5nIG1zZywgdWludCB2YWwpOw0KDQogICAgICAgIGVudW0gU2V0dGluZ1N0YXRlVmFsdWUgIHtkZWJ1ZywgbG9ja2VkUmVsZWFzZX0NCg0KICAgICAgICBzdHJ1Y3QgdG9rZW5BY2NvdW50IHsNCiAgICAgICAgICAgICAgICBib29sIGFsbG9jZWQ7ICAgICAgIC8vIGZsYWcgdG8gYXNjZXJ0IHByaW9yIGFsbG9jYXRpb24NCiAgICAgICAgICAgICAgICB1aW50IHRva2VuczsgICAgICAgIC8vIG51bSB0b2tlbnMgY3VycmVudGx5IGhlbGQgaW4gdGhpcyBhY2N0DQogICAgICAgICAgICAgICAgdWludCBjdXJyZW50UG9pbnRzOyAvLyB1cGRhdGVkIGJlZm9yZSB0b2tlbiBiYWxhbmNlIGNoYW5nZXMsIG9yIGJlZm9yZSBhIHdpdGhkcmF3YWwuIGNyZWRpdCBmb3Igb3duaW5nIHRva2Vucw0KICAgICAgICAgICAgICAgIHVpbnQgbGFzdFNuYXBzaG90OyAgLy8gc25hcHNob3Qgb2YgZ2xvYmFsIFRvdGFsUG9pbnRzLCBsYXN0IHRpbWUgd2UgdXBkYXRlZCB0aGlzIGFjY3QncyBjdXJyZW50UG9pbnRzDQogICAgICAgIH0NCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vICBkYXRhIHN0b3JhZ2UNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgdWludCBjb25zdGFudCBOdW1PcmlnVG9rZW5zICAgICAgICAgPSA1NzYyOyAgIC8vIG51bWJlciBvZiBvbGQgdG9rZW5zLCBmcm9tIG9yaWdpbmFsIHRva2VuIGNvbnRyYWN0DQogICAgICAgIHVpbnQgY29uc3RhbnQgTmV3VG9rZW5zUGVyT3JpZ1Rva2VuID0gMTAwMDAwOyAvLyBob3cgbWFueSBuZXcgdG9rZW5zIGFyZSBjcmVhdGVkIGZvciBlYWNoIGZyb20gb3JpZ2luYWwgdG9rZW4NCiAgICAgICAgdWludCBjb25zdGFudCBOZXdUb2tlblN1cHBseSAgICAgICAgPSA1NzYyICogMTAwMDAwOw0KICAgICAgICB1aW50IHB1YmxpYyBudW1Ub2tzU3dpdGNoZWRPdmVyOyAgICAgICAgICAgICAgLy8gY291bnQgb2xkIHRva2VucyB0aGF0IGhhdmUgYmVlbiBjb252ZXJ0ZWQNCiAgICAgICAgdWludCBwdWJsaWMgaG9sZG92ZXJCYWxhbmNlOyAgICAgICAgICAgICAgICAgIC8vIGZ1bmRzIHJlY2VpdmVkLCBidXQgbm90IHlldCBkaXN0cmlidXRlZA0KICAgICAgICB1aW50IHB1YmxpYyBUb3RhbEZlZXNSZWNlaXZlZDsgICAgICAgICAgICAgICAgLy8gdG90YWwgZmVlcyByZWNlaXZlZCBmcm9tIHBhcnRuZXIgY29udHJhY3QocykNCg0KICAgICAgICBhZGRyZXNzIHB1YmxpYyBkZXZlbG9wZXJzOyAgICAgICAgICAgICAgICAgICAgLy8gZGV2ZWxvcGVycyB0b2tlbiBob2xkaW5nIGFkZHJlc3MNCiAgICAgICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlcGxveWVyIGV4ZWN1dG9yDQogICAgICAgIGFkZHJlc3MgcHVibGljIG9sZEU0OyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGRyIG9mIG9sZCBlNCB0b2tlbiBjb250cmFjdA0KICAgICAgICBhZGRyZXNzIHB1YmxpYyBvbGRFNFJlY3ljbGVCaW47ICAgICAgICAgICAgICAgLy8gYWRkciB0byB0cmFuc2ZlciBvbGQgdG9rZW5zDQoNCiAgICAgICAgdWludCBwdWJsaWMgZGVjaW1hbHM7DQogICAgICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOw0KDQogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdG9rZW5BY2NvdW50KSBob2xkZXJBY2NvdW50czsgICAgICAgICAgLy8gd2hvIGhvbGRzIGhvdyBtYW55IHRva2VucyAoaGlnaCB0d28gYnl0ZXMgY29udGFpbiBjdXJQYXlJZCkNCiAgICAgICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBob2xkZXJJbmRleGVzOyAgICAgICAgICAgICAgICAgICAvLyBmb3IgaXRlcmF0aW9uIHRocnUgaG9sZGVyDQogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsgLy8gYXBwcm92YWxzDQogICAgICAgIHVpbnQgcHVibGljIG51bUFjY291bnRzOw0KDQogICAgICAgIHVpbnQgcHVibGljIHBheW91dFRocmVzaG9sZDsgICAgICAgICAgICAgICAgICAvLyBubyB3aXRoZHJhd2FscyBsZXNzIHRoYW4gdGhpcyBhbW91bnQsIHRvIGF2b2lkIHJlbWFpbmRlcnMNCiAgICAgICAgdWludCBwdWJsaWMgcndHYXM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJld2FyZCBnYXMNCiAgICAgICAgdWludCBwdWJsaWMgb3B0SW5YZmVyR2FzOyAgICAgICAgICAgICAgICAgICAgIC8vIGdhcyB1c2VkIHdoZW4gb3B0SW5Gcm9tQ2xhc3NpYyBjYWxscyB4ZmVyIG9uIG9sZCBjb250cmFjdA0KICAgICAgICB1aW50IHB1YmxpYyBvcHRJbkZjbk1pbkdhczsgICAgICAgICAgICAgICAgICAgLy8gZ2FzIHdlIG5lZWQgZm9yIHRoZSBvcHRJbkZyb21DbGFzc2ljIGZjbiwgKmV4Y2x1ZGluZyogb3B0SW5YZmVyR2FzDQogICAgICAgIHVpbnQgcHVibGljIHZlc3RUaW1lID0gMTUyNTIxOTIwMTsgICAgICAgICAgICAvLyAxIHllYXIgcGFzdCBzYWxlIHZlc3QgZGV2ZWxvcGVyIHRva2Vucw0KDQogICAgICAgIFNldHRpbmdTdGF0ZVZhbHVlIHB1YmxpYyBzZXR0aW5nc1N0YXRlOw0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gY29udHJhY3QgY29uc3RydWN0b3INCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gRTRMYXZhKCkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICAgICAgICAgICAgICBkZXZlbG9wZXJzID0gbXNnLnNlbmRlcjsNCiAgICAgICAgICAgICAgICBkZWNpbWFscyA9IDI7DQogICAgICAgICAgICAgICAgc3ltYm9sID0gIkU0Uk9XIjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIHVzZSB0aGlzIHRvIHJlc2V0IGV2ZXJ5dGhpbmcsIHdpbGwgbmV2ZXIgYmUgY2FsbGVkIGFmdGVyIGxvY2tSZWxlYXNlDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGFwcGx5U2V0dGluZ3MoU2V0dGluZ1N0YXRlVmFsdWUgcVN0YXRlLCB1aW50IF90aHJlc2hvbGQsIHVpbnQgX3J3LCB1aW50IF9vcHRYZmVyR2FzLCB1aW50IF9vcHRGY25HYXMgKQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQoNCiAgICAgICAgICAgICAgICAvLyB0aGVzZSBzZXR0aW5ncyBhcmUgcGVybWFuZW50bHkgdHdlYWthYmxlIGZvciBwZXJmb3JtYW5jZSBhZGp1c3RtZW50cw0KICAgICAgICAgICAgICAgIHBheW91dFRocmVzaG9sZCA9IF90aHJlc2hvbGQ7DQogICAgICAgICAgICAgICAgcndHYXMgPSBfcnc7DQogICAgICAgICAgICAgICAgb3B0SW5YZmVyR2FzID0gX29wdFhmZXJHYXM7DQogICAgICAgICAgICAgICAgb3B0SW5GY25NaW5HYXMgPSBfb3B0RmNuR2FzOw0KDQogICAgICAgICAgICAgICAgLy8gdGhpcyBmaXJzdCB0ZXN0IGNoZWNrcyBpZiBhbHJlYWR5IGxvY2tlZA0KICAgICAgICAgICAgICAgIGlmIChzZXR0aW5nc1N0YXRlID09IFNldHRpbmdTdGF0ZVZhbHVlLmxvY2tlZFJlbGVhc2UpDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQoNCiAgICAgICAgICAgICAgICBzZXR0aW5nc1N0YXRlID0gcVN0YXRlOw0KDQogICAgICAgICAgICAgICAgLy8gdGhpcyBzZWNvbmQgdGVzdCBhbGxvd3MgbG9ja2luZyB3aXRob3V0IGNoYW5naW5nIG90aGVyIHBlcm1hbmVudCBzZXR0aW5ncw0KICAgICAgICAgICAgICAgIC8vIFdBUk5JTkcsIE1BS0UgU1VSRSBZT1VSJ1JFIEhBUFBZIFdJVEggQUxMIFNFVFRJTkdTDQogICAgICAgICAgICAgICAgLy8gQkVGT1JFIExPQ0tJTkcNCg0KICAgICAgICAgICAgICAgIGlmIChxU3RhdGUgPT0gU2V0dGluZ1N0YXRlVmFsdWUubG9ja2VkUmVsZWFzZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJMb2NraW5nISIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIHplcm8gb3V0IGFsbCB0b2tlbiBob2xkZXJzLg0KICAgICAgICAgICAgICAgIC8vIGxlYXZlIGFsbG9jZWQgb24sIGxlYXZlIG51bSBhY2NvdW50cw0KICAgICAgICAgICAgICAgIC8vIGNhbnQgZGVsZXRlIHRoZW0gYW55d2F5cw0KDQogICAgICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbnVtQWNjb3VudHM7IGkrKyApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgYSA9IGhvbGRlckluZGV4ZXNbaV07DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSAhPSBhZGRyZXNzKDApKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW2FdLnRva2VucyA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW2FdLmN1cnJlbnRQb2ludHMgPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1thXS5sYXN0U25hcHNob3QgPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIG51bVRva3NTd2l0Y2hlZE92ZXIgPSAwOw0KICAgICAgICAgICAgICAgIGhvbGRvdmVyQmFsYW5jZSA9IDA7DQogICAgICAgICAgICAgICAgVG90YWxGZWVzUmVjZWl2ZWQgPSAwOw0KDQogICAgICAgICAgICAgICAgaWYgKHRoaXMuYmFsYW5jZSA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3duZXIuY2FsbC5nYXMocndHYXMpLnZhbHVlKHRoaXMuYmFsYW5jZSkoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJFUlJPUiEiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJvayIpOw0KDQogICAgICAgIH0NCg0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBhbGxvY2F0ZSBhIG5ldyBhY2NvdW50IGJ5IHNldHRpbmcgYWxsb2MgdG8gdHJ1ZQ0KICAgICAgICAvLyBhZGQgaG9sZGVyIGluZGV4LCBidW1wIHRoZSBudW0gYWNjb3VudHMNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGFkZEFjY291bnQoYWRkcmVzcyBfYWRkcikgaW50ZXJuYWwgIHsNCiAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tfYWRkcl0uYWxsb2NlZCA9IHRydWU7DQogICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX2FkZHJdLnRva2VucyA9IDA7DQogICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX2FkZHJdLmN1cnJlbnRQb2ludHMgPSAwOw0KICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW19hZGRyXS5sYXN0U25hcHNob3QgPSBUb3RhbEZlZXNSZWNlaXZlZDsNCiAgICAgICAgICAgICAgICBob2xkZXJJbmRleGVzW251bUFjY291bnRzKytdID0gX2FkZHI7DQogICAgICAgIH0NCg0KDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLy8gQkVHSU4gRVJDLTIwIGZyb20gU3RhbmRhcmRUb2tlbg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KICAgICAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgc3VwcGx5ID0gTmV3VG9rZW5TdXBwbHk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIHNlbmRlciB0cmFuc2ZlcnMgdG9rZW5zIHRvIGEgbmV3IGFjY3QNCiAgICAgICAgLy8gZG8gbm90IHVzZSB0aGlzIGZjbiBmb3IgYSB0b2tlbi1zcGxpdCB0cmFuc2ZlciBmcm9tIHRoZSBvbGQgdG9rZW4gY29udHJhY3QhDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoKG1zZy5zZW5kZXIgPT0gZGV2ZWxvcGVycykNCiAgICAgICAgICAgICAgICAgICAgICAgICYmICAobm93IDwgdmVzdFRpbWUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvL3N0YXRFdmVudCgiVG9rZW5zIG5vdCB5ZXQgdmVzdGVkLiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vRGVmYXVsdCBhc3N1bWVzIHRvdGFsU3VwcGx5IGNhbid0IGJlIG92ZXIgbWF4ICgyXjI1NiAtIDEpLg0KICAgICAgICAgICAgICAgIC8vSWYgeW91ciB0b2tlbiBsZWF2ZXMgb3V0IHRvdGFsU3VwcGx5IGFuZCBjYW4gaXNzdWUgbW9yZSB0b2tlbnMgYXMgdGltZSBnb2VzIG9uLCB5b3UgbmVlZCB0byBjaGVjayBpZiBpdCBkb2Vzbid0IHdyYXAuDQogICAgICAgICAgICAgICAgLy9SZXBsYWNlIHRoZSBpZiB3aXRoIHRoaXMgb25lIGluc3RlYWQuDQogICAgICAgICAgICAgICAgLy9pZiAoaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0udG9rZW5zID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gaG9sZGVyQWNjb3VudHNbX3RvXSkgew0KICAgICAgICAgICAgICAgIGlmIChob2xkZXJBY2NvdW50c1ttc2cuc2VuZGVyXS50b2tlbnMgPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgLy9maXJzdCBjcmVkaXQgc2VuZGVyIHdpdGggcG9pbnRzIGFjY3J1ZWQgc28gZmFyLi4gbXVzdCBkbyB0aGlzIGJlZm9yZSBudW1iZXIgb2YgaGVsZCB0b2tlbnMgY2hhbmdlcw0KICAgICAgICAgICAgICAgICAgICBjYWxjQ3VyUG9pbnRzRm9yQWNjdChtc2cuc2VuZGVyKTsNCiAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0udG9rZW5zIC09IF92YWx1ZTsNCg0KICAgICAgICAgICAgICAgICAgICBpZiAoIWhvbGRlckFjY291bnRzW190b10uYWxsb2NlZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkQWNjb3VudChfdG8pOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIC8vY3JlZGl0IGRlc3RpbmF0aW9uIGFjY3Qgd2l0aCBwb2ludHMgYWNjcnVlZCBzbyBmYXIuLiBtdXN0IGRvIHRoaXMgYmVmb3JlIG51bWJlciBvZiBoZWxkIHRva2VucyBjaGFuZ2VzDQogICAgICAgICAgICAgICAgICAgIGNhbGNDdXJQb2ludHNGb3JBY2N0KF90byk7DQogICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW190b10udG9rZW5zICs9IF92YWx1ZTsNCg0KICAgICAgICAgICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIH0NCg0KDQogICAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICAgICAgICAgIGlmICgoX2Zyb20gPT0gZGV2ZWxvcGVycykNCiAgICAgICAgICAgICAgICAgICAgICAgICYmICAobm93IDwgdmVzdFRpbWUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvL3N0YXRFdmVudCgiVG9rZW5zIG5vdCB5ZXQgdmVzdGVkLiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vc2FtZSBhcyBhYm92ZS4gUmVwbGFjZSB0aGlzIGxpbmUgd2l0aCB0aGUgZm9sbG93aW5nIGlmIHlvdSB3YW50IHRvIHByb3RlY3QgYWdhaW5zdCB3cmFwcGluZyB1aW50cy4NCiAgICAgICAgICAgICAgICAvL2lmIChob2xkZXJBY2NvdW50c1tfZnJvbV0udG9rZW5zID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgaG9sZGVyQWNjb3VudHNbX3RvXS50b2tlbnMgKyBfdmFsdWUgPiBob2xkZXJBY2NvdW50c1tfdG9dLnRva2Vucykgew0KICAgICAgICAgICAgICAgIGlmIChob2xkZXJBY2NvdW50c1tfZnJvbV0udG9rZW5zID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgew0KDQogICAgICAgICAgICAgICAgICAgIGNhbGNDdXJQb2ludHNGb3JBY2N0KF9mcm9tKTsNCiAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX2Zyb21dLnRva2VucyAtPSBfdmFsdWU7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFob2xkZXJBY2NvdW50c1tfdG9dLmFsbG9jZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEFjY291bnQoX3RvKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAvL2NyZWRpdCBkZXN0aW5hdGlvbiBhY2N0IHdpdGggcG9pbnRzIGFjY3J1ZWQgc28gZmFyLi4gbXVzdCBkbyB0aGlzIGJlZm9yZSBudW1iZXIgb2YgaGVsZCB0b2tlbnMgY2hhbmdlcw0KICAgICAgICAgICAgICAgICAgICBjYWxjQ3VyUG9pbnRzRm9yQWNjdChfdG8pOw0KICAgICAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tfdG9dLnRva2VucyArPSBfdmFsdWU7DQoNCiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgICAgICAgICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCg0KICAgICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgICAgICAgICAgICAgIGJhbGFuY2UgPSBob2xkZXJBY2NvdW50c1tfb3duZXJdLnRva2VuczsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICAgICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgew0KICAgICAgICAgICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICAgICAgICB9DQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyBFTkQgRVJDMjANCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIGNhbGMgY3VycmVudCBwb2ludHMgZm9yIGEgdG9rZW4gaG9sZGVyOyB0aGF0IGlzLCBwb2ludHMgdGhhdCBhcmUgZHVlIHRvIHRoaXMgdG9rZW4gaG9sZGVyIGZvciBhbGwgZGl2aWRlbmRzDQogICAgICAgIC8vIHJlY2VpdmVkIGJ5IHRoZSBjb250cmFjdCBkdXJpbmcgdGhlIGN1cnJlbnQgInBlcmlvZCIuIHRoZSBwZXJpb2QgYmVnYW4gdGhlIGxhc3QgdGltZSB0aGlzIGZjbiB3YXMgY2FsbGVkLCBhdCB3aGljaA0KICAgICAgICAvLyB0aW1lIHdlIHVwZGF0ZWQgdGhlIGFjY291bnQncyBzbmFwc2hvdCBvZiB0aGUgcnVubmluZyBwb2ludCBjb3VudCwgVG90YWxGZWVzUmVjZWl2ZWQuIGR1cmluZyB0aGUgcGVyaW9kIHRoZSBhY2NvdW50J3MNCiAgICAgICAgLy8gbnVtYmVyIG9mIHRva2VucyBtdXN0IG5vdCBoYXZlIGNoYW5nZWQuIHNvIGFsd2F5cyBjYWxsIHRoaXMgZmNuIGJlZm9yZSBjaGFuZ2luZyB0aGUgbnVtYmVyIG9mIHRva2Vucy4NCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBjYWxjQ3VyUG9pbnRzRm9yQWNjdChhZGRyZXNzIF9hY2N0KSBpbnRlcm5hbCB7DQogICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW19hY2N0XS5jdXJyZW50UG9pbnRzICs9IChUb3RhbEZlZXNSZWNlaXZlZCAtIGhvbGRlckFjY291bnRzW19hY2N0XS5sYXN0U25hcHNob3QpICogaG9sZGVyQWNjb3VudHNbX2FjY3RdLnRva2VuczsNCiAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX2FjY3RdLmxhc3RTbmFwc2hvdCA9IFRvdGFsRmVlc1JlY2VpdmVkOw0KICAgICAgICB9DQoNCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gYWNjZXB0IHBheW1lbnQgZnJvbSBhIHBhcnRuZXIgY29udHJhY3QNCiAgICAgICAgLy8gZnVuZHMgc2VudCBoZXJlIGFyZSBhZGRlZCB0byBUb3RhbEZlZXNSZWNlaXZlZA0KICAgICAgICAvLyBXQVJOSU5HISBETyBOT1QgQ0FMTCBUSElTIEZVTkNUSU9OIExFU1QgWU9VIExPU0UgWU9VUiBNT05FWQ0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7DQogICAgICAgICAgICAgICAgaG9sZG92ZXJCYWxhbmNlICs9IG1zZy52YWx1ZTsNCiAgICAgICAgICAgICAgICBUb3RhbEZlZXNSZWNlaXZlZCArPSBtc2cudmFsdWU7DQogICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgiUGF5bWVudCIsIG1zZy52YWx1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gb25lIG5ldmVyIGtub3dzIGlmIHRoaXMgd2lsbCBjb21lIGluIGhhbmR5Lg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gYmxhY2tIb2xlKCkgcGF5YWJsZSB7DQogICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgiYWRqdXN0ZWQiLCBtc2cudmFsdWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBzZW5kZXIgd2l0aGRyYXcgZW50aXJlIHJld2FyZHMvZGl2aWRlbmRzDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gd2l0aGRyYXdEaXZpZGVuZHMoKSBwdWJsaWMgcmV0dXJucyAodWludCBfYW1vdW50KQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QobXNnLnNlbmRlcik7DQoNCiAgICAgICAgICAgICAgICBfYW1vdW50ID0gaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0uY3VycmVudFBvaW50cyAvIE5ld1Rva2VuU3VwcGx5Ow0KICAgICAgICAgICAgICAgIGlmIChfYW1vdW50IDw9IHBheW91dFRocmVzaG9sZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgibG93IEJhbGFuY2UiLCBfYW1vdW50KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChtc2cuc2VuZGVyID09IGRldmVsb3BlcnMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmICAobm93IDwgdmVzdFRpbWUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiVG9rZW5zIG5vdCB5ZXQgdmVzdGVkLiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYW1vdW50ID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICB1aW50IF9wb2ludHNVc2VkID0gX2Ftb3VudCAqIE5ld1Rva2VuU3VwcGx5Ow0KICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0uY3VycmVudFBvaW50cyAtPSBfcG9pbnRzVXNlZDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRvdmVyQmFsYW5jZSAtPSBfYW1vdW50Ow0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtc2cuc2VuZGVyLmNhbGwuZ2FzKHJ3R2FzKS52YWx1ZShfYW1vdW50KSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIGFsbG93IHNlbmRlciB0byB0cmFuc2ZlciBkaXZpZGVuZHMNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlckRpdmlkZW5kcyhhZGRyZXNzIF90bykgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKChtc2cuc2VuZGVyID09IGRldmVsb3BlcnMpDQogICAgICAgICAgICAgICAgICAgICAgICAmJiAgKG5vdyA8IHZlc3RUaW1lKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy9zdGF0RXZlbnQoIlRva2VucyBub3QgeWV0IHZlc3RlZC4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QobXNnLnNlbmRlcik7DQogICAgICAgICAgICAgICAgaWYgKGhvbGRlckFjY291bnRzW21zZy5zZW5kZXJdLmN1cnJlbnRQb2ludHMgPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJaZXJvIGJhbGFuY2UiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKCFob2xkZXJBY2NvdW50c1tfdG9dLmFsbG9jZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEFjY291bnQoX3RvKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QoX3RvKTsNCiAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tfdG9dLmN1cnJlbnRQb2ludHMgKz0gaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0uY3VycmVudFBvaW50czsNCiAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1ttc2cuc2VuZGVyXS5jdXJyZW50UG9pbnRzID0gMDsNCiAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIlRyYXNuZmVyZWQgRGl2aWRlbmRzIik7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBzZXQgZ2FzIGZvciBvcGVyYXRpb25zDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gc2V0T3BHYXModWludCBfcncsIHVpbnQgX29wdFhmZXJHYXMsIHVpbnQgX29wdEZjbkdhcykNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyICYmIG1zZy5zZW5kZXIgIT0gZGV2ZWxvcGVycykgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy9TdGF0RXZlbnQoIm9ubHkgb3duZXIgY2FsbHMiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgcndHYXMgPSBfcnc7DQogICAgICAgICAgICAgICAgICAgICAgICBvcHRJblhmZXJHYXMgPSBfb3B0WGZlckdhczsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdEluRmNuTWluR2FzID0gX29wdEZjbkdhczsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIH0NCg0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gY2hlY2sgcmV3YXJkcy4gIHBhc3MgaW4gYWRkcmVzcyBvZiB0b2tlbiBob2xkZXINCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBjaGVja0RpdmlkZW5kcyhhZGRyZXNzIF9hZGRyKSBjb25zdGFudCByZXR1cm5zKHVpbnQgX2Ftb3VudCkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChob2xkZXJBY2NvdW50c1tfYWRkcl0uYWxsb2NlZCkgew0KICAgICAgICAgICAgICAgICAgIC8vZG9uJ3QgY2FsbCBjYWxjQ3VyUG9pbnRzRm9yQWNjdCBoZXJlLCBjdXogdGhpcyBpcyBhIGNvbnN0YW50IGZjbg0KICAgICAgICAgICAgICAgICAgIHVpbnQgX2N1cnJlbnRQb2ludHMgPSBob2xkZXJBY2NvdW50c1tfYWRkcl0uY3VycmVudFBvaW50cyArDQogICAgICAgICAgICAgICAgICAgICAgICAoKFRvdGFsRmVlc1JlY2VpdmVkIC0gaG9sZGVyQWNjb3VudHNbX2FkZHJdLmxhc3RTbmFwc2hvdCkgKiBob2xkZXJBY2NvdW50c1tfYWRkcl0udG9rZW5zKTsNCiAgICAgICAgICAgICAgICAgICBfYW1vdW50ID0gX2N1cnJlbnRQb2ludHMgLyBOZXdUb2tlblN1cHBseTsNCg0KICAgICAgICAgICAgICAgIC8vIGxvdyBiYWxhbmNlPyBsZXQgaGltIHNlZSBpdCAtRXRhbnNreQ0KICAgICAgICAgICAgICAgICAgLy8gaWYgKF9hbW91bnQgPD0gcGF5b3V0VGhyZXNob2xkKSB7DQogICAgICAgICAgICAgICAgICAvLyAgICBfYW1vdW50ID0gMDsNCiAgICAgICAgICAgICAgICAgIC8vIH0NCg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQoNCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIHN3YXAgZXhlY3V0b3INCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIF9hZGRyKQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXINCiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHNldHRpbmdzU3RhdGUgPT0gU2V0dGluZ1N0YXRlVmFsdWUubG9ja2VkUmVsZWFzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgICAgICAgICBvd25lciA9IF9hZGRyOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBzZXQgZGV2ZWxvcGVycyBhY2NvdW50DQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gc2V0RGV2ZWxvcGVyKGFkZHJlc3MgX2FkZHIpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcg0KICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2V0dGluZ3NTdGF0ZSA9PSBTZXR0aW5nU3RhdGVWYWx1ZS5sb2NrZWRSZWxlYXNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93Ow0KICAgICAgICAgICAgICAgIGRldmVsb3BlcnMgPSBfYWRkcjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gc2V0IG9sZEU0IEFkZHJlc3Nlcw0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIHNldE9sZEU0KGFkZHJlc3MgX29sZEU0LCBhZGRyZXNzIF9vbGRFNFJlY3lsZSkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyDQogICAgICAgICAgICAgICAgICAgICAgICB8fCBzZXR0aW5nc1N0YXRlID09IFNldHRpbmdTdGF0ZVZhbHVlLmxvY2tlZFJlbGVhc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgb2xkRTQgPSBfb2xkRTQ7DQogICAgICAgICAgICAgICAgb2xkRTRSZWN5Y2xlQmluID0gX29sZEU0UmVjeWxlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBnZXQgYWNjb3VudCBpbmZvDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gZ2V0QWNjb3VudEluZm8oYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgcmV0dXJucyh1aW50IF90b2tlbnMsIHVpbnQgX3NuYXBzaG90LCB1aW50IF9wb2ludHMpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBfdG9rZW5zID0gaG9sZGVyQWNjb3VudHNbX2FkZHJdLnRva2VuczsNCiAgICAgICAgICAgICAgICBfc25hcHNob3QgPSBob2xkZXJBY2NvdW50c1tfYWRkcl0ubGFzdFNuYXBzaG90Ow0KICAgICAgICAgICAgICAgIF9wb2ludHMgPSBob2xkZXJBY2NvdW50c1tfYWRkcl0uY3VycmVudFBvaW50czsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBERUJVRyBPTkxZIC0gZW5kIHRoaXMgY29udHJhY3QsIHN1aWNpZGUgdG8gZGV2ZWxvcGVycw0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGhhcmFLaXJpKCkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChzZXR0aW5nc1N0YXRlICE9IFNldHRpbmdTdGF0ZVZhbHVlLmRlYnVnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgc3VpY2lkZShkZXZlbG9wZXJzKTsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBPUFQgSU4gRlJPTSBDTEFTU0lDLg0KICAgICAgICAvLyBBbGwgb2xkIHRva2VuIGhvbGRlcnMgY2FuIG9wdCBpbnRvIHRoaXMgbmV3IGNvbnRyYWN0IGJ5IGNhbGxpbmcgdGhpcyBmdW5jdGlvbi4NCiAgICAgICAgLy8gVGhpcyAidHJhbnNmZXJGcm9tInMgdG9rZW5zIGZyb20gdGhlIG9sZCBhZGRyZXNzZXMgdG8gdGhlIG5ldyByZWN5Y2xlQmluIGFkZHJlc3MNCiAgICAgICAgLy8gd2hpY2ggaXMgYSBuZXcgYWRkcmVzcyBzZXQgdXAgb24gdGhlIG9sZCBjb250cmFjdC4gIEFmdGVyd2hpY2ggbmV3IHRva2Vucw0KICAgICAgICAvLyBhcmUgY3JlZGl0ZWQgdG8gdGhlIG9sZCBob2xkZXIuICBBbHNvIHRoZSBsYXN0U25hcFNob3QgaXMgc2V0IHRvIDAgdGhlbg0KICAgICAgICAvLyBjYWxjQ3JlZGl0ZWQgcG9pbnRzIGFyZSBjYWxsZWQgc2V0dGluZyB1cCB0aGUgbmV3IHNpZ25hdG9yZWUgYWxsIG9mIGhpcw0KICAgICAgICAvLyBhY2NydWVkIGRpdmlkZW5kcy4NCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBvcHRJbkZyb21DbGFzc2ljKCkgcHVibGljDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAob2xkRTQgPT0gYWRkcmVzcygwKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJjb25maWcgZXJyIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vIDEuIGNoZWNrIGJhbGFuY2Ugb2YgbXNnLnNlbmRlciBpbiBvbGQgY29udHJhY3QuDQogICAgICAgICAgICAgICAgYWRkcmVzcyBucmVxdWVzdGVyID0gbXNnLnNlbmRlcjsNCg0KICAgICAgICAgICAgICAgIC8vIDIuIG1ha2Ugc3VyZSBhY2NvdW50IG5vdCBhbHJlYWR5IGFsbG9jZCAoaW4gZmFjdCwgaXQncyBvayBpZiBpdCdzIGFsbG9jZCwgc28gbG9uZw0KICAgICAgICAgICAgICAgIC8vIGFzIGl0IGlzIGVtcHR5IG5vdy4gdGhlIHJlYXNvbiBmb3IgdGhpcyBjaGVjayBpcyBjdXogd2UgYXJlIGdvaW5nIHRvIGNyZWRpdCBoaW0gd2l0aA0KICAgICAgICAgICAgICAgIC8vIGRpdmlkZW5kcywgYWNjb3JkaW5nIHRvIGhpcyB0b2tlbiBjb3VudCwgZnJvbSB0aGUgYmVnaW4gb2YgdGltZS4NCiAgICAgICAgICAgICAgICBpZiAoaG9sZGVyQWNjb3VudHNbbnJlcXVlc3Rlcl0udG9rZW5zICE9IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiQWNjb3VudCBoYXMgYWxyZWFkeSBoYXMgdG9rZW5zISIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIDMuIGNoZWNrIGhpcyB0b2sgYmFsYW5jZQ0KICAgICAgICAgICAgICAgIFRva2VuIGljbGFzc2ljID0gVG9rZW4ob2xkRTQpOw0KICAgICAgICAgICAgICAgIHVpbnQgX3Rva3MgPSBpY2xhc3NpYy5iYWxhbmNlT2YobnJlcXVlc3Rlcik7DQogICAgICAgICAgICAgICAgaWYgKF90b2tzID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiTm90aGluZyB0byBkbyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIG11c3QgYmUgMTAwIHBlcmNlbnQgb2YgaG9sZGluZ3MNCiAgICAgICAgICAgICAgICBpZiAoaWNsYXNzaWMuYWxsb3dhbmNlKG5yZXF1ZXN0ZXIsIGFkZHJlc3ModGhpcykpIDwgX3Rva3MpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiUGxlYXNlIGFwcHJvdmUgdGhpcyBjb250cmFjdCB0byB0cmFuc2ZlciIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIDQuIGJlZm9yZSB3ZSBkbyB0aGUgdHJhbnNmZXIsIG1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgYXQgbGVhc3QgZW5vdWdoIGdhcyBmb3IgdGhlDQogICAgICAgICAgICAgICAgLy8gdHJhbnNmZXIgcGx1cyB0aGUgcmVtYWluZGVyIG9mIHRoaXMgZmNuLg0KICAgICAgICAgICAgICAgIGlmIChtc2cuZ2FzIDwgb3B0SW5YZmVyR2FzICsgb3B0SW5GY25NaW5HYXMpDQogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzsNCg0KICAgICAgICAgICAgICAgIC8vIDUuIHRyYW5zZmVyIGhpcyBvbGQgdG9rcyB0byByZWN5bGUgYmluDQogICAgICAgICAgICAgICAgaWNsYXNzaWMudHJhbnNmZXJGcm9tLmdhcyhvcHRJblhmZXJHYXMpKG5yZXF1ZXN0ZXIsIG9sZEU0UmVjeWNsZUJpbiwgX3Rva3MpOw0KDQogICAgICAgICAgICAgICAgLy8gdG9kbywgZXJyb3IgY2hlY2s/DQogICAgICAgICAgICAgICAgaWYgKGljbGFzc2ljLmJhbGFuY2VPZihucmVxdWVzdGVyKSA9PSAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWNjZXNzLCBhZGQgdGhlIGFjY291bnQsIHNldCB0aGUgdG9rZW5zLCBzZXQgc25hcHNob3QgdG8gemVybw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFob2xkZXJBY2NvdW50c1tucmVxdWVzdGVyXS5hbGxvY2VkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRBY2NvdW50KG5yZXF1ZXN0ZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbbnJlcXVlc3Rlcl0udG9rZW5zID0gX3Rva3MgKiBOZXdUb2tlbnNQZXJPcmlnVG9rZW47DQogICAgICAgICAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tucmVxdWVzdGVyXS5sYXN0U25hcHNob3QgPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QobnJlcXVlc3Rlcik7DQogICAgICAgICAgICAgICAgICAgICAgICBudW1Ub2tzU3dpdGNoZWRPdmVyICs9IF90b2tzOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byBkZWNyZW1lbnQgcG9pbnRzIGZyb20gYSAiaG9sZGluZyBhY2NvdW50Ig0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gYi9jIHRoZXJlIGlzIG5vIG5lZWQgdG8ga2VlcCBpdC4NCiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiU3VjY2VzcyBTd2l0Y2hlZCBPdmVyIik7DQogICAgICAgICAgICAgICAgfSBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIlRyYW5zZmVyIEVycm9yISBwbGVhc2UgY29udGFjdCBEZXYgdGVhbSEiKTsNCg0KDQogICAgICAgIH0NCg0KDQoNCn0='