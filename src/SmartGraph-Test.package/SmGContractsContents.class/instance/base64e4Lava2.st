base 64 content
base64e4Lava2
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLy8gVkVSU0lPTiBMQVZBKEQpDQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyBoZXJlJ3MgaG93IHRoaXMgd29ya3M6DQovLyB0aGUgY3VycmVudCBhbW91bnQgb2YgZGl2aWRlbmRzIGR1ZSB0byBlYWNoIHRva2VuLWhvbGRlcidzICBpczoNCi8vICAgcHJldmlvdXNfZHVlICsgWyBwKHgpICogdCh4KS9OIF0gKyBbIHAoeCsxKSAqIHQoeCsxKS9OIF0gKyAuLi4NCi8vICAgd2hlcmUgcCh4KSBpcyB0aGUgeCd0aCBwYXltZW50IHJlY2VpdmVkIGJ5IHRoZSBjb250cmFjdA0KLy8gICAgICAgICB0KHgpIGlzIHRoZSBudW1iZXIgb2YgdG9rZW5zIGhlbGQgYnkgdGhlIHRva2VuLWhvbGRlciBhdCB0aGUgdGltZSBvZiBwKHgpDQovLyAgICAgICAgIE4gICAgaXMgdGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMsIHdoaWNoIG5ldmVyIGNoYW5nZXMNCi8vDQovLyBhc3N1bWUgdGhhdCB0KHgpIHRha2VzIG9uIDMgdmFsdWVzLCB0KGEpLCB0KGIpIGFuZCB0KGMpLCBkdXJpbmcgcGVyaW9kcyBhLCBiLCBhbmQgYy4gdGhlbjoNCi8vIGZhY3RvcmluZzoNCi8vICAgY3VycmVudF9kdWUgPSB7ICh0KGEpICogW3AoeCkgKyBwKHgrMSldIC4uLikgKw0KLy8gICAgICAgICAgICAgICAgICAgKHQoYikgKiBbcCh5KSArIHAoeSsxKV0gLi4uKSArDQovLyAgICAgICAgICAgICAgICAgICAodChjKSAqIFtwKHopICsgcCh6KzEpXSAuLi4pIH0gLyBODQovLw0KLy8gb3INCi8vDQovLyAgIGN1cnJlbnRfZHVlID0geyAodChhKSAqIHBlcmlvZF9hX2ZlZXMpICsNCi8vICAgICAgICAgICAgICAgICAgICh0KGIpICogcGVyaW9kX2JfZmVlcykgKw0KLy8gICAgICAgICAgICAgICAgICAgKHQoYykgKiBwZXJpb2RfY19mZWVzKSB9IC8gTg0KLy8NCi8vIGlmIHdlIGRlc2lnbmF0ZSBjdXJyZW50X2R1ZSAqIE4gYXMgY3VycmVudC1wb2ludHMsIHRoZW4NCi8vDQovLyAgIGN1cnJlbnRQb2ludHMgPSB7ICAodChhKSAqIHBlcmlvZF9hX2ZlZXMpICsNCi8vICAgICAgICAgICAgICAgICAgICAgICh0KGIpICogcGVyaW9kX2JfZmVlcykgKw0KLy8gICAgICAgICAgICAgICAgICAgICAgKHQoYykgKiBwZXJpb2RfY19mZWVzKSB9DQovLw0KLy8gb3IgbW9yZSBzdWNjaWN0bHksIGlmIHdlIHJlY29tcHV0ZSBjdXJyZW50IHBvaW50cyBiZWZvcmUgYSB0b2tlbi1ob2xkZXIncyBudW1iZXIgb2YNCi8vIHRva2VucywgVCwgaXMgYWJvdXQgdG8gY2hhbmdlOg0KLy8NCi8vICAgY3VycmVudFBvaW50cyA9IHByZXZpb3VzX3BvaW50cyArIChUICogY3VycmVudC1wZXJpb2QtZmVlcykNCi8vDQovLyB3aGVuIHdlIHdhbnQgdG8gZG8gYSBwYXlvdXQsIHdlJ2xsIGNhbGN1bGF0ZToNCi8vICBjdXJyZW50X2R1ZSA9IGN1cnJlbnQtcG9pbnRzIC8gTg0KLy8NCi8vIHdlJ2xsIGtlZXAgdHJhY2sgb2YgYSB0b2tlbi1ob2xkZXIncyBjdXJyZW50LXBlcmlvZC1wb2ludHMsIHdoaWNoIGlzOg0KLy8gICBUICogY3VycmVudC1wZXJpb2QtZmVlcw0KLy8gYnkgdGFraW5nIGEgc25hcHNob3Qgb2YgZmVlcyBjb2xsZWN0ZWQgZXhhY3RseSB3aGVuIHRoZSBjdXJyZW50IHBlcmlvZCBiZWdhbjsgdGhhdCBpcywgdGhlIHdoZW4gdGhlDQovLyBudW1iZXIgb2YgdG9rZW5zIGxhc3QgY2hhbmdlZC4gdGhhdCBpcywgd2Uga2VlcCBhIHJ1bm5pbmcgY291bnQgb2YgdG90YWwgZmVlcyByZWNlaXZlZA0KLy8NCi8vICAgVG90YWxGZWVzUmVjZWl2ZWQgPSBwKHgpICsgcCh4KzEpICsgcCh4KzIpDQovLw0KLy8gKHdoaWNoIGhhcHBpbHkgaXMgdGhlIHNhbWUgZm9yIGFsbCB0b2tlbiBob2xkZXJzKSB0aGVuLCBiZWZvcmUgYW55IHRva2VuIGhvbGRlciBjaGFuZ2VzIHRoZWlyIG51bWJlciBvZg0KLy8gdG9rZW5zIHdlIGNvbXB1dGUgKGZvciB0aGF0IHRva2VuIGhvbGRlcik6DQovLw0KLy8gIGZ1bmN0aW9uIGNhbGNDdXJQb2ludHNGb3JBY2N0KGFjY3QpIHsNCi8vICAgIGN1cnJlbnRQb2ludHNbYWNjdF0gKz0gKFRvdGFsRmVlc1JlY2VpdmVkIC0gbGFzdFNuYXBzaG90W2FjY3RdKSAqIFRbYWNjdF0NCi8vICAgIGxhc3RTbmFwc2hvdFthY2N0XSA9IFRvdGFsRmVlc1JlY2VpdmVkDQovLyAgfQ0KLy8NCi8vIGluIHRoZSB3aXRoZHJhdyBmY24sIGFsbCB3ZSBuZWVkIGlzOg0KLy8NCi8vICBmdW5jdGlvbiB3aXRoZHJhdyhhY2N0KSB7DQovLyAgICBjYWxjQ3VyUG9pbnRzRm9yQWNjdChhY2N0KTsNCi8vICAgIGN1cnJlbnRfYW1vdW50X2R1ZSA9IGN1cnJlbnRQb2ludHNbYWNjdF0gLyBODQovLyAgICBjdXJyZW50UG9pbnRzW2FjY3RdID0gMDsNCi8vICAgIHNlbmQoY3VycmVudF9hbW91bnRfZHVlKTsNCi8vICB9DQovLw0KLy8NCi8vIHNwZWNpYWwgcHJvdmlzaW9ucyBmb3IgdHJhbnNmZXJzIGZyb20gdGhlIG9sZCBlNHJvdyBjb250cmFjdCAodG9rZW4tc3BsaXQgdHJhbnNmZXJzKQ0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLy8gbm9ybWFsbHkgd2hlbiBhIG5ldyBhY2N0IGlzIGNyZWF0ZWQsIGVnIGN1eiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkIGZyb20gb25lIGFjY3QgdG8gYW5vdGhlciwgd2UgZmlyc3QgY2FsbA0KLy8gY2FsY0N1clBvaW50c0ZvckFjY3QoYWNjdCkgb24gdGhlIG9sZCBhY2N0OyBvbiB0aGUgbmV3IGFjY3Qgd2Ugc2V0Og0KLy8gIGN1cnJlbnRQb2ludHNbYWNjdF0gPSAwOw0KLy8gIGxhc3RTbmFwc2hvdFthY2N0XSA9IFRvdGFsRmVlc1JlY2VpdmVkOw0KLy8NCi8vIHRoaXMgc3RhcnRzIHRoZSBuZXcgYWNjb3VudCB3aXRoIG5vIGNyZWRpdHMgZm9yIGFueSBkaXZpZGVuZHMgdGhhdCBoYXZlIGJlZW4gY29sbGVjdGVkIHNvIGZhciwgd2hpY2ggaXMgd2hhdA0KLy8geW91IHdvdWxkIGdlbmVyYWxseSB3YW50LiBob3dldmVyLCB0aGVyZSBpcyBhIGNhc2UgaW4gd2hpY2ggdG9rZW5zIGFyZSB0cmFuc2ZlcnJlZCBmcm9tIHRoZSBvbGQgZTRyb3cgY29udHJhY3QuDQovLyBpbiB0aGF0IGNhc2UgdGhlIHRva2VucyB3ZXJlIHJlc2VydmVkIG9uIHRoaXMgY29udHJhY3QgYWxsIGFsb25nLCBhbmQgdGhleSBlYXJuIGRpdmlkZW5kcyBldmVuIGJlZm9yZSB0aGV5IGFyZQ0KLy8gYXNzaWduZWQgdG8gYW4gYWNjb3VudC4gc28gZm9yIHRva2VuLXNwbGl0IHRyYW5zZmVyczoNCi8vICBjdXJyZW50UG9pbnRzW2FjY3RdID0gMDsNCi8vICBsYXN0U25hcHNob3RbYWNjdF0gPSAwOw0KLy8NCi8vIHRoZW4gaW1tZWRpYXRlbHkgY2FsbCBjYWxjQ3VyUG9pbnRzRm9yQWNjdChhY2N0KSBmb3IgdGhlIG5ldyB0b2tlbi1zcGxpdCBhY2NvdW50LiBoZSB3aWxsIGdldCBjcmVkaXQNCi8vIGZvciBhbGwgdGhlIGFjY3VtdWxhdGVkIHBvaW50cywgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRpbWUuDQovLw0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KDQovLyBBYnN0cmFjdCBjb250cmFjdCBmb3IgdGhlIGZ1bGwgRVJDIDIwIFRva2VuIHN0YW5kYXJkDQovLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjANCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyBBQlNUUkFDVCBzdGFuZGFyZCB0b2tlbiBjbGFzcw0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpjb250cmFjdCBUb2tlbiB7IA0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpOw0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOw0KDQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7DQp9DQoNCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vICBFNFJvd1Jld2FyZHMgLSBhYnN0cmFjdCBlNCBkaXZpZGVuZCBjb250cmFjdA0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCmNvbnRyYWN0IEU0TGF2YVJld2FyZHMNCnsNCiAgICAgICAgZnVuY3Rpb24gY2hlY2tEaXZpZGVuZHMoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgcmV0dXJucyh1aW50IF9hbW91bnQpOw0KICAgICAgICBmdW5jdGlvbiB3aXRoZHJhd0RpdmlkZW5kcygpIHB1YmxpYyByZXR1cm5zICh1aW50IG5hbW91bnQpOw0KICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlckRpdmlkZW5kcyhhZGRyZXNzIF90bykgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCg0KfQ0KDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLy8gIEU0Uk9XIChMQVZBKSAtIHRva2VuIGNvbnRyYWN0DQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KY29udHJhY3QgRTRMYXZhIGlzIFRva2VuLCBFNExhdmFSZXdhcmRzIHsNCiAgICAgICAgZXZlbnQgU3RhdEV2ZW50KHN0cmluZyBtc2cpOw0KICAgICAgICBldmVudCBTdGF0RXZlbnRJKHN0cmluZyBtc2csIHVpbnQgdmFsKTsNCg0KICAgICAgICBlbnVtIFNldHRpbmdTdGF0ZVZhbHVlICB7ZGVidWcsIGxvY2tlZFJlbGVhc2V9DQoNCiAgICAgICAgc3RydWN0IHRva2VuQWNjb3VudCB7DQogICAgICAgICAgICAgICAgYm9vbCBhbGxvY2VkOyAgICAgICAvLyBmbGFnIHRvIGFzY2VydCBwcmlvciBhbGxvY2F0aW9uDQogICAgICAgICAgICAgICAgdWludCB0b2tlbnM7ICAgICAgICAvLyBudW0gdG9rZW5zIGN1cnJlbnRseSBoZWxkIGluIHRoaXMgYWNjdA0KICAgICAgICAgICAgICAgIHVpbnQgY3VycmVudFBvaW50czsgLy8gdXBkYXRlZCBiZWZvcmUgdG9rZW4gYmFsYW5jZSBjaGFuZ2VzLCBvciBiZWZvcmUgYSB3aXRoZHJhd2FsLiBjcmVkaXQgZm9yIG93bmluZyB0b2tlbnMNCiAgICAgICAgICAgICAgICB1aW50IGxhc3RTbmFwc2hvdDsgIC8vIHNuYXBzaG90IG9mIGdsb2JhbCBUb3RhbFBvaW50cywgbGFzdCB0aW1lIHdlIHVwZGF0ZWQgdGhpcyBhY2N0J3MgY3VycmVudFBvaW50cw0KICAgICAgICB9DQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyAgZGF0YSBzdG9yYWdlDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIHVpbnQgY29uc3RhbnQgTnVtT3JpZ1Rva2VucyAgICAgICAgID0gNTc2MjsgICAvLyBudW1iZXIgb2Ygb2xkIHRva2VucywgZnJvbSBvcmlnaW5hbCB0b2tlbiBjb250cmFjdA0KICAgICAgICB1aW50IGNvbnN0YW50IE5ld1Rva2Vuc1Blck9yaWdUb2tlbiA9IDEwMDAwMDsgLy8gaG93IG1hbnkgbmV3IHRva2VucyBhcmUgY3JlYXRlZCBmb3IgZWFjaCBmcm9tIG9yaWdpbmFsIHRva2VuDQogICAgICAgIHVpbnQgY29uc3RhbnQgTmV3VG9rZW5TdXBwbHkgICAgICAgID0gNTc2MiAqIDEwMDAwMDsNCiAgICAgICAgdWludCBwdWJsaWMgbnVtVG9rc1N3aXRjaGVkT3ZlcjsgICAgICAgICAgICAgIC8vIGNvdW50IG9sZCB0b2tlbnMgdGhhdCBoYXZlIGJlZW4gY29udmVydGVkDQogICAgICAgIHVpbnQgcHVibGljIGhvbGRvdmVyQmFsYW5jZTsgICAgICAgICAgICAgICAgICAvLyBmdW5kcyByZWNlaXZlZCwgYnV0IG5vdCB5ZXQgZGlzdHJpYnV0ZWQNCiAgICAgICAgdWludCBwdWJsaWMgVG90YWxGZWVzUmVjZWl2ZWQ7ICAgICAgICAgICAgICAgIC8vIHRvdGFsIGZlZXMgcmVjZWl2ZWQgZnJvbSBwYXJ0bmVyIGNvbnRyYWN0KHMpDQoNCiAgICAgICAgYWRkcmVzcyBwdWJsaWMgZGV2ZWxvcGVyczsgICAgICAgICAgICAgICAgICAgIC8vIGRldmVsb3BlcnMgdG9rZW4gaG9sZGluZyBhZGRyZXNzDQogICAgICAgIGFkZHJlc3MgcHVibGljIG93bmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZXBsb3llciBleGVjdXRvcg0KICAgICAgICBhZGRyZXNzIHB1YmxpYyBvbGRFNDsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkciBvZiBvbGQgZTQgdG9rZW4gY29udHJhY3QNCiAgICAgICAgYWRkcmVzcyBwdWJsaWMgb2xkRTRSZWN5Y2xlQmluOyAgLy8gYWRkciB0byB0cmFuc2ZlciBvbGQgdG9rZW5zDQoNCiAgICAgICAgdWludCBwdWJsaWMgZGVjaW1hbHM7DQogICAgICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOw0KDQogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdG9rZW5BY2NvdW50KSBob2xkZXJBY2NvdW50czsgICAgICAgICAgLy8gd2hvIGhvbGRzIGhvdyBtYW55IHRva2VucyAoaGlnaCB0d28gYnl0ZXMgY29udGFpbiBjdXJQYXlJZCkNCiAgICAgICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBob2xkZXJJbmRleGVzOyAgICAgICAgICAgICAgICAgICAvLyBmb3IgaXRlcmF0aW9uIHRocnUgaG9sZGVyDQogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsgLy8gYXBwcm92YWxzDQogICAgICAgIHVpbnQgcHVibGljIG51bUFjY291bnRzOw0KDQogICAgICAgIHVpbnQgcHVibGljIHBheW91dFRocmVzaG9sZDsgICAgICAgICAgICAgICAgICAvLyBubyB3aXRoZHJhd2FscyBsZXNzIHRoYW4gdGhpcyBhbW91bnQsIHRvIGF2b2lkIHJlbWFpbmRlcnMNCiAgICAgICAgdWludCBwdWJsaWMgdmVzdFRpbWU7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDEgeWVhciBwYXN0IHNhbGUgdmVzdCBkZXZlbG9wZXIgdG9rZW5zDQogICAgICAgIHVpbnQgcHVibGljIHJ3R2FzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXdhcmQgZ2FzDQogICAgICAgIHVpbnQgcHVibGljIG9wdEluR2FzOw0KDQogICAgICAgIFNldHRpbmdTdGF0ZVZhbHVlIHB1YmxpYyBzZXR0aW5nc1N0YXRlOw0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gY29udHJhY3QgY29uc3RydWN0b3INCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gRTRMYXZhKCkgDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgICAgICAgICAgICAgZGV2ZWxvcGVycyA9IG1zZy5zZW5kZXI7DQogICAgICAgICAgICAgICAgZGVjaW1hbHMgPSAyOw0KICAgICAgICAgICAgICAgIHN5bWJvbCA9ICJFNFJPVyI7DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyB1c2UgdGhpcyB0byByZXNldCBldmVyeXRoaW5nLCB3aWxsIG5ldmVyIGJlIGNhbGxlZCBhZnRlciBsb2NrUmVsZWFzZQ0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBhcHBseVNldHRpbmdzKFNldHRpbmdTdGF0ZVZhbHVlIHFTdGF0ZSwgdWludCBfdGhyZXNob2xkLCB1aW50IF92ZXN0LCB1aW50IF9ydywgdWludCBfb3B0R2FzICkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSANCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCg0KICAgICAgICAgICAgICAgIC8vIHRoZXNlIHNldHRpbmdzIGFyZSBwZXJtYW5lbnRseSB0d2Vha2FibGUgZm9yIHBlcmZvcm1hbmNlIGFkanVzdG1lbnRzDQogICAgICAgICAgICAgICAgcGF5b3V0VGhyZXNob2xkID0gX3RocmVzaG9sZDsNCiAgICAgICAgICAgICAgICByd0dhcyA9IF9ydzsNCiAgICAgICAgICAgICAgICBvcHRJbkdhcyA9IF9vcHRHYXM7DQoNCiAgICAgICAgICAgICAgICAvLyB0aGlzIGZpcnN0IHRlc3QgY2hlY2tzIGlmIGFscmVhZHkgbG9ja2VkDQogICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzU3RhdGUgPT0gU2V0dGluZ1N0YXRlVmFsdWUubG9ja2VkUmVsZWFzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCg0KICAgICAgICAgICAgICAgIHNldHRpbmdzU3RhdGUgPSBxU3RhdGU7DQoNCiAgICAgICAgICAgICAgICAvLyB0aGlzIHNlY29uZCB0ZXN0IGFsbG93cyBsb2NraW5nIHdpdGhvdXQgY2hhbmdpbmcgb3RoZXIgcGVybWFuZW50IHNldHRpbmdzDQogICAgICAgICAgICAgICAgLy8gV0FSTklORywgTUFLRSBTVVJFIFlPVVInUkUgSEFQUFkgV0lUSCBBTEwgU0VUVElOR1MgDQogICAgICAgICAgICAgICAgLy8gQkVGT1JFIExPQ0tJTkcNCg0KICAgICAgICAgICAgICAgIGlmIChxU3RhdGUgPT0gU2V0dGluZ1N0YXRlVmFsdWUubG9ja2VkUmVsZWFzZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJMb2NraW5nISIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIHplcm8gb3V0IGFsbCB0b2tlbiBob2xkZXJzLiAgDQogICAgICAgICAgICAgICAgLy8gbGVhdmUgYWxsb2NlZCBvbiwgbGVhdmUgbnVtIGFjY291bnRzDQogICAgICAgICAgICAgICAgLy8gY2FudCBkZWxldGUgdGhlbSBhbnl3YXlzDQoNCiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBudW1BY2NvdW50czsgaSsrICkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBhID0gaG9sZGVySW5kZXhlc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhICE9IGFkZHJlc3MoMCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbYV0udG9rZW5zID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbYV0uY3VycmVudFBvaW50cyA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW2FdLmxhc3RTbmFwc2hvdCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdmVzdFRpbWUgPSBfdmVzdDsNCiAgICAgICAgICAgICAgICBudW1Ub2tzU3dpdGNoZWRPdmVyID0gMDsNCg0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmJhbGFuY2UgPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW93bmVyLmNhbGwuZ2FzKHJ3R2FzKS52YWx1ZSh0aGlzLmJhbGFuY2UpKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiRVJST1IhIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIFN0YXRFdmVudCgib2siKTsNCg0KICAgICAgICB9DQoNCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gYWxsb2NhdGUgYSBuZXcgYWNjb3VudCBieSBzZXR0aW5nIGFsbG9jIHRvIHRydWUNCiAgICAgICAgLy8gYWRkIGhvbGRlciBpbmRleCwgYnVtcCB0aGUgbnVtIGFjY291bnRzDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBhZGRBY2NvdW50KGFkZHJlc3MgX2FkZHIpIGludGVybmFsICB7DQogICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX2FkZHJdLmFsbG9jZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW19hZGRyXS50b2tlbnMgPSAwOw0KICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW19hZGRyXS5jdXJyZW50UG9pbnRzID0gMDsNCiAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tfYWRkcl0ubGFzdFNuYXBzaG90ID0gVG90YWxGZWVzUmVjZWl2ZWQ7DQogICAgICAgICAgICAgICAgaG9sZGVySW5kZXhlc1tudW1BY2NvdW50cysrXSA9IF9hZGRyOw0KICAgICAgICB9DQoNCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIEJFR0lOIEVSQy0yMCBmcm9tIFN0YW5kYXJkVG9rZW4NCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCiAgICAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIHN1cHBseSA9IE5ld1Rva2VuU3VwcGx5Ow0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBzZW5kZXIgdHJhbnNmZXJzIHRva2VucyB0byBhIG5ldyBhY2N0DQogICAgICAgIC8vIGRvIG5vdCB1c2UgdGhpcyBmY24gZm9yIGEgdG9rZW4tc3BsaXQgdHJhbnNmZXIgZnJvbSB0aGUgb2xkIHRva2VuIGNvbnRyYWN0IQ0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSANCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmICgobXNnLnNlbmRlciA9PSBkZXZlbG9wZXJzKSANCiAgICAgICAgICAgICAgICAgICAgICAgICYmICAobm93IDwgdmVzdFRpbWUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvL3N0YXRFdmVudCgiVG9rZW5zIG5vdCB5ZXQgdmVzdGVkLiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vRGVmYXVsdCBhc3N1bWVzIHRvdGFsU3VwcGx5IGNhbid0IGJlIG92ZXIgbWF4ICgyXjI1NiAtIDEpLg0KICAgICAgICAgICAgICAgIC8vSWYgeW91ciB0b2tlbiBsZWF2ZXMgb3V0IHRvdGFsU3VwcGx5IGFuZCBjYW4gaXNzdWUgbW9yZSB0b2tlbnMgYXMgdGltZSBnb2VzIG9uLCB5b3UgbmVlZCB0byBjaGVjayBpZiBpdCBkb2Vzbid0IHdyYXAuDQogICAgICAgICAgICAgICAgLy9SZXBsYWNlIHRoZSBpZiB3aXRoIHRoaXMgb25lIGluc3RlYWQuDQogICAgICAgICAgICAgICAgLy9pZiAoaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0udG9rZW5zID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gaG9sZGVyQWNjb3VudHNbX3RvXSkgew0KICAgICAgICAgICAgICAgIGlmIChob2xkZXJBY2NvdW50c1ttc2cuc2VuZGVyXS50b2tlbnMgPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgLy9maXJzdCBjcmVkaXQgc2VuZGVyIHdpdGggcG9pbnRzIGFjY3J1ZWQgc28gZmFyLi4gbXVzdCBkbyB0aGlzIGJlZm9yZSBudW1iZXIgb2YgaGVsZCB0b2tlbnMgY2hhbmdlcw0KICAgICAgICAgICAgICAgICAgICBjYWxjQ3VyUG9pbnRzRm9yQWNjdChtc2cuc2VuZGVyKTsNCiAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0udG9rZW5zIC09IF92YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmICghaG9sZGVyQWNjb3VudHNbX3RvXS5hbGxvY2VkKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBhZGRBY2NvdW50KF90byk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgLy9jcmVkaXQgZGVzdGluYXRpb24gYWNjdCB3aXRoIHBvaW50cyBhY2NydWVkIHNvIGZhci4uIG11c3QgZG8gdGhpcyBiZWZvcmUgbnVtYmVyIG9mIGhlbGQgdG9rZW5zIGNoYW5nZXMNCiAgICAgICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QoX3RvKTsNCiAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX3RvXS50b2tlbnMgKz0gX3ZhbHVlOw0KDQogICAgICAgICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCg0KICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgICAgICAgICBpZiAoKF9mcm9tID09IGRldmVsb3BlcnMpIA0KICAgICAgICAgICAgICAgICAgICAgICAgJiYgIChub3cgPCB2ZXN0VGltZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vc3RhdEV2ZW50KCJUb2tlbnMgbm90IHlldCB2ZXN0ZWQuIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy9zYW1lIGFzIGFib3ZlLiBSZXBsYWNlIHRoaXMgbGluZSB3aXRoIHRoZSBmb2xsb3dpbmcgaWYgeW91IHdhbnQgdG8gcHJvdGVjdCBhZ2FpbnN0IHdyYXBwaW5nIHVpbnRzLg0KICAgICAgICAgICAgICAgIC8vaWYgKGhvbGRlckFjY291bnRzW19mcm9tXS50b2tlbnMgPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBob2xkZXJBY2NvdW50c1tfdG9dLnRva2VucyArIF92YWx1ZSA+IGhvbGRlckFjY291bnRzW190b10udG9rZW5zKSB7DQogICAgICAgICAgICAgICAgaWYgKGhvbGRlckFjY291bnRzW19mcm9tXS50b2tlbnMgPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBfdmFsdWUgPiAwKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QoX2Zyb20pOw0KICAgICAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tfZnJvbV0udG9rZW5zIC09IF92YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmICghaG9sZGVyQWNjb3VudHNbX3RvXS5hbGxvY2VkKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBhZGRBY2NvdW50KF90byk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgLy9jcmVkaXQgZGVzdGluYXRpb24gYWNjdCB3aXRoIHBvaW50cyBhY2NydWVkIHNvIGZhci4uIG11c3QgZG8gdGhpcyBiZWZvcmUgbnVtYmVyIG9mIGhlbGQgdG9rZW5zIGNoYW5nZXMNCiAgICAgICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QoX3RvKTsNCiAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX3RvXS50b2tlbnMgKz0gX3ZhbHVlOw0KDQogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCg0KICAgICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgICAgICAgICAgICAgIGJhbGFuY2UgPSBob2xkZXJBY2NvdW50c1tfb3duZXJdLnRva2VuczsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICAgICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgew0KICAgICAgICAgICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICAgICAgICB9DQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyBFTkQgRVJDMjANCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIGNhbGMgY3VycmVudCBwb2ludHMgZm9yIGEgdG9rZW4gaG9sZGVyOyB0aGF0IGlzLCBwb2ludHMgdGhhdCBhcmUgZHVlIHRvIHRoaXMgdG9rZW4gaG9sZGVyIGZvciBhbGwgZGl2aWRlbmRzDQogICAgICAgIC8vIHJlY2VpdmVkIGJ5IHRoZSBjb250cmFjdCBkdXJpbmcgdGhlIGN1cnJlbnQgInBlcmlvZCIuIHRoZSBwZXJpb2QgYmVnYW4gdGhlIGxhc3QgdGltZSB0aGlzIGZjbiB3YXMgY2FsbGVkLCBhdCB3aGljaA0KICAgICAgICAvLyB0aW1lIHdlIHVwZGF0ZWQgdGhlIGFjY291bnQncyBzbmFwc2hvdCBvZiB0aGUgcnVubmluZyBwb2ludCBjb3VudCwgVG90YWxGZWVzUmVjZWl2ZWQuIGR1cmluZyB0aGUgcGVyaW9kIHRoZSBhY2NvdW50J3MNCiAgICAgICAgLy8gbnVtYmVyIG9mIHRva2VucyBtdXN0IG5vdCBoYXZlIGNoYW5nZWQuIHNvIGFsd2F5cyBjYWxsIHRoaXMgZmNuIGJlZm9yZSBjaGFuZ2luZyB0aGUgbnVtYmVyIG9mIHRva2Vucy4NCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBjYWxjQ3VyUG9pbnRzRm9yQWNjdChhZGRyZXNzIF9hY2N0KSB7DQogICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW19hY2N0XS5jdXJyZW50UG9pbnRzICs9IChUb3RhbEZlZXNSZWNlaXZlZCAtIGhvbGRlckFjY291bnRzW19hY2N0XS5sYXN0U25hcHNob3QpICogaG9sZGVyQWNjb3VudHNbX2FjY3RdLnRva2VuczsNCiAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX2FjY3RdLmxhc3RTbmFwc2hvdCA9IFRvdGFsRmVlc1JlY2VpdmVkOw0KICAgICAgICB9DQoNCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gYWNjZXB0IHBheW1lbnQgZnJvbSBhIHBhcnRuZXIgY29udHJhY3QNCiAgICAgICAgLy8gZnVuZHMgc2VudCBoZXJlIGFyZSBhZGRlZCB0byBUb3RhbEZlZXNSZWNlaXZlZA0KICAgICAgICAvLyBXQVJOSU5HISBETyBOT1QgQ0FMTCBUSElTIEZVTkNUSU9OIExFU1QgWU9VIExPU0UgWU9VUiBNT05FWQ0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7DQogICAgICAgICAgICAgICAgaG9sZG92ZXJCYWxhbmNlICs9IG1zZy52YWx1ZTsNCiAgICAgICAgICAgICAgICBUb3RhbEZlZXNSZWNlaXZlZCArPSBtc2cudmFsdWU7DQogICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgiUGF5bWVudCIsIG1zZy52YWx1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gb25lIG5ldmVyIGtub3dzIGlmIHRoaXMgd2lsbCBjb21lIGluIGhhbmR5Lg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gYmxhY2tIb2xlKCkgcGF5YWJsZSB7DQogICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgiYWRqdXN0ZWQiLCBtc2cudmFsdWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBzZW5kZXIgd2l0aGRyYXcgZW50aXJlIHJld2FyZHMvZGl2aWRlbmRzDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gd2l0aGRyYXdEaXZpZGVuZHMoKSBwdWJsaWMgcmV0dXJucyAodWludCBfYW1vdW50KQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QobXNnLnNlbmRlcik7DQoNCiAgICAgICAgICAgICAgICBfYW1vdW50ID0gaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0uY3VycmVudFBvaW50cyAvIE5ld1Rva2VuU3VwcGx5Ow0KICAgICAgICAgICAgICAgIGlmIChfYW1vdW50IDw9IHBheW91dFRocmVzaG9sZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgibG93IEJhbGFuY2UiLCBfYW1vdW50KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChtc2cuc2VuZGVyID09IGRldmVsb3BlcnMpIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAgKG5vdyA8IHZlc3RUaW1lKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIlRva2VucyBub3QgeWV0IHZlc3RlZC4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Ftb3VudCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBfcG9pbnRzVXNlZCA9IF9hbW91bnQgKiBOZXdUb2tlblN1cHBseTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW21zZy5zZW5kZXJdLmN1cnJlbnRQb2ludHMgLT0gX3BvaW50c1VzZWQ7DQogICAgICAgICAgICAgICAgICAgICAgICBob2xkb3ZlckJhbGFuY2UgLT0gX2Ftb3VudDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbXNnLnNlbmRlci5jYWxsLmdhcyhyd0dhcykudmFsdWUoX2Ftb3VudCkoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBhbGxvdyBzZW5kZXIgdG8gdHJhbnNmZXIgZGl2aWRlbmRzDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gdHJhbnNmZXJEaXZpZGVuZHMoYWRkcmVzcyBfdG8pIHJldHVybnMgKGJvb2wgc3VjY2VzcykgDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoKG1zZy5zZW5kZXIgPT0gZGV2ZWxvcGVycykgDQogICAgICAgICAgICAgICAgICAgICAgICAmJiAgKG5vdyA8IHZlc3RUaW1lKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy9zdGF0RXZlbnQoIlRva2VucyBub3QgeWV0IHZlc3RlZC4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QobXNnLnNlbmRlcik7DQogICAgICAgICAgICAgICAgaWYgKGhvbGRlckFjY291bnRzW21zZy5zZW5kZXJdLmN1cnJlbnRQb2ludHMgPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJaZXJvIGJhbGFuY2UiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKCFob2xkZXJBY2NvdW50c1tfdG9dLmFsbG9jZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEFjY291bnQoX3RvKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2FsY0N1clBvaW50c0ZvckFjY3QoX3RvKTsNCiAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tfdG9dLmN1cnJlbnRQb2ludHMgKz0gaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0uY3VycmVudFBvaW50czsNCiAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1ttc2cuc2VuZGVyXS5jdXJyZW50UG9pbnRzID0gMDsNCiAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIlRyYXNuZmVyZWQgRGl2aWRlbmRzIik7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBzZXQgZ2FzIGZvciBvcGVyYXRpb25zDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gc2V0T3BHYXModWludCBfcncsIHVpbnQgX29wdEluKQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIgJiYgbXNnLnNlbmRlciAhPSBkZXZlbG9wZXJzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvL1N0YXRFdmVudCgib25seSBvd25lciBjYWxscyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICByd0dhcyA9IF9ydzsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdEluR2FzID0gX29wdEluOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBjaGVjayByZXdhcmRzLiAgcGFzcyBpbiBhZGRyZXNzIG9mIHRva2VuIGhvbGRlcg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGNoZWNrRGl2aWRlbmRzKGFkZHJlc3MgX2FkZHIpIGNvbnN0YW50IHJldHVybnModWludCBfYW1vdW50KQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGhvbGRlckFjY291bnRzW19hZGRyXS5hbGxvY2VkKSB7DQogICAgICAgICAgICAgICAgICAgLy9kb24ndCBjYWxsIGNhbGNDdXJQb2ludHNGb3JBY2N0IGhlcmUsIGN1eiB0aGlzIGlzIGEgY29uc3RhbnQgZmNuDQogICAgICAgICAgICAgICAgICAgdWludCBfY3VycmVudFBvaW50cyA9IGhvbGRlckFjY291bnRzW19hZGRyXS5jdXJyZW50UG9pbnRzICsgDQogICAgICAgICAgICAgICAgICAgICAgICAoKFRvdGFsRmVlc1JlY2VpdmVkIC0gaG9sZGVyQWNjb3VudHNbX2FkZHJdLmxhc3RTbmFwc2hvdCkgKiBob2xkZXJBY2NvdW50c1tfYWRkcl0udG9rZW5zKTsNCiAgICAgICAgICAgICAgICAgICBfYW1vdW50ID0gX2N1cnJlbnRQb2ludHMgLyBOZXdUb2tlblN1cHBseTsNCg0KICAgICAgICAgICAgICAgIC8vIGxvdyBiYWxhbmNlPyBsZXQgaGltIHNlZSBpdCAtRXRhbnNreQ0KICAgICAgICAgICAgICAgICAgLy8gaWYgKF9hbW91bnQgPD0gcGF5b3V0VGhyZXNob2xkKSB7DQogICAgICAgICAgICAgICAgICAvLyAgICBfYW1vdW50ID0gMDsNCiAgICAgICAgICAgICAgICAgIC8vIH0NCg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQoNCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIHN3YXAgZXhlY3V0b3INCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIF9hZGRyKSANCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyDQogICAgICAgICAgICAgICAgICAgICAgICB8fCBzZXR0aW5nc1N0YXRlID09IFNldHRpbmdTdGF0ZVZhbHVlLmxvY2tlZFJlbGVhc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgb3duZXIgPSBfYWRkcjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gc2V0IGRldmVsb3BlcnMgYWNjb3VudA0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIHNldERldmVsb3BlcihhZGRyZXNzIF9hZGRyKSANCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyDQogICAgICAgICAgICAgICAgICAgICAgICB8fCBzZXR0aW5nc1N0YXRlID09IFNldHRpbmdTdGF0ZVZhbHVlLmxvY2tlZFJlbGVhc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgZGV2ZWxvcGVycyA9IF9hZGRyOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBzZXQgb2xkRTQgQWRkcmVzc2VzDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gc2V0T2xkRTQoYWRkcmVzcyBfb2xkRTQsIGFkZHJlc3MgX29sZEU0UmVjeWxlKSANCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyDQogICAgICAgICAgICAgICAgICAgICAgICB8fCBzZXR0aW5nc1N0YXRlID09IFNldHRpbmdTdGF0ZVZhbHVlLmxvY2tlZFJlbGVhc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgb2xkRTQgPSBfb2xkRTQ7DQogICAgICAgICAgICAgICAgb2xkRTRSZWN5Y2xlQmluID0gX29sZEU0UmVjeWxlOw0KICAgICAgICB9DQoNCg0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gREVCVUcgT05MWSAtIGVuZCB0aGlzIGNvbnRyYWN0LCBzdWljaWRlIHRvIGRldmVsb3BlcnMNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBoYXJhS2lyaSgpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3NTdGF0ZSAhPSBTZXR0aW5nU3RhdGVWYWx1ZS5kZWJ1ZykNCiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93Ow0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93Ow0KICAgICAgICAgICAgICAgIHN1aWNpZGUoZGV2ZWxvcGVycyk7DQogICAgICAgIH0NCg0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gT1BUIElOIEZST00gQ0xBU1NJQy4NCiAgICAgICAgLy8gQWxsIG9sZCB0b2tlbiBob2xkZXJzIGNhbiBvcHQgaW50byB0aGlzIG5ldyBjb250cmFjdCBieSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uDQogICAgICAgIC8vIFRoaXMgInRyYW5zZmVyRnJvbSJzIHRva2VucyBmcm9tIHRoZSBvbGQgYWRkcmVzc2VzIHRvIHRoZSBuZXcgcmVjeWNsZUJpbiBhZGRyZXNzDQogICAgICAgIC8vIHdoaWNoIGlzIGEgbmV3IGFkZHJlc3Mgc2V0IHVwIG9uIHRoZSBvbGQgY29udHJhY3QuICBBZnRlcndoaWNoIG5ldyB0b2tlbnMgDQogICAgICAgIC8vIGFyZSBjcmVkaXRlZCB0byB0aGUgb2xkIGhvbGRlci4gIEFsc28gdGhlIGxhc3RTbmFwU2hvdCBpcyBzZXQgdG8gMCB0aGVuIA0KICAgICAgICAvLyBjYWxjQ3JlZGl0ZWQgcG9pbnRzIGFyZSBjYWxsZWQgc2V0dGluZyB1cCB0aGUgbmV3IHNpZ25hdG9yZWUgYWxsIG9mIGhpcyANCiAgICAgICAgLy8gYWNjcnVlZCBkaXZpZGVuZHMuDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gb3B0SW5Gcm9tQ2xhc3NpYygpIHB1YmxpYw0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG9sZEU0ID09IGFkZHJlc3MoMCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiY29uZmlnIGVyciIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyAxLiBjaGVjayBiYWxhbmNlIG9mIG1zZy5zZW5kZXIgaW4gb2xkIGNvbnRyYWN0Lg0KICAgICAgICAgICAgICAgIGFkZHJlc3MgbnJlcXVlc3RlciA9IG1zZy5zZW5kZXI7DQoNCiAgICAgICAgICAgICAgICAvLyAyLiBtYWtlIHN1cmUgYWNjb3VudCBub3QgYWxyZWFkeSBhbGxvY2QgKGluIGZhY3QsIGl0J3Mgb2sgaWYgaXQncyBhbGxvY2QsIHNvIGxvbmcNCiAgICAgICAgICAgICAgICAvLyBhcyBpdCBpcyBlbXB0eSBub3cuIHRoZSByZWFzb24gZm9yIHRoaXMgY2hlY2sgaXMgY3V6IHdlIGFyZSBnb2luZyB0byBjcmVkaXQgaGltIHdpdGgNCiAgICAgICAgICAgICAgICAvLyBkaXZpZGVuZHMsIGFjY29yZGluZyB0byBoaXMgdG9rZW4gY291bnQsIGZyb20gdGhlIGJlZ2luIG9mIHRpbWUuDQogICAgICAgICAgICAgICAgaWYgKGhvbGRlckFjY291bnRzW25yZXF1ZXN0ZXJdLnRva2VucyAhPSAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIkFjY291bnQgaGFzIGFscmVhZHkgYmVlbiBhbGxvY2QhIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gMy4gY2hlY2sgaGlzIHRvayBiYWxhbmNlDQogICAgICAgICAgICAgICAgVG9rZW4gaWNsYXNzaWMgPSBUb2tlbihvbGRFNCk7DQogICAgICAgICAgICAgICAgdWludCBfdG9rcyA9IGljbGFzc2ljLmJhbGFuY2VPZihucmVxdWVzdGVyKTsNCiAgICAgICAgICAgICAgICBpZiAoX3Rva3MgPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJOb3RoaW5nIHRvIGRvIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gbXVzdCBiZSAxMDAgcGVyY2VudCBvZiBob2xkaW5ncw0KICAgICAgICAgICAgICAgIGlmIChpY2xhc3NpYy5hbGxvd2FuY2UobnJlcXVlc3RlciwgYWRkcmVzcyh0aGlzKSkgPCBfdG9rcykgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJQbGVhc2UgYXBwcm92ZSB0aGlzIGNvbnRyYWN0IHRvIHRyYW5zZmVyIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gNCwgdHJhbnNmZXIgaGlzIG9sZCB0b2tzIHRvIHJlY3lsZSBiaW4NCiAgICAgICAgICAgICAgICBpY2xhc3NpYy50cmFuc2ZlckZyb20uZ2FzKG9wdEluR2FzKShucmVxdWVzdGVyLCBvbGRFNFJlY3ljbGVCaW4sIF90b2tzKTsNCg0KICAgICAgICAgICAgICAgIC8vIHRvZG8sIGVycm9yIGNoZWNrPw0KICAgICAgICAgICAgICAgIGlmIChpY2xhc3NpYy5iYWxhbmNlT2YobnJlcXVlc3RlcikgPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VjY2VzcywgYWRkIHRoZSBhY2NvdW50LCBzZXQgdGhlIHRva2Vucywgc2V0IHNuYXBzaG90IHRvIHplcm8NCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaG9sZGVyQWNjb3VudHNbbnJlcXVlc3Rlcl0uYWxsb2NlZCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQWNjb3VudChucmVxdWVzdGVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW25yZXF1ZXN0ZXJdLnRva2VucyA9IF90b2tzICogTmV3VG9rZW5zUGVyT3JpZ1Rva2VuOw0KICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbbnJlcXVlc3Rlcl0ubGFzdFNuYXBzaG90ID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGNDdXJQb2ludHNGb3JBY2N0KG5yZXF1ZXN0ZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgbnVtVG9rc1N3aXRjaGVkT3ZlciArPSBfdG9rczsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gZGVjcmVtZW50IHBvaW50cyBmcm9tIGEgImhvbGRpbmcgYWNjb3VudCINCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGIvYyB0aGVyZSBpcyBubyBuZWVkIHRvIGtlZXAgaXQuDQogICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIlN1Y2Nlc3MgU3dpdGNoZWQgT3ZlciIpOw0KICAgICAgICAgICAgICAgIH0gZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJUcmFuc2ZlciBFcnJvciEgcGxlYXNlIGNvbnRhY3QgRGV2IHRlYW0hIik7DQoNCg0KICAgICAgICB9DQoNCn0='