base 64 content
base64e4Token6
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KDQoNCi8vDQovLyBGT1IgUkVGRVJFTkNFIC0gSU5DTFVERSAgaUU0Um93RXNjcm93ICAoaW50ZXJmYWNlKSBDT05UUkFDVCBhdCB0aGUgdG9wIC4uLi4uDQovLw0KDQpjb250cmFjdCBpRTRSb3dFc2Nyb3cgew0KICAgICAgICBmdW5jdGlvbiBnZXROdW1HYW1lc1N0YXJ0ZWQoKSBjb25zdGFudCByZXR1cm5zIChpbnQgbmdhbWVzKTsNCn0NCg0KLy8gQWJzdHJhY3QgY29udHJhY3QgZm9yIHRoZSBmdWxsIEVSQyAyMCBUb2tlbiBzdGFuZGFyZA0KLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwDQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLy8gQUJTVFJBQ1Qgc3RhbmRhcmQgdG9rZW4gY2xhc3MNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KY29udHJhY3QgVG9rZW4geyANCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgc3VwcGx5KTsNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7DQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsNCg0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOw0KfQ0KDQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyAgRTRSb3dSZXdhcmRzIC0gYWJzdHJhY3QgZTQgZGl2aWRlbmQgY29udHJhY3QNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpjb250cmFjdCBFNFJvd1Jld2FyZHMNCnsNCiAgICAgICAgZnVuY3Rpb24gY2hlY2tEaXZpZGVuZHMoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgcmV0dXJucyh1aW50IF9hbW91bnQpOw0KICAgICAgICBmdW5jdGlvbiB3aXRoZHJhd0RpdmlkZW5kcygpIHB1YmxpYyByZXR1cm5zICh1aW50IG5hbW91bnQpOw0KfQ0KDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLy8gIEZpbm5leSBDaGlwIC0gdG9rZW4gY29udHJhY3QNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpjb250cmFjdCBFNFRva2VuIGlzIFRva2VuLCBFNFJvd1Jld2FyZHMgew0KICAgICAgICBldmVudCBTdGF0RXZlbnQoc3RyaW5nIG1zZyk7DQogICAgICAgIGV2ZW50IFN0YXRFdmVudEkoc3RyaW5nIG1zZywgdWludCB2YWwpOw0KDQogICAgICAgIGVudW0gU2V0dGluZ1N0YXRlVmFsdWUgIHtkZWJ1ZywgcmVsZWFzZSwgbG9ja2VkUmVsZWFzZX0NCiAgICAgICAgZW51bSBJY29TdGF0dXNWYWx1ZSB7YW5vdW5jZW1lbnQsIHNhbGVPcGVuLCBzYWxlQ2xvc2VkLCBmYWlsZWQsIHN1Y2NlZWRlZH0NCg0KDQoNCg0KICAgICAgICBzdHJ1Y3QgdG9rZW5BY2NvdW50IHsNCiAgICAgICAgICAgICAgICBib29sIGFsbG9jZWQ7IC8vIGZsYWcgdG8gYXNjZXJ0IHByaW9yIGFsbG9jYXRpb24NCiAgICAgICAgICAgICAgICB1aW50IHRva2VuczsgLy8gbnVtIHRva2Vucw0KICAgICAgICAgICAgICAgIHVpbnQgYmFsYW5jZTsgLy8gcmV3YXJkcyBiYWxhbmNlDQogICAgICAgIH0NCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyAgZGF0YSBzdG9yYWdlDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGFkZHJlc3MgZGV2ZWxvcGVyczsgLy8gZGV2ZWxvcGVycyB0b2tlbiBob2xkaW5nIGFkZHJlc3MNCiAgICAgICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7IC8vIGRlcGxveWVyIGV4ZWN1dG9yDQogICAgICAgIGFkZHJlc3MgZm91bmRlck9yZzsgLy8gZm91bmRlciBvcmdpbmFpemF0aW9uIGNvbnRyYWN0DQogICAgICAgIGFkZHJlc3MgYXV4UGFydG5lcjsgLy8gYXV4IHBhcnRuZXIgKHByL2F1ZGl0aW5nKSAtIDEgcGVyY2VudCB1cG9uIGNsb3NlDQogICAgICAgIGFkZHJlc3MgZTRfcGFydG5lcjsgLy8gZTRyb3cgIGNvbnRyYWN0IGFkZHJlc3Nlcw0KDQoNCiAgICAgICAgbWFwcGluZyAoYWRkcmVzcyA9PiB0b2tlbkFjY291bnQpIGhvbGRlckFjY291bnRzIDsgLy8gd2hvIGhvbGRzIGhvdyBtYW55IHRva2VucyAoaGlnaCB0d28gYnl0ZXMgY29udGFpbiBjdXJQYXlJZCkNCiAgICAgICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBob2xkZXJJbmRleGVzIDsgLy8gZm9yIGl0ZXJhdGlvbiB0aHJ1IGhvbGRlcg0KICAgICAgICB1aW50IG51bUFjY291bnRzOw0KDQogICAgICAgIHVpbnQgcGFydG5lckNyZWRpdHM7IC8vIGFtb3VudCBwYXJ0bmVyIChlNHJvdykgIGhhcyBwYWlkDQogICAgICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsgLy8gYXBwcm92YWxzDQoNCg0KICAgICAgICB1aW50IG1heE1pbnRhYmxlVG9rZW5zOyAvLyAuLi4NCiAgICAgICAgdWludCBtaW5JY29Ub2tlbkdvYWw7Ly8gdG9rZW4gZ29hbCBieSBzYWxlIGVuZA0KICAgICAgICB1aW50IG1pblVzYWdlR29hbDsgLy8gIG51bSBnYW1lcyBnb2FsIGJ5IHVzYWdlIGRlYWRsaW5lDQogICAgICAgIHVpbnQgcHVibGljICB0b2tlblByaWNlOyAvLyBwcmljZSBwZXIgdG9rZW4NCiAgICAgICAgdWludCBwdWJsaWMgcGF5b3V0VGhyZXNob2xkOyAvLyB0aHJlc2hvbGQgdGlsbCBwYXlvdXQNCg0KICAgICAgICB1aW50IHRvdGFsVG9rZW5GdW5kc1JlY2VpdmVkOyAgIC8vIHJ1bm5pbmcgdG90YWwgb2YgdG9rZW4gZnVuZHMgcmVjZWl2ZWQNCiAgICAgICAgdWludCBwdWJsaWMgdG90YWxUb2tlbnNNaW50ZWQ7ICAvLyB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIG1pbnRlZA0KICAgICAgICB1aW50IHB1YmxpYyBob2xkb3ZlckJhbGFuY2U7ICAgICAgICAgICAgLy8gaG9sZCB0aGlzIGFtb3VudCB1bnRpbCB0aHJlc2hob2xkIGJlZm9yZSByZXdhcmQgcGF5b3V0DQogICAgICAgIGludCBwdWJsaWMgcGF5b3V0QmFsYW5jZTsgICAgICAgICAgICAgICAvLyBob2xkIHRoaXMgYW1vdW50IHVudGlsIHRocmVzaGhvbGQgYmVmb3JlIHJld2FyZCBwYXlvdXQNCiAgICAgICAgaW50IHByT3JpZ1BheW91dEJhbDsgICAgICAgICAgICAgICAgICAgIC8vIG9yaWdpbmFsIHBheW91dCBiYWxhbmNlIGJlZm9yZSBydW4NCiAgICAgICAgdWludCBwck9yaWdUb2tlbnNNaW50OyAgICAgICAgICAgICAgICAgIC8vIHRva2VucyBtaW50ZWQgYXQgc3RhcnQgb2YgcGF5IHJ1bg0KICAgICAgICB1aW50IHB1YmxpYyBjdXJQYXlvdXRJZDsgICAgICAgICAgICAgICAgLy8gY3VycmVudCBwYXlvdXQgaWQNCiAgICAgICAgdWludCBwdWJsaWMgbGFzdFBheW91dEluZGV4OyAgICAgICAgICAgIC8vIHBheW91dCBpZHggYmV0d2VlbiBydW4gc2VnbWVudHMNCiAgICAgICAgdWludCBwdWJsaWMgbWF4UGF5c1BlcjsgICAgICAgICAgICAgICAgIC8vIG51bSBwYXlzIHBlciBzZWdtZW50DQogICAgICAgIHVpbnQgcHVibGljIG1pblBheUludGVydmFsOyAgICAgICAgICAgICAvLyBtaW4gaW50ZXJ2YWwgYmV0d2VlbiBzdGFydCBwYXkgcnVuDQoNCg0KICAgICAgICB1aW50IGZ1bmRpbmdTdGFydDsgICAgICAgICAgICAgIC8vIGZ1bmRpbmcgc3RhcnQgdGltZSBpbW1lZGlhdGVseSBhZnRlciBhbm91bmNlbWVudA0KICAgICAgICB1aW50IGZ1bmRpbmdEZWFkbGluZTsgICAgICAgICAgIC8vIGZ1bmRpbmcgZW5kIHRpbWUNCiAgICAgICAgdWludCB1c2FnZURlYWRsaW5lOyAgICAgICAgICAgICAvLyBkZWFkbGluZSB3aGVyZSBtaW5pbXVtIHVzYWdlIG5lZWRzIHRvIGJlIG1ldCBiZWZvcmUgY29uc2lkZXJlZCBzdWNjZXNzDQogICAgICAgIHVpbnQgcHVibGljIGxhc3RQYXlvdXRUaW1lOyAgICAgLy8gdGltZXN0YW1wIG9mIGxhc3QgcGF5b3V0IHRpbWUNCiAgICAgICAgdWludCB2ZXN0VGltZTsgICAgICAgICAgLy8gMSB5ZWFyIHBhc3Qgc2FsZSB2ZXN0IGRldmVsb3BlciB0b2tlbnMNCiAgICAgICAgdWludCBudW1EZXZUb2tlbnM7ICAgICAgLy8gMTAgcGVyIGNlbnQgb2YgdG9rZW5zIGFmdGVyIGNsb3NlIHRvIGRldmVsb3BlcnMNCiAgICAgICAgYm9vbCBkZXZlbG9wZXJzR3JhbnRlZDsgICAgICAgICAgICAgICAgIC8vIGZsYWcNCiAgICAgICAgdWludCByZW11bmVyYXRpb25TdGFnZTsgICAgICAgICAvLyAwIGZvciBub3QgeWV0LCAxIGZvciAxMCBwZXJjZW50LCAyIGZvciByZW1haW5pbmcgIHVwb24gc3VjY2VlZGVkLg0KICAgICAgICB1aW50IHB1YmxpYyByZW11bmVyYXRpb25CYWxhbmNlOyAgICAgICAgLy8gcmVtdW5lcmF0aW9uIGJhbGFuY2UgdG8gcmVsZWFzZSB0b2tlbiBmdW5kcw0KICAgICAgICB1aW50IGF1eFBhcnRuZXJCYWxhbmNlOyAgICAgICAgIC8vIGF1eCBwYXJ0bmVyIGJhbGFuY2UgLSAxIHBlcmNlbnQNCiAgICAgICAgdWludCBybUdhczsgLy8gcmVtdW5lcmF0aW9uIGdhcw0KICAgICAgICB1aW50IHJ3R2FzOyAvLyByZXdhcmQgZ2FzDQogICAgICAgIHVpbnQgcmZHYXM7IC8vIHJlZnVuZCBnYXMNCg0KICAgICAgICBJY29TdGF0dXNWYWx1ZSBpY29TdGF0dXM7ICAvLyBjdXJyZW50IHN0YXR1cyBvZiBpY28NCiAgICAgICAgU2V0dGluZ1N0YXRlVmFsdWUgcHVibGljIHNldHRpbmdzU3RhdGU7DQoNCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBjb250cmFjdCBjb25zdHJ1Y3Rvcg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBFNFRva2VuKCkgDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgICAgICAgICAgICAgZGV2ZWxvcGVycyA9IG1zZy5zZW5kZXI7DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyB1c2UgdGhpcyB0byByZXNldCBldmVyeXRoaW5nLCB3aWxsIG5ldmVyIGJlIGNhbGxlZCBhZnRlciBsb2NrUmVsZWFzZQ0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBhcHBseVNldHRpbmdzKFNldHRpbmdTdGF0ZVZhbHVlIHFTdGF0ZSwgdWludCBfc2FsZVN0YXJ0LCB1aW50IF9zYWxlRW5kLCB1aW50IF91c2FnZUVuZCwgdWludCBfbWluVXNhZ2UsIHVpbnQgX3Rva0dvYWwsIHVpbnQgIF9tYXhNaW50YWJsZSwgdWludCBfdGhyZXNob2xkLCB1aW50IF9wcmljZSwgdWludCBfbXBwLCB1aW50IF9tcGkgKQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIA0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KDQogICAgICAgICAgICAgICAgLy8gdGhlc2Ugc2V0dGluZ3MgYXJlIHBlcm1hbmVudGx5IHR3ZWFrYWJsZSBmb3IgcGVyZm9ybWFuY2UgYWRqdXN0bWVudHMNCiAgICAgICAgICAgICAgICBwYXlvdXRUaHJlc2hvbGQgPSBfdGhyZXNob2xkOw0KICAgICAgICAgICAgICAgIG1heFBheXNQZXIgPSBfbXBwOw0KICAgICAgICAgICAgICAgIG1pblBheUludGVydmFsID0gX21waTsNCg0KICAgICAgICAgICAgICAgIGlmIChzZXR0aW5nc1N0YXRlID09IFNldHRpbmdTdGF0ZVZhbHVlLmxvY2tlZFJlbGVhc2UpDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQoNCiAgICAgICAgICAgICAgICBzZXR0aW5nc1N0YXRlID0gcVN0YXRlOw0KICAgICAgICAgICAgICAgIGljb1N0YXR1cyA9IEljb1N0YXR1c1ZhbHVlLmFub3VuY2VtZW50Ow0KDQogICAgICAgICAgICAgICAgcm1HYXMgPSAxMDAwMDA7IC8vIHJlbXVuZXJhdGlvbiBnYXMNCiAgICAgICAgICAgICAgICByd0dhcyA9IDEwMDAwOyAvLyByZXdhcmQgZ2FzDQogICAgICAgICAgICAgICAgcmZHYXMgPSAxMDAwMDsgLy8gcmVmdW5kIGdhcw0KDQoNCiAgICAgICAgICAgICAgICAvLyB6ZXJvIG91dCBhbGwgdG9rZW4gaG9sZGVycy4gIA0KICAgICAgICAgICAgICAgIC8vIGxlYXZlIGFsbG9jZWQgb24sIGxlYXZlIG51bSBhY2NvdW50cw0KICAgICAgICAgICAgICAgIC8vIGNhbnQgZGVsZXRlIHRoZW0gYW55d2F5cw0KDQogICAgICAgICAgICAgICAgaWYgKHRvdGFsVG9rZW5zTWludGVkID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgbnVtQWNjb3VudHM7IGkrKyApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBhID0gaG9sZGVySW5kZXhlc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgIT0gYWRkcmVzcygwKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW2FdLnRva2VucyA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbYV0uYmFsYW5jZSA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gZG8gbm90IHJlc2V0IG51bUFjY291bnRzIQ0KDQogICAgICAgICAgICAgICAgdG90YWxUb2tlbnNNaW50ZWQgPSAwOyAvLyB0aGlzIHdpbGwgZXJhc2UNCiAgICAgICAgICAgICAgICB0b3RhbFRva2VuRnVuZHNSZWNlaXZlZCA9IDA7IC8vIHRoaXMgd2lsbCBlcmFzZS4NCiAgICAgICAgICAgICAgICBlNF9wYXJ0bmVyID0gYWRkcmVzcygwKTsgLy8gbXVzdCBiZSByZXNldCBhZ2Fpbg0KDQogICAgICAgICAgICAgICAgZnVuZGluZ1N0YXJ0ID0gIF9zYWxlU3RhcnQ7DQogICAgICAgICAgICAgICAgZnVuZGluZ0RlYWRsaW5lID0gX3NhbGVFbmQ7DQogICAgICAgICAgICAgICAgdXNhZ2VEZWFkbGluZSA9IF91c2FnZUVuZDsNCiAgICAgICAgICAgICAgICBtaW5Vc2FnZUdvYWwgPSBfbWluVXNhZ2U7DQogICAgICAgICAgICAgICAgbWluSWNvVG9rZW5Hb2FsID0gX3Rva0dvYWw7DQogICAgICAgICAgICAgICAgbWF4TWludGFibGVUb2tlbnMgPSBfbWF4TWludGFibGU7DQogICAgICAgICAgICAgICAgdG9rZW5QcmljZSA9IF9wcmljZTsNCg0KICAgICAgICAgICAgICAgIHZlc3RUaW1lID0gZnVuZGluZ1N0YXJ0ICsgKDM2NSBkYXlzKTsNCiAgICAgICAgICAgICAgICBudW1EZXZUb2tlbnMgPSAwOw0KDQogICAgICAgICAgICAgICAgaG9sZG92ZXJCYWxhbmNlID0gMDsNCiAgICAgICAgICAgICAgICBwYXlvdXRCYWxhbmNlID0gMDsNCiAgICAgICAgICAgICAgICBjdXJQYXlvdXRJZCA9IDE7DQogICAgICAgICAgICAgICAgbGFzdFBheW91dEluZGV4ID0gMDsNCiAgICAgICAgICAgICAgICByZW11bmVyYXRpb25TdGFnZSA9IDA7DQogICAgICAgICAgICAgICAgcmVtdW5lcmF0aW9uQmFsYW5jZSA9IDA7DQogICAgICAgICAgICAgICAgYXV4UGFydG5lckJhbGFuY2UgPSAwOw0KICAgICAgICAgICAgICAgIGRldmVsb3BlcnNHcmFudGVkID0gZmFsc2U7DQogICAgICAgICAgICAgICAgbGFzdFBheW91dFRpbWUgPSAwOw0KDQogICAgICAgICAgICAgICAgaWYgKHRoaXMuYmFsYW5jZSA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3duZXIuY2FsbC5nYXMocmZHYXMpLnZhbHVlKHRoaXMuYmFsYW5jZSkoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJFUlJPUiEiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJvayIpOw0KDQogICAgICAgIH0NCg0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyB0b2tlbnMgaGVsZCByZXNlcnZlIHRoZSB0b3AgdHdvIGJ5dGVzIGZvciB0aGUgcGF5aWQgbGFzdCBwYWlkLg0KICAgICAgICAvLyB0aGlzIGlzIHNvIGhvbGRlcnMgYXQgdGhlIHRvcCBvZiB0aGUgbGlzdCBkb250IHRyYW5zZmVyIHRva2VucyANCiAgICAgICAgLy8gdG8gdGhlbXNlbHZlcyBvbiB0aGUgYm90dG9tIG9mIHRoZSBsaXN0IHRodXMgc2NhbW1pbmcgdGhlIA0KICAgICAgICAvLyBzeXN0ZW0uIHRoaXMgZnVuY3Rpb24gZGVjb25zdHJ1Y3RzIHRoZSB0b2tlbmhlbGQgdmFsdWUuDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBnZXRQYXlJZEFuZEhlbGQodWludCBfdG9rSGVsZCkgaW50ZXJuYWwgcmV0dXJucyAodWludCBfcGF5SWQsIHVpbnQgX2hlbGQpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBfcGF5SWQgPSAoX3Rva0hlbGQgLyAoMiAqKiA0OCkpICYgMHhmZmZmOw0KICAgICAgICAgICAgICAgIF9oZWxkID0gX3Rva0hlbGQgJiAweGZmZmZmZmZmZmZmZjsNCiAgICAgICAgfQ0KICAgICAgICBmdW5jdGlvbiBnZXRIZWxkKHVpbnQgX3Rva0hlbGQpIGludGVybmFsICByZXR1cm5zICh1aW50IF9oZWxkKQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgX2hlbGQgPSBfdG9rSGVsZCAmIDB4ZmZmZmZmZmZmZmZmOw0KICAgICAgICB9DQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBhbGxvY2F0ZSBhIG5ldyBhY2NvdW50IGJ5IHNldHRpbmcgYWxsb2MgdG8gdHJ1ZQ0KICAgICAgICAvLyBzZXQgdGhlIHRvcCB0byBieXRlcyBvZiB0b2tlbnMgdG8gY3VyIHBheSBpZCB0byBsZWF2ZSBvdXQgb2YgY3VycmVudCByb3VuZA0KICAgICAgICAvLyBhZGQgaG9sZGVyIGluZGV4LCBidW1wIHRoZSBudW0gYWNjb3VudHMNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGFkZEFjY291bnQoYWRkcmVzcyBfYWRkcikgaW50ZXJuYWwgIHsNCiAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tfYWRkcl0uYWxsb2NlZCA9IHRydWU7DQogICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX2FkZHJdLnRva2VucyA9IChjdXJQYXlvdXRJZCAqICgyICoqIDQ4KSk7DQogICAgICAgICAgICAgICAgaG9sZGVySW5kZXhlc1tudW1BY2NvdW50cysrXSA9IF9hZGRyOw0KICAgICAgICB9DQoNCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIEJFR0lOIEVSQy0yMCBmcm9tIFN0YW5kYXJkVG9rZW4NCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBzdXBwbHkpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoaWNvU3RhdHVzID09IEljb1N0YXR1c1ZhbHVlLnNhbGVPcGVuDQogICAgICAgICAgICAgICAgICAgICAgICB8fCBpY29TdGF0dXMgPT0gSWNvU3RhdHVzVmFsdWUuYW5vdW5jZW1lbnQpDQogICAgICAgICAgICAgICAgICAgICAgICBzdXBwbHkgPSBtYXhNaW50YWJsZVRva2VuczsNCiAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICBzdXBwbHkgPSB0b3RhbFRva2Vuc01pbnRlZDsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQoNCiAgICAgICAgICAgICAgICBpZiAoKG1zZy5zZW5kZXIgPT0gZGV2ZWxvcGVycykgDQogICAgICAgICAgICAgICAgICAgICAgICAmJiAgKG5vdyA8IHZlc3RUaW1lKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy9zdGF0RXZlbnQoIlRva2VucyBub3QgeWV0IHZlc3RlZC4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCg0KICAgICAgICAgICAgICAgIC8vRGVmYXVsdCBhc3N1bWVzIHRvdGFsU3VwcGx5IGNhbid0IGJlIG92ZXIgbWF4ICgyXjI1NiAtIDEpLg0KICAgICAgICAgICAgICAgIC8vSWYgeW91ciB0b2tlbiBsZWF2ZXMgb3V0IHRvdGFsU3VwcGx5IGFuZCBjYW4gaXNzdWUgbW9yZSB0b2tlbnMgYXMgdGltZSBnb2VzIG9uLCB5b3UgbmVlZCB0byBjaGVjayBpZiBpdCBkb2Vzbid0IHdyYXAuDQogICAgICAgICAgICAgICAgLy9SZXBsYWNlIHRoZSBpZiB3aXRoIHRoaXMgb25lIGluc3RlYWQuDQogICAgICAgICAgICAgICAgLy9pZiAoaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBob2xkZXJBY2NvdW50c1tfdG9dKSB7DQoNCiAgICAgICAgICAgICAgICB2YXIgKHBpZEZyb20sIGhlbGRGcm9tKSA9IGdldFBheUlkQW5kSGVsZChob2xkZXJBY2NvdW50c1ttc2cuc2VuZGVyXS50b2tlbnMpOw0KICAgICAgICAgICAgICAgIGlmIChoZWxkRnJvbSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgew0KDQogICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW21zZy5zZW5kZXJdLnRva2VucyAtPSBfdmFsdWU7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFob2xkZXJBY2NvdW50c1tfdG9dLmFsbG9jZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEFjY291bnQoX3RvKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHVpbnQgbmV3SGVsZCA9IF92YWx1ZSArIGdldEhlbGQoaG9sZGVyQWNjb3VudHNbX3RvXS50b2tlbnMpOw0KICAgICAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tfdG9dLnRva2VucyA9IG5ld0hlbGQgfCAocGlkRnJvbSAqICgyICoqIDQ4KSk7DQogICAgICAgICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsgDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgICAgICAgICAgICAgaWYgKChfZnJvbSA9PSBkZXZlbG9wZXJzKSANCiAgICAgICAgICAgICAgICAgICAgICAgICYmICAobm93IDwgdmVzdFRpbWUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvL3N0YXRFdmVudCgiVG9rZW5zIG5vdCB5ZXQgdmVzdGVkLiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KDQogICAgICAgIC8vc2FtZSBhcyBhYm92ZS4gUmVwbGFjZSB0aGlzIGxpbmUgd2l0aCB0aGUgZm9sbG93aW5nIGlmIHlvdSB3YW50IHRvIHByb3RlY3QgYWdhaW5zdCB3cmFwcGluZyB1aW50cy4NCiAgICAgICAgLy9pZiAoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsNCg0KICAgICAgICAgICAgICAgIHZhciAocGlkRnJvbSwgaGVsZEZyb20pID0gZ2V0UGF5SWRBbmRIZWxkKGhvbGRlckFjY291bnRzW19mcm9tXS50b2tlbnMpOw0KICAgICAgICAgICAgICAgIGlmIChoZWxkRnJvbSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX2Zyb21dLnRva2VucyAtPSBfdmFsdWU7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFob2xkZXJBY2NvdW50c1tfdG9dLmFsbG9jZWQpDQogICAgICAgICAgICAgICAgICAgICAgICBhZGRBY2NvdW50KF90byk7DQoNCiAgICAgICAgICAgICAgICAgICAgdWludCBuZXdIZWxkID0gX3ZhbHVlICsgZ2V0SGVsZChob2xkZXJBY2NvdW50c1tfdG9dLnRva2Vucyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbX3RvXS50b2tlbnMgPSBuZXdIZWxkIHwgKHBpZEZyb20gKiAoMiAqKiA0OCkpOw0KICAgICAgICAgICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgICAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7IA0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQoNCiAgICAgICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsNCiAgICAgICAgICAgICAgICAvLyB2YXJzIGRlZmF1bHQgdG8gMA0KICAgICAgICAgICAgICAgIGlmIChob2xkZXJBY2NvdW50c1tfb3duZXJdLmFsbG9jZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2UgPSBnZXRIZWxkKGhvbGRlckFjY291bnRzW19vd25lcl0udG9rZW5zKTsNCiAgICAgICAgICAgICAgICB9IA0KICAgICAgICB9DQoNCiAgICAgICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgICAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQogICAgICAgIH0NCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIEVORCBFUkMyMA0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQogIA0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIGNoZWNrIHRoZSBhbGxvY2VkDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gaG9sZGVyRXhpc3RzKGFkZHJlc3MgX2FkZHIpIHJldHVybnMoYm9vbCBfZXhpc3QpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBfZXhpc3QgPSBob2xkZXJBY2NvdW50c1tfYWRkcl0uYWxsb2NlZDsNCiAgICAgICAgfQ0KDQoNCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIGRlZmF1bHQgcGF5YWJsZSBmdW5jdGlvbi4NCiAgICAgICAgLy8gaWYgc2VuZGVyIGlzIGU0cm93ICBwYXJ0bmVyLCB0aGlzIGlzIGEgcmFrZSBmZWUgcGF5bWVudA0KICAgICAgICAvLyBvdGhlcndpc2UgdGhpcyBpcyBhIHRva2VuIHB1cmNoYXNlLg0KICAgICAgICAvLyB0b2tlbnMgb25seSBwdXJjaGFzZWFibGUgYmV0d2VlbiB0b2tlbmZ1bmRpbmdzdGFydCBhbmQgZW5kDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gZTRfcGFydG5lcikgew0KICAgICAgICAgICAgICAgICAgICAgZmVlUGF5bWVudCgpOyAvLyBmcm9tIGU0cm93IGdhbWUgZXNjcm93IGNvbnRyYWN0DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgIHB1cmNoYXNlVG9rZW4oKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBwdXJjaGFzZSB0b2tlbiBmdW5jdGlvbiAtIHRva2VucyBvbmx5IHNvbGQgZHVyaW5nIHNhbGUgcGVyaW9kIHVwIHVudGlsIHRoZSBtYXggdG9rZW5zDQogICAgICAgIC8vIHB1cmNoYXNlIHByaWNlIGlzIHRva2VuUHJpY2UuICBhbGwgdW5pdHMgaW4gd2VpLg0KICAgICAgICAvLyBwdXJjaGFzZXIgd2lsbCBub3QgYmUgaW5jbHVkZWQgaW4gY3VycmVudCBwYXkgcnVuDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIHB1cmNoYXNlVG9rZW4oKSBwYXlhYmxlIHsNCg0KICAgICAgICAgICAgICAgIHVpbnQgbnZhbHVlID0gbXNnLnZhbHVlOyAvLyBiZWluZyBjYXJlZnVsIHRvIHByZXNlcnZlIG1zZy52YWx1ZQ0KICAgICAgICAgICAgICAgIGFkZHJlc3MgbnB1cmNoYXNlciA9IG1zZy5zZW5kZXI7DQogICAgICAgICAgICAgICAgaWYgKG52YWx1ZSA8IHRva2VuUHJpY2UpIA0KICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQoNCiAgICAgICAgICAgICAgICB1aW50IHF0eSA9IG52YWx1ZS90b2tlblByaWNlOw0KICAgICAgICAgICAgICAgIHVwZGF0ZUljb1N0YXR1cygpOw0KICAgICAgICAgICAgICAgIGlmIChpY29TdGF0dXMgIT0gSWNvU3RhdHVzVmFsdWUuc2FsZU9wZW4pIC8vIHB1cmNoYXNlIGlzIGNsb3NlZA0KICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgaWYgKHRvdGFsVG9rZW5zTWludGVkICsgcXR5ID4gbWF4TWludGFibGVUb2tlbnMpDQogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgICAgICAgICBpZiAoIWhvbGRlckFjY291bnRzW25wdXJjaGFzZXJdLmFsbG9jZWQpDQogICAgICAgICAgICAgICAgICAgICAgICBhZGRBY2NvdW50KG5wdXJjaGFzZXIpOw0KDQogICAgICAgICAgICAgICAgLy8gcHVyY2hhc2VyIHdhaXRzIGZvciBuZXh0IHBheXJ1bi4gb3RoZXJ3aXNlIGNhbiBkaXNydXB0IGN1ciBwYXkgcnVuDQogICAgICAgICAgICAgICAgdWludCBuZXdIZWxkID0gcXR5ICsgZ2V0SGVsZChob2xkZXJBY2NvdW50c1tucHVyY2hhc2VyXS50b2tlbnMpOw0KICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW25wdXJjaGFzZXJdLnRva2VucyA9IG5ld0hlbGQgfCAoY3VyUGF5b3V0SWQgKiAoMiAqKiA0OCkpOw0KDQogICAgICAgICAgICAgICAgdG90YWxUb2tlbnNNaW50ZWQgKz0gcXR5Ow0KICAgICAgICAgICAgICAgIHRvdGFsVG9rZW5GdW5kc1JlY2VpdmVkICs9IG52YWx1ZTsNCg0KICAgICAgICAgICAgICAgIGlmICh0b3RhbFRva2Vuc01pbnRlZCA9PSBtYXhNaW50YWJsZVRva2Vucykgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWNvU3RhdHVzID0gSWNvU3RhdHVzVmFsdWUuc2FsZUNsb3NlZDsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGVzdCB1bm5lY2Vzc2FyeSAtICBpZiAoZ2V0TnVtVG9rZW5zUHVyY2hhc2VkKCkgPj0gbWluSWNvVG9rZW5Hb2FsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZG9EZXZlbG9wZXJHcmFudCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgiUHVyY2hhc2VkLEdyYW50ZWQiLCBxdHkpOw0KICAgICAgICAgICAgICAgIH0gZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgiUHVyY2hhc2VkIiwgcXR5KTsNCg0KICAgICAgICB9DQoNCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gYWNjZXB0IHBheW1lbnQgZnJvbSBlNHJvdyBjb250cmFjdA0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gZmVlUGF5bWVudCgpIHBheWFibGUgIA0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gZTRfcGFydG5lcikgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50KCJmb3JiaWRkZW4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gdGhhbmsgeW91DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHVpbnQgbmZ2YWx1ZSA9IG1zZy52YWx1ZTsgLy8gcHJlc2VydmUgdmFsdWUgaW4gY2FzZSBjaGFuZ2VkIGluIGRldiBncmFudA0KDQogICAgICAgICAgICAgICAgdXBkYXRlSWNvU3RhdHVzKCk7DQoNCiAgICAgICAgICAgICAgICBob2xkb3ZlckJhbGFuY2UgKz0gbmZ2YWx1ZTsNCiAgICAgICAgICAgICAgICBwYXJ0bmVyQ3JlZGl0cyArPSBuZnZhbHVlOw0KICAgICAgICAgICAgICAgIFN0YXRFdmVudEkoIlBheW1lbnQiLCBuZnZhbHVlKTsNCg0KICAgICAgICAgICAgICAgIGlmIChob2xkb3ZlckJhbGFuY2UgPiBwYXlvdXRUaHJlc2hvbGQNCiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHBheW91dEJhbGFuY2UgPiAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZG9QYXlvdXQoKTsNCg0KDQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gc2V0IHRoZSBlNHJvdyBwYXJ0bmVyLCB0aGlzIGlzIG9ubHkgZG9uZSBvbmNlDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBzZXRFNFJvd1BhcnRuZXIoYWRkcmVzcyBfYWRkcikgcHVibGljDQogICAgICAgIHsNCiAgICAgICAgLy8gT05MWSBvd25lciBjYW4gc2V0IGFuZCBPTkxZIE9OQ0UhICh1bmxlc3MgInVubG9ja2VkIiBkZWJ1ZykNCiAgICAgICAgLy8gb25jZSBpdHMgbG9ja2VkLiBPTkxZIE9OQ0UhDQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZTRfcGFydG5lciA9PSBhZGRyZXNzKDApKSB8fCAoc2V0dGluZ3NTdGF0ZSA9PSBTZXR0aW5nU3RhdGVWYWx1ZS5kZWJ1ZykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZTRfcGFydG5lciA9IF9hZGRyOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0bmVyQ3JlZGl0cyA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vU3RhdEV2ZW50SSgiRTQtU2V0IiwgMCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIkFscmVhZHkgU2V0Iik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyByZXR1cm4gdGhlIHRvdGFsIHRva2VucyBwdXJjaGFzZWQNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBnZXROdW1Ub2tlbnNQdXJjaGFzZWQoKSBjb25zdGFudCByZXR1cm5zKHVpbnQgX3B1cmNoYXNlZCkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIF9wdXJjaGFzZWQgPSB0b3RhbFRva2Vuc01pbnRlZC1udW1EZXZUb2tlbnM7DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIHJldHVybiB0aGUgbnVtIGdhbWVzIGFzIHJlcG9ydGVkIGZyb20gdGhlIGU0cm93ICBjb250cmFjdA0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGdldE51bUdhbWVzKCkgY29uc3RhbnQgcmV0dXJucyh1aW50IF9nYW1lcykNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vX2dhbWVzID0gMDsNCiAgICAgICAgICAgICAgICBpZiAoZTRfcGFydG5lciAhPSBhZGRyZXNzKDApKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpRTRSb3dFc2Nyb3cgcGU0ID0gaUU0Um93RXNjcm93KGU0X3BhcnRuZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgX2dhbWVzID0gdWludChwZTQuZ2V0TnVtR2FtZXNTdGFydGVkKCkpOw0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgLy9lbHNlDQogICAgICAgICAgICAgICAgLy9TdGF0RXZlbnQoIkVtcHR5IEU0Iik7DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gZ2V0IHRoZSBmb3VuZGVycywgYXV4UGFydG5lciwgZGV2ZWxvcGVyDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGdldFNwZWNpYWxBZGRyZXNzZXMoKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIF9mbmRyLCBhZGRyZXNzIF9hdXgsIGFkZHJlc3MgX2RldiwgYWRkcmVzcyBfZTQpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICAvL2lmIChfc2VuZGVyID09IG93bmVyKSB7IC8vIG5vIG1zZy5zZW5kZXIgb24gY29uc3RhbnQgZnVuY3Rpb25zIGF0IGxlYXN0IGluIG1ldw0KICAgICAgICAgICAgICAgICAgICAgICAgX2ZuZHIgPSBmb3VuZGVyT3JnOw0KICAgICAgICAgICAgICAgICAgICAgICAgX2F1eCA9IGF1eFBhcnRuZXI7DQogICAgICAgICAgICAgICAgICAgICAgICBfZGV2ID0gZGV2ZWxvcGVyczsNCiAgICAgICAgICAgICAgICAgICAgICAgIF9lNCAgPSBlNF9wYXJ0bmVyOw0KICAgICAgICAgICAgICAgIC8vfQ0KICAgICAgICB9DQoNCg0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gdXBkYXRlIHRoZSBpY28gc3RhdHVzDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gdXBkYXRlSWNvU3RhdHVzKCkgcHVibGljDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoaWNvU3RhdHVzID09IEljb1N0YXR1c1ZhbHVlLnN1Y2NlZWRlZCANCiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGljb1N0YXR1cyA9PSBJY29TdGF0dXNWYWx1ZS5mYWlsZWQpDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoaWNvU3RhdHVzID09IEljb1N0YXR1c1ZhbHVlLmFub3VuY2VtZW50KSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobm93ID4gZnVuZGluZ1N0YXJ0ICYmIG5vdyA8PSBmdW5kaW5nRGVhZGxpbmUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvU3RhdHVzID0gSWNvU3RhdHVzVmFsdWUuc2FsZU9wZW47DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm93ID4gZnVuZGluZ0RlYWRsaW5lKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3VsZCBub3QgYmUgaGVyZSAtIHRoaXMgd2lsbCBldmVudHVhbGx5IGZhaWwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvU3RhdHVzID0gSWNvU3RhdHVzVmFsdWUuc2FsZUNsb3NlZDsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBudW1QID0gZ2V0TnVtVG9rZW5zUHVyY2hhc2VkKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB1aW50IG51bUcgPSBnZXROdW1HYW1lcygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChub3cgPiBmdW5kaW5nRGVhZGxpbmUgJiYgbnVtUCA8IG1pbkljb1Rva2VuR29hbCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKG5vdyA+IHVzYWdlRGVhZGxpbmUgJiYgbnVtRyA8IG1pblVzYWdlR29hbCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvU3RhdHVzID0gSWNvU3RhdHVzVmFsdWUuZmFpbGVkOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgobm93ID4gZnVuZGluZ0RlYWRsaW5lKSAvLyBkb250IHdhbnQgdG8gcHJldmVudCBtb3JlIHRva2VuIHNhbGVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIChudW1QID49IG1pbkljb1Rva2VuR29hbCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKG51bUcgPj0gbWluVXNhZ2VHb2FsKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29TdGF0dXMgPSBJY29TdGF0dXNWYWx1ZS5zdWNjZWVkZWQ7IC8vIGhvb3JheQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGljb1N0YXR1cyA9PSBJY29TdGF0dXNWYWx1ZS5zYWxlT3Blbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoKG51bVAgPj0gbWF4TWludGFibGVUb2tlbnMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IChub3cgPiBmdW5kaW5nRGVhZGxpbmUpKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb1N0YXR1cyA9IEljb1N0YXR1c1ZhbHVlLnNhbGVDbG9zZWQ7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAoIWRldmVsb3BlcnNHcmFudGVkDQogICAgICAgICAgICAgICAgICAgICAgICAmJiBpY29TdGF0dXMgIT0gSWNvU3RhdHVzVmFsdWUuc2FsZU9wZW4gDQogICAgICAgICAgICAgICAgICAgICAgICAmJiBpY29TdGF0dXMgIT0gSWNvU3RhdHVzVmFsdWUuYW5vdW5jZW1lbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICYmIGdldE51bVRva2Vuc1B1cmNoYXNlZCgpID49IG1pbkljb1Rva2VuR29hbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb0RldmVsb3BlckdyYW50KCk7IC8vIGdyYW50IHdoZW5ldmVyIHN0YXR1cyBnb2VzIGZyb20gb3BlbiB0byBhbnl0aGluZy4uLg0KICAgICAgICAgICAgICAgIH0NCg0KDQogICAgICAgIH0NCg0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gcmVxdWVzdCByZWZ1bmQuIENhbGxlciBtdXN0IGNhbGwgdG8gcmVxdWVzdCBhbmQgcmVjZWl2ZSByZWZ1bmQgDQogICAgICAgIC8vIFdBUk5JTkcgLSB3aXRoZHJhdyByZXdhcmRzL2RpdmlkZW5kcyBiZWZvcmUgY2FsbGluZy4NCiAgICAgICAgLy8gWU9VIEhBVkUgQkVFTiBXQVJORUQNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiByZXF1ZXN0UmVmdW5kKCkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGFkZHJlc3MgbnJlcXVlc3RlciA9IG1zZy5zZW5kZXI7DQogICAgICAgICAgICAgICAgdXBkYXRlSWNvU3RhdHVzKCk7DQoNCiAgICAgICAgICAgICAgICB1aW50IG50b2tlbnMgPSBnZXRIZWxkKGhvbGRlckFjY291bnRzW25yZXF1ZXN0ZXJdLnRva2Vucyk7DQogICAgICAgICAgICAgICAgaWYgKGljb1N0YXR1cyAhPSBJY29TdGF0dXNWYWx1ZS5mYWlsZWQpDQogICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIk5vIFJlZnVuZCIpOw0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKG50b2tlbnMgPT0gMCkNCiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRFdmVudCgiTm8gVG9rZW5zIik7DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICB1aW50IG5yZWZ1bmQgPSBudG9rZW5zICogdG9rZW5QcmljZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXROdW1Ub2tlbnNQdXJjaGFzZWQoKSA+PSBtaW5JY29Ub2tlbkdvYWwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5yZWZ1bmQgLT0gKG5yZWZ1bmQgLzEwKTsgLy8gb25seSA5MCBwZXJjZW50IGIvYyAxMCBwZXJjZW50IHBheW91dA0KDQogICAgICAgICAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1tkZXZlbG9wZXJzXS50b2tlbnMgKz0gbnRva2VuczsNCiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW25yZXF1ZXN0ZXJdLnRva2VucyA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG9sZGVyQWNjb3VudHNbbnJlcXVlc3Rlcl0uYmFsYW5jZSA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGFib3ZlIHdhcm5pbmchIQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhvbGRlckFjY291bnRzW2RldmVsb3BlcnNdLmFsbG9jZWQpIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEFjY291bnQoZGV2ZWxvcGVycyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW2RldmVsb3BlcnNdLmJhbGFuY2UgKz0gaG9sZGVyQWNjb3VudHNbbnJlcXVlc3Rlcl0uYmFsYW5jZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbbnJlcXVlc3Rlcl0uYmFsYW5jZSA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbnJlcXVlc3Rlci5jYWxsLmdhcyhyZkdhcykudmFsdWUobnJlZnVuZCkoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgICAgICAgICAvL1N0YXRFdmVudEkoIlJlZnVuZGVkIiwgbnJlZnVuZCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCg0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBwYXlvdXQgcmV3YXJkcyB0byBhbGwgdG9rZW4gaG9sZGVycw0KICAgICAgICAvLyB1c2UgYSBzZWNvbmQgaG9sZGluZyB2YXJpYWJsZSBjYWxsZWQgUGF5b3V0QmFsYW5jZSB0byBkbyANCiAgICAgICAgLy8gdGhlIGFjdHVhbCBwYXlvdXQgZnJvbSBiL2MgdG9vIG11Y2ggZ2FzIHRvIGl0ZXJhdGUgdGhydSANCiAgICAgICAgLy8gZWFjaCBwYXllZS4gT25seSBzdGFydCBhIG5ldyBydW4gYXQgbW9zdCBvbmNlIHBlciAibWlucGF5aW50ZXJ2YWwiLg0KICAgICAgICAvLyBJdHMgZG9uZSBpbiBydW5zIG9mICJtYXhQYXlzUGVyIg0KICAgICAgICAvLyB3ZSB1c2Ugc3BlY2lhbCBjb2RpbmcgZm9yIHRoZSBob2xkZXJBY2NvdW50cyB0byBhdm9pZCBhIGhhY2sNCiAgICAgICAgLy8gb2YgZ2V0dGluZyBwYWlkIGF0IHRoZSB0b3Agb2YgdGhlIGxpc3QgdGhlbiB0cmFuc2ZlcmluZyB0b2tlbnMNCiAgICAgICAgLy8gdG8gYW5vdGhlciBhZGRyZXNzIGF0IHRoZSBib3R0b20gb2YgdGhlIGxpc3QuDQogICAgICAgIC8vIGJlY2F1c2Ugb2YgdGhhdCBlYWNoIGhvbGRlckFjY291bnRzIGVudHJ5IGdldHMgdGhlIHBheW91dGlkIHN0YW1wZWQgdXBvbiBpdCAodG9wIHR3byBieXRlcykNCiAgICAgICAgLy8gYWxzbyBhIHRva2VuIHRyYW5zZmVyIHdpbGwgdHJhbnNmZXIgdGhlIHBheW91dCBpZC4NCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGRvUGF5b3V0KCkgIGludGVybmFsDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAodG90YWxUb2tlbnNNaW50ZWQgPT0gMCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCg0KICAgICAgICAgICAgICAgIGlmICgoaG9sZG92ZXJCYWxhbmNlID4gMCkgDQogICAgICAgICAgICAgICAgICAgICAgICAmJiAocGF5b3V0QmFsYW5jZSA9PSAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgJiYgKG5vdyA+IChsYXN0UGF5b3V0VGltZSttaW5QYXlJbnRlcnZhbCkpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCBhIG5ldyBydW4NCiAgICAgICAgICAgICAgICAgICAgICAgIGN1clBheW91dElkKys7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyUGF5b3V0SWQgPj0gMzI3NjgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clBheW91dElkID0gMTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQYXlvdXRUaW1lID0gbm93Ow0KICAgICAgICAgICAgICAgICAgICAgICAgcGF5b3V0QmFsYW5jZSA9IGludChob2xkb3ZlckJhbGFuY2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcHJPcmlnUGF5b3V0QmFsID0gcGF5b3V0QmFsYW5jZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHByT3JpZ1Rva2Vuc01pbnQgPSB0b3RhbFRva2Vuc01pbnRlZDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRvdmVyQmFsYW5jZSA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGF5b3V0SW5kZXggPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgiU3RhcnRSdW4iLCB1aW50KGN1clBheW91dElkKSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXlvdXRCYWxhbmNlID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gd29yayBkb3duIHRoZSBwLm8uYg0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBuQW1vdW50Ow0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBuUGVyVG9rRGlzdHJpYiA9IHVpbnQocHJPcmlnUGF5b3V0QmFsKS9wck9yaWdUb2tlbnNNaW50Ow0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBwYWlkcyA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGk7IC8vIGludGVudGlvbmFsDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBsYXN0UGF5b3V0SW5kZXg7IChwYWlkcyA8IG1heFBheXNQZXIpICYmIChpIDwgbnVtQWNjb3VudHMpICYmIChwYXlvdXRCYWxhbmNlID4gMCk7IGkrKyApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBhID0gaG9sZGVySW5kZXhlc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgPT0gYWRkcmVzcygwKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAocGlkLCBoZWxkKSA9IGdldFBheUlkQW5kSGVsZChob2xkZXJBY2NvdW50c1thXS50b2tlbnMpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGhlbGQgPiAwKSAmJiAocGlkICE9IGN1clBheW91dElkKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5BbW91bnQgPSBuUGVyVG9rRGlzdHJpYiAqIGhlbGQ7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludChuQW1vdW50KSA8PSBwYXlvdXRCYWxhbmNlKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlckFjY291bnRzW2FdLmJhbGFuY2UgKz0gbkFtb3VudDsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkZXJBY2NvdW50c1thXS50b2tlbnMgPSAoY3VyUGF5b3V0SWQgKiAoMiAqKiA0OCkpIHwgaGVsZDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheW91dEJhbGFuY2UgLT0gaW50KG5BbW91bnQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFpZHMrKzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQYXlvdXRJbmRleCA9IGk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFBheW91dEluZGV4ID49IG51bUFjY291bnRzIHx8IHBheW91dEJhbGFuY2UgPD0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGF5b3V0SW5kZXggPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5b3V0QmFsYW5jZSA+IDApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZG92ZXJCYWxhbmNlICs9IHVpbnQocGF5b3V0QmFsYW5jZSk7Ly8gcHV0IGJhY2sgYW55IGxlZnRvdmVycw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlvdXRCYWxhbmNlID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgiUnVuQ29tcGxldGUiLCB1aW50KHByT3JpZ1BheW91dEJhbCkgKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdEV2ZW50SSgiUGF5UnVuIiwgblBlclRva0Rpc3RyaWIgKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBzZW5kZXIgd2l0aGRyYXcgZW50aXJlIHJld2FyZHMvZGl2aWRlbmRzDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gd2l0aGRyYXdEaXZpZGVuZHMoKSBwdWJsaWMgcmV0dXJucyAodWludCBfYW1vdW50KQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGhvbGRlckFjY291bnRzW21zZy5zZW5kZXJdLmJhbGFuY2UgPT0gMCkgeyANCiAgICAgICAgICAgICAgICAgICAgICAgIC8vX2Ftb3VudCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICBTdGF0RXZlbnQoIjAgQmFsYW5jZSIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoKG1zZy5zZW5kZXIgPT0gZGV2ZWxvcGVycykgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmICAobm93IDwgdmVzdFRpbWUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc3RhdEV2ZW50KCJUb2tlbnMgbm90IHlldCB2ZXN0ZWQuIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vX2Ftb3VudCA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgX2Ftb3VudCA9IGhvbGRlckFjY291bnRzW21zZy5zZW5kZXJdLmJhbGFuY2U7IA0KICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbbXNnLnNlbmRlcl0uYmFsYW5jZSA9IDA7IA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtc2cuc2VuZGVyLmNhbGwuZ2FzKHJ3R2FzKS52YWx1ZShfYW1vdW50KSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vU3RhdEV2ZW50SSgiUGFpZCIsIF9hbW91bnQpOw0KDQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIHNldCBnYXMgZm9yIG9wZXJhdGlvbnMNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBzZXRPcEdhcyh1aW50IF9ybSwgdWludCBfcmYsIHVpbnQgX3J3KQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIgJiYgbXNnLnNlbmRlciAhPSBkZXZlbG9wZXJzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvL1N0YXRFdmVudCgib25seSBvd25lciBjYWxscyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBybUdhcyA9IF9ybTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJmR2FzID0gX3JmOw0KICAgICAgICAgICAgICAgICAgICAgICAgcndHYXMgPSBfcnc7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBnZXQgZ2FzIGZvciBvcGVyYXRpb25zDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gZ2V0T3BHYXMoKSBjb25zdGFudCByZXR1cm5zICh1aW50IF9ybSwgdWludCBfcmYsIHVpbnQgX3J3KQ0KICAgICAgICB7DQogICAgICAgICAgICAgICAgX3JtID0gcm1HYXM7DQogICAgICAgICAgICAgICAgX3JmID0gcmZHYXM7DQogICAgICAgICAgICAgICAgX3J3ID0gcndHYXM7DQogICAgICAgIH0NCiANCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIGNoZWNrIHJld2FyZHMuICBwYXNzIGluIGFkZHJlc3Mgb2YgdG9rZW4gaG9sZGVyDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gY2hlY2tEaXZpZGVuZHMoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgcmV0dXJucyh1aW50IF9hbW91bnQpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoaG9sZGVyQWNjb3VudHNbX2FkZHJdLmFsbG9jZWQpDQogICAgICAgICAgICAgICAgICAgICAgICBfYW1vdW50ID0gaG9sZGVyQWNjb3VudHNbX2FkZHJdLmJhbGFuY2U7DQogICAgICAgIH0NCg0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBpY29DaGVja3VwIC0gY2hlY2sgdXAgY2FsbCBmb3IgYWRtaW5pc3RyYXRvcnMNCiAgICAgICAgLy8gYWZ0ZXIgc2FsZSBpcyBjbG9zZWQgaWYgbWluIGljbyB0b2tlbnMgc29sZCwgMTAgcGVyY2VudCB3aWxsIGJlIGRpc3RyaWJ1dGVkIHRvIA0KICAgICAgICAvLyBjb21wYW55IHRvIGNvdmVyIHZhcmlvdXMgb3BlcmF0aW5nIGV4cGVuc2VzDQogICAgICAgIC8vIGFmdGVyIHNhbGUgYW5kIHVzYWdlIGRlYWxpbmVzIGhhdmUgYmVlbiBtZXQsIHJlbWFpbmluZyA5MCBwZXJjZW50IHdpbGwgYmUgZGlzdHJpYnV0ZWQgdG8NCiAgICAgICAgLy8gY29tcGFueS4NCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGljb0NoZWNrdXAoKSBwdWJsaWMNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyICYmIG1zZy5zZW5kZXIgIT0gZGV2ZWxvcGVycykNCiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93Ow0KDQogICAgICAgICAgICAgICAgdWludCBubXNnbWFzazsNCiAgICAgICAgICAgICAgICAvL25tc2dtYXNrID0gMDsNCg0KICAgICAgICAgICAgICAgIGlmIChpY29TdGF0dXMgPT0gSWNvU3RhdHVzVmFsdWUuc2FsZUNsb3NlZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChnZXROdW1Ub2tlbnNQdXJjaGFzZWQoKSA+PSBtaW5JY29Ub2tlbkdvYWwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIChyZW11bmVyYXRpb25TdGFnZSA9PSAwICkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtdW5lcmF0aW9uU3RhZ2UgPSAxOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW11bmVyYXRpb25CYWxhbmNlID0gKHRvdGFsVG9rZW5GdW5kc1JlY2VpdmVkLzEwMCkqOTsgLy8gOSBwZXJjZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1eFBhcnRuZXJCYWxhbmNlID0gICh0b3RhbFRva2VuRnVuZHNSZWNlaXZlZC8xMDApOyAvLyAxIHBlcmNlbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm1zZ21hc2sgfD0gMTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChpY29TdGF0dXMgPT0gSWNvU3RhdHVzVmFsdWUuc3VjY2VlZGVkKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW11bmVyYXRpb25TdGFnZSA9PSAwICkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW11bmVyYXRpb25TdGFnZSA9IDE7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbXVuZXJhdGlvbkJhbGFuY2UgPSAodG90YWxUb2tlbkZ1bmRzUmVjZWl2ZWQvMTAwKSo5OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV4UGFydG5lckJhbGFuY2UgPSAgKHRvdGFsVG9rZW5GdW5kc1JlY2VpdmVkLzEwMCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5tc2dtYXNrIHw9IDQ7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtdW5lcmF0aW9uU3RhZ2UgPT0gMSkgeyAvLyB3ZSBoYXZlIGFscmVhZHkgc3VjZWVkZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtdW5lcmF0aW9uU3RhZ2UgPSAyOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW11bmVyYXRpb25CYWxhbmNlICs9IHRvdGFsVG9rZW5GdW5kc1JlY2VpdmVkIC0gKHRvdGFsVG9rZW5GdW5kc1JlY2VpdmVkLzEwKTsgLy8gOTAgcGVyY2VudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubXNnbWFzayB8PSA4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdWludCBudG1wOw0KDQogICAgICAgICAgICAgICAgaWYgKHJlbXVuZXJhdGlvbkJhbGFuY2UgPiAwKSB7IA0KICAgICAgICAgICAgICAgIC8vIG9ubHkgcGF5IG9uZSBlbnRpdHkgcGVyIGNhbGwsIGRvbnQgd2FudCB0byBydW4gb3V0IG9mIGdhcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudG1wID0gcmVtdW5lcmF0aW9uQmFsYW5jZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtdW5lcmF0aW9uQmFsYW5jZSA9IDA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZm91bmRlck9yZy5jYWxsLmdhcyhybUdhcykudmFsdWUobnRtcCkoKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbXVuZXJhdGlvbkJhbGFuY2UgPSBudG1wOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5tc2dtYXNrIHw9IDMyOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5tc2dtYXNrIHw9IDY0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBlbHNlICBpZiAoYXV4UGFydG5lckJhbGFuY2UgPiAwKSB7DQogICAgICAgICAgICAgICAgLy8gbm90ZSB0aGUgImVsc2UiIG9ubHkgcGF5IG9uZSBlbnRpdHkgcGVyIGNhbGwsIGRvbnQgd2FudCB0byBydW4gb3V0IG9mIGdhcw0KICAgICAgICAgICAgICAgICAgICAgICAgbnRtcCA9IGF1eFBhcnRuZXJCYWxhbmNlOw0KICAgICAgICAgICAgICAgICAgICAgICAgYXV4UGFydG5lckJhbGFuY2UgPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhdXhQYXJ0bmVyLmNhbGwuZ2FzKHJtR2FzKS52YWx1ZShudG1wKSgpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1eFBhcnRuZXJCYWxhbmNlID0gbnRtcDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm1zZ21hc2sgfD0gMTI4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgfSAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5tc2dtYXNrIHw9IDI1NjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gDQoNCiAgICAgICAgICAgICAgICBTdGF0RXZlbnRJKCJpY28tY2hlY2t1cCIsIG5tc2dtYXNrKTsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBzd2FwIGV4ZWN1dG9yDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBfYWRkcikgDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcg0KICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2V0dGluZ3NTdGF0ZSA9PSBTZXR0aW5nU3RhdGVWYWx1ZS5sb2NrZWRSZWxlYXNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93Ow0KDQogICAgICAgICAgICAgICAgb3duZXIgPSBfYWRkcjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gc3dhcCBkZXZlbG9wZXJzIGFjY291bnQNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBjaGFuZ2VEZXZldm9wZXJBY2NvbnQoYWRkcmVzcyBfYWRkcikgDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcg0KICAgICAgICAgICAgICAgICAgICAgICAgfHwgc2V0dGluZ3NTdGF0ZSA9PSBTZXR0aW5nU3RhdGVWYWx1ZS5sb2NrZWRSZWxlYXNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93Ow0KICAgICAgICAgICAgICAgIGRldmVsb3BlcnMgPSBfYWRkcjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gY2hhbmdlIGZvdW5kZXINCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBmdW5jdGlvbiBjaGFuZ2VGb3VuZGVyKGFkZHJlc3MgX2FkZHIpIA0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXINCiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHNldHRpbmdzU3RhdGUgPT0gU2V0dGluZ1N0YXRlVmFsdWUubG9ja2VkUmVsZWFzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgICAgICAgICBmb3VuZGVyT3JnID0gX2FkZHI7DQogICAgICAgIH0NCg0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIC8vIGNoYW5nZSBhdXhQYXJ0bmVyDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gY2hhbmdlQXV4UGFydG5lcihhZGRyZXNzIF9hdXgpIA0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXINCiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHNldHRpbmdzU3RhdGUgPT0gU2V0dGluZ1N0YXRlVmFsdWUubG9ja2VkUmVsZWFzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgICAgICAgICBhdXhQYXJ0bmVyID0gX2F1eDsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAvLyBERUJVRyBPTkxZIC0gZW5kIHRoaXMgY29udHJhY3QsIHN1aWNpZGUgdG8gZGV2ZWxvcGVycw0KICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGZ1bmN0aW9uIGhhcmFLaXJpKCkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChzZXR0aW5nc1N0YXRlICE9IFNldHRpbmdTdGF0ZVZhbHVlLmRlYnVnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgc3VpY2lkZShkZXZlbG9wZXJzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgLy8gZ2V0IGFsbCBpY28gc3RhdHVzLCBmdW5kaW5nIGFuZCB1c2FnZSBpbmZvDQogICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgZnVuY3Rpb24gZ2V0SWNvSW5mbygpIGNvbnN0YW50IHJldHVybnMoSWNvU3RhdHVzVmFsdWUgX3N0YXR1cywgdWludCBfc2FsZVN0YXJ0LCB1aW50IF9zYWxlRW5kLCB1aW50IF91c2FnZUVuZCwgdWludCBfc2FsZUdvYWwsIHVpbnQgX3VzYWdlR29hbCwgdWludCBfc29sZCwgdWludCBfdXNlZCwgdWludCBfZnVuZHMsIHVpbnQgX2NyZWRpdHMsIHVpbnQgX3JlbXVTdGFnZSwgdWludCBfdmVzdCkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIF9zdGF0dXMgPSBpY29TdGF0dXM7DQogICAgICAgICAgICAgICAgX3NhbGVTdGFydCA9IGZ1bmRpbmdTdGFydDsNCiAgICAgICAgICAgICAgICBfc2FsZUVuZCA9IGZ1bmRpbmdEZWFkbGluZTsNCiAgICAgICAgICAgICAgICBfdXNhZ2VFbmQgPSB1c2FnZURlYWRsaW5lOw0KICAgICAgICAgICAgICAgIF92ZXN0ID0gdmVzdFRpbWU7DQogICAgICAgICAgICAgICAgX3NhbGVHb2FsID0gbWluSWNvVG9rZW5Hb2FsOw0KICAgICAgICAgICAgICAgIF91c2FnZUdvYWwgPSBtaW5Vc2FnZUdvYWw7DQogICAgICAgICAgICAgICAgX3NvbGQgPSBnZXROdW1Ub2tlbnNQdXJjaGFzZWQoKTsNCiAgICAgICAgICAgICAgICBfdXNlZCA9IGdldE51bUdhbWVzKCk7DQogICAgICAgICAgICAgICAgX2Z1bmRzID0gdG90YWxUb2tlbkZ1bmRzUmVjZWl2ZWQ7DQogICAgICAgICAgICAgICAgX2NyZWRpdHMgPSBwYXJ0bmVyQ3JlZGl0czsNCiAgICAgICAgICAgICAgICBfcmVtdVN0YWdlID0gcmVtdW5lcmF0aW9uU3RhZ2U7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBmbHVzaERpdmlkZW5kcygpDQogICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoKG1zZy5zZW5kZXIgIT0gb3duZXIpICYmIChtc2cuc2VuZGVyICE9IGRldmVsb3BlcnMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIGlmIChob2xkb3ZlckJhbGFuY2UgPiAwIHx8IHBheW91dEJhbGFuY2UgPiAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZG9QYXlvdXQoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIGRvRGV2ZWxvcGVyR3JhbnQoKSBpbnRlcm5hbA0KICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKCFkZXZlbG9wZXJzR3JhbnRlZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGV2ZWxvcGVyc0dyYW50ZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgbnVtRGV2VG9rZW5zID0gdG90YWxUb2tlbnNNaW50ZWQvMTA7DQogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFRva2Vuc01pbnRlZCArPSBudW1EZXZUb2tlbnM7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhvbGRlckFjY291bnRzW2RldmVsb3BlcnNdLmFsbG9jZWQpIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRBY2NvdW50KGRldmVsb3BlcnMpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBuZXdIZWxkID0gZ2V0SGVsZChob2xkZXJBY2NvdW50c1tkZXZlbG9wZXJzXS50b2tlbnMpICsgbnVtRGV2VG9rZW5zOw0KICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyQWNjb3VudHNbZGV2ZWxvcGVyc10udG9rZW5zID0gbmV3SGVsZCB8ICAoY3VyUGF5b3V0SWQgKiAoMiAqKiA0OCkpOw0KDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCg0KfQ=='