base 64 content
base64eCVerifyLib
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4wOw0KDQoNCmxpYnJhcnkgRUNWZXJpZnlMaWIgew0KICAgIC8vIEZyb206IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2F4aWMvNWIzMzkxMmM2ZjYxYWU2ZmQ5NmQ2YzRhNDdhZmRlNmQNCiAgICAvLyBEdXBsaWNhdGUgU29saWRpdHkncyBlY3JlY292ZXIsIGJ1dCBjYXRjaGluZyB0aGUgQ0FMTCByZXR1cm4gdmFsdWUNCiAgICBmdW5jdGlvbiBzYWZlcl9lY3JlY292ZXIoYnl0ZXMzMiBoYXNoLCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcykgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCwgYWRkcmVzcykgew0KICAgICAgICAvLyBXZSBkbyBvdXIgb3duIG1lbW9yeSBtYW5hZ2VtZW50IGhlcmUuIFNvbGlkaXR5IHVzZXMgbWVtb3J5IG9mZnNldA0KICAgICAgICAvLyAweDQwIHRvIHN0b3JlIHRoZSBjdXJyZW50IGVuZCBvZiBtZW1vcnkuIFdlIHdyaXRlIHBhc3QgaXQgKGFzDQogICAgICAgIC8vIHdyaXRlcyBhcmUgbWVtb3J5IGV4dGVuc2lvbnMpLCBidXQgZG9uJ3QgdXBkYXRlIHRoZSBvZmZzZXQgc28NCiAgICAgICAgLy8gU29saWRpdHkgd2lsbCByZXVzZSBpdC4gVGhlIG1lbW9yeSB1c2VkIGhlcmUgaXMgb25seSBuZWVkZWQgZm9yDQogICAgICAgIC8vIHRoaXMgY29udGV4dC4NCg0KICAgICAgICAvLyBGSVhNRTogaW5saW5lIGFzc2VtYmx5IGNhbid0IGFjY2VzcyByZXR1cm4gdmFsdWVzDQogICAgICAgIGJvb2wgcmV0Ow0KICAgICAgICBhZGRyZXNzIGFkZHI7DQoNCiAgICAgICAgYXNzZW1ibHkgew0KICAgICAgICAgICAgbGV0IHNpemUgOj0gbWxvYWQoMHg0MCkNCiAgICAgICAgICAgIG1zdG9yZShzaXplLCBoYXNoKQ0KICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCAzMiksIHYpDQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDY0KSwgcikNCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgOTYpLCBzKQ0KDQogICAgICAgICAgICAvLyBOT1RFOiB3ZSBjYW4gcmV1c2UgdGhlIHJlcXVlc3QgbWVtb3J5IGJlY2F1c2Ugd2UgZGVhbCB3aXRoDQogICAgICAgICAgICAvLyAgICAgICB0aGUgcmV0dXJuIGNvZGUNCiAgICAgICAgICAgIHJldCA6PSBjYWxsKDMwMDAsIDEsIDAsIHNpemUsIDEyOCwgc2l6ZSwgMzIpDQogICAgICAgICAgICBhZGRyIDo9IG1sb2FkKHNpemUpDQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gKHJldCwgYWRkcik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZWNyZWNvdmVyeShieXRlczMyIGhhc2gsIGJ5dGVzIHNpZykgcmV0dXJucyAoYm9vbCwgYWRkcmVzcykgew0KICAgICAgICBieXRlczMyIHI7DQogICAgICAgIGJ5dGVzMzIgczsNCiAgICAgICAgdWludDggdjsNCg0KICAgICAgICBpZiAoc2lnLmxlbmd0aCAhPSA2NSkNCiAgICAgICAgICByZXR1cm4gKGZhbHNlLCAwKTsNCg0KICAgICAgICAvLyBUaGUgc2lnbmF0dXJlIGZvcm1hdCBpcyBhIGNvbXBhY3QgZm9ybSBvZjoNCiAgICAgICAgLy8gICB7Ynl0ZXMzMiByfXtieXRlczMyIHN9e3VpbnQ4IHZ9DQogICAgICAgIC8vIENvbXBhY3QgbWVhbnMsIHVpbnQ4IGlzIG5vdCBwYWRkZWQgdG8gMzIgYnl0ZXMuDQogICAgICAgIGFzc2VtYmx5IHsNCiAgICAgICAgICAgIHIgOj0gbWxvYWQoYWRkKHNpZywgMzIpKQ0KICAgICAgICAgICAgcyA6PSBtbG9hZChhZGQoc2lnLCA2NCkpDQoNCiAgICAgICAgICAgIC8vIEhlcmUgd2UgYXJlIGxvYWRpbmcgdGhlIGxhc3QgMzIgYnl0ZXMuIFdlIGV4cGxvaXQgdGhlIGZhY3QgdGhhdA0KICAgICAgICAgICAgLy8gJ21sb2FkJyB3aWxsIHBhZCB3aXRoIHplcm9lcyBpZiB3ZSBvdmVycmVhZC4NCiAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vICdtbG9hZDgnIHRvIGRvIHRoaXMsIGJ1dCB0aGF0IHdvdWxkIGJlIG5pY2VyLg0KICAgICAgICAgICAgdiA6PSBieXRlKDAsIG1sb2FkKGFkZChzaWcsIDk2KSkpDQoNCiAgICAgICAgICAgIC8vIEFsdGVybmF0aXZlIHNvbHV0aW9uOg0KICAgICAgICAgICAgLy8gJ2J5dGUnIGlzIG5vdCB3b3JraW5nIGR1ZSB0byB0aGUgU29saWRpdHkgcGFyc2VyLCBzbyBsZXRzDQogICAgICAgICAgICAvLyB1c2UgdGhlIHNlY29uZCBiZXN0IG9wdGlvbiwgJ2FuZCcNCiAgICAgICAgICAgIC8vIHYgOj0gYW5kKG1sb2FkKGFkZChzaWcsIDY1KSksIDI1NSkNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIGFsYmVpdCBub24tdHJhbnNhY3Rpb25hbCBzaWduYXR1cmVzIGFyZSBub3Qgc3BlY2lmaWVkIGJ5IHRoZSBZUCwgb25lIHdvdWxkIGV4cGVjdCBpdA0KICAgICAgICAvLyB0byBtYXRjaCB0aGUgWVAgcmFuZ2Ugb2YgWzI3LCAyOF0NCiAgICAgICAgLy8NCiAgICAgICAgLy8gZ2V0aCB1c2VzIFswLCAxXSBhbmQgc29tZSBjbGllbnRzIGhhdmUgZm9sbG93ZWQuIFRoaXMgbWlnaHQgY2hhbmdlLCBzZWU6DQogICAgICAgIC8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzIwNTMNCiAgICAgICAgaWYgKHYgPCAyNykNCiAgICAgICAgICB2ICs9IDI3Ow0KDQogICAgICAgIGlmICh2ICE9IDI3ICYmIHYgIT0gMjgpDQogICAgICAgICAgICByZXR1cm4gKGZhbHNlLCAwKTsNCg0KICAgICAgICByZXR1cm4gc2FmZXJfZWNyZWNvdmVyKGhhc2gsIHYsIHIsIHMpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGVjdmVyaWZ5KGJ5dGVzMzIgaGFzaCwgYnl0ZXMgc2lnLCBhZGRyZXNzIHNpZ25lcikgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICBib29sIHJldDsNCiAgICAgICAgYWRkcmVzcyBhZGRyOw0KICAgICAgICAocmV0LCBhZGRyKSA9IGVjcmVjb3ZlcnkoaGFzaCwgc2lnKTsNCiAgICAgICAgcmV0dXJuIHJldCA9PSB0cnVlICYmIGFkZHIgPT0gc2lnbmVyOw0KICAgIH0NCn0='