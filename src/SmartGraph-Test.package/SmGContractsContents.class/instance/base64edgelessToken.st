base 64 content
base64edgelessToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC42Ow0KDQpjb250cmFjdCBTYWZlTWF0aCB7DQogIC8vaW50ZXJuYWxzDQoNCiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKiBiOw0KICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQoNCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKyBiOw0KICAgIGFzc2VydChjPj1hICYmIGM+PWIpOw0KICAgIHJldHVybiBjOw0KICB9DQoNCiAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7DQogICAgaWYgKCFhc3NlcnRpb24pIHRocm93Ow0KICB9DQp9DQoNCmNvbnRyYWN0IEVkZ2VsZXNzVG9rZW4gaXMgU2FmZU1hdGggew0KICAgIC8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovDQogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdFUkMyMCc7DQogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gJ0VkZ2VsZXNzJzsNCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICdFREcnOw0KICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDA7DQogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQogICAgLyogZnJvbSB0aGlzIHRpbWUgb24gdG9rZW5zIG1heSBiZSB0cmFuc2ZlcmVkIChhZnRlciBJQ08pKi8NCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWUgPSAxNDkwMTEyMDAwOw0KICAgIC8qIHRlbGxzIGlmIHRva2VucyBoYXZlIGJlZW4gYnVybmVkIGFscmVhZHkgKi8NCiAgICBib29sIGJ1cm5lZDsNCg0KICAgIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAqLw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7DQoNCg0KICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLw0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOw0KCWV2ZW50IEJ1cm5lZCh1aW50IGFtb3VudCk7DQoNCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8NCiAgICBmdW5jdGlvbiBFZGdlbGVzc1Rva2VuKCkgew0KICAgICAgICBvd25lciA9IDB4MDAzMjMwQkJFNjRlY2NENjZmNjI5MTM2NzlDODk2NkNmOUY0MTE2NjsNCiAgICAgICAgYmFsYW5jZU9mW293bmVyXSA9IDUwMDAwMDAwMDsgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIG93bmVyIGFsbCBpbml0aWFsIHRva2Vucw0KICAgICAgICB0b3RhbFN1cHBseSA9IDUwMDAwMDAwMDsgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseQ0KICAgIH0NCg0KICAgIC8qIFNlbmQgc29tZSBvZiB5b3VyIHRva2VucyB0byBhIGdpdmVuIGFkZHJlc3MgKi8NCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyl7DQogICAgICAgIGlmIChub3cgPCBzdGFydFRpbWUpIHRocm93OyAvL2NoZWNrIGlmIHRoZSBjcm93ZHNhbGUgaXMgYWxyZWFkeSBvdmVyDQogICAgICAgIGlmKG1zZy5zZW5kZXIgPT0gb3duZXIgJiYgbm93IDwgc3RhcnRUaW1lICsgMSB5ZWFycyAmJiBzYWZlU3ViKGJhbGFuY2VPZlttc2cuc2VuZGVyXSxfdmFsdWUpIDwgNTAwMDAwMDApIHRocm93OyAvL3ByZXZlbnQgdGhlIG93bmVyIG9mIHNwZW5kaW5nIGhpcyBzaGFyZSBvZiB0b2tlbnMgd2l0aGluIHRoZSBmaXJzdCB5ZWFyDQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZU9mW21zZy5zZW5kZXJdLF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyDQogICAgICAgIGJhbGFuY2VPZltfdG9dID0gc2FmZUFkZChiYWxhbmNlT2ZbX3RvXSxfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3Qgb3IgcGVyc29uIHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmICovDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCg0KICAgIC8qIEEgY29udHJhY3Qgb3IgIHBlcnNvbiBhdHRlbXB0cyB0byBnZXQgdGhlIHRva2VucyBvZiBzb21lYm9keSBlbHNlLg0KICAgICogIFRoaXMgaXMgb25seSBhbGxvd2VkIGlmIHRoZSB0b2tlbiBob2xkZXIgYXBwcm92ZWQuICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChub3cgPCBzdGFydFRpbWUgJiYgX2Zyb20hPW93bmVyKSB0aHJvdzsgLy9jaGVjayBpZiB0aGUgY3Jvd2RzYWxlIGlzIGFscmVhZHkgb3Zlcg0KICAgICAgICBpZihfZnJvbSA9PSBvd25lciAmJiBub3cgPCBzdGFydFRpbWUgKyAxIHllYXJzICYmIHNhZmVTdWIoYmFsYW5jZU9mW19mcm9tXSxfdmFsdWUpIDwgNTAwMDAwMDApIHRocm93OyAvL3ByZXZlbnQgdGhlIG93bmVyIG9mIHNwZW5kaW5nIGhpcyBzaGFyZSBvZiB0b2tlbnMgd2l0aGluIHRoZSBmaXJzdCB5ZWFyDQogICAgICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXTsNCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZU9mW19mcm9tXSxfdmFsdWUpOyAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgYmFsYW5jZU9mW190b10gPSBzYWZlQWRkKGJhbGFuY2VPZltfdG9dLF92YWx1ZSk7ICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdID0gc2FmZVN1YihfYWxsb3dhbmNlLF92YWx1ZSk7DQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KDQogICAgLyogdG8gYmUgY2FsbGVkIHdoZW4gSUNPIGlzIGNsb3NlZCwgYnVybnMgdGhlIHJlbWFpbmluZyB0b2tlbnMgYnV0IHRoZSBvd25lcnMgc2hhcmUgKDUwIDAwMCAwMDApIGFuZCB0aGUgb25lcyByZXNlcnZlZA0KICAgICogIGZvciB0aGUgYm91bnR5IHByb2dyYW0gKDEwIDAwMCAwMDApLg0KICAgICogIGFueWJvZHkgbWF5IGJ1cm4gdGhlIHRva2VucyBhZnRlciBJQ08gZW5kZWQsIGJ1dCBvbmx5IG9uY2UgKGluIGNhc2UgdGhlIG93bmVyIGhvbGRzIG1vcmUgdG9rZW5zIGluIHRoZSBmdXR1cmUpLg0KICAgICogIHRoaXMgZW5zdXJlcyB0aGF0IHRoZSBvd25lciB3aWxsIG5vdCBwb3NzZXMgYSBtYWpvcml0eSBvZiB0aGUgdG9rZW5zLiAqLw0KICAgIGZ1bmN0aW9uIGJ1cm4oKXsNCiAgICAJLy9pZiB0b2tlbnMgaGF2ZSBub3QgYmVlbiBidXJuZWQgYWxyZWFkeSBhbmQgdGhlIElDTyBlbmRlZA0KICAgIAlpZighYnVybmVkICYmIG5vdz5zdGFydFRpbWUpew0KICAgIAkJdWludCBkaWZmZXJlbmNlID0gc2FmZVN1YihiYWxhbmNlT2Zbb3duZXJdLCA2MDAwMDAwMCk7Ly9jaGVja2VkIGZvciBvdmVyZmxvdyBhYm92ZQ0KICAgIAkJYmFsYW5jZU9mW293bmVyXSA9IDYwMDAwMDAwOw0KICAgIAkJdG90YWxTdXBwbHkgPSBzYWZlU3ViKHRvdGFsU3VwcGx5LCBkaWZmZXJlbmNlKTsNCiAgICAJCWJ1cm5lZCA9IHRydWU7DQogICAgCQlCdXJuZWQoZGlmZmVyZW5jZSk7DQogICAgCX0NCiAgICB9DQoNCn0='