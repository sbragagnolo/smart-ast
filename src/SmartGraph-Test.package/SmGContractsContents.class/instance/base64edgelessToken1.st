base 64 content
base64edgelessToken1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC42Ow0KY29udHJhY3QgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsgfQ0KDQpjb250cmFjdCBTYWZlTWF0aCB7DQogIC8vaW50ZXJuYWxzDQoNCiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKiBiOw0KICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQoNCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKyBiOw0KICAgIGFzc2VydChjPj1hICYmIGM+PWIpOw0KICAgIHJldHVybiBjOw0KICB9DQoNCiAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7DQogICAgaWYgKCFhc3NlcnRpb24pIHRocm93Ow0KICB9DQp9DQoNCmNvbnRyYWN0IEVkZ2VsZXNzVG9rZW4gaXMgU2FmZU1hdGggew0KICAgIC8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovDQogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdFUkMyMCc7DQogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gJ0VkZ2VsZXNzJzsNCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICdFREcnOw0KICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDA7DQogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQogICAgdWludDI1NiBwdWJsaWMgY3VycmVudEludGVydmFsID0gMTsNCiAgICB1aW50MjU2IHB1YmxpYyBpbnRlcnZhbExlbmd0aCA9IDMwIGRheXM7DQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQogICAgLyogZnJvbSB0aGlzIHRpbWUgb24gdG9rZW5zIG1heSBiZSB0cmFuc2ZlcmVkIChhZnRlciBJQ08pKi8NCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWUgPSAxNDkwMTEyMDAwOw0KICAgIC8qIHRlbGxzIGlmIHRva2VucyBoYXZlIGJlZW4gYnVybmVkIGFscmVhZHkgKi8NCiAgICBib29sIGJ1cm5lZDsNCg0KICAgIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAqLw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIHB1YmxpYyBhbGxvd2FuY2U7DQoNCiAgICAvKiBEZWZpbmVzIGhvdyBtYW55IHRva2VucyBvZiB3aGljaCBhZGRyZXNzZXMgYXJlIGxvY2tlZCBpbiB3aGljaCBpbnRlcnZhbCovDQogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcodWludDI1Nj0+dWludDI1NikpIHB1YmxpYyBsb2NrZWQ7DQoNCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8NCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsNCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsNCiAgICBldmVudCBMb2NrKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgdWludDI1NiBpbnRlcnZhbCwgdWludDI1NiB2YWx1ZSk7DQoNCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QsDQogICAgKiAgbG9ja3MgdGhlIG93bmVyJ3MgZmluYWwgc2hhcmUgb2YgdG9rZW5zIGZvciB0aGUgZmlyc3QgMTIgaW50ZXJ2YWxzLiAqLw0KICAgIGZ1bmN0aW9uIEVkZ2VsZXNzVG9rZW4oKSB7DQogICAgICAgIG93bmVyID0gMHgwMDMyMzBCQkU2NGVjY0Q2NmY2MjkxMzY3OUM4OTY2Q2Y5RjQxMTY2Ow0KICAgICAgICBiYWxhbmNlT2Zbb3duZXJdID0gNTAwMDAwMDAwOyAgICAgICAgICAgICAgLy8gR2l2ZSB0aGUgb3duZXIgYWxsIGluaXRpYWwgdG9rZW5zDQogICAgICAgIHRvdGFsU3VwcGx5ID0gNTAwMDAwMDAwOyAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5DQogICAgICAgIGZvcih1aW50OCBpID0gMTsgaSA8IDEzOyBpKyspCQkgICAvLyBsb2NrIG93bmVyJ3MgZmluYWwgc2hhcmUgb2YgdG9rZW5zIGZvciB0aGUgZmlyc3QgMTIgbW9udGhzDQogICAgICAgIAlsb2NrZWRbb3duZXJdW2ldID0gNTAwMDAwMDA7DQogICAgfQ0KDQogICAgLyogU2VuZCBzb21lIG9mIHlvdXIgdG9rZW5zIHRvIGEgZ2l2ZW4gYWRkcmVzcyAqLw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsNCiAgICAgICAgaWYgKG5vdyA8IHN0YXJ0VGltZSkgdGhyb3c7IC8vY2hlY2sgaWYgdGhlIGNyb3dkc2FsZSBpcyBhbHJlYWR5IG92ZXINCiAgICAgICAgaWYgKGxvY2tlZFttc2cuc2VuZGVyXVtnZXRJbnRlcnZhbCgpXSA+PSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gfHwgYmFsYW5jZU9mW21zZy5zZW5kZXJdLWxvY2tlZFttc2cuc2VuZGVyXVtnZXRJbnRlcnZhbCgpXSA8IF92YWx1ZSkgdGhyb3c7ICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoDQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZU9mW21zZy5zZW5kZXJdLF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyDQogICAgICAgIGJhbGFuY2VPZltfdG9dID0gc2FmZUFkZChiYWxhbmNlT2ZbX3RvXSxfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3Qgb3IgcGVyc29uIHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmICovDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCg0KICAgIC8qIEEgY29udHJhY3Qgb3IgIHBlcnNvbiBhdHRlbXB0cyB0byBnZXQgdGhlIHRva2VucyBvZiBzb21lYm9keSBlbHNlLg0KICAgICogIFRoaXMgaXMgb25seSBhbGxvd2VkIGlmIHRoZSB0b2tlbiBob2xkZXIgYXBwcm92ZWQuICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChub3cgPCBzdGFydFRpbWUgJiYgX2Zyb20hPW93bmVyKSB0aHJvdzsgLy9jaGVjayBpZiB0aGUgY3Jvd2RzYWxlIGlzIGFscmVhZHkgb3Zlcg0KICAgICAgICBpZiAobG9ja2VkW19mcm9tXVtnZXRJbnRlcnZhbCgpXSA+PSBiYWxhbmNlT2ZbX2Zyb21dIHx8IGJhbGFuY2VPZltfZnJvbV0tbG9ja2VkW19mcm9tXVtnZXRJbnRlcnZhbCgpXSA8IF92YWx1ZSkgdGhyb3c7ICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gNCiAgICAgICAgdmFyIF9hbGxvd2FuY2UgPSBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdOw0KICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlT2ZbX2Zyb21dLF92YWx1ZSk7IC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcg0KICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZU9mW190b10sX3ZhbHVlKTsgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50DQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKF9hbGxvd2FuY2UsX3ZhbHVlKTsNCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyogTG9jayBhIG51bWJlciBvZiB0b2tlbnMuIFRoaXMgbWVhbnMsIHlvdSB3aWxsIG5vdCBiZSBhYmxlIHRvIHRyYW5zZmVyIHRoZXNlIHRva2VucyB1bnRpbA0KICAgICogIHRoZSBzdGFydCBvZiB0aGUgbmV4dCBpbnRlcnZhbC4gKi8NCiAgICBmdW5jdGlvbiBsb2NrKGFkZHJlc3MgaG9sZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmKGhvbGRlcj09bXNnLnNlbmRlcnx8aG9sZGVyPT10eC5vcmlnaW4pew0KCQkJdWludCBjaSA9IGdldEludGVydmFsKCk7DQoJCQl1aW50IGhvbGRlckxvY2sgPSBsb2NrZWRbaG9sZGVyXVtjaV07DQogICAgICAgICAgICBsb2NrZWRbaG9sZGVyXVtjaV0gPSBzYWZlQWRkKGhvbGRlckxvY2ssX3ZhbHVlKTsNCiAgICAgICAgICAgIExvY2soaG9sZGVyLCBjaSwgX3ZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyogSW5jcmVhc2UgdGhlIGludGVydmFsLCBpZiBzdWZmaWNpZW50IHRpbWUgaGFzIHBhc3NlZC4NCiAgICAqICBXaGVuIGEgbmV3IGludGVydmFsIHN0YXJ0cywgYWxsIHRva2VucyBhcmUgdW5sb2NrZWQuICovDQogICAgZnVuY3Rpb24gZ2V0SW50ZXJ2YWwoKSByZXR1cm5zICh1aW50MjU2IGludGVydmFsKXsNCiAgICAgICAgaWYgKG5vdyA+IHNhZmVBZGQoc2FmZU11bChjdXJyZW50SW50ZXJ2YWwsIGludGVydmFsTGVuZ3RoKSwgc3RhcnRUaW1lKSkgew0KICAgICAgICAgICAgY3VycmVudEludGVydmFsID0gKG5vdyAtIHN0YXJ0VGltZSkgLyBpbnRlcnZhbExlbmd0aCArIDE7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGN1cnJlbnRJbnRlcnZhbDsNCiAgICB9DQoNCiAgICAvKiB0byBiZSBjYWxsZWQgd2hlbiBJQ08gaXMgY2xvc2VkLCBidXJucyB0aGUgcmVtYWluaW5nIHRva2VucyBidXQgdGhlIG93bmVycyBzaGFyZSAoNTAgMDAwIDAwMCkgYW5kIHRoZSBvbmVzIHJlc2VydmVkDQogICAgKiAgZm9yIHRoZSBib3VudHkgcHJvZ3JhbSAoMTAgMDAwIDAwMCkuDQogICAgKiAgYW55Ym9keSBtYXkgYnVybiB0aGUgdG9rZW5zIGFmdGVyIElDTyBlbmRlZCwgYnV0IG9ubHkgb25jZSAoaW4gY2FzZSB0aGUgb3duZXIgaG9sZHMgbW9yZSB0b2tlbnMgaW4gdGhlIGZ1dHVyZSkuDQogICAgKiAgdGhpcyBlbnN1cmVzIHRoYXQgdGhlIG93bmVyIHdpbGwgbm90IHBvc3NlcyBhIG1ham9yaXR5IG9mIHRoZSB0b2tlbnMuICovDQogICAgZnVuY3Rpb24gYnVybigpew0KICAgIAkvL2lmIHRva2VucyBoYXZlIG5vdCBiZWVuIGJ1cm5lZCBhbHJlYWR5IGFuZCB0aGUgSUNPIGVuZGVkDQogICAgCWlmKCFidXJuZWQgJiYgbm93PnN0YXJ0VGltZSl7DQogICAgCQl1aW50IGRpZmZlcmVuY2UgPSBzYWZlU3ViKGJhbGFuY2VPZltvd25lcl0sIDYwMDAwMDAwKTsvL2NoZWNrZWQgZm9yIG92ZXJmbG93IGFib3ZlDQogICAgCQliYWxhbmNlT2Zbb3duZXJdID0gNjAwMDAwMDA7DQogICAgCQl0b3RhbFN1cHBseSA9IHNhZmVTdWIodG90YWxTdXBwbHksIGRpZmZlcmVuY2UpOw0KICAgIAkJYnVybmVkID0gdHJ1ZTsNCiAgICAJfQ0KICAgIH0NCg0KfQ=='