base 64 content
base64edgelessToken3
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC42Ow0KY29udHJhY3QgdG9rZW5SZWNpcGllbnQgeyBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZXh0cmFEYXRhKTsgfQ0KDQpjb250cmFjdCBFZGdlbGVzc1Rva2VuIHsNCiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLw0KICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnRVJDMjAnOw0KICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICdFZGdlbGVzcyc7DQogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAnRURHJzsNCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAwOyANCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsNCiAgICB1aW50MjU2IHB1YmxpYyBjdXJyZW50SW50ZXJ2YWwgPSAxOw0KICAgIHVpbnQyNTYgcHVibGljIGludGVydmFsTGVuZ3RoID0gMzAgZGF5czsNCiAgICB1aW50MjU2IHB1YmxpYyBzdGFydFRpbWUgPSAxNDkwMTEyMDAwOy8vZnJvbSB0aGlzIHRpbWUgb24gdG9rZW5zIG1heSBiZSB0cmFuc2ZlcmVkIChhZnRlciBJQ08pDQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQoNCiAgICAvKiBUaGlzIGNyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8NCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOw0KICAgIA0KICAgIC8qIERlZmluZXMgaG93IG1hbnkgdG9rZW5zIG9mIHdoaWNoIGFkZHJlc3NlcyBhcmUgbG9ja2VkIGluIHdoaWNoIGludGVydmFsKi8NCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyh1aW50MjU2PT51aW50MjU2KSkgcHVibGljIGxvY2tlZDsNCg0KICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLw0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpOw0KICAgIGV2ZW50IExvY2soYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50MjU2IGludGVydmFsLCB1aW50MjU2IHZhbHVlKTsNCiAgICANCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8NCiAgICBmdW5jdGlvbiBFZGdlbGVzc1Rva2VuKCkgew0KICAgICAgICBvd25lciA9IDB4MDAzMjMwQkJFNjRlY2NENjZmNjI5MTM2NzlDODk2NkNmOUY0MTE2NjsNCiAgICAgICAgYmFsYW5jZU9mW293bmVyXSA9IDUwMDAwMDAwMDsgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIG93bmVyIGFsbCBpbml0aWFsIHRva2Vucw0KICAgICAgICB0b3RhbFN1cHBseSA9IDUwMDAwMDAwMDsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5ICAgICAgICAgICANCiAgICB9DQoNCiAgICAvKiBTZW5kIGNvaW5zICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3Mpew0KICAgICAgICBpZiAobm93IDwgc3RhcnRUaW1lKSB0aHJvdzsgLy9jaGVjayBpZiB0aGUgY3Jvd2RzYWxlIGlzIGFscmVhZHkgb3Zlcg0KICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdLWxvY2tlZFttc2cuc2VuZGVyXVtnZXRJbnRlcnZhbCgpXSA8IF92YWx1ZSkgdGhyb3c7ICAgLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoDQogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsgLy8gQ2hlY2sgZm9yIG92ZXJmbG93cw0KICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcg0KICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50DQogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyogQWxsb3cgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBpbiB5b3VyIGJlaGFsZiAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyogQXBwcm92ZSBhbmQgdGhlbiBjb211bmljYXRlIHRoZSBhcHByb3ZlZCBjb250cmFjdCBpbiBhIHNpbmdsZSB0eCAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsNCiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsNCiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0gICAgICAgIA0KDQogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChub3cgPCBzdGFydFRpbWUgJiYgX2Zyb20hPW93bmVyKSB0aHJvdzsgLy9jaGVjayBpZiB0aGUgY3Jvd2RzYWxlIGlzIGFscmVhZHkgb3Zlcg0KICAgICAgICBpZiAoYmFsYW5jZU9mW19mcm9tXS1sb2NrZWRbX2Zyb21dW2dldEludGVydmFsKCldIDwgX3ZhbHVlKSB0aHJvdzsgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaA0KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7ICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzDQogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsgICAvLyBDaGVjayBhbGxvd2FuY2UNCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KICAgIA0KICAgIC8qIExvY2sgYSBudW1iZXIgb2YgdG9rZW5zICovDQogICAgZnVuY3Rpb24gbG9jayhhZGRyZXNzIGhvbGRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBpZihob2xkZXI9PW1zZy5zZW5kZXJ8fGhvbGRlcj09dHgub3JpZ2luKXsNCiAgICAgICAgICAgIGxvY2tlZFtob2xkZXJdW2dldEludGVydmFsKCldKz1fdmFsdWU7DQogICAgICAgICAgICBMb2NrKGhvbGRlciwgY3VycmVudEludGVydmFsLCBfdmFsdWUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgLyogSW5jcmVhc2UgdGhlIGludGVydmFsLCBpZiBzdWZmaWNpZW50IHRpbWUgaGFzIHBhc3NlZCAqLw0KICAgIGZ1bmN0aW9uIGdldEludGVydmFsKCkgcmV0dXJucyAodWludDI1NiBpbnRlcnZhbCl7DQogICAgICAgIGlmIChub3cgPiBjdXJyZW50SW50ZXJ2YWwgKiBpbnRlcnZhbExlbmd0aCArIHN0YXJ0VGltZSkgew0KICAgICAgICAgICAgY3VycmVudEludGVydmFsID0gKG5vdyAtIHN0YXJ0VGltZSkgLyBpbnRlcnZhbExlbmd0aCArIDE7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGN1cnJlbnRJbnRlcnZhbDsNCiAgICB9DQoNCn0='