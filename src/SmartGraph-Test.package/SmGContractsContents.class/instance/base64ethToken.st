base 64 content
base64ethToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC42Ow0KDQovKioNCkB0aXRsZSBTdGFuZGFyZFRva2VuDQpAYXV0aG9yIGh0dHBzOi8vZ2l0aHViLmNvbS9Db25zZW5TeXMvVG9rZW5zL3RyZWUvbWFzdGVyL1Rva2VuX0NvbnRyYWN0cy9jb250cmFjdHMNCiovDQpjb250cmFjdCBTdGFuZGFyZFRva2VuIHsNCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsNCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7DQogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsNCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsNCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsNCg0KICAgIC8qKg0KICAgIEBub3RpY2UgRnVuY3Rpb24gdHJhbnNmZXJzICdfdmFsdWUnIHRva2VucyBmcm9tICdtc2cuc2VuZGVyJyB0byAnX3RvJw0KICAgIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIGRlc3RpbmF0aW9uIGFjY291bnQNCiAgICBAcGFyYW0gX3ZhbHVlIFRoZSBudW1iZXIgb2YgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkDQogICAgQHJldHVybiBzdWNjZXNzIFdoZXRoZXIgdGhlIHRyYW5zZmVyIGlzIHN1Y2Nlc3NmdWwNCiAgICAqLw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgaWYoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dKSB7DQogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgQG5vdGljZSBGdW5jdGlvbiB0cmFuc2ZlcnMgJ192YWx1ZScgdG9rZW5zIGZyb20gJ19mcm9tJyB0byAnX3RvJyBpZiB0aGVyZSBpcyBhbGxvd2FuY2UNCiAgICBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNvdXJjZSBhY2NvdW50DQogICAgQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgZGVzdGluYXRpb24gYWNjb3VudA0KICAgIEBwYXJhbSBfdmFsdWUgVGhlIG51bWJlciBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQNCiAgICBAcmV0dXJuIHN1Y2Nlc3MgV2hldGhlciB0aGUgdHJhbnNmZXIgaXMgc3VjY2Vzc2Z1bA0KICAgICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgaWYoYmFsYW5jZXNbX2Zyb21dID49IF92YWx1ZSAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsNCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsNCiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgCUBub3RpY2UgUmV0dXJucyB0aGUgYmFsYW5jZSBhc3NvY2lhdGVkIHdpdGggdGhlIHJlbGV2YW50IGFkZHJlc3MNCiAgIAlAcGFyYW0gX293bmVyIGFkZHJlc3Mgb2YgYWNjb3VudCBvd25lcg0KICAgCUByZXR1cm4geyAiYmFsYW5jZSIgOiAidG9rZW4gYmFsYW5jZSBvZiBfb3duZXIiIH0NCiAgIAkqLw0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyh1aW50MjU2IGJhbGFuY2UpIHsNCiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07DQogICAgfQ0KDQogICAgLyoqDQogICAgQG5vdGljZSBGdW5jdGlvbiBhcHByb3ZlcyBgX2FkZHJgIHRvIHNwZW5kIGBfdmFsdWVgIHRva2VucyBvZiBtc2cuc2VuZGVyDQogICAgQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2Vucw0KICAgIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB3ZWkgdG8gYmUgYXBwcm92ZWQgZm9yIHRyYW5zZmVyDQogICAgQHJldHVybiBzdWNjZXNzIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdA0KICAgICovDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICBAbm90aWNlIFJldHVybnMgdGhlIGFtb3VudCBmb3IgX3NwZW5kZXIgbGVmdCBhcHByb3ZlZCBieSBfb3duZXINCiAgICBAcGFyYW0gX293bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IG93bmluZyB0b2tlbnMNCiAgICBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zDQogICAgQHJldHVybiByZW1haW5pbmcgQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudA0KICAgICovDQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYgcmVtYWluaW5nKSB7DQogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICAgIH0NCg0KfQ0KDQovKioNCkB0aXRsZSBIdW1hblN0YW5kYXJkVG9rZW4NCkBhdXRob3IgaHR0cHM6Ly9naXRodWIuY29tL0NvbnNlblN5cy9Ub2tlbnMvdHJlZS9tYXN0ZXIvVG9rZW5fQ29udHJhY3RzL2NvbnRyYWN0cw0KKi8NCmNvbnRyYWN0IEh1bWFuU3RhbmRhcmRUb2tlbiBpcyBTdGFuZGFyZFRva2VuIHsNCiAgICBzdHJpbmcgcHVibGljIG5hbWU7IC8vZmFuY3kgbmFtZTogZWcgU2ltb24gQnVja3MNCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7IC8vSG93IG1hbnkgZGVjaW1hbHMgdG8gc2hvdy4gaWUuIFRoZXJlIGNvdWxkIDEwMDAgYmFzZSB1bml0cyB3aXRoIDMgZGVjaW1hbHMuIE1lYW5pbmcgMC45ODAgU0JYID0gOTgwIGJhc2UgdW5pdHMuIEl0J3MgbGlrZSBjb21wYXJpbmcgMSB3ZWkgdG8gMSBldGhlci4NCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsgLy9BbiBpZGVudGlmaWVyOiBlZyBTQlgNCiAgICBzdHJpbmcgcHVibGljIHZlcnNpb247IC8vaHVtYW4gMC4xIHN0YW5kYXJkLiBKdXN0IGFuIGFyYml0cmFyeSB2ZXJzaW9uaW5nIHNjaGVtZS4NCn0NCg0KLyoqDQpAdGl0bGUgRXRoVG9rZW4NCkBhdXRob3IgaHR0cHM6Ly9jb2RldHJhY3QuaW8NCiovDQpjb250cmFjdCBFdGhUb2tlbiBpcyBIdW1hblN0YW5kYXJkVG9rZW4gew0KICAgIC8qKg0KICAgIEBub3RpY2UgQ29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBFdGhUb2tlbiBjb250cmFjdA0KICAgIEBkZXYgQ29udHJhY3QgdG8gdHJhZGUgZXRoZXIgdG8gdG9rZW5zIGF0IDEgdG8gMQ0KICAgICovDQogICAgZnVuY3Rpb24gRXRoVG9rZW4oKSB7DQogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsNCiAgICAgICAgdG90YWxTdXBwbHkgPSAwOw0KICAgICAgICBuYW1lID0gJ0VUSCBUb2tlbic7DQogICAgICAgIGRlY2ltYWxzID0gMTg7DQogICAgICAgIHN5bWJvbCA9ICfOnic7DQogICAgICAgIHZlcnNpb24gPSAnMC4yJzsNCiAgICB9DQoNCiAgICBldmVudCBMb2dDcmVhdGVUb2tlbihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKTsNCiAgICBldmVudCBMb2dSZWRlZW1Ub2tlbihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlKTsNCg0KICAgIC8qKg0KICAgIEBub3RpY2UgQ3JlYXRlcyBldGhlciB0b2tlbnMgY29ycmVzcG9uZGluZyB0byB0aGUgYW1vdW50IG9mIGV0aGVyIHJlY2VpdmVkICdtc2cudmFsdWUnLiBVcGRhdGVzIGFjY291bnQgdG9rZW4gYmFsYW5jZQ0KICAgIEByZXR1cm4gc3VjY2VzcyBXaGV0aGVyIHRoZSB0cmFuc2ZlciBpcyBzdWNjZXNzZnVsDQogICAgKi8NCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlbigpIHBheWFibGUgcmV0dXJucyhib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgaWYobXNnLnZhbHVlID09IDApIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIGlmKChiYWxhbmNlc1ttc2cuc2VuZGVyXSArIG1zZy52YWx1ZSkgPiBiYWxhbmNlc1ttc2cuc2VuZGVyXSAmJiAodG90YWxTdXBwbHkgKyBtc2cudmFsdWUpID4gdG90YWxTdXBwbHkpIHsNCiAgICAgICAgICAgIHRvdGFsU3VwcGx5ICs9IG1zZy52YWx1ZTsNCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IG1zZy52YWx1ZTsNCiAgICAgICAgICAgIExvZ0NyZWF0ZVRva2VuKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgQG5vdGljZSBDb252ZXJ0cyB0b2tlbiBxdWFudGl0eSBkZWZpbmVkIGJ5ICdfdG9rZW4nIGludG8gZXRoZXIgYW5kIHNlbmRzIGJhY2sgdG8gbXNnLnNlbmRlcg0KICAgIEBwYXJhbSBfdG9rZW5zIFRoZSBudW1iZXIgb2YgdG9rZW5zIHRvIGJlIGNvbnZlcnRlZCB0byBldGhlcg0KICAgIEByZXR1cm4gc3VjY2VzcyBXaGV0aGVyIHRoZSB0cmFuc2ZlciBpcyBzdWNjZXNzZnVsDQogICAgKi8NCiAgICBmdW5jdGlvbiByZWRlZW1Ub2tlbih1aW50MjU2IF90b2tlbnMpIHJldHVybnMoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmKHRoaXMuYmFsYW5jZSA8IHRvdGFsU3VwcGx5KSB7DQogICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfQ0KICAgICAgICBpZihfdG9rZW5zID09IDApIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIGlmKGJhbGFuY2VzW21zZy5zZW5kZXJdID49IF90b2tlbnMgJiYgdG90YWxTdXBwbHkgPj0gX3Rva2Vucykgew0KICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3Rva2VuczsNCiAgICAgICAgICAgIHRvdGFsU3VwcGx5IC09IF90b2tlbnM7DQogICAgICAgICAgICBpZihtc2cuc2VuZGVyLnNlbmQoX3Rva2VucykpIHsNCiAgICAgICAgICAgICAgICBMb2dSZWRlZW1Ub2tlbihtc2cuc2VuZGVyLCBfdG9rZW5zKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7DQogICAgICAgIGNyZWF0ZVRva2VuKCk7DQogICAgfQ0KfQ=='