base 64 content
base64etherDOGEICO
	^'Y29udHJhY3QgRXRoZXJET0dFSUNPIHsNCiAgICANCiAgICBmdW5jdGlvbiBuYW1lKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7IHJldHVybiAiRXRoZXJET0dFIjsgfQ0KICAgIGZ1bmN0aW9uIHN5bWJvbCgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZykgeyByZXR1cm4gImVET0dFIjsgfQ0KICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsgcmV0dXJuIDQ7IH0NCgkNCg0KICAgIHVpbnQyNTYgcHVibGljIElOSVRJQUxfU1VQUExZOw0KCXVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Ow0KCQ0KCXVpbnQyNTYgcHVibGljIHRvdGFsQ29udHJpYjsNCiAgICANCiAgICB1aW50MjU2IHB1YmxpYyByYXRlOw0KICANCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsJCQkJCQkgICAgLy9pbml0IG93bmVyIGFkZHJlc3MNCgkNCgl1aW50MjU2IHB1YmxpYyBhbW91bnQ7DQoJDQoJDQoJZnVuY3Rpb24gRXRoZXJET0dFSUNPKCkgew0KICAgICAgICBJTklUSUFMX1NVUFBMWSA9IDIxMDAwMDAwMDAwMDsgICAgICAgICAgICAgIC8vU3RhcnRpbmcgRXRoZXJET0dFIHN1cHBseQ0KCQl0b3RhbFN1cHBseSA9IDA7DQoJCQ0KCQl0b3RhbENvbnRyaWIgPSAwOw0KICAgICAgICANCiAgICAgICAgcmF0ZSA9IDIxMDAwMDAwMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0hvdyBtYW55IEV0aGVyRE9HRSB0b2tlbnMgcGVyIEVUSCBnaXZlbg0KCQkNCgkJb3duZXIgPSBtc2cuc2VuZGVyOwkJCSAgICAgICAgICAgICAgICAvL01ha2Ugb3duZXIgb2YgY29udHJhY3QgdGhlIGNyZWF0b3INCgkJDQoJCWJhbGFuY2VzW21zZy5zZW5kZXJdID0gSU5JVElBTF9TVVBQTFk7CQkvL1NlbmQgb3duZXIgb2YgY29udHJhY3QgYWxsIHN0YXJ0aW5nIHRva2Vucw0KCX0NCgkNCgkNCgkvL1RoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW4gRXRoZXIgaXMgc2VudCB0byB0aGUgY29udHJhY3QgYWRkcmVzcw0KCS8vRXZlbiBpZiAwIGV0aGVyIGlzIHNlbnQuDQoJZnVuY3Rpb24gKCkgcGF5YWJsZSB7DQoJICAgIA0KCSAgICB1aW50MjU2IHRyeUFtb3VudCA9IGRpdigobXVsKG1zZy52YWx1ZSwgcmF0ZSkpLCAxIGV0aGVyKTsgICAgICAgICAgICAgICAgICAgLy9Eb24ndCBsZXQgcGVvcGxlIGJ1eSBtb3JlIHRva2VucyB0aGFuIHRoZXJlIGFyZS4NCgkgICAgDQoJCWlmIChtc2cudmFsdWUgPT0gMCB8fCBtc2cudmFsdWUgPCAwIHx8IGJhbGFuY2VPZihvd25lcikgPCB0cnlBbW91bnQpIHsJCS8vSWYgemVybyBldGhlciBpcyBzZW50LCBraWxsLiBEbyBub3RoaW5nLiANCgkJCXJldmVydCgpOw0KCQl9DQoJCQ0KCSAgICBhbW91bnQgPSAwOwkJCQkJCQkJCSAgICAgICAgICAgICAgICAvL3NldCB0aGUgJ2Ftb3VudCcgdmFyIGJhY2sgdG8gemVybw0KCQlhbW91bnQgPSBkaXYoKG11bChtc2cudmFsdWUsIHJhdGUpKSwgMSBldGhlcik7CQkJCS8vdGFrZSBzZW50IGV0aGVyLCBtdWx0aXBseSBpdCBieSB0aGUgcmF0ZSB0aGVuIGRpdmlkZSBieSAxIGV0aGVyLg0KCQl0cmFuc2ZlckZyb20ob3duZXIsIG1zZy5zZW5kZXIsIGFtb3VudCk7ICAgICAgICAgICAgICAgICAgICAvL1NlbmQgdG9rZW5zIHRvIGJ1eWVyDQoJCXRvdGFsU3VwcGx5ICs9IGFtb3VudDsJCQkJCQkJCQkJLy9LZWVwIHRyYWNrIG9mIGhvdyBtYW55IGhhdmUgYmVlbiBzb2xkLg0KCQl0b3RhbENvbnRyaWIgPSAodG90YWxDb250cmliICsgbXNnLnZhbHVlKTsNCgkJYW1vdW50ID0gMDsJCQkJCQkJCQkgICAgICAgICAgICAgICAgLy9zZXQgdGhlICdhbW91bnQnIHZhciBiYWNrIHRvIHplcm8NCgkJDQoJCQ0KCQlvd25lci50cmFuc2Zlcihtc2cudmFsdWUpOwkJCQkJICAgICAgICAgICAgICAgIC8vU2VuZCB0aGUgRVRIIHRvIGNvbnRyYWN0IG93bmVyLg0KDQoJfQkNCgkNCgkNCgkNCiAgDQogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICANCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOw0KDQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgICAgIGlmIChfdmFsdWUgPT0gMCkgeyByZXR1cm4gZmFsc2U7IH0NCg0KICAgICAgICB1aW50MjU2IGZyb21CYWxhbmNlID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07DQoNCiAgICAgICAgYm9vbCBzdWZmaWNpZW50RnVuZHMgPSBmcm9tQmFsYW5jZSA+PSBfdmFsdWU7DQogICAgICAgIGJvb2wgb3ZlcmZsb3dlZCA9IGJhbGFuY2VzW190b10gKyBfdmFsdWUgPCBiYWxhbmNlc1tfdG9dOw0KICAgICAgICANCiAgICAgICAgaWYgKHN1ZmZpY2llbnRGdW5kcyAmJiAhb3ZlcmZsb3dlZCkgew0KICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQogICAgICAgICAgICANCiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0NCiAgICB9DQoNCg0KDQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7IHJldHVybiBiYWxhbmNlc1tfb3duZXJdOyB9DQoNCg0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQoNCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSB7IHJldHVybiBmYWxzZTsgfQ0KICAgICAgICANCiAgICAgICAgdWludDI1NiBmcm9tQmFsYW5jZSA9IGJhbGFuY2VzW293bmVyXTsNCg0KICAgICAgICBib29sIHN1ZmZpY2llbnRGdW5kcyA9IGZyb21CYWxhbmNlID49IF92YWx1ZTsNCg0KICAgICAgICBpZiAoc3VmZmljaWVudEZ1bmRzKSB7DQogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7DQogICAgICAgICAgICANCiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9DQogICAgfQ0KDQoJDQogICAgZnVuY3Rpb24gZ2V0U3RhdHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2LCB1aW50MjU2KSB7DQogICAgICAgIHJldHVybiAodG90YWxTdXBwbHksIHRvdGFsQ29udHJpYik7DQogICAgfQ0KDQoJDQoJDQogIGZ1bmN0aW9uIG11bCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikgew0KICAgIHVpbnQyNTYgYyA9IGEgKiBiOw0KICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBkaXYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICAvLyBhc3NlcnQoYiA+IDApOyAvLyBTb2xpZGl0eSBhdXRvbWF0aWNhbGx5IHRocm93cyB3aGVuIGRpdmlkaW5nIGJ5IDANCiAgICB1aW50MjU2IGMgPSBhIC8gYjsNCiAgICAvLyBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsgLy8gVGhlcmUgaXMgbm8gY2FzZSBpbiB3aGljaCB0aGlzIGRvZXNuJ3QgaG9sZA0KICAgIHJldHVybiBjOw0KICB9DQoNCiAgZnVuY3Rpb24gc3ViKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQoNCiAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgdWludDI1NiBjID0gYSArIGI7DQogICAgYXNzZXJ0KGMgPj0gYSk7DQogICAgcmV0dXJuIGM7DQogIH0NCgkNCgkNCgkNCn0='