base 64 content
base64etheropt
	^'Ly9sYXN0IGNvbXBpbGVkIHdpdGggc29sanNvbi12MC4zLjUtMjAxNi0wNy0yMS02NjEwYWRkDQoNCmNvbnRyYWN0IEV0aGVyb3B0IHsNCg0KICBzdHJ1Y3QgUG9zaXRpb24gew0KICAgIG1hcHBpbmcodWludCA9PiBpbnQpIHBvc2l0aW9uczsNCiAgICBpbnQgY2FzaDsNCiAgICBib29sIGV4cGlyZWQ7DQogICAgYm9vbCBoYXNQb3NpdGlvbjsNCiAgfQ0KICB1aW50IHB1YmxpYyBleHBpcmF0aW9uOw0KICBzdHJpbmcgcHVibGljIHVuZGVybHlpbmc7DQogIHVpbnQgcHVibGljIG1hcmdpbjsNCiAgdWludCBwdWJsaWMgcmVhbGl0eUlEOw0KICBieXRlczMyIHB1YmxpYyBmYWN0SGFzaDsNCiAgYWRkcmVzcyBwdWJsaWMgZXRoQWRkcjsNCiAgbWFwcGluZyh1aW50ID0+IGludCkgb3B0aW9uczsNCiAgdWludCBwdWJsaWMgbnVtT3B0aW9uczsNCiAgYm9vbCBwdWJsaWMgZXhwaXJlZDsNCiAgbWFwcGluZyhhZGRyZXNzID0+IFBvc2l0aW9uKSBwb3NpdGlvbnM7DQogIHVpbnQgcHVibGljIG51bVBvc2l0aW9uczsNCiAgdWludCBwdWJsaWMgbnVtUG9zaXRpb25zRXhwaXJlZDsNCiAgc3RydWN0IEFjY291bnQgew0KICAgIGFkZHJlc3MgdXNlcjsNCiAgICBpbnQgY2FwaXRhbDsNCiAgfQ0KICBtYXBwaW5nKGJ5dGVzMzIgPT4gaW50KSBvcmRlckZpbGxzOyAvL2tlZXBzIHRyYWNrIG9mIGN1bXVsYXRpdmUgb3JkZXIgZmlsbHMNCiAgc3RydWN0IE1hcmtldE1ha2VyIHsNCiAgICBhZGRyZXNzIHVzZXI7DQogICAgc3RyaW5nIHNlcnZlcjsNCiAgfQ0KICBtYXBwaW5nKHVpbnQgPT4gTWFya2V0TWFrZXIpIG1hcmtldE1ha2VyczsgLy9zdGFydHMgYXQgMQ0KICB1aW50IHB1YmxpYyBudW1NYXJrZXRNYWtlcnMgPSAwOw0KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgbWFya2V0TWFrZXJJRHM7DQogIG1hcHBpbmcodWludCA9PiBBY2NvdW50KSBhY2NvdW50czsNCiAgdWludCBwdWJsaWMgbnVtQWNjb3VudHM7DQogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBhY2NvdW50SURzOyAvL3N0YXJ0cyBhdCAxDQoNCiAgLy9ldmVudHMNCiAgZXZlbnQgRGVwb3NpdChhZGRyZXNzIGluZGV4ZWQgdXNlciwgdWludCBhbW91bnQsIGludCBiYWxhbmNlKTsgLy9iYWxhbmNlIGlzIGJhbGFuY2UgYWZ0ZXIgZGVwb3NpdA0KICBldmVudCBXaXRoZHJhdyhhZGRyZXNzIGluZGV4ZWQgdXNlciwgdWludCBhbW91bnQsIGludCBiYWxhbmNlKTsgLy9iYWxhbmNlIGlzIGJhbGFuY2UgYWZ0ZXIgd2l0aGRyYXcNCiAgZXZlbnQgTmV3TWFya2V0TWFrZXIoYWRkcmVzcyBpbmRleGVkIHVzZXIsIHN0cmluZyBzZXJ2ZXIpOw0KICBldmVudCBFeHBpcmUoYWRkcmVzcyBpbmRleGVkIGNhbGxlciwgYWRkcmVzcyBpbmRleGVkIHVzZXIpOyAvL3VzZXIgaXMgdGhlIGFjY291bnQgdGhhdCB3YXMgZXhwaXJlZA0KICBldmVudCBPcmRlck1hdGNoRmFpbHVyZShhZGRyZXNzIGluZGV4ZWQgbWF0Y2hVc2VyLCBpbnQgbWF0Y2hTaXplLCBhZGRyZXNzIGluZGV4ZWQgb3JkZXJVc2VyLCBpbnQgb3JkZXJTaXplLCB1aW50IG9wdGlvbklELCB1aW50IHByaWNlKTsNCiAgZXZlbnQgT3JkZXJNYXRjaChhZGRyZXNzIGluZGV4ZWQgbWF0Y2hVc2VyLCBpbnQgbWF0Y2hTaXplLCBhZGRyZXNzIGluZGV4ZWQgb3JkZXJVc2VyLCBpbnQgb3JkZXJTaXplLCB1aW50IG9wdGlvbklELCB1aW50IHByaWNlKTsNCg0KICBmdW5jdGlvbiBFdGhlcm9wdCh1aW50IGV4cGlyYXRpb25fLCBzdHJpbmcgdW5kZXJseWluZ18sIHVpbnQgbWFyZ2luXywgdWludCByZWFsaXR5SURfLCBieXRlczMyIGZhY3RIYXNoXywgYWRkcmVzcyBldGhBZGRyXywgaW50W10gc3RyaWtlc18pIHsNCiAgICBleHBpcmF0aW9uID0gZXhwaXJhdGlvbl87DQogICAgdW5kZXJseWluZyA9IHVuZGVybHlpbmdfOw0KICAgIG1hcmdpbiA9IG1hcmdpbl87DQogICAgcmVhbGl0eUlEID0gcmVhbGl0eUlEXzsNCiAgICBmYWN0SGFzaCA9IGZhY3RIYXNoXzsNCiAgICBldGhBZGRyID0gZXRoQWRkcl87DQogICAgZm9yICh1aW50IGk9MDsgaSA8IHN0cmlrZXNfLmxlbmd0aDsgaSsrKSB7DQogICAgICBpZiAobnVtT3B0aW9uczwyMCkgew0KICAgICAgICB1aW50IG9wdGlvbklEID0gbnVtT3B0aW9ucysrOw0KICAgICAgICBvcHRpb25zW29wdGlvbklEXSA9IHN0cmlrZXNfW2ldOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGdldEFjY291bnRJRChhZGRyZXNzIHVzZXIpIGNvbnN0YW50IHJldHVybnModWludCkgew0KICAgIHJldHVybiBhY2NvdW50SURzW3VzZXJdOw0KICB9DQoNCiAgZnVuY3Rpb24gZ2V0QWNjb3VudCh1aW50IGFjY291bnRJRCkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKSB7DQogICAgcmV0dXJuIGFjY291bnRzW2FjY291bnRJRF0udXNlcjsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFkZEZ1bmRzKCkgew0KICAgIGlmIChhY2NvdW50SURzW21zZy5zZW5kZXJdPjApIHsNCiAgICAgIGFjY291bnRzW2FjY291bnRJRHNbbXNnLnNlbmRlcl1dLmNhcGl0YWwgKz0gaW50KG1zZy52YWx1ZSk7DQogICAgfSBlbHNlIHsNCiAgICAgIHVpbnQgYWNjb3VudElEID0gKytudW1BY2NvdW50czsNCiAgICAgIGFjY291bnRzW2FjY291bnRJRF0udXNlciA9IG1zZy5zZW5kZXI7DQogICAgICBhY2NvdW50c1thY2NvdW50SURdLmNhcGl0YWwgKz0gaW50KG1zZy52YWx1ZSk7DQogICAgICBhY2NvdW50SURzW21zZy5zZW5kZXJdID0gYWNjb3VudElEOw0KICAgIH0NCiAgICBEZXBvc2l0KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgYWNjb3VudHNbYWNjb3VudElEc1ttc2cuc2VuZGVyXV0uY2FwaXRhbCk7DQogIH0NCg0KICBmdW5jdGlvbiB3aXRoZHJhd0Z1bmRzKHVpbnQgYW1vdW50KSB7DQogICAgaWYgKGFjY291bnRJRHNbbXNnLnNlbmRlcl0+MCkgew0KICAgICAgaWYgKGludChhbW91bnQpPD1nZXRGdW5kcyhtc2cuc2VuZGVyLCB0cnVlKSAmJiBpbnQoYW1vdW50KT4wKSB7DQogICAgICAgIGFjY291bnRzW2FjY291bnRJRHNbbXNnLnNlbmRlcl1dLmNhcGl0YWwgLT0gaW50KGFtb3VudCk7DQogICAgICAgIG1zZy5zZW5kZXIuY2FsbC52YWx1ZShhbW91bnQpKCk7DQogICAgICAgIFdpdGhkcmF3KG1zZy5zZW5kZXIsIGFtb3VudCwgYWNjb3VudHNbYWNjb3VudElEc1ttc2cuc2VuZGVyXV0uY2FwaXRhbCk7DQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gZ2V0RnVuZHMoYWRkcmVzcyB1c2VyLCBib29sIG9ubHlBdmFpbGFibGUpIGNvbnN0YW50IHJldHVybnMoaW50KSB7DQogICAgaWYgKGFjY291bnRJRHNbdXNlcl0+MCkgew0KICAgICAgaWYgKG9ubHlBdmFpbGFibGUgPT0gZmFsc2UpIHsNCiAgICAgICAgcmV0dXJuIGFjY291bnRzW2FjY291bnRJRHNbdXNlcl1dLmNhcGl0YWw7DQogICAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gYWNjb3VudHNbYWNjb3VudElEc1t1c2VyXV0uY2FwaXRhbCArIGdldE1heExvc3NBZnRlclRyYWRlKHVzZXIsIDAsIDAsIDApOw0KICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICByZXR1cm4gMDsNCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBnZXRGdW5kc0FuZEF2YWlsYWJsZShhZGRyZXNzIHVzZXIpIGNvbnN0YW50IHJldHVybnMoaW50LCBpbnQpIHsNCiAgICByZXR1cm4gKGdldEZ1bmRzKHVzZXIsIGZhbHNlKSwgZ2V0RnVuZHModXNlciwgdHJ1ZSkpOw0KICB9DQoNCiAgZnVuY3Rpb24gbWFya2V0TWFrZXIoc3RyaW5nIHNlcnZlcikgew0KICAgIGlmIChtc2cudmFsdWU+MCkgdGhyb3c7DQogICAgaWYgKG1hcmtldE1ha2VySURzW21zZy5zZW5kZXJdPjApIHsNCiAgICAgIG1hcmtldE1ha2Vyc1ttYXJrZXRNYWtlcklEc1ttc2cuc2VuZGVyXV0uc2VydmVyID0gc2VydmVyOw0KICAgIH0gZWxzZSB7DQogICAgICBpbnQgZnVuZHMgPSBnZXRGdW5kcyhtYXJrZXRNYWtlcnNbaV0udXNlciwgZmFsc2UpOw0KICAgICAgdWludCBtYXJrZXRNYWtlcklEID0gMDsNCiAgICAgIGlmIChudW1NYXJrZXRNYWtlcnM8Nikgew0KICAgICAgICBtYXJrZXRNYWtlcklEID0gKytudW1NYXJrZXRNYWtlcnM7DQogICAgICB9IGVsc2Ugew0KICAgICAgICBmb3IgKHVpbnQgaT0yOyBpPD1udW1NYXJrZXRNYWtlcnM7IGkrKykgew0KICAgICAgICAgIGlmIChnZXRGdW5kcyhtYXJrZXRNYWtlcnNbaV0udXNlciwgZmFsc2UpPD1mdW5kcyAmJiAobWFya2V0TWFrZXJJRD09MCB8fCBnZXRGdW5kcyhtYXJrZXRNYWtlcnNbaV0udXNlciwgZmFsc2UpPGdldEZ1bmRzKG1hcmtldE1ha2Vyc1ttYXJrZXRNYWtlcklEXS51c2VyLCBmYWxzZSkpKSB7DQogICAgICAgICAgICBtYXJrZXRNYWtlcklEID0gaTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIGlmIChtYXJrZXRNYWtlcklEPjApIHsNCiAgICAgICAgbWFya2V0TWFrZXJJRHNbbWFya2V0TWFrZXJzW21hcmtldE1ha2VySURdLnVzZXJdID0gMDsNCiAgICAgICAgbWFya2V0TWFrZXJzW21hcmtldE1ha2VySURdLnVzZXIgPSBtc2cuc2VuZGVyOw0KICAgICAgICBtYXJrZXRNYWtlcnNbbWFya2V0TWFrZXJJRF0uc2VydmVyID0gc2VydmVyOw0KICAgICAgICBtYXJrZXRNYWtlcklEc1ttc2cuc2VuZGVyXSA9IG1hcmtldE1ha2VySUQ7DQogICAgICAgIE5ld01hcmtldE1ha2VyKG1zZy5zZW5kZXIsIHNlcnZlcik7DQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aHJvdzsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBnZXRNYXJrZXRNYWtlcnMoKSBjb25zdGFudCByZXR1cm5zKHN0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmcpIHsNCiAgICBzdHJpbmdbXSBtZW1vcnkgc2VydmVycyA9IG5ldyBzdHJpbmdbXSg2KTsNCiAgICBmb3IgKHVpbnQgaT0xOyBpPD1udW1NYXJrZXRNYWtlcnM7IGkrKykgew0KICAgICAgc2VydmVyc1tpLTFdID0gbWFya2V0TWFrZXJzW2ldLnNlcnZlcjsNCiAgICB9DQogICAgcmV0dXJuIChzZXJ2ZXJzWzBdLCBzZXJ2ZXJzWzFdLCBzZXJ2ZXJzWzJdLCBzZXJ2ZXJzWzNdLCBzZXJ2ZXJzWzRdLCBzZXJ2ZXJzWzVdKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGdldE1hcmtldE1ha2VyRnVuZHMoKSBjb25zdGFudCByZXR1cm5zKGludCwgaW50LCBpbnQsIGludCwgaW50LCBpbnQpIHsNCiAgICBpbnRbXSBtZW1vcnkgZnVuZHMgPSBuZXcgaW50W10oNik7DQogICAgZm9yICh1aW50IGk9MTsgaTw9bnVtTWFya2V0TWFrZXJzOyBpKyspIHsNCiAgICAgIGZ1bmRzW2ktMV0gPSBnZXRGdW5kcyhtYXJrZXRNYWtlcnNbaV0udXNlciwgZmFsc2UpOw0KICAgIH0NCiAgICByZXR1cm4gKGZ1bmRzWzBdLCBmdW5kc1sxXSwgZnVuZHNbMl0sIGZ1bmRzWzNdLCBmdW5kc1s0XSwgZnVuZHNbNV0pOw0KICB9DQoNCiAgZnVuY3Rpb24gZ2V0T3B0aW9uQ2hhaW4oKSBjb25zdGFudCByZXR1cm5zICh1aW50LCBzdHJpbmcsIHVpbnQsIHVpbnQsIGJ5dGVzMzIsIGFkZHJlc3MpIHsNCiAgICByZXR1cm4gKGV4cGlyYXRpb24sIHVuZGVybHlpbmcsIG1hcmdpbiwgcmVhbGl0eUlELCBmYWN0SGFzaCwgZXRoQWRkcik7DQogIH0NCg0KICBmdW5jdGlvbiBnZXRNYXJrZXQoYWRkcmVzcyB1c2VyKSBjb25zdGFudCByZXR1cm5zKHVpbnRbXSwgaW50W10sIGludFtdLCBpbnRbXSkgew0KICAgIHVpbnRbXSBtZW1vcnkgb3B0aW9uSURzID0gbmV3IHVpbnRbXSgyMCk7DQogICAgaW50W10gbWVtb3J5IHN0cmlrZXNfID0gbmV3IGludFtdKDIwKTsNCiAgICBpbnRbXSBtZW1vcnkgcG9zaXRpb25zXyA9IG5ldyBpbnRbXSgyMCk7DQogICAgaW50W10gbWVtb3J5IGNhc2hlcyA9IG5ldyBpbnRbXSgyMCk7DQogICAgdWludCB6ID0gMDsNCiAgICBpZiAoZXhwaXJlZCA9PSBmYWxzZSkgew0KICAgICAgZm9yICh1aW50IG9wdGlvbklEPTA7IG9wdGlvbklEPG51bU9wdGlvbnM7IG9wdGlvbklEKyspIHsNCiAgICAgICAgb3B0aW9uSURzW3pdID0gb3B0aW9uSUQ7DQogICAgICAgIHN0cmlrZXNfW3pdID0gb3B0aW9uc1tvcHRpb25JRF07DQogICAgICAgIHBvc2l0aW9uc19bel0gPSBwb3NpdGlvbnNbdXNlcl0ucG9zaXRpb25zW29wdGlvbklEXTsNCiAgICAgICAgY2FzaGVzW3pdID0gcG9zaXRpb25zW3VzZXJdLmNhc2g7DQogICAgICAgIHorKzsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIChvcHRpb25JRHMsIHN0cmlrZXNfLCBwb3NpdGlvbnNfLCBjYXNoZXMpOw0KICB9DQoNCiAgZnVuY3Rpb24gZXhwaXJlKHVpbnQgYWNjb3VudElELCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcywgYnl0ZXMzMiB2YWx1ZSkgew0KICAgIGlmIChleHBpcmVkID09IGZhbHNlKSB7DQogICAgICBpZiAoZWNyZWNvdmVyKHNoYTMoZmFjdEhhc2gsIHZhbHVlKSwgdiwgciwgcykgPT0gZXRoQWRkcikgew0KICAgICAgICB1aW50IGxhc3RBY2NvdW50ID0gbnVtQWNjb3VudHM7DQogICAgICAgIGlmIChhY2NvdW50SUQ9PTApIHsNCiAgICAgICAgICBhY2NvdW50SUQgPSAxOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGxhc3RBY2NvdW50ID0gYWNjb3VudElEOw0KICAgICAgICB9DQogICAgICAgIGZvciAoYWNjb3VudElEPWFjY291bnRJRDsgYWNjb3VudElEPD1sYXN0QWNjb3VudDsgYWNjb3VudElEKyspIHsNCiAgICAgICAgICBpZiAocG9zaXRpb25zW2FjY291bnRzW2FjY291bnRJRF0udXNlcl0uZXhwaXJlZCA9PSBmYWxzZSkgew0KICAgICAgICAgICAgaW50IHJlc3VsdCA9IHBvc2l0aW9uc1thY2NvdW50c1thY2NvdW50SURdLnVzZXJdLmNhc2ggLyAxMDAwMDAwMDAwMDAwMDAwMDAwOw0KICAgICAgICAgICAgZm9yICh1aW50IG9wdGlvbklEPTA7IG9wdGlvbklEPG51bU9wdGlvbnM7IG9wdGlvbklEKyspIHsNCiAgICAgICAgICAgICAgaW50IG1vbmV5bmVzcyA9IGdldE1vbmV5bmVzcyhvcHRpb25zW29wdGlvbklEXSwgdWludCh2YWx1ZSksIG1hcmdpbik7DQogICAgICAgICAgICAgIHJlc3VsdCArPSBtb25leW5lc3MgKiBwb3NpdGlvbnNbYWNjb3VudHNbYWNjb3VudElEXS51c2VyXS5wb3NpdGlvbnNbb3B0aW9uSURdIC8gMTAwMDAwMDAwMDAwMDAwMDAwMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHBvc2l0aW9uc1thY2NvdW50c1thY2NvdW50SURdLnVzZXJdLmV4cGlyZWQgPSB0cnVlOw0KICAgICAgICAgICAgdWludCBhbW91bnRUb1NlbmQgPSB1aW50KGFjY291bnRzW2FjY291bnRJRF0uY2FwaXRhbCArIHJlc3VsdCk7DQogICAgICAgICAgICBhY2NvdW50c1thY2NvdW50SURdLmNhcGl0YWwgPSAwOw0KICAgICAgICAgICAgaWYgKHBvc2l0aW9uc1thY2NvdW50c1thY2NvdW50SURdLnVzZXJdLmhhc1Bvc2l0aW9uPT10cnVlKSB7DQogICAgICAgICAgICAgIG51bVBvc2l0aW9uc0V4cGlyZWQrKzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGFjY291bnRzW2FjY291bnRJRF0udXNlci5jYWxsLnZhbHVlKGFtb3VudFRvU2VuZCkoKTsNCiAgICAgICAgICAgIEV4cGlyZShtc2cuc2VuZGVyLCBhY2NvdW50c1thY2NvdW50SURdLnVzZXIpOw0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAobnVtUG9zaXRpb25zRXhwaXJlZCA9PSBudW1Qb3NpdGlvbnMpIHsNCiAgICAgICAgICBleHBpcmVkID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGdldE1vbmV5bmVzcyhpbnQgc3RyaWtlLCB1aW50IHNldHRsZW1lbnQsIHVpbnQgbWFyZ2luKSBjb25zdGFudCByZXR1cm5zKGludCkgew0KICAgIGlmIChzdHJpa2U+PTApIHsgLy9jYWxsDQogICAgICBpZiAoc2V0dGxlbWVudD51aW50KHN0cmlrZSkpIHsNCiAgICAgICAgaWYgKHNldHRsZW1lbnQtdWludChzdHJpa2UpPG1hcmdpbikgew0KICAgICAgICAgIHJldHVybiBpbnQoc2V0dGxlbWVudC11aW50KHN0cmlrZSkpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHJldHVybiBpbnQobWFyZ2luKTsNCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuIDA7DQogICAgICB9DQogICAgfSBlbHNlIHsgLy9wdXQNCiAgICAgIGlmIChzZXR0bGVtZW50PHVpbnQoLXN0cmlrZSkpIHsNCiAgICAgICAgaWYgKHVpbnQoLXN0cmlrZSktc2V0dGxlbWVudDxtYXJnaW4pIHsNCiAgICAgICAgICByZXR1cm4gaW50KHVpbnQoLXN0cmlrZSktc2V0dGxlbWVudCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgcmV0dXJuIGludChtYXJnaW4pOw0KICAgICAgICB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gMDsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBvcmRlck1hdGNoVGVzdCh1aW50IG9wdGlvbklELCB1aW50IHByaWNlLCBpbnQgc2l6ZSwgdWludCBvcmRlcklELCB1aW50IGJsb2NrRXhwaXJlcywgYWRkcmVzcyBhZGRyLCBhZGRyZXNzIHNlbmRlciwgdWludCB2YWx1ZSwgaW50IG1hdGNoU2l6ZSkgY29uc3RhbnQgcmV0dXJucyhib29sKSB7DQogICAgaWYgKGJsb2NrLm51bWJlcjw9YmxvY2tFeHBpcmVzICYmICgoc2l6ZT4wICYmIG1hdGNoU2l6ZTwwICYmIG9yZGVyRmlsbHNbc2hhMyhvcHRpb25JRCwgcHJpY2UsIHNpemUsIG9yZGVySUQsIGJsb2NrRXhwaXJlcyldLW1hdGNoU2l6ZTw9c2l6ZSkgfHwgKHNpemU8MCAmJiBtYXRjaFNpemU+MCAmJiBvcmRlckZpbGxzW3NoYTMob3B0aW9uSUQsIHByaWNlLCBzaXplLCBvcmRlcklELCBibG9ja0V4cGlyZXMpXS1tYXRjaFNpemU+PXNpemUpKSAmJiBnZXRGdW5kcyhhZGRyLCBmYWxzZSkrZ2V0TWF4TG9zc0FmdGVyVHJhZGUoYWRkciwgb3B0aW9uSUQsIC1tYXRjaFNpemUsIG1hdGNoU2l6ZSAqIGludChwcmljZSkpPjAgJiYgZ2V0RnVuZHMoc2VuZGVyLCBmYWxzZSkraW50KHZhbHVlKStnZXRNYXhMb3NzQWZ0ZXJUcmFkZShzZW5kZXIsIG9wdGlvbklELCBtYXRjaFNpemUsIC1tYXRjaFNpemUgKiBpbnQocHJpY2UpKT4wKSB7DQogICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgcmV0dXJuIGZhbHNlOw0KICB9DQoNCiAgZnVuY3Rpb24gb3JkZXJNYXRjaCh1aW50IG9wdGlvbklELCB1aW50IHByaWNlLCBpbnQgc2l6ZSwgdWludCBvcmRlcklELCB1aW50IGJsb2NrRXhwaXJlcywgYWRkcmVzcyBhZGRyLCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcywgaW50IG1hdGNoU2l6ZSkgew0KICAgIGFkZEZ1bmRzKCk7DQogICAgYnl0ZXMzMiBoYXNoID0gc2hhMjU2KG9wdGlvbklELCBwcmljZSwgc2l6ZSwgb3JkZXJJRCwgYmxvY2tFeHBpcmVzKTsNCiAgICBpZiAoZWNyZWNvdmVyKGhhc2gsIHYsIHIsIHMpID09IGFkZHIgJiYgYmxvY2subnVtYmVyPD1ibG9ja0V4cGlyZXMgJiYgKChzaXplPjAgJiYgbWF0Y2hTaXplPDAgJiYgb3JkZXJGaWxsc1toYXNoXS1tYXRjaFNpemU8PXNpemUpIHx8IChzaXplPDAgJiYgbWF0Y2hTaXplPjAgJiYgb3JkZXJGaWxsc1toYXNoXS1tYXRjaFNpemU+PXNpemUpKSAmJiBnZXRGdW5kcyhhZGRyLCBmYWxzZSkrZ2V0TWF4TG9zc0FmdGVyVHJhZGUoYWRkciwgb3B0aW9uSUQsIC1tYXRjaFNpemUsIG1hdGNoU2l6ZSAqIGludChwcmljZSkpPjAgJiYgZ2V0RnVuZHMobXNnLnNlbmRlciwgZmFsc2UpK2dldE1heExvc3NBZnRlclRyYWRlKG1zZy5zZW5kZXIsIG9wdGlvbklELCBtYXRjaFNpemUsIC1tYXRjaFNpemUgKiBpbnQocHJpY2UpKT4wKSB7DQogICAgICBpZiAocG9zaXRpb25zW21zZy5zZW5kZXJdLmhhc1Bvc2l0aW9uID09IGZhbHNlKSB7DQogICAgICAgIHBvc2l0aW9uc1ttc2cuc2VuZGVyXS5oYXNQb3NpdGlvbiA9IHRydWU7DQogICAgICAgIG51bVBvc2l0aW9ucysrOw0KICAgICAgfQ0KICAgICAgaWYgKHBvc2l0aW9uc1thZGRyXS5oYXNQb3NpdGlvbiA9PSBmYWxzZSkgew0KICAgICAgICBwb3NpdGlvbnNbYWRkcl0uaGFzUG9zaXRpb24gPSB0cnVlOw0KICAgICAgICBudW1Qb3NpdGlvbnMrKzsNCiAgICAgIH0NCiAgICAgIHBvc2l0aW9uc1ttc2cuc2VuZGVyXS5wb3NpdGlvbnNbb3B0aW9uSURdICs9IG1hdGNoU2l6ZTsNCiAgICAgIHBvc2l0aW9uc1ttc2cuc2VuZGVyXS5jYXNoIC09IG1hdGNoU2l6ZSAqIGludChwcmljZSk7DQogICAgICBwb3NpdGlvbnNbYWRkcl0ucG9zaXRpb25zW29wdGlvbklEXSAtPSBtYXRjaFNpemU7DQogICAgICBwb3NpdGlvbnNbYWRkcl0uY2FzaCArPSBtYXRjaFNpemUgKiBpbnQocHJpY2UpOw0KICAgICAgb3JkZXJGaWxsc1toYXNoXSAtPSBtYXRjaFNpemU7DQogICAgICBPcmRlck1hdGNoKG1zZy5zZW5kZXIsIG1hdGNoU2l6ZSwgYWRkciwgc2l6ZSwgb3B0aW9uSUQsIHByaWNlKTsNCiAgICB9IGVsc2Ugew0KICAgICAgT3JkZXJNYXRjaEZhaWx1cmUobXNnLnNlbmRlciwgbWF0Y2hTaXplLCBhZGRyLCBzaXplLCBvcHRpb25JRCwgcHJpY2UpOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGdldE1heExvc3NBZnRlclRyYWRlKGFkZHJlc3MgdXNlciwgdWludCBvcHRpb25JRCwgaW50IHBvc2l0aW9uQ2hhbmdlLCBpbnQgY2FzaENoYW5nZSkgY29uc3RhbnQgcmV0dXJucyhpbnQpIHsNCiAgICBib29sIG1heExvc3NJbml0aWFsaXplZCA9IGZhbHNlOw0KICAgIGludCBtYXhMb3NzID0gMDsNCiAgICBpZiAocG9zaXRpb25zW3VzZXJdLmV4cGlyZWQgPT0gZmFsc2UgJiYgbnVtT3B0aW9ucz4wKSB7DQogICAgICBmb3IgKHVpbnQgcz0wOyBzPG51bU9wdGlvbnM7IHMrKykgew0KICAgICAgICBpbnQgcG5sID0gcG9zaXRpb25zW3VzZXJdLmNhc2ggLyAxMDAwMDAwMDAwMDAwMDAwMDAwOw0KICAgICAgICBwbmwgKz0gY2FzaENoYW5nZSAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7DQogICAgICAgIHVpbnQgc2V0dGxlbWVudCA9IDA7DQogICAgICAgIGlmIChvcHRpb25zW3NdPDApIHsNCiAgICAgICAgICBzZXR0bGVtZW50ID0gdWludCgtb3B0aW9uc1tzXSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgc2V0dGxlbWVudCA9IHVpbnQob3B0aW9uc1tzXSk7DQogICAgICAgIH0NCiAgICAgICAgcG5sICs9IG1vbmV5U3VtQXRTZXR0bGVtZW50KHVzZXIsIG9wdGlvbklELCBwb3NpdGlvbkNoYW5nZSwgc2V0dGxlbWVudCk7DQogICAgICAgIGlmIChwbmw8bWF4TG9zcyB8fCBtYXhMb3NzSW5pdGlhbGl6ZWQ9PWZhbHNlKSB7DQogICAgICAgICAgbWF4TG9zc0luaXRpYWxpemVkID0gdHJ1ZTsNCiAgICAgICAgICBtYXhMb3NzID0gcG5sOw0KICAgICAgICB9DQogICAgICAgIHBubCA9IHBvc2l0aW9uc1t1c2VyXS5jYXNoIC8gMTAwMDAwMDAwMDAwMDAwMDAwMDsNCiAgICAgICAgcG5sICs9IGNhc2hDaGFuZ2UgLyAxMDAwMDAwMDAwMDAwMDAwMDAwOw0KICAgICAgICBzZXR0bGVtZW50ID0gMDsNCiAgICAgICAgaWYgKG9wdGlvbnNbc108MCkgew0KICAgICAgICAgIGlmICh1aW50KC1vcHRpb25zW3NdKT5tYXJnaW4pIHsNCiAgICAgICAgICAgIHNldHRsZW1lbnQgPSB1aW50KC1vcHRpb25zW3NdKS1tYXJnaW47DQogICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHNldHRsZW1lbnQgPSAwOw0KICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBzZXR0bGVtZW50ID0gdWludChvcHRpb25zW3NdKSttYXJnaW47DQogICAgICAgIH0NCiAgICAgICAgcG5sICs9IG1vbmV5U3VtQXRTZXR0bGVtZW50KHVzZXIsIG9wdGlvbklELCBwb3NpdGlvbkNoYW5nZSwgc2V0dGxlbWVudCk7DQogICAgICAgIGlmIChwbmw8bWF4TG9zcykgew0KICAgICAgICAgIG1heExvc3MgPSBwbmw7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIG1heExvc3M7DQogIH0NCg0KICBmdW5jdGlvbiBtb25leVN1bUF0U2V0dGxlbWVudChhZGRyZXNzIHVzZXIsIHVpbnQgb3B0aW9uSUQsIGludCBwb3NpdGlvbkNoYW5nZSwgdWludCBzZXR0bGVtZW50KSBpbnRlcm5hbCByZXR1cm5zKGludCkgew0KICAgIGludCBwbmwgPSAwOw0KICAgIGZvciAodWludCBqPTA7IGo8bnVtT3B0aW9uczsgaisrKSB7DQogICAgICBwbmwgKz0gcG9zaXRpb25zW3VzZXJdLnBvc2l0aW9uc1tqXSAqIGdldE1vbmV5bmVzcyhvcHRpb25zW2pdLCBzZXR0bGVtZW50LCBtYXJnaW4pIC8gMTAwMDAwMDAwMDAwMDAwMDAwMDsNCiAgICAgIGlmIChqPT1vcHRpb25JRCkgew0KICAgICAgICBwbmwgKz0gcG9zaXRpb25DaGFuZ2UgKiBnZXRNb25leW5lc3Mob3B0aW9uc1tqXSwgc2V0dGxlbWVudCwgbWFyZ2luKSAvIDEwMDAwMDAwMDAwMDAwMDAwMDA7DQogICAgICB9DQogICAgfQ0KICAgIHJldHVybiBwbmw7DQogIH0NCg0KICBmdW5jdGlvbiBtaW4odWludCBhLCB1aW50IGIpIGNvbnN0YW50IHJldHVybnModWludCkgew0KICAgIGlmIChhPGIpIHsNCiAgICAgIHJldHVybiBhOw0KICAgIH0gZWxzZSB7DQogICAgICByZXR1cm4gYjsNCiAgICB9DQogIH0NCn0='