base 64 content
base64excreteumToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyBFWENSRVRFVU0NCi8vIFN0YW5kYXJkIEVSQzIwIFRva2VuDQovLyAxMjBNIHN1cHBseSBkaXN0cmlidXRlZCBhcyBzdWNoOiAxME0gY3JlYXRvcnMsIDIwTSBtYXJrZXRpbmcsIDkwTSBpY28NCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KY29udHJhY3QgRVJDMjBJbnRlcmZhY2Ugew0KDQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KTsNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7DQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsNCg0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOw0KDQp9DQoNCi8vIEFzIG9mIDIwMTcNCi8vIDE0IDAwMCAwMDAgMDAwIDAwMCBVUyBkb2xsYXJzIGdvIHRocm91Z2ggdGhlIGJhbmtpbmcgc3lzdGVtIGRhaWx5DQoNCi8vIEluIEFtZXJpY2EsIHRoZSB0b3AgMSUgZWFybnMgJDM2MCAwMDAgcGVyIHllYXINCi8vIFJvdWdobHkgdGVuIHRpbWVzIHRoZSBhdmVyYWdlIGluY29tZQ0KLy8gVGhlIHRvcCAwLjAxJSBlYXJucyAkMTAgMDAwIDAwMCBwZXIgeWVhcg0KLy8gUm91Z2hseSB0aGlydHkgdGltZXMgYXMgbXVjaCBhcyB0aGUgdG9wIDElDQoNCi8vIFRoZSBodW1hbiBicmFpbiBoYW5kbGVzIGxhcmdlIG51bWJlcnMgcG9vcmx5DQovLyBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgYmlsbGlvbmFpcmUgYW5kIGEgbWlsbGlvbmFpcmUgaXMgcmVtb3RlIHRvIG1vc3QNCi8vIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gMU0sIDEwTSBhbmQgMTAwTSBldmVuIG1vcmUgc28NCg0KY29udHJhY3QgRXhjcmV0ZXVtVG9rZW4gaXMgRVJDMjBJbnRlcmZhY2Ugew0KICAgIA0KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlNIRVQiOw0KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJFeGNyZXRldW0iOw0KICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDg7DQogICAgdWludDI1NiBfdG90YWxTdXBwbHkgPSAxMjAwMDAwMDAwMDAwMDAwMDsNCg0KICAgIC8vIDEuIEVRVUFMSVRZIElTIEFOIElMTFVTSU9ODQogICAgLy8NCiAgICAvLyBQZW9wbGUgYXJlIGJvcm4gd2l0aCB2YXJpZWQgbGV2ZWxzIG9mIGFiaWxpdHkNCiAgICAvLyBGdXJ0aGVyIGVuaGFuY2VkIG9yIGRpc2NvdXJhZ2VkIGJ5IGVudmlyb25tZW50YWwgZmFjdG9ycw0KICAgIC8vDQogICAgLy8gTmF0dXJhbCBzZWxlY3Rpb24gZGVtYW5kcyBjb21wZXRpdGlvbg0KICAgIC8vIEF0dGVtcHRzIHRvIGVuZm9yY2UgYSBsZXZlbC1wbGF5aW5nIGZpZWxkIGNhbm5vdCBjaGFuZ2UgdGhpcyBuYXR1cmUNCiAgICAvLyBPbmx5IHRoZSBuYXR1cmUgb2Ygc2FpZCBjb21wZXRpdGlvbiBkaWZmZXJzDQoNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7DQogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7DQoNCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7DQogICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfQ0KICAgICAgICBfOw0KICAgIH0NCiAgICANCiAgICAvLyAyLiBDT0RFIENBTk5PVCBCRSBMQVcNCiAgICAvLw0KICAgIC8vIFRlY2hub2xvZ3kgaXMgYmV5b25kIHRoZSBpbnR1aXRpb24gb2YgdGhlIGF2ZXJhZ2UgcGVyc29uDQogICAgLy8gVGhlIGtub3dsZWRnZSBnYXAgd2lkZW5zIHdpdGggZWFjaCBpbm5vdmF0aW9uDQogICAgLy8NCiAgICAvLyBBIHN1ZmZpY2llbnRseSBhZHZhbmNlZCBkZWNlbnRyYWxpemVkIHN5c3RlbSBiZWNvbWVzIGRlZmFjdG8gY2VudHJhbGl6ZWQNCiAgICAvLyBBcyBhY3RvcnMgd2hvIHVuZGVyc3RhbmQgdGhpcyBzeXN0ZW0gYXJlIGluY3JlYXNpbmdseSBzcGFyc2UNCiAgICANCiAgICBmdW5jdGlvbiBFeGNyZXRldW1Ub2tlbigpIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBfdG90YWxTdXBwbHk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KSB7DQogICAgICAgIHRvdGFsU3VwcGx5ID0gX3RvdGFsU3VwcGx5Ow0KICAgIH0NCiAgICANCiAgICAvLyAzLiBUUlVTVCBJUyBNQU5EQVRPUlkNCiAgICAvLw0KICAgIC8vIFNvY2lhbCBicmlkZ2VzIGFyZSByZXF1aXJlZCBldmVuIGluIHRydXN0bGVzcyBlbnZpcm9ubWVudHMNCiAgICAvLyBDb25maWRlbmNlIGlzIGJ1aWx0IGJldHdlZW4gcGVvcGxlIHJhdGhlciB0aGFuIHN5c3RlbXMNCiAgICAvLw0KICAgIC8vIEJlbmV2b2xlbnQgZGljdGF0b3JzIGNhbiBmb3N0ZXIgcG9zaXRpdmUgY29tbXVuaXRpZXMNCiAgICAvLyBJbiB0aGUgYWJzZW5jZSBvZiBndWlkYW5jZSwgbmVnYXRpdmUgYWN0b3JzIHdpbGwgZmlsbCB0aGF0IGdhcA0KDQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsNCiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50IA0KICAgICAgICAgICAgJiYgX2Ftb3VudCA+IDANCiAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgew0KICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsNCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsNCiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX2Ftb3VudCk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8vIDQuIFRSQU5TUEFSRU5DWSBJUyBTWU5PTllNT1VTIFdJVEggQU5PTllNSVRZDQogICAgLy8NCiAgICAvLyBUcmFuc3BhcmVuY3kgaW4gYWN0aW9uIGtlZXBzIGFjdG9ycyBob25lc3QNCiAgICAvLyBUcmFuc3BhcmVuY3kgaW4gaWRlbnRpdHkgb3BlbnMgdXAgc2luZ2xlIHBvaW50cyBvZiBmYWlsdXJlDQogICAgLy8NCiAgICAvLyBBbiBpbW11dGFibGUgbGVkZ2VyIHdvcmtzIGJlc3Qgd2hlbiBubyBodW1hbiB0cmFuc2FjdGlvbnMgb2NjdXIgb2ZmY2hhaW4NCiAgICAvLyBBbm9ueW1vdXMgZW50aXRpZXMgY2Fubm90IGJlIHNpbGVuY2VkLCBpbmZsdWVuY2VkIG9yIGRpc3Bvc2VkIG9mDQogICAgDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKA0KICAgICAgICBhZGRyZXNzIF9mcm9tLA0KICAgICAgICBhZGRyZXNzIF90bywNCiAgICAgICAgdWludDI1NiBfYW1vdW50DQogICAgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfYW1vdW50DQogICAgICAgICAgICAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50DQogICAgICAgICAgICAmJiBfYW1vdW50ID4gMA0KICAgICAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPiBiYWxhbmNlc1tfdG9dKSB7DQogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX2Ftb3VudDsNCiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7DQogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7DQogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8gNS4gSU5GT1JNQVRJT04gSVMgUFJJQ0VMRVNTDQogICAgLy8NCiAgICAvLyBOZWl0aGVyIGFzc2V0cyBub3IgY3VycmVuY2llcyBoYXZlIGluaGVyZW50IHdvcnRoDQogICAgLy8gQXN5bmNocm9ub3VzIHZhbHVlIGNvbWVzIGZyb20gYXN5bmNocm9ub3VzIGluZm9ybWF0aW9uDQogICAgLy8NCiAgICAvLyBTaGFyaW5nIGtub3dsZWRnZSBhdCBhbnkgbGV2ZWwgb2YgdW5kZXJzdGFuZGluZyBoZWxwIGFjdG9ycyBtYWtlIGNob2ljZXMNCiAgICAvLyBJbmZvcm1hdGlvbiBpcyB1c2VmdWwgcmVnYXJkbGVzcyBvZiB2ZXJhY2l0eQ0KDQoNCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsNCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7DQogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICAgIH0NCg0KICAgIC8vIDYuIE5BVFVSRSBJUyBHT09EDQogICAgLy8NCiAgICAvLyBUYWtlIGEgd2FsayBvdXRzaWRlDQogICAgLy8gTGVhcm4gdG8gYnVpbGQgYSBjYW1wZmlyZQ0KICAgIC8vIFBsYW50IGEgdHJlZSB0aGlzIHllYXINCiAgICAvLyBXYXRjaCBvdXQgZm9yIGNvdyBkdW5nDQogICAgDQp9'