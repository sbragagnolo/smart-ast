base 64 content
base64fixedSupplyToken1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KDQogDQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KLy8gU2FtcGxlIGZpeGVkIHN1cHBseSB0b2tlbiBjb250cmFjdA0KDQovLyBFbmpveS4gKGMpIEJva2t5UG9vQmFoIDIwMTcuIFRoZSBNSVQgTGljZW5jZS4NCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQogDQoNCi8vIEVSQyBUb2tlbiBTdGFuZGFyZCAjMjAgSW50ZXJmYWNlDQoNCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMA0KDQpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7DQoNCiAgICAvLyBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQ0KDQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KTsNCg0KIA0KDQogICAgLy8gR2V0IHRoZSBhY2NvdW50IGJhbGFuY2Ugb2YgYW5vdGhlciBhY2NvdW50IHdpdGggYWRkcmVzcyBfb3duZXINCg0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsNCg0KIA0KDQogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyB0byBhZGRyZXNzIF90bw0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KDQogDQoNCiAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bw0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCg0KIA0KDQogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4NCg0KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLg0KDQogICAgLy8gdGhpcyBmdW5jdGlvbiBpcyByZXF1aXJlZCBmb3Igc29tZSBERVggZnVuY3Rpb25hbGl0eQ0KDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCg0KIA0KDQogICAgLy8gUmV0dXJucyB0aGUgYW1vdW50IHdoaWNoIF9zcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBfb3duZXINCg0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOw0KDQogDQoNCiAgICAvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLg0KDQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQoNCiANCg0KICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuDQoNCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsNCg0KfQ0KDQogDQoNCmNvbnRyYWN0IEZpeGVkU3VwcGx5VG9rZW4gaXMgRVJDMjBJbnRlcmZhY2Ugew0KDQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiTUVXQiI7DQoNCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiTWVvd01lb3dCZWVueiI7DQoNCiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsNCg0KICAgIHVpbnQyNTYgX3RvdGFsU3VwcGx5ID0gMTAwMDAwMDAwMDsNCg0KICAgIA0KDQogICAgLy8gT3duZXIgb2YgdGhpcyBjb250cmFjdA0KDQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQoNCiANCg0KICAgIC8vIEJhbGFuY2VzIGZvciBlYWNoIGFjY291bnQNCg0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsNCg0KIA0KDQogICAgLy8gT3duZXIgb2YgYWNjb3VudCBhcHByb3ZlcyB0aGUgdHJhbnNmZXIgb2YgYW4gYW1vdW50IHRvIGFub3RoZXIgYWNjb3VudA0KDQogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7DQoNCiANCg0KICAgIC8vIEZ1bmN0aW9ucyB3aXRoIHRoaXMgbW9kaWZpZXIgY2FuIG9ubHkgYmUgZXhlY3V0ZWQgYnkgdGhlIG93bmVyDQoNCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7DQoNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsNCg0KICAgICAgICAgICAgdGhyb3c7DQoNCiAgICAgICAgfQ0KDQogICAgICAgIF87DQoNCiAgICB9DQoNCiANCg0KICAgIC8vIENvbnN0cnVjdG9yDQoNCiAgICBmdW5jdGlvbiBGaXhlZFN1cHBseVRva2VuKCkgew0KDQogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCg0KICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBfdG90YWxTdXBwbHk7DQoNCiAgICB9DQoNCiANCg0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiB0b3RhbFN1cHBseSkgew0KDQogICAgICAgIHRvdGFsU3VwcGx5ID0gX3RvdGFsU3VwcGx5Ow0KDQogICAgfQ0KDQogDQoNCiAgICAvLyBXaGF0IGlzIHRoZSBiYWxhbmNlIG9mIGEgcGFydGljdWxhciBhY2NvdW50Pw0KDQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsNCg0KICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsNCg0KICAgIH0NCg0KIA0KDQogICAgLy8gVHJhbnNmZXIgdGhlIGJhbGFuY2UgZnJvbSBvd25lcidzIGFjY291bnQgdG8gYW5vdGhlciBhY2NvdW50DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCANCg0KICAgICAgICAgICAgJiYgX2Ftb3VudCA+IDANCg0KICAgICAgICAgICAgJiYgYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPiBiYWxhbmNlc1tfdG9dKSB7DQoNCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7DQoNCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsNCg0KICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQoNCiAgICAgICAgfSBlbHNlIHsNCg0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIH0NCg0KICAgIH0NCg0KIA0KDQogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8NCg0KICAgIC8vIFRoZSB0cmFuc2ZlckZyb20gbWV0aG9kIGlzIHVzZWQgZm9yIGEgd2l0aGRyYXcgd29ya2Zsb3csIGFsbG93aW5nIGNvbnRyYWN0cyB0byBzZW5kDQoNCiAgICAvLyB0b2tlbnMgb24geW91ciBiZWhhbGYsIGZvciBleGFtcGxlIHRvICJkZXBvc2l0IiB0byBhIGNvbnRyYWN0IGFkZHJlc3MgYW5kL29yIHRvIGNoYXJnZQ0KDQogICAgLy8gZmVlcyBpbiBzdWItY3VycmVuY2llczsgdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBfZnJvbSBhY2NvdW50IGhhcw0KDQogICAgLy8gZGVsaWJlcmF0ZWx5IGF1dGhvcml6ZWQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSB2aWEgc29tZSBtZWNoYW5pc207IHdlIHByb3Bvc2UNCg0KICAgIC8vIHRoZXNlIHN0YW5kYXJkaXplZCBBUElzIGZvciBhcHByb3ZhbDoNCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSgNCg0KICAgICAgICBhZGRyZXNzIF9mcm9tLA0KDQogICAgICAgIGFkZHJlc3MgX3RvLA0KDQogICAgICAgIHVpbnQyNTYgX2Ftb3VudA0KDQogICAgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQNCg0KICAgICAgICAgICAgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudA0KDQogICAgICAgICAgICAmJiBfYW1vdW50ID4gMA0KDQogICAgICAgICAgICAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsNCg0KICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7DQoNCiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7DQoNCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsNCg0KICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7DQoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KDQogICAgICAgIH0gZWxzZSB7DQoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCg0KICAgICAgICB9DQoNCiAgICB9DQoNCiANCg0KICAgIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuDQoNCiAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBpdCBvdmVyd3JpdGVzIHRoZSBjdXJyZW50IGFsbG93YW5jZSB3aXRoIF92YWx1ZS4NCg0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7DQoNCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KDQogICAgfQ0KDQogDQoNCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7DQoNCiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQoNCiAgICB9DQoNCn0='