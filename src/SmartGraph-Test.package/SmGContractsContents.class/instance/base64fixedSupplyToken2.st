base 64 content
base64fixedSupplyToken2
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KDQogDQoNCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KLy8gU2FtcGxlIGZpeGVkIHN1cHBseSB0b2tlbiBjb250cmFjdA0KDQovLyBFbmpveS4gKGMpIEJva2t5UG9vQmFoIDIwMTcuIFRoZSBNSVQgTGljZW5jZS4NCg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQogDQoNCi8vIEVSQyBUb2tlbiBTdGFuZGFyZCAjMjAgSW50ZXJmYWNlDQoNCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMA0KDQpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7DQoNCiAgICAvLyBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQ0KDQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KTsNCg0KIA0KDQogICAgLy8gR2V0IHRoZSBhY2NvdW50IGJhbGFuY2Ugb2YgYW5vdGhlciBhY2NvdW50IHdpdGggYWRkcmVzcyBfb3duZXINCg0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsNCg0KIA0KDQogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyB0byBhZGRyZXNzIF90bw0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KDQogDQoNCiAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bw0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCg0KIA0KDQogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4NCg0KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLg0KDQogICAgLy8gdGhpcyBmdW5jdGlvbiBpcyByZXF1aXJlZCBmb3Igc29tZSBERVggZnVuY3Rpb25hbGl0eQ0KDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCg0KIA0KDQogICAgLy8gUmV0dXJucyB0aGUgYW1vdW50IHdoaWNoIF9zcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBfb3duZXINCg0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOw0KDQogDQoNCiAgICAvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLg0KDQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQoNCiANCg0KICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuDQoNCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsNCg0KfQ0KDQogDQoNCmNvbnRyYWN0IEZpeGVkU3VwcGx5VG9rZW4gaXMgRVJDMjBJbnRlcmZhY2Ugew0KDQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiU1BDRCI7DQoNCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiU3BhY2UgRG9sbGFycyI7DQoNCiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSA0Ow0KDQogICAgdWludDI1NiBfdG90YWxTdXBwbHkgPSAxMDAwMDAwMDAwOw0KDQogICAgDQoNCiAgICAvLyBPd25lciBvZiB0aGlzIGNvbnRyYWN0DQoNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCg0KIA0KDQogICAgLy8gQmFsYW5jZXMgZm9yIGVhY2ggYWNjb3VudA0KDQogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOw0KDQogDQoNCiAgICAvLyBPd25lciBvZiBhY2NvdW50IGFwcHJvdmVzIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50DQoNCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsNCg0KIA0KDQogICAgLy8gRnVuY3Rpb25zIHdpdGggdGhpcyBtb2RpZmllciBjYW4gb25seSBiZSBleGVjdXRlZCBieSB0aGUgb3duZXINCg0KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsNCg0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgew0KDQogICAgICAgICAgICB0aHJvdzsNCg0KICAgICAgICB9DQoNCiAgICAgICAgXzsNCg0KICAgIH0NCg0KIA0KDQogICAgLy8gQ29uc3RydWN0b3INCg0KICAgIGZ1bmN0aW9uIEZpeGVkU3VwcGx5VG9rZW4oKSB7DQoNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KDQogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IF90b3RhbFN1cHBseTsNCg0KICAgIH0NCg0KIA0KDQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KSB7DQoNCiAgICAgICAgdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHk7DQoNCiAgICB9DQoNCiANCg0KICAgIC8vIFdoYXQgaXMgdGhlIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQ/DQoNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KDQogICAgICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOw0KDQogICAgfQ0KDQogDQoNCiAgICAvLyBUcmFuc2ZlciB0aGUgYmFsYW5jZSBmcm9tIG93bmVyJ3MgYWNjb3VudCB0byBhbm90aGVyIGFjY291bnQNCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50IA0KDQogICAgICAgICAgICAmJiBfYW1vdW50ID4gMA0KDQogICAgICAgICAgICAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIHsNCg0KICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsNCg0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50Ow0KDQogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF9hbW91bnQpOw0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCg0KICAgICAgICB9IGVsc2Ugew0KDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQoNCiAgICAgICAgfQ0KDQogICAgfQ0KDQogDQoNCiAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bw0KDQogICAgLy8gVGhlIHRyYW5zZmVyRnJvbSBtZXRob2QgaXMgdXNlZCBmb3IgYSB3aXRoZHJhdyB3b3JrZmxvdywgYWxsb3dpbmcgY29udHJhY3RzIHRvIHNlbmQNCg0KICAgIC8vIHRva2VucyBvbiB5b3VyIGJlaGFsZiwgZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlDQoNCiAgICAvLyBmZWVzIGluIHN1Yi1jdXJyZW5jaWVzOyB0aGUgY29tbWFuZCBzaG91bGQgZmFpbCB1bmxlc3MgdGhlIF9mcm9tIGFjY291bnQgaGFzDQoNCiAgICAvLyBkZWxpYmVyYXRlbHkgYXV0aG9yaXplZCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHZpYSBzb21lIG1lY2hhbmlzbTsgd2UgcHJvcG9zZQ0KDQogICAgLy8gdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGFwcHJvdmFsOg0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKA0KDQogICAgICAgIGFkZHJlc3MgX2Zyb20sDQoNCiAgICAgICAgYWRkcmVzcyBfdG8sDQoNCiAgICAgICAgdWludDI1NiBfYW1vdW50DQoNCiAgICApIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX2Ftb3VudA0KDQogICAgICAgICAgICAmJiBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA+PSBfYW1vdW50DQoNCiAgICAgICAgICAgICYmIF9hbW91bnQgPiAwDQoNCiAgICAgICAgICAgICYmIGJhbGFuY2VzW190b10gKyBfYW1vdW50ID4gYmFsYW5jZXNbX3RvXSkgew0KDQogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX2Ftb3VudDsNCg0KICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsNCg0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50Ow0KDQogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQoNCiAgICAgICAgfSBlbHNlIHsNCg0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIH0NCg0KICAgIH0NCg0KIA0KDQogICAgLy8gQWxsb3cgX3NwZW5kZXIgdG8gd2l0aGRyYXcgZnJvbSB5b3VyIGFjY291bnQsIG11bHRpcGxlIHRpbWVzLCB1cCB0byB0aGUgX3ZhbHVlIGFtb3VudC4NCg0KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLg0KDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsNCg0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQoNCiAgICB9DQoNCiANCg0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsNCg0KICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCg0KICAgIH0NCg0KfQ=='