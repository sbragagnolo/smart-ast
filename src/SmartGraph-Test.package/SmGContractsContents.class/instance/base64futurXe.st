base 64 content
base64futurXe
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4yOw0KDQpjb250cmFjdCBFUkMyMEludGVyZmFjZSB7DQoNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7DQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsNCg0KICAgIC8vIFRyaWdnZXJlZCB3aGVuIHRva2VucyBhcmUgdHJhbnNmZXJyZWQuDQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQoNCiAgICAvLyBUcmlnZ2VyZWQgd2hlbmV2ZXIgYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgaXMgY2FsbGVkLg0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOw0KDQp9DQoNCmNvbnRyYWN0IE93bmVyIHsNCiAgICAvL0ZvciBzdG9yaW5nIHRoZSBvd25lciBhZGRyZXNzDQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQoNCiAgICAvL0NvbnN0cnVjdG9yIGZvciBhc3NpZ24gYSBhZGRyZXNzIGZvciBvd25lciBwcm9wZXJ0eShJdCB3aWxsIGJlIGFkZHJlc3Mgd2hvIGRlcGxveSB0aGUgY29udHJhY3QpIA0KICAgIGZ1bmN0aW9uIE93bmVyKCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgfQ0KDQogICAgLy9UaGlzIGlzIG1vZGlmaWVyIChhIHNwZWNpYWwgZnVuY3Rpb24pIHdoaWNoIHdpbGwgZXhlY3V0ZSBiZWZvcmUgdGhlIGZ1bmN0aW9uIGV4ZWN1dGlvbiBvbiB3aGljaCBpdCBhcHBsaWVkIA0KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsNCiAgICAgICAgaWYobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7DQogICAgICAgIC8vVGhpcyBzdGF0ZW1lbnQgcmVwbGFjZSB3aXRoIHRoZSBjb2RlIG9mIGZ1Y250aW9uIG9uIHdoaWNoIG1vZGlmaWVyIGlzIGFwcGxpZWQNCiAgICAgICAgXzsNCiAgICB9DQogICAgLy9IZXJlIGlzIHRoZSBleGFtcGxlIG9mIG1vZGlmaWVyIHRoaXMgZnVuY3Rpb24gY29kZSByZXBsYWNlIF87IHN0YXRlbWVudCBvZiBtb2RpZmllciANCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld19vd25lcikgb25seU93bmVyIHsNCiAgICAgICAgb3duZXIgPSBuZXdfb3duZXI7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBGdXR1clhlIGlzIEVSQzIwSW50ZXJmYWNlLE93bmVyIHsNCg0KICAgIC8vQ29tbW9uIGluZm9ybWF0aW9uIGFib3V0IGNvaW4NCiAgICBzdHJpbmcgIHB1YmxpYyBuYW1lOw0KICAgIHN0cmluZyAgcHVibGljIHN5bWJvbDsNCiAgICB1aW50OCAgIHB1YmxpYyBkZWNpbWFsczsNCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsNCiAgICANCiAgICAvL0JhbGFuY2UgcHJvcGVydHkgd2hpY2ggc2hvdWxkIGJlIGFsd2F5cyBhc3NvY2lhdGUgd2l0aCBhbiBhZGRyZXNzDQogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOw0KICAgIC8vZnJvemVuQWNjb3VudCBwcm9wZXJ0eSB3aGljaCBzaG91bGQgYmUgYXNzb2NpYXRlIHdpdGggYW4gYWRkcmVzcw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGZyb3plbkFjY291bnQ7DQogICAgLy8gT3duZXIgb2YgYWNjb3VudCBhcHByb3ZlcyB0aGUgdHJhbnNmZXIgb2YgYW4gYW1vdW50IHRvIGFub3RoZXIgYWNjb3VudA0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOw0KICAgIA0KICAgIC8vVGhlc2UgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cw0KICAgIGV2ZW50IEZyb3plbkZ1bmRzKGFkZHJlc3MgdGFyZ2V0LCBib29sIGZyb3plbik7DQogICAgDQogICAgLy9Db25zdHJ1dG9yIGZvciBpbml0aWFsIHN1cHBseSAoVGhlIGFkZHJlc3Mgd2hvIGRlcGxveWVkIHRoZSBjb250cmFjdCB3aWxsIGdldCBpdCkgYW5kIGltcG9ydGFudCBpbmZvcm1hdGlvbg0KICAgIGZ1bmN0aW9uIEZ1dHVyWGUodWludDI1NiBpbml0aWFsX3N1cHBseSwgc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwgdWludDggX2RlY2ltYWwpIHsNCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gID0gaW5pdGlhbF9zdXBwbHk7DQogICAgICAgIG5hbWUgICAgICAgICAgICAgICAgICA9IF9uYW1lOw0KICAgICAgICBzeW1ib2wgICAgICAgICAgICAgICAgPSBfc3ltYm9sOw0KICAgICAgICBkZWNpbWFscyAgICAgICAgICAgICAgPSBfZGVjaW1hbDsNCiAgICAgICAgdG90YWxTdXBwbHkgICAgICAgICAgID0gaW5pdGlhbF9zdXBwbHk7DQogICAgfQ0KDQogICAgLy8gV2hhdCBpcyB0aGUgYmFsYW5jZSBvZiBhIHBhcnRpY3VsYXIgYWNjb3VudD8NCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsNCiAgICB9DQoNCiAgICAvL0Z1bmN0aW9uIGZvciB0cmFuc2VyIHRoZSBjb2luIGZyb20gb25lIGFkZHJlc3MgdG8gYW5vdGhlcg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgICAgIC8vY2hlY2tpbmcgYWNjb3VudCBpcyBmcmVlemUgb3Igbm90DQogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdKSByZXR1cm4gZmFsc2U7DQoNCiAgICAgICAgLy9jaGVja2luZyB0aGUgc2VuZGVyIHNob3VsZCBoYXZlIGVub3VnaCBjb2lucw0KICAgICAgICBpZihiYWxhbmNlc1ttc2cuc2VuZGVyXSA8IHZhbHVlKSByZXR1cm4gZmFsc2U7DQogICAgICAgIC8vY2hlY2tpbmcgZm9yIG92ZXJmbG93cw0KICAgICAgICBpZihiYWxhbmNlc1t0b10gKyB2YWx1ZSA8IGJhbGFuY2VzW3RvXSkgcmV0dXJuIGZhbHNlOw0KICAgICAgICANCiAgICAgICAgLy9zdWJzdHJhY3RpbmcgdGhlIHNlbmRlciBiYWxhbmNlDQogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IHZhbHVlOw0KICAgICAgICAvL2FkZGluZyB0aGUgcmVjaWV2ZXIgYmFsYW5jZQ0KICAgICAgICBiYWxhbmNlc1t0b10gKz0gdmFsdWU7DQogICAgICAgIA0KICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQ0KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCB0bywgdmFsdWUpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KDQogICAgLy9GdW5jdGlvbiBmb3IgdHJhbnNlciB0aGUgY29pbiBmcm9tIG9uZSBhZGRyZXNzIHRvIGFub3RoZXINCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgICAgICAvL2NoZWNraW5nIGFjY291bnQgaXMgZnJlZXplIG9yIG5vdA0KICAgICAgICBpZiAoZnJvemVuQWNjb3VudFttc2cuc2VuZGVyXSkgcmV0dXJuIGZhbHNlOw0KDQogICAgICAgIC8vY2hlY2tpbmcgdGhlIGZyb20gc2hvdWxkIGhhdmUgZW5vdWdoIGNvaW5zDQogICAgICAgIGlmKGJhbGFuY2VzW2Zyb21dIDwgdmFsdWUpIHJldHVybiBmYWxzZTsNCg0KICAgICAgICAvL2NoZWNraW5nIGZvciBhbGxvd2FuY2UNCiAgICAgICAgaWYoIGFsbG93ZWRbZnJvbV1bbXNnLnNlbmRlcl0gPj0gdmFsdWUgKSByZXR1cm4gZmFsc2U7DQoNCiAgICAgICAgLy9jaGVja2luZyBmb3Igb3ZlcmZsb3dzDQogICAgICAgIGlmKGJhbGFuY2VzW3RvXSArIHZhbHVlIDwgYmFsYW5jZXNbdG9dKSByZXR1cm4gZmFsc2U7DQogICAgICAgIA0KICAgICAgICBiYWxhbmNlc1tmcm9tXSAtPSB2YWx1ZTsNCiAgICAgICAgYWxsb3dlZFtmcm9tXVttc2cuc2VuZGVyXSAtPSB2YWx1ZTsNCiAgICAgICAgYmFsYW5jZXNbdG9dICs9IHZhbHVlOw0KICAgICAgICANCiAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UNCiAgICAgICAgVHJhbnNmZXIoZnJvbSwgdG8sIHZhbHVlKTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvLw0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsNCiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQogICAgfQ0KDQogICAgLy8NCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX2Ftb3VudDsNCiAgICAgICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgDQogICAgLy8NCiAgICBmdW5jdGlvbiBtaW50VG9rZW4oYWRkcmVzcyB0YXJnZXQsIHVpbnQyNTYgbWludGVkQW1vdW50KSBvbmx5T3duZXJ7DQogICAgICAgIGJhbGFuY2VzW3RhcmdldF0gKz0gbWludGVkQW1vdW50Ow0KICAgICAgICB0b3RhbFN1cHBseSArPSBtaW50ZWRBbW91bnQ7DQogICAgICAgIA0KICAgICAgICBUcmFuc2ZlcigwLG93bmVyLG1pbnRlZEFtb3VudCk7DQogICAgICAgIFRyYW5zZmVyKG93bmVyLHRhcmdldCxtaW50ZWRBbW91bnQpOw0KICAgIH0NCg0KICAgIC8vDQogICAgZnVuY3Rpb24gZnJlZXplQWNjb3VudChhZGRyZXNzIHRhcmdldCwgYm9vbCBmcmVlemUpIG9ubHlPd25lciB7DQogICAgICAgIGZyb3plbkFjY291bnRbdGFyZ2V0XSA9IGZyZWV6ZTsNCiAgICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOw0KICAgIH0NCg0KICAgIC8vDQogICAgZnVuY3Rpb24gY2hhbmdlTmFtZShzdHJpbmcgX25hbWUpIG9ubHlPd25lciB7DQogICAgICAgIG5hbWUgPSBfbmFtZTsNCiAgICB9DQoNCiAgICAvLw0KICAgIGZ1bmN0aW9uIGNoYW5nZVN5bWJvbChzdHJpbmcgX3N5bWJvbCkgb25seU93bmVyIHsNCiAgICAgICAgc3ltYm9sID0gX3N5bWJvbDsNCiAgICB9DQoNCiAgICAvLw0KICAgIGZ1bmN0aW9uIGNoYW5nZURlY2ltYWxzKHVpbnQ4IF9kZWNpbWFscykgb25seU93bmVyIHsNCiAgICAgICAgZGVjaW1hbHMgPSBfZGVjaW1hbHM7DQogICAgfQ0KfQ=='