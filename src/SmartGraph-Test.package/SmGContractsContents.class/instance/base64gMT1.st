base 64 content
base64gMT1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC40Ow0KDQpjb250cmFjdCBFdGhlclRyZWFzdXJ5SW50ZXJmYWNlIHsNCiAgICBmdW5jdGlvbiB3aXRoZHJhdyhhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMoYm9vbCk7DQogICAgZnVuY3Rpb24gd2l0aGRyYXdXaXRoUmVmZXJlbmNlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UpIHJldHVybnMoYm9vbCk7DQp9DQoNCmNvbnRyYWN0IFNhZmVNaW4gew0KICAgIG1vZGlmaWVyIG9ubHlIdW1hbiB7DQogICAgICAgIGlmIChfaXNIdW1hbigpKSB7DQogICAgICAgICAgICBfOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgbW9kaWZpZXIgaW1tdXRhYmxlKGFkZHJlc3MgX2FkZHJlc3MpIHsNCiAgICAgICAgaWYgKF9hZGRyZXNzID09IDApIHsNCiAgICAgICAgICAgIF87DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBfc2FmZUZhbHNlKCkgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7DQogICAgICAgIF9zYWZlU2VuZChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gX3NhZmVTZW5kKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgaW50ZXJuYWwgew0KICAgICAgICBpZiAoIV91bnNhZmVTZW5kKF90bywgX3ZhbHVlKSkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBfdW5zYWZlU2VuZChhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIGludGVybmFsIHJldHVybnMoYm9vbCkgew0KICAgICAgICByZXR1cm4gX3RvLmNhbGwudmFsdWUoX3ZhbHVlKSgpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIF9pc0NvbnRyYWN0KCkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7DQogICAgICAgIHJldHVybiBtc2cuc2VuZGVyICE9IHR4Lm9yaWdpbjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBfaXNIdW1hbigpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMoYm9vbCkgew0KICAgICAgICByZXR1cm4gIV9pc0NvbnRyYWN0KCk7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBNdWx0aUFzc2V0IHsNCiAgICBmdW5jdGlvbiBpc0NyZWF0ZWQoYnl0ZXMzMiBfc3ltYm9sKSBjb25zdGFudCByZXR1cm5zKGJvb2wpOw0KICAgIGZ1bmN0aW9uIGJhc2VVbml0KGJ5dGVzMzIgX3N5bWJvbCkgY29uc3RhbnQgcmV0dXJucyh1aW50OCk7DQogICAgZnVuY3Rpb24gbmFtZShieXRlczMyIF9zeW1ib2wpIGNvbnN0YW50IHJldHVybnMoc3RyaW5nKTsNCiAgICBmdW5jdGlvbiBkZXNjcmlwdGlvbihieXRlczMyIF9zeW1ib2wpIGNvbnN0YW50IHJldHVybnMoc3RyaW5nKTsNCiAgICBmdW5jdGlvbiBpc1JlaXNzdWFibGUoYnl0ZXMzMiBfc3ltYm9sKSBjb25zdGFudCByZXR1cm5zKGJvb2wpOw0KICAgIGZ1bmN0aW9uIG93bmVyKGJ5dGVzMzIgX3N5bWJvbCkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKTsNCiAgICBmdW5jdGlvbiBpc093bmVyKGFkZHJlc3MgX293bmVyLCBieXRlczMyIF9zeW1ib2wpIGNvbnN0YW50IHJldHVybnMoYm9vbCk7DQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoYnl0ZXMzMiBfc3ltYm9sKSBjb25zdGFudCByZXR1cm5zKHVpbnQpOw0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9ob2xkZXIsIGJ5dGVzMzIgX3N5bWJvbCkgY29uc3RhbnQgcmV0dXJucyh1aW50KTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGJ5dGVzMzIgX3N5bWJvbCkgcmV0dXJucyhib29sKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRvSUNBUChieXRlczMyIF9pY2FwLCB1aW50IF92YWx1ZSkgcmV0dXJucyhib29sKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRvSUNBUFdpdGhSZWZlcmVuY2UoYnl0ZXMzMiBfaWNhcCwgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlKSByZXR1cm5zKGJvb2wpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyV2l0aFJlZmVyZW5jZShhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGJ5dGVzMzIgX3N5bWJvbCwgc3RyaW5nIF9yZWZlcmVuY2UpIHJldHVybnMoYm9vbCk7DQogICAgZnVuY3Rpb24gcHJveHlUcmFuc2ZlcldpdGhSZWZlcmVuY2UoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlczMyIF9zeW1ib2wsIHN0cmluZyBfcmVmZXJlbmNlKSByZXR1cm5zKGJvb2wpOw0KICAgIGZ1bmN0aW9uIHByb3h5VHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlKGJ5dGVzMzIgX2ljYXAsIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSkgcmV0dXJucyhib29sKTsNCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlLCBieXRlczMyIF9zeW1ib2wpIHJldHVybnMoYm9vbCk7DQogICAgZnVuY3Rpb24gcHJveHlBcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlLCBieXRlczMyIF9zeW1ib2wpIHJldHVybnMoYm9vbCk7DQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3NwZW5kZXIsIGJ5dGVzMzIgX3N5bWJvbCkgY29uc3RhbnQgcmV0dXJucyh1aW50KTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlczMyIF9zeW1ib2wpIHJldHVybnMoYm9vbCk7DQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tV2l0aFJlZmVyZW5jZShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGJ5dGVzMzIgX3N5bWJvbCwgc3RyaW5nIF9yZWZlcmVuY2UpIHJldHVybnMoYm9vbCk7DQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tVG9JQ0FQKGFkZHJlc3MgX2Zyb20sIGJ5dGVzMzIgX2ljYXAsIHVpbnQgX3ZhbHVlKSByZXR1cm5zKGJvb2wpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbVRvSUNBUFdpdGhSZWZlcmVuY2UoYWRkcmVzcyBfZnJvbSwgYnl0ZXMzMiBfaWNhcCwgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlKSByZXR1cm5zKGJvb2wpOw0KICAgIGZ1bmN0aW9uIHByb3h5VHJhbnNmZXJGcm9tV2l0aFJlZmVyZW5jZShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGJ5dGVzMzIgX3N5bWJvbCwgc3RyaW5nIF9yZWZlcmVuY2UpIHJldHVybnMoYm9vbCk7DQogICAgZnVuY3Rpb24gcHJveHlUcmFuc2ZlckZyb21Ub0lDQVBXaXRoUmVmZXJlbmNlKGFkZHJlc3MgX2Zyb20sIGJ5dGVzMzIgX2ljYXAsIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSkgcmV0dXJucyhib29sKTsNCiAgICBmdW5jdGlvbiBzZXRDb3NpZ25lckFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcywgYnl0ZXMzMiBfc3ltYm9sKSByZXR1cm5zKGJvb2wpOw0KICAgIGZ1bmN0aW9uIHNldENvc2lnbmVyQWRkcmVzc0ZvclVzZXIoYWRkcmVzcyBfYWRkcmVzcykgcmV0dXJucyhib29sKTsNCiAgICBmdW5jdGlvbiBwcm94eVNldENvc2lnbmVyQWRkcmVzcyhhZGRyZXNzIF9hZGRyZXNzLCBieXRlczMyIF9zeW1ib2wpIHJldHVybnMoYm9vbCk7DQp9DQoNCmNvbnRyYWN0IEFzc2V0TWluIGlzIFNhZmVNaW4gew0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmUoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHZhbHVlKTsNCg0KICAgIE11bHRpQXNzZXQgcHVibGljIG11bHRpQXNzZXQ7DQogICAgYnl0ZXMzMiBwdWJsaWMgc3ltYm9sOw0KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsNCg0KICAgIGZ1bmN0aW9uIGluaXQoYWRkcmVzcyBfbXVsdGlBc3NldCwgYnl0ZXMzMiBfc3ltYm9sKSBpbW11dGFibGUoYWRkcmVzcyhtdWx0aUFzc2V0KSkgcmV0dXJucyhib29sKSB7DQogICAgICAgIE11bHRpQXNzZXQgbWEgPSBNdWx0aUFzc2V0KF9tdWx0aUFzc2V0KTsNCiAgICAgICAgaWYgKCFtYS5pc0NyZWF0ZWQoX3N5bWJvbCkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICBtdWx0aUFzc2V0ID0gbWE7DQogICAgICAgIHN5bWJvbCA9IF9zeW1ib2w7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldE5hbWUoc3RyaW5nIF9uYW1lKSByZXR1cm5zKGJvb2wpIHsNCiAgICAgICAgaWYgKGJ5dGVzKG5hbWUpLmxlbmd0aCAhPSAwKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgbmFtZSA9IF9uYW1lOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5TXVsdGlBc3NldCgpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gYWRkcmVzcyhtdWx0aUFzc2V0KSkgew0KICAgICAgICAgICAgXzsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7DQogICAgICAgIHJldHVybiBtdWx0aUFzc2V0LnRvdGFsU3VwcGx5KHN5bWJvbCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIG11bHRpQXNzZXQuYmFsYW5jZU9mKF9vd25lciwgc3ltYm9sKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7DQogICAgICAgIHJldHVybiBtdWx0aUFzc2V0LmFsbG93YW5jZShfZnJvbSwgX3NwZW5kZXIsIHN5bWJvbCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zKGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIF9fdHJhbnNmZXJXaXRoUmVmZXJlbmNlKF90bywgX3ZhbHVlLCAiIik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJXaXRoUmVmZXJlbmNlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UpIHJldHVybnMoYm9vbCkgew0KICAgICAgICByZXR1cm4gX190cmFuc2ZlcldpdGhSZWZlcmVuY2UoX3RvLCBfdmFsdWUsIF9yZWZlcmVuY2UpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIF9fdHJhbnNmZXJXaXRoUmVmZXJlbmNlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UpIHByaXZhdGUgcmV0dXJucyhib29sKSB7DQogICAgICAgIHJldHVybiBfaXNIdW1hbigpID8NCiAgICAgICAgICAgIG11bHRpQXNzZXQucHJveHlUcmFuc2ZlcldpdGhSZWZlcmVuY2UoX3RvLCBfdmFsdWUsIHN5bWJvbCwgX3JlZmVyZW5jZSkgOg0KICAgICAgICAgICAgbXVsdGlBc3NldC50cmFuc2ZlckZyb21XaXRoUmVmZXJlbmNlKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlLCBzeW1ib2wsIF9yZWZlcmVuY2UpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyVG9JQ0FQKGJ5dGVzMzIgX2ljYXAsIHVpbnQgX3ZhbHVlKSByZXR1cm5zKGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIF9fdHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlKF9pY2FwLCBfdmFsdWUsICIiKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRvSUNBUFdpdGhSZWZlcmVuY2UoYnl0ZXMzMiBfaWNhcCwgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlKSByZXR1cm5zKGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIF9fdHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlKF9pY2FwLCBfdmFsdWUsIF9yZWZlcmVuY2UpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIF9fdHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlKGJ5dGVzMzIgX2ljYXAsIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSkgcHJpdmF0ZSByZXR1cm5zKGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIF9pc0h1bWFuKCkgPw0KICAgICAgICAgICAgbXVsdGlBc3NldC5wcm94eVRyYW5zZmVyVG9JQ0FQV2l0aFJlZmVyZW5jZShfaWNhcCwgX3ZhbHVlLCBfcmVmZXJlbmNlKSA6DQogICAgICAgICAgICBtdWx0aUFzc2V0LnRyYW5zZmVyRnJvbVRvSUNBUFdpdGhSZWZlcmVuY2UobXNnLnNlbmRlciwgX2ljYXAsIF92YWx1ZSwgX3JlZmVyZW5jZSk7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIG9ubHlIdW1hbigpIHJldHVybnMoYm9vbCkgew0KICAgICAgICByZXR1cm4gbXVsdGlBc3NldC5wcm94eUFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSwgc3ltYm9sKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzZXRDb3NpZ25lckFkZHJlc3MoYWRkcmVzcyBfY29zaWduZXIpIG9ubHlIdW1hbigpIHJldHVybnMoYm9vbCkgew0KICAgICAgICByZXR1cm4gbXVsdGlBc3NldC5wcm94eVNldENvc2lnbmVyQWRkcmVzcyhfY29zaWduZXIsIHN5bWJvbCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZW1pdFRyYW5zZmVyKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgb25seU11bHRpQXNzZXQoKSB7DQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZW1pdEFwcHJvdmUoYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIG9ubHlNdWx0aUFzc2V0KCkgew0KICAgICAgICBBcHByb3ZlKF9mcm9tLCBfc3BlbmRlciwgX3ZhbHVlKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzZW5kVG9Pd25lcigpIHJldHVybnMoYm9vbCkgew0KICAgICAgICBhZGRyZXNzIG93bmVyID0gbXVsdGlBc3NldC5vd25lcihzeW1ib2wpOw0KICAgICAgICByZXR1cm4gbXVsdGlBc3NldC50cmFuc2Zlcihvd25lciwgYmFsYW5jZU9mKG93bmVyKSwgc3ltYm9sKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBkZWNpbWFscygpIGNvbnN0YW50IHJldHVybnModWludDgpIHsNCiAgICAgICAgcmV0dXJuIG11bHRpQXNzZXQuYmFzZVVuaXQoc3ltYm9sKTsNCiAgICB9DQp9DQoNCmNvbnRyYWN0IE93bmVkIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBjb250cmFjdE93bmVyOw0KDQogICAgZnVuY3Rpb24gT3duZWQoKSB7DQogICAgICAgIGNvbnRyYWN0T3duZXIgPSBtc2cuc2VuZGVyOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlDb250cmFjdE93bmVyKCkgew0KICAgICAgICBpZiAoY29udHJhY3RPd25lciA9PSBtc2cuc2VuZGVyKSB7DQogICAgICAgICAgICBfOw0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpjb250cmFjdCBHTVQgaXMgQXNzZXRNaW4sIE93bmVkIHsNCiAgICB1aW50IHB1YmxpYyB0eEdhc1ByaWNlTGltaXQgPSAyMTAwMDAwMDAwMDsNCiAgICB1aW50IHB1YmxpYyByZWZ1bmRHYXMgPSA0MDAwMDsNCiAgICB1aW50IHB1YmxpYyB0cmFuc2ZlckNhbGxHYXMgPSAyMTAwMDsNCiAgICB1aW50IHB1YmxpYyB0cmFuc2ZlcldpdGhSZWZlcmVuY2VDYWxsR2FzID0gMjEwMDA7DQogICAgdWludCBwdWJsaWMgdHJhbnNmZXJUb0lDQVBDYWxsR2FzID0gMjEwMDA7DQogICAgdWludCBwdWJsaWMgdHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlQ2FsbEdhcyA9IDIxMDAwOw0KICAgIHVpbnQgcHVibGljIGFwcHJvdmVDYWxsR2FzID0gMjEwMDA7DQogICAgdWludCBwdWJsaWMgZm9yd2FyZENhbGxHYXMgPSAyMTAwMDsNCiAgICB1aW50IHB1YmxpYyBzZXRDb3NpZ25lckNhbGxHYXMgPSAyMTAwMDsNCiAgICBFdGhlclRyZWFzdXJ5SW50ZXJmYWNlIHB1YmxpYyB0cmVhc3VyeTsNCiAgICBtYXBwaW5nKGJ5dGVzMzIgPT4gYWRkcmVzcykgcHVibGljIGFsbG93ZWRGb3J3YXJkczsNCg0KICAgIGZ1bmN0aW9uIHVwZGF0ZVJlZnVuZEdhcygpIG9ubHlDb250cmFjdE93bmVyKCkgcmV0dXJucyh1aW50KSB7DQogICAgICAgIHVpbnQgc3RhcnRHYXMgPSBtc2cuZ2FzOw0KICAgICAgICAvLyBqdXN0IHRvIHNpbXVsYXRlIGNhbGN1bGF0aW9ucywgZHVubm8gaWYgb3B0aW1pemVyIHdpbGwgcmVtb3ZlIHRoaXMuDQogICAgICAgIHVpbnQgcmVmdW5kID0gKHN0YXJ0R2FzIC0gbXNnLmdhcyArIHJlZnVuZEdhcykgKiB0eC5nYXNwcmljZTsNCiAgICAgICAgaWYgKHR4Lmdhc3ByaWNlID4gdHhHYXNQcmljZUxpbWl0KSB7DQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KICAgICAgICAvLyBlbmQuDQogICAgICAgIGlmICghX3JlZnVuZCgxKSkgew0KICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgIH0NCiAgICAgICAgcmVmdW5kR2FzID0gc3RhcnRHYXMgLSBtc2cuZ2FzOw0KICAgICAgICByZXR1cm4gcmVmdW5kR2FzOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldE9wZXJhdGlvbnNDYWxsR2FzKA0KICAgICAgICB1aW50IF90cmFuc2ZlciwNCiAgICAgICAgdWludCBfdHJhbnNmZXJUb0lDQVAsDQogICAgICAgIHVpbnQgX3RyYW5zZmVyV2l0aFJlZmVyZW5jZSwNCiAgICAgICAgdWludCBfdHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlLA0KICAgICAgICB1aW50IF9hcHByb3ZlLA0KICAgICAgICB1aW50IF9mb3J3YXJkLA0KICAgICAgICB1aW50IF9zZXRDb3NpZ25lcg0KICAgICkNCiAgICAgICAgb25seUNvbnRyYWN0T3duZXIoKQ0KICAgICAgICByZXR1cm5zKGJvb2wpDQogICAgew0KICAgICAgICB0cmFuc2ZlckNhbGxHYXMgPSBfdHJhbnNmZXI7DQogICAgICAgIHRyYW5zZmVyVG9JQ0FQQ2FsbEdhcyA9IF90cmFuc2ZlclRvSUNBUDsNCiAgICAgICAgdHJhbnNmZXJXaXRoUmVmZXJlbmNlQ2FsbEdhcyA9IF90cmFuc2ZlcldpdGhSZWZlcmVuY2U7DQogICAgICAgIHRyYW5zZmVyVG9JQ0FQV2l0aFJlZmVyZW5jZUNhbGxHYXMgPSBfdHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlOw0KICAgICAgICBhcHByb3ZlQ2FsbEdhcyA9IF9hcHByb3ZlOw0KICAgICAgICBmb3J3YXJkQ2FsbEdhcyA9IF9mb3J3YXJkOw0KICAgICAgICBzZXRDb3NpZ25lckNhbGxHYXMgPSBfc2V0Q29zaWduZXI7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldHVwVHJlYXN1cnkoYWRkcmVzcyBfdHJlYXN1cnksIHVpbnQgX3R4R2FzUHJpY2VMaW1pdCkgcGF5YWJsZSBvbmx5Q29udHJhY3RPd25lcigpIHJldHVybnMoYm9vbCkgew0KICAgICAgICBpZiAoX3R4R2FzUHJpY2VMaW1pdCA9PSAwKSB7DQogICAgICAgICAgICByZXR1cm4gX3NhZmVGYWxzZSgpOw0KICAgICAgICB9DQogICAgICAgIHRyZWFzdXJ5ID0gRXRoZXJUcmVhc3VyeUludGVyZmFjZShfdHJlYXN1cnkpOw0KICAgICAgICB0eEdhc1ByaWNlTGltaXQgPSBfdHhHYXNQcmljZUxpbWl0Ow0KICAgICAgICBpZiAobXNnLnZhbHVlID4gMCkgew0KICAgICAgICAgICAgX3NhZmVTZW5kKF90cmVhc3VyeSwgbXNnLnZhbHVlKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzZXRGb3J3YXJkKGJ5dGVzNCBfbXNnU2lnLCBhZGRyZXNzIF9mb3J3YXJkKSBvbmx5Q29udHJhY3RPd25lcigpIHJldHVybnMoYm9vbCkgew0KICAgICAgICBhbGxvd2VkRm9yd2FyZHNbc2hhMyhfbXNnU2lnKV0gPSBfZm9yd2FyZDsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gX3N0cmluZ0dhcyhzdHJpbmcgX3N0cmluZykgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyh1aW50KSB7DQogICAgICAgIHJldHVybiBieXRlcyhfc3RyaW5nKS5sZW5ndGggKiA3NTsgLy8gfjc1IGdhcyBwZXIgYnl0ZSwgZW1waXJpY2FsIHNob3duIDY4LTcyLg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIF9hcHBseVJlZnVuZCh1aW50IF9zdGFydEdhcykgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7DQogICAgICAgIGlmICh0eC5nYXNwcmljZSA+IHR4R2FzUHJpY2VMaW1pdCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIHVpbnQgcmVmdW5kID0gKF9zdGFydEdhcyAtIG1zZy5nYXMgKyByZWZ1bmRHYXMpICogdHguZ2FzcHJpY2U7DQogICAgICAgIHJldHVybiBfcmVmdW5kKHJlZnVuZCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gX3JlZnVuZCh1aW50IF92YWx1ZSkgaW50ZXJuYWwgcmV0dXJucyhib29sKSB7DQogICAgICAgIHJldHVybiBhZGRyZXNzKHRyZWFzdXJ5KSAhPSAwICYmIHRyZWFzdXJ5LndpdGhkcmF3KHR4Lm9yaWdpbiwgX3ZhbHVlKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wsIGJvb2wpIHsNCiAgICAgICAgdWludCBzdGFydEdhcyA9IG1zZy5nYXMgKyB0cmFuc2ZlckNhbGxHYXM7DQogICAgICAgIGlmICghc3VwZXIudHJhbnNmZXIoX3RvLCBfdmFsdWUpKSB7DQogICAgICAgICAgICByZXR1cm4gKGZhbHNlLCBmYWxzZSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICh0cnVlLCBfYXBwbHlSZWZ1bmQoc3RhcnRHYXMpKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBfdHJhbnNmZXJUb0lDQVAoYnl0ZXMzMiBfaWNhcCwgdWludCBfdmFsdWUpIGludGVybmFsIHJldHVybnMoYm9vbCwgYm9vbCkgew0KICAgICAgICB1aW50IHN0YXJ0R2FzID0gbXNnLmdhcyArIHRyYW5zZmVyVG9JQ0FQQ2FsbEdhczsNCiAgICAgICAgaWYgKCFzdXBlci50cmFuc2ZlclRvSUNBUChfaWNhcCwgX3ZhbHVlKSkgew0KICAgICAgICAgICAgcmV0dXJuIChmYWxzZSwgZmFsc2UpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiAodHJ1ZSwgX2FwcGx5UmVmdW5kKHN0YXJ0R2FzKSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gX3RyYW5zZmVyV2l0aFJlZmVyZW5jZShhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wsIGJvb2wpIHsNCiAgICAgICAgdWludCBzdGFydEdhcyA9IG1zZy5nYXMgKyB0cmFuc2ZlcldpdGhSZWZlcmVuY2VDYWxsR2FzICsgX3N0cmluZ0dhcyhfcmVmZXJlbmNlKTsNCiAgICAgICAgaWYgKCFzdXBlci50cmFuc2ZlcldpdGhSZWZlcmVuY2UoX3RvLCBfdmFsdWUsIF9yZWZlcmVuY2UpKSB7DQogICAgICAgICAgICByZXR1cm4gKGZhbHNlLCBmYWxzZSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICh0cnVlLCBfYXBwbHlSZWZ1bmQoc3RhcnRHYXMpKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBfdHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlKGJ5dGVzMzIgX2ljYXAsIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSkgaW50ZXJuYWwgcmV0dXJucyhib29sLCBib29sKSB7DQogICAgICAgIHVpbnQgc3RhcnRHYXMgPSBtc2cuZ2FzICsgdHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlQ2FsbEdhcyArIF9zdHJpbmdHYXMoX3JlZmVyZW5jZSk7DQogICAgICAgIGlmICghc3VwZXIudHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlKF9pY2FwLCBfdmFsdWUsIF9yZWZlcmVuY2UpKSB7DQogICAgICAgICAgICByZXR1cm4gKGZhbHNlLCBmYWxzZSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICh0cnVlLCBfYXBwbHlSZWZ1bmQoc3RhcnRHYXMpKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBfYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF92YWx1ZSkgaW50ZXJuYWwgcmV0dXJucyhib29sLCBib29sKSB7DQogICAgICAgIHVpbnQgc3RhcnRHYXMgPSBtc2cuZ2FzICsgYXBwcm92ZUNhbGxHYXM7DQogICAgICAgIGlmICghc3VwZXIuYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKSkgew0KICAgICAgICAgICAgcmV0dXJuIChmYWxzZSwgZmFsc2UpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiAodHJ1ZSwgX2FwcGx5UmVmdW5kKHN0YXJ0R2FzKSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gX3NldENvc2lnbmVyQWRkcmVzcyhhZGRyZXNzIF9jb3NpZ25lcikgaW50ZXJuYWwgcmV0dXJucyhib29sLCBib29sKSB7DQogICAgICAgIHVpbnQgc3RhcnRHYXMgPSBtc2cuZ2FzICsgc2V0Q29zaWduZXJDYWxsR2FzOw0KICAgICAgICBpZiAoIXN1cGVyLnNldENvc2lnbmVyQWRkcmVzcyhfY29zaWduZXIpKSB7DQogICAgICAgICAgICByZXR1cm4gKGZhbHNlLCBmYWxzZSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICh0cnVlLCBfYXBwbHlSZWZ1bmQoc3RhcnRHYXMpKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMoYm9vbCkgew0KICAgICAgICBib29sIHN1Y2Nlc3M7DQogICAgICAgIChzdWNjZXNzLCkgPSBfdHJhbnNmZXIoX3RvLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gc3VjY2VzczsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlclRvSUNBUChieXRlczMyIF9pY2FwLCB1aW50IF92YWx1ZSkgcmV0dXJucyhib29sKSB7DQogICAgICAgIGJvb2wgc3VjY2VzczsNCiAgICAgICAgKHN1Y2Nlc3MsKSA9IF90cmFuc2ZlclRvSUNBUChfaWNhcCwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJXaXRoUmVmZXJlbmNlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UpIHJldHVybnMoYm9vbCkgew0KICAgICAgICBib29sIHN1Y2Nlc3M7DQogICAgICAgIChzdWNjZXNzLCkgPSBfdHJhbnNmZXJXaXRoUmVmZXJlbmNlKF90bywgX3ZhbHVlLCBfcmVmZXJlbmNlKTsNCiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJUb0lDQVBXaXRoUmVmZXJlbmNlKGJ5dGVzMzIgX2ljYXAsIHVpbnQgX3ZhbHVlLCBzdHJpbmcgX3JlZmVyZW5jZSkgcmV0dXJucyhib29sKSB7DQogICAgICAgIGJvb2wgc3VjY2VzczsNCiAgICAgICAgKHN1Y2Nlc3MsKSA9IF90cmFuc2ZlclRvSUNBUFdpdGhSZWZlcmVuY2UoX2ljYXAsIF92YWx1ZSwgX3JlZmVyZW5jZSk7DQogICAgICAgIHJldHVybiBzdWNjZXNzOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHJldHVybnMoYm9vbCkgew0KICAgICAgICBib29sIHN1Y2Nlc3M7DQogICAgICAgIChzdWNjZXNzLCkgPSBfYXBwcm92ZShfc3BlbmRlciwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2V0Q29zaWduZXJBZGRyZXNzKGFkZHJlc3MgX2Nvc2lnbmVyKSByZXR1cm5zKGJvb2wpIHsNCiAgICAgICAgYm9vbCBzdWNjZXNzOw0KICAgICAgICAoc3VjY2VzcywpID0gX3NldENvc2lnbmVyQWRkcmVzcyhfY29zaWduZXIpOw0KICAgICAgICByZXR1cm4gc3VjY2VzczsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjaGVja1RyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgY29uc3RhbnQgcmV0dXJucyhib29sLCBib29sKSB7DQogICAgICAgIHJldHVybiBfdHJhbnNmZXIoX3RvLCBfdmFsdWUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoZWNrVHJhbnNmZXJUb0lDQVAoYnl0ZXMzMiBfaWNhcCwgdWludCBfdmFsdWUpIGNvbnN0YW50IHJldHVybnMoYm9vbCwgYm9vbCkgew0KICAgICAgICByZXR1cm4gX3RyYW5zZmVyVG9JQ0FQKF9pY2FwLCBfdmFsdWUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoZWNrVHJhbnNmZXJXaXRoUmVmZXJlbmNlKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgc3RyaW5nIF9yZWZlcmVuY2UpIGNvbnN0YW50IHJldHVybnMoYm9vbCwgYm9vbCkgew0KICAgICAgICByZXR1cm4gX3RyYW5zZmVyV2l0aFJlZmVyZW5jZShfdG8sIF92YWx1ZSwgX3JlZmVyZW5jZSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY2hlY2tUcmFuc2ZlclRvSUNBUFdpdGhSZWZlcmVuY2UoYnl0ZXMzMiBfaWNhcCwgdWludCBfdmFsdWUsIHN0cmluZyBfcmVmZXJlbmNlKSBjb25zdGFudCByZXR1cm5zKGJvb2wsIGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIF90cmFuc2ZlclRvSUNBUFdpdGhSZWZlcmVuY2UoX2ljYXAsIF92YWx1ZSwgX3JlZmVyZW5jZSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY2hlY2tBcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSBjb25zdGFudCByZXR1cm5zKGJvb2wsIGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIF9hcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoZWNrU2V0Q29zaWduZXJBZGRyZXNzKGFkZHJlc3MgX2Nvc2lnbmVyKSBjb25zdGFudCByZXR1cm5zKGJvb2wsIGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIF9zZXRDb3NpZ25lckFkZHJlc3MoX2Nvc2lnbmVyKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjaGVja0ZvcndhcmQoYnl0ZXMgX2RhdGEpIGNvbnN0YW50IHJldHVybnMoYm9vbCwgYm9vbCkgew0KICAgICAgICByZXR1cm4gX2ZvcndhcmQoYWxsb3dlZEZvcndhcmRzW3NoYTMoX2RhdGFbMF0sIF9kYXRhWzFdLCBfZGF0YVsyXSwgX2RhdGFbM10pXSwgX2RhdGEpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIF9mb3J3YXJkKGFkZHJlc3MgX3RvLCBieXRlcyBfZGF0YSkgaW50ZXJuYWwgcmV0dXJucyhib29sLCBib29sKSB7DQogICAgICAgIHVpbnQgc3RhcnRHYXMgPSBtc2cuZ2FzICsgZm9yd2FyZENhbGxHYXMgKyAoX2RhdGEubGVuZ3RoICogNTApOyAvLyA1MCBnYXMgcGVyIGJ5dGU7DQogICAgICAgIGlmIChfdG8gPT0gMHgwKSB7DQogICAgICAgICAgICByZXR1cm4gKGZhbHNlLCBfc2FmZUZhbHNlKCkpOw0KICAgICAgICB9DQogICAgICAgIGlmICghX3RvLmNhbGwudmFsdWUobXNnLnZhbHVlKShfZGF0YSkpIHsNCiAgICAgICAgICAgIHJldHVybiAoZmFsc2UsIF9zYWZlRmFsc2UoKSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICh0cnVlLCBfYXBwbHlSZWZ1bmQoc3RhcnRHYXMpKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsNCiAgICAgICAgX2ZvcndhcmQoYWxsb3dlZEZvcndhcmRzW3NoYTMobXNnLnNpZyldLCBtc2cuZGF0YSk7DQogICAgfQ0KfQ=='