base 64 content
base64gods
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4yOw0KDQovKiDQoNC+0LTQuNGC0LXQu9GM0YHQutC40Lkg0LrQvtC90YLRgNCw0LrRgiAqLw0KY29udHJhY3QgT3duZWQgew0KDQogICAgLyog0JDQtNGA0LXRgSDQstC70LDQtNC10LvRjNGG0LAg0LrQvtC90YLRgNCw0LrRgtCwKi8NCiAgICBhZGRyZXNzIG93bmVyOw0KDQogICAgLyog0JrQvtC90YHRgtGA0YPQutGC0L7RgCDQutC+0L3RgtGA0LDQutGC0LAsINCy0YvQt9GL0LLQsNC10YLRgdGPINC/0YDQuCDQv9C10YDQstC+0Lwg0LfQsNC/0YPRgdC60LUgKi8NCiAgICBmdW5jdGlvbiBPd25lZCgpIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgIH0NCg0KICAgIC8qINCY0LfQvNC10L3QuNGC0Ywg0LLQu9Cw0LTQtdC70YzRhtCwINC60L7QvdGC0YDQsNC60YLQsCwgbmV3T3duZXIgLSDQsNC00YDQtdGBINC90L7QstC+0LPQviDQstC70LDQtNC10LvRjNGG0LAgKi8NCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIG5ld093bmVyKSBvbmx5b3duZXIgew0KICAgICAgICBvd25lciA9IG5ld093bmVyOw0KICAgIH0NCg0KICAgIC8qINCc0L7QtNC40YTQuNC60LDRgtC+0YAg0LTQu9GPINC+0LPRgNCw0L3QuNGH0LXQvdC40Y8g0LTQvtGB0YLRg9C/0LAg0Log0YTRg9C90LrRhtC40Y/QvCDRgtC+0LvRjNC60L4g0LTQu9GPINCy0LvQsNC00LXQu9GM0YbQsCAqLw0KICAgIG1vZGlmaWVyIG9ubHlvd25lcigpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXI9PW93bmVyKSBfOw0KICAgIH0NCg0KICAgIC8qINCj0LTQsNC70LjRgtGMINC60L7QvdGC0YDQsNC60YIgKi8NCiAgICBmdW5jdGlvbiBraWxsKCkgb25seW93bmVyIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHN1aWNpZGUob3duZXIpOw0KICAgIH0NCn0NCg0KLyog0J7RgdC90L7QstC90L7QuSDQutC+0L3RgtGA0LDQutGCLCDQvdCw0YHQu9C10LTRg9C10YIg0LrQvtC90YLRgNCw0LrRgiBPd25lZCAqLw0KY29udHJhY3QgR29kcyBpcyBPd25lZCB7DQoNCiAgICAvKiDQodGC0YDRg9C60YLRg9GA0LAg0L/RgNC10LTRgdGC0LDQstC70Y/RjtGJ0LDRjyDRg9GH0LDRgdGC0L3QuNC60LAgKi8NCiAgICBzdHJ1Y3QgTWVtYmVyIHsNCiAgICAgICAgYWRkcmVzcyBtZW1iZXI7DQogICAgICAgIHN0cmluZyBuYW1lOw0KICAgICAgICBzdHJpbmcgc3VybmFtZTsNCiAgICAgICAgc3RyaW5nIHBhdHJvbnltaWM7DQogICAgICAgIHVpbnQgYmlydGhEYXRlOw0KICAgICAgICBzdHJpbmcgYmlydGhQbGFjZTsNCiAgICAgICAgc3RyaW5nIGF2YXRhckhhc2g7DQogICAgICAgIHVpbnQgYXZhdGFySUQ7DQogICAgICAgIGJvb2wgYXBwcm92ZWQ7DQogICAgICAgIHVpbnQgbWVtYmVyU2luY2U7DQogICAgfQ0KDQogICAgLyog0JzQsNGB0YHQuNCyINGD0YfQsNGB0YLQvdC40LrQvtCyICovDQogICAgTWVtYmVyW10gcHVibGljIG1lbWJlcnM7DQoNCiAgICAvKiDQnNCw0L/Qv9C40L3QsyDQsNC00YDQtdGBINGD0YfQsNGB0YLQvdC40LrQsCAtPiBpZCDRg9GH0LDRgdGC0L3QuNC60LAgKi8NCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBtZW1iZXJJZDsNCg0KICAgIC8qINCc0LDQv9C/0LjQvdCzIGlkINGD0YfQsNGB0YLQvdC40LrQsCAtPiDQv9GA0LjQstCw0YLQvdGL0Lkg0LrQu9GO0Ycg0LrQvtGI0LXQu9GM0LrQsCAqLw0KICAgIG1hcHBpbmcgKHVpbnQgPT4gc3RyaW5nKSBwdWJsaWMgcGtzOw0KDQogICAgLyog0JzQsNC/0L/QuNC90LMgaWQg0YPRh9Cw0YHRgtC90LjQutCwIC0+INC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0LUg0LTQsNC90L3Ri9C1INC90LAg0YPRh9Cw0YHRgtC90LjQutCwINCyINGE0L7RgNC80LDRgtC1IEpTT04gKi8NCiAgICBtYXBwaW5nICh1aW50ID0+IHN0cmluZykgcHVibGljIG1lbWJlckRhdGE7DQoNCiAgICAvKiDQodC+0LHRi9GC0LjQtSDQv9GA0Lgg0LTQvtCx0LDQstC70LXQvdC40Lgg0YPRh9Cw0YHRgtC90LjQutCwLCDQv9Cw0YDQsNC80LXRgtGA0YsgLSDQsNC00YDQtdGBLCBJRCAqLw0KICAgIGV2ZW50IE1lbWJlckFkZGVkKGFkZHJlc3MgbWVtYmVyLCB1aW50IGlkKTsNCg0KICAgIC8qINCh0L7QsdGL0YLQuNC1INC/0YDQuCDQuNC30LzQtdC90LXQvdC40Lgg0YPRh9Cw0YHRgtC90LjQutCwLCDQv9Cw0YDQsNC80LXRgtGA0YsgLSDQsNC00YDQtdGBLCBJRCAqLw0KICAgIGV2ZW50IE1lbWJlckNoYW5nZWQoYWRkcmVzcyBtZW1iZXIsIHVpbnQgaWQpOw0KDQogICAgLyog0JrQvtC90YHRgtGA0YPQutGC0L7RgCDQutC+0L3RgtGA0LDQutGC0LAsINCy0YvQt9GL0LLQsNC10YLRgdGPINC/0YDQuCDQv9C10YDQstC+0Lwg0LfQsNC/0YPRgdC60LUgKi8NCiAgICBmdW5jdGlvbiBHb2RzKCkgew0KICAgICAgICAvKiDQlNC+0LHQsNCy0LvRj9C10Lwg0L/Rg9GB0YLQvtCz0L4g0YPRh9Cw0YHRgtC90LjQutCwINC00LvRjyDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCAqLw0KICAgICAgICBhZGRNZW1iZXIoJycsICcnLCAnJywgMCwgJycsICcnLCAwLCAnJyk7DQogICAgfQ0KDQogICAgLyog0YTRg9C90LrRhtC40Y8g0LTQvtCx0LDQstC70LXQvdC40Y8g0Lgg0L7QsdC90L7QstC70LXQvdC40Y8g0YPRh9Cw0YHRgtC90LjQutCwLCDQv9Cw0YDQsNC80LXRgtGA0YsgLSDQsNC00YDQtdGBLCDQuNC80Y8sINGE0LDQvNC40LvQuNGPLA0KICAgICDQvtGC0YfQtdGB0YLQstC+LCDQtNCw0YLQsCDRgNC+0LbQtNC10L3QuNGPIChsaW51eCB0aW1lKSwg0LzQtdGB0YLQviDRgNC+0LbQtNC10L3QuNGPLCDRhdGN0Ygg0LDQstCw0YLQsNGA0LAsIElEINCw0LLQsNGC0LDRgNCwDQogICAgINC10YHQu9C4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDRgSDRgtCw0LrQuNC8INCw0LTRgNC10YHQvtC8INC90LUg0L3QsNC50LTQtdC9LCDRgtC+INCx0YPQtNC10YIg0YHQvtC30LTQsNC9INC90L7QstGL0LksINCyINC60L7QvdGG0LUg0LLRi9C30L7QstC10YLRgdGPINGB0L7QsdGL0YLQuNC1DQogICAgIE1lbWJlckFkZGVkLCDQtdGB0LvQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0L3QsNC50LTQtdC9LCDRgtC+INCx0YPQtNC10YIg0L/RgNC+0LjQt9Cy0LXQtNC10L3QviDQvtCx0L3QvtCy0LvQtdC90LjQtSDQv9C+0LvQtdC5INC4INC/0YDQvtGB0YLQsNCy0LvQtdC9INGE0LvQsNCzDQogICAgINC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNGPIGFwcHJvdmVkICovDQogICAgZnVuY3Rpb24gYWRkTWVtYmVyKHN0cmluZyBuYW1lLA0KICAgICAgICBzdHJpbmcgc3VybmFtZSwNCiAgICAgICAgc3RyaW5nIHBhdHJvbnltaWMsDQogICAgICAgIHVpbnQgYmlydGhEYXRlLA0KICAgICAgICBzdHJpbmcgYmlydGhQbGFjZSwNCiAgICAgICAgc3RyaW5nIGF2YXRhckhhc2gsDQogICAgICAgIHVpbnQgYXZhdGFySUQsDQogICAgICAgIHN0cmluZyBkYXRhKSBvbmx5b3duZXIgew0KICAgICAgICB1aW50IGlkOw0KICAgICAgICBhZGRyZXNzIG1lbWJlciA9IG1zZy5zZW5kZXI7DQogICAgICAgIGlmIChtZW1iZXJJZFttZW1iZXJdID09IDApIHsNCiAgICAgICAgICAgIG1lbWJlcklkW21lbWJlcl0gPSBtZW1iZXJzLmxlbmd0aDsNCiAgICAgICAgICAgIGlkID0gbWVtYmVycy5sZW5ndGgrKzsNCiAgICAgICAgICAgIG1lbWJlcnNbaWRdID0gTWVtYmVyKHsNCiAgICAgICAgICAgICAgICBtZW1iZXI6IG1lbWJlciwNCiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLA0KICAgICAgICAgICAgICAgIHN1cm5hbWU6IHN1cm5hbWUsDQogICAgICAgICAgICAgICAgcGF0cm9ueW1pYzogcGF0cm9ueW1pYywNCiAgICAgICAgICAgICAgICBiaXJ0aERhdGU6IGJpcnRoRGF0ZSwNCiAgICAgICAgICAgICAgICBiaXJ0aFBsYWNlOiBiaXJ0aFBsYWNlLA0KICAgICAgICAgICAgICAgIGF2YXRhckhhc2g6IGF2YXRhckhhc2gsDQogICAgICAgICAgICAgICAgYXZhdGFySUQ6IGF2YXRhcklELA0KICAgICAgICAgICAgICAgIGFwcHJvdmVkOiAob3duZXIgPT0gbWVtYmVyKSwNCiAgICAgICAgICAgICAgICBtZW1iZXJTaW5jZTogbm93DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIG1lbWJlckRhdGFbaWRdID0gZGF0YTsNCiAgICAgICAgICAgIGlmIChtZW1iZXIgIT0gMCkgew0KICAgICAgICAgICAgICAgIE1lbWJlckFkZGVkKG1lbWJlciwgaWQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaWQgPSBtZW1iZXJJZFttZW1iZXJdOw0KICAgICAgICAgICAgTWVtYmVyIG0gPSBtZW1iZXJzW2lkXTsNCiAgICAgICAgICAgIG0uYXBwcm92ZWQgPSB0cnVlOw0KICAgICAgICAgICAgbS5uYW1lID0gbmFtZTsNCiAgICAgICAgICAgIG0uc3VybmFtZSA9IHN1cm5hbWU7DQogICAgICAgICAgICBtLnBhdHJvbnltaWMgPSBwYXRyb255bWljOw0KICAgICAgICAgICAgbS5iaXJ0aERhdGUgPSBiaXJ0aERhdGU7DQogICAgICAgICAgICBtLmJpcnRoUGxhY2UgPSBiaXJ0aFBsYWNlOw0KICAgICAgICAgICAgbS5hdmF0YXJIYXNoID0gYXZhdGFySGFzaDsNCiAgICAgICAgICAgIG0uYXZhdGFySUQgPSBhdmF0YXJJRDsNCiAgICAgICAgICAgIG1lbWJlckRhdGFbaWRdID0gZGF0YTsNCiAgICAgICAgICAgIE1lbWJlckNoYW5nZWQobWVtYmVyLCBpZCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKiDQpNGD0L3QutGG0LjRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0L/RgNC40LLQsNGC0L3QvtCz0L4g0LrQu9GO0YfQsCDQv9C+IElEINGO0LfQtdGA0LAgKi8NCiAgICBmdW5jdGlvbiBnZXRQSyh1aW50IGlkKSBvbmx5b3duZXIgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBwa3NbaWRdOw0KICAgIH0NCg0KICAgIC8qINCk0YPQvdC60YbQuNGPINC/0L7Qu9GD0YfQtdC90LjRjyDQutC+0LvQuNGH0LXRgdGC0LLQsCDRjtC30LXRgNC+0LIgKi8NCiAgICBmdW5jdGlvbiBnZXRNZW1iZXJDb3VudCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIG1lbWJlcnMubGVuZ3RoIC0gMTsNCiAgICB9DQoNCiAgICAvKiDQpNGD0L3QutGG0LjRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0Y7Qt9C10YDQsCDQv9C+IGlkDQogICAgINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC80LDRgdGB0LjQsiDQuNC3INC/0L7Qu9C10LkgW9C40LzRjywg0YTQsNC80LjQu9C40Y8sINC+0YLRh9C10YHRgtCy0L4sINC00LDRgtCwX9GA0L7QttC00LXQvdC40Y8sINGF0Y3RiCDQsNCy0LDRgtCw0YDQsCwgaWQg0LDQstCw0YLQsNGA0LBdICovDQogICAgZnVuY3Rpb24gZ2V0TWVtYmVyKHVpbnQgaWQpIGNvbnN0YW50IHJldHVybnMgKA0KICAgICAgICBzdHJpbmcgbmFtZSwNCiAgICAgICAgc3RyaW5nIHN1cm5hbWUsDQogICAgICAgIHN0cmluZyBwYXRyb255bWljLA0KICAgICAgICB1aW50IGJpcnRoRGF0ZSwNCiAgICAgICAgc3RyaW5nIGJpcnRoUGxhY2UsDQogICAgICAgIHN0cmluZyBhdmF0YXJIYXNoLA0KICAgICAgICB1aW50IGF2YXRhcklELA0KICAgICAgICBzdHJpbmcgZGF0YSkgew0KICAgICAgICBNZW1iZXIgbSA9IG1lbWJlcnNbaWRdOw0KICAgICAgICBuYW1lID0gbS5uYW1lOw0KICAgICAgICBzdXJuYW1lID0gbS5zdXJuYW1lOw0KICAgICAgICBwYXRyb255bWljID0gbS5wYXRyb255bWljOw0KICAgICAgICBiaXJ0aERhdGUgPSBtLmJpcnRoRGF0ZTsNCiAgICAgICAgYmlydGhQbGFjZSA9IG0uYmlydGhQbGFjZTsNCiAgICAgICAgYXZhdGFySGFzaCA9IG0uYXZhdGFySGFzaDsNCiAgICAgICAgYXZhdGFySUQgPSBtLmF2YXRhcklEOw0KICAgICAgICBkYXRhID0gbWVtYmVyRGF0YVtpZF07DQogICAgfQ0KfQ=='