base 64 content
base64golemNetworkTokenWrapped
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC40Ow0KDQovLyBFUkMyMC1jb21wbGlhbnQgd3JhcHBlciB0b2tlbiBmb3IgR05UDQovLyBhZGFwdGVkIGZyb20gY29kZSBwcm92aWRlZCBieSB1L0pvbm55TGF0dGUNCg0KY29udHJhY3QgVG9rZW5JbnRlcmZhY2Ugew0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOw0KDQogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQoNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7DQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oDQogICAgICAgIGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKA0KICAgICAgICBhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOw0KDQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF9hbW91bnQpOw0KICAgIGV2ZW50IEFwcHJvdmFsKA0KICAgICAgICBhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCk7DQp9DQoNCmNvbnRyYWN0IFRva2VuIGlzIFRva2VuSW50ZXJmYWNlIHsNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBfdHJhbnNmZXIoYWRkcmVzcyBfdG8sDQogICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX2Ftb3VudCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50ICYmIF9hbW91bnQgPiAwKSB7DQogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfYW1vdW50Ow0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50Ow0KICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBfdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sDQogICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIF90bywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX2Ftb3VudCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX2Ftb3VudA0KICAgICAgICAgICAgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudA0KICAgICAgICAgICAgJiYgX2Ftb3VudCA+IDApIHsNCg0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50Ow0KICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF9hbW91bnQ7DQogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfYW1vdW50Ow0KICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50Ow0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwNCiAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsNCiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQogICAgfQ0KfQ0KDQpjb250cmFjdCBEZXBvc2l0U2xvdCB7DQogICAgYWRkcmVzcyBwdWJsaWMgY29uc3RhbnQgR05UID0gMHhhNzQ0NzY0NDMxMTlBOTQyZEU0OTg1OTBGZTFmMjQ1NGQ3RDRhQzBkOw0KDQogICAgYWRkcmVzcyBwdWJsaWMgd3JhcHBlcjsNCg0KICAgIG1vZGlmaWVyIG9ubHlXcmFwcGVyIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gd3JhcHBlcikgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gRGVwb3NpdFNsb3QoYWRkcmVzcyBfd3JhcHBlcikgew0KICAgICAgICB3cmFwcGVyID0gX3dyYXBwZXI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY29sbGVjdCgpIG9ubHlXcmFwcGVyIHsNCiAgICAgICAgdWludCBhbW91bnQgPSBUb2tlbkludGVyZmFjZShHTlQpLmJhbGFuY2VPZih0aGlzKTsNCiAgICAgICAgaWYgKGFtb3VudCA9PSAwKSB0aHJvdzsNCg0KICAgICAgICBUb2tlbkludGVyZmFjZShHTlQpLnRyYW5zZmVyKHdyYXBwZXIsIGFtb3VudCk7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBHb2xlbU5ldHdvcmtUb2tlbldyYXBwZWQgaXMgVG9rZW4gew0KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3RhbmRhcmQgPSAiVG9rZW4gMC4xIjsNCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiR29sZW0gTmV0d29yayBUb2tlbiBXcmFwcGVkIjsNCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJHTlRXIjsNCiAgICB1aW50OCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsgICAgIC8vIHNhbWUgYXMgR05UDQoNCiAgICBhZGRyZXNzIHB1YmxpYyBjb25zdGFudCBHTlQgPSAweGE3NDQ3NjQ0MzExOUE5NDJkRTQ5ODU5MEZlMWYyNDU0ZDdENGFDMGQ7DQoNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGFkZHJlc3MpIGRlcG9zaXRTbG90czsNCg0KICAgIGZ1bmN0aW9uIGNyZWF0ZVBlcnNvbmFsRGVwb3NpdEFkZHJlc3MoKSByZXR1cm5zIChhZGRyZXNzIGRlcG9zaXRBZGRyZXNzKSB7DQogICAgICAgIGlmIChkZXBvc2l0U2xvdHNbbXNnLnNlbmRlcl0gPT0gMCkgew0KICAgICAgICAgICAgZGVwb3NpdFNsb3RzW21zZy5zZW5kZXJdID0gbmV3IERlcG9zaXRTbG90KHRoaXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIGRlcG9zaXRTbG90c1ttc2cuc2VuZGVyXTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRQZXJzb25hbERlcG9zaXRBZGRyZXNzKA0KICAgICAgICAgICAgICAgIGFkZHJlc3MgZGVwb3NpdGVyKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIGRlcG9zaXRBZGRyZXNzKSB7DQogICAgICAgIHJldHVybiBkZXBvc2l0U2xvdHNbZGVwb3NpdGVyXTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwcm9jZXNzRGVwb3NpdCgpIHsNCiAgICAgICAgYWRkcmVzcyBkZXBvc2l0U2xvdCA9IGRlcG9zaXRTbG90c1ttc2cuc2VuZGVyXTsNCiAgICAgICAgaWYgKGRlcG9zaXRTbG90ID09IDApIHRocm93Ow0KDQogICAgICAgIERlcG9zaXRTbG90KGRlcG9zaXRTbG90KS5jb2xsZWN0KCk7DQoNCiAgICAgICAgdWludCBiYWxhbmNlID0gVG9rZW5JbnRlcmZhY2UoR05UKS5iYWxhbmNlT2YodGhpcyk7DQogICAgICAgIGlmIChiYWxhbmNlIDw9IHRvdGFsU3VwcGx5KSB0aHJvdzsNCg0KICAgICAgICB1aW50IGZyZXNoR05UVyA9IGJhbGFuY2UgLSB0b3RhbFN1cHBseTsNCiAgICAgICAgdG90YWxTdXBwbHkgKz0gZnJlc2hHTlRXOw0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSBmcmVzaEdOVFc7DQogICAgICAgIFRyYW5zZmVyKGFkZHJlc3ModGhpcyksIG1zZy5zZW5kZXIsIGZyZXNoR05UVyk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sDQogICAgICAgICAgICAgICAgICAgICAgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgaWYgKF90byA9PSBhZGRyZXNzKHRoaXMpKSB7DQogICAgICAgICAgICB3aXRoZHJhd0dOVChfYW1vdW50KTsgICAvLyBjb252ZXJ0IGJhY2sgdG8gR05UDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBfdHJhbnNmZXIoX3RvLCBfYW1vdW50KTsgICAgIC8vIHN0YW5kYXJkIHRyYW5zZmVyDQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBfdG8sDQogICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChfdG8gPT0gYWRkcmVzcyh0aGlzKSkgdGhyb3c7ICAgICAgICAvLyBub3Qgc3VwcG9ydGVkDQogICAgICAgIHJldHVybiBfdHJhbnNmZXJGcm9tKF9mcm9tLCBfdG8sIF9hbW91bnQpOw0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gd2l0aGRyYXdHTlQodWludCBhbW91bnQpIGludGVybmFsIHsNCiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdIDwgYW1vdW50KSB0aHJvdzsNCg0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBhbW91bnQ7DQogICAgICAgIHRvdGFsU3VwcGx5IC09IGFtb3VudDsNCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgYWRkcmVzcyh0aGlzKSwgYW1vdW50KTsNCg0KICAgICAgICBUb2tlbkludGVyZmFjZShHTlQpLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCk7DQogICAgfQ0KfQ=='