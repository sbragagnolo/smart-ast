base 64 content
base64history
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4wOw0KDQovKioNCiAqIEB0aXRsZSBDb250YWlucyB0aGUgaGlzdG9yeSBvZiBhbGwgcmVsZXZhbnQgaGlzdG9yaWMgZXZlbnRzIGluIHRoZSB2ZWhpY2xlIGxpZmVjeWNsZS4NCiAqLw0KY29udHJhY3QgSGlzdG9yeSAgew0KDQogICAgLy8gVGhlIGNyZWF0b3Igb2YgdGhpcyBjb250cmFjdC4gVGhpcyBhZGRyZXNzIGNhbiBhdXRob3JpemUgTWVjaGFuaWNzLCBJbnN1cmVycywgQ2FyLURlYWxlcnMgZXRjDQogICAgLy8gdG8gbG9nIGV2ZW50cy4NCiAgICBhZGRyZXNzIG93bmVyOw0KDQogICAgLy8gQ3VycmVudGx5IDMgdHlwZXMgc3Vwb3J0ZWQuIE1vcmUgdG8gY29tZSBzb29uLg0KICAgIGVudW0gRXZlbnRUeXBlIHsgTmV3T3duZXIsIE1haW50ZW5hbmNlLCBEYW1hZ2VSZXBhaXIgfQ0KDQogICAgLy8gTGlzdCBvZiBhZGRyZXNzZXMgY29udHJvbGxlZCBieSBNZWNoYW5pY3MsIEluc3VyZXJzLCBDYXItRGVhbGVycyBldGMuIHRoYXQgYXJlIA0KICAgIC8vIEF1dGhvcml6ZWQgdG8gbG9nIGV2ZW50cyB0aGlzIFZlaGljbGUtSGlzdG9yeS1Mb2cuDQogICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBhdXRob3JpemVkTG9nZ2VyczsNCg0KICAgIC8vIFRoaXMgZXZlbnQgaXMgYnJvYWRjYXN0ZWQgd2hlbiBhIG5ldyBtYWludGVuYW5jZSBldmVudCBpcyBsb2dnZWQuDQogICAgZXZlbnQgRXZlbnRMb2dnZWQoc3RyaW5nIHZpbiwgRXZlbnRUeXBlIGV2ZW50VHlwZSwgdWludDI1NiBtaWxlYWdlLCBhZGRyZXNzIHZlcmlmaWVyKTsNCg0KICAgIC8vIFRoZSBldmVudCBpcyBicm9hZGNhc3RlZCB3aGVuIGEgbmV3IGxvZ2dlciBpcyBhdXRob3JpemVkIHRvIGxvZyBldmVudHMuDQogICAgZXZlbnQgTG9nZ2VyQXV0aG9yaXplZChhZGRyZXNzIGxvZ2dlckFkZHJlc3MpOw0KDQogICAgc3RydWN0IExlZGdlckV2ZW50IHsNCiAgICAgICAgDQogICAgICAgIHVpbnQyNTYgY3JlYXRpb25UaW1lOw0KICAgICAgICB1aW50MjU2IG1pbGVhZ2U7IA0KICAgICAgICB1aW50MjU2IHJlcGFpck9yZGVyTnVtYmVyOw0KICAgICAgICBhZGRyZXNzIHZlcmlmaWVyOyANCiAgICAgICAgRXZlbnRUeXBlIGV2ZW50VHlwZTsNCiAgICAgICAgc3RyaW5nIGRlc2NyaXB0aW9uOyAgIA0KICAgIH0NCg0KICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gTGVkZ2VyRXZlbnRbXSkgZXZlbnRzOw0KDQogICAgLyoqDQogICAgICogU2V0IHRoZSBvd25lci4NCiAgICAgKi8NCiAgICBmdW5jdGlvbiBIaXN0b3J5KCkgew0KICAgICAgICANCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOyANCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBPbmx5IGFsbG93cyBhZGRyZXNzZXMgY2FuIGNhbGwgdGhpcyBmdW5jdGlvbi4NCiAgICAgKi8NCiAgICBtb2RpZmllciBvbmx5QXV0aG9yaXplZCB7DQoNCiAgICAgICAgaWYgKCFhdXRob3JpemVkTG9nZ2Vyc1ttc2cuc2VuZGVyXSkNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIE9ubHkgb3duZXIgY2FuIGNhbGwgdGhpcyBmdW5jdGlvbi4NCiAgICAgKi8NCiAgICAgbW9kaWZpZXIgb25seU93bmVyIHsNCg0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KDQogICAgLyoqDQogICAgICogQXV0aG9yaXplIHRoZSBzcGVjaWZpZWQgYWRkcmVzcyB0byBhZGQgZXZlbW50cyB0byB0aGUgaGlzdG9yaWMgbG9nLg0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGF1dGhvcml6ZShhZGRyZXNzIG5ld0xvZ2dlcikgb25seU93bmVyIHsNCg0KICAgICAgICBhdXRob3JpemVkTG9nZ2Vyc1tuZXdMb2dnZXJdID0gdHJ1ZTsNCiAgICAgICAgTG9nZ2VyQXV0aG9yaXplZChuZXdMb2dnZXIpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENoZWNrcyBpZiB0aGUgc3BlY2lmaWVkIGFkZHJlc3MgaXMgYXV0aG9yaXplZCB0byBsb2cgZXZlbnRzLg0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGlzQXV0aG9yaXplZChhZGRyZXNzIGxvZ2dlcikgcmV0dXJucyAoYm9vbCkgew0KDQogICAgICAgICByZXR1cm4gYXV0aG9yaXplZExvZ2dlcnNbbG9nZ2VyXTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBZGQgYSBoaXN0b3JpY2FsbHkgc2lnbmlmaWNhbnQgZXZlbnQgKGkuZS4gbWFpbnRlbmFuY2UsIGRhbWFnZSANCiAgICAgKiByZXBhaXIgb3IgbmV3IG93bmVyKS4NCiAgICAgKi8NCiAgICBmdW5jdGlvbiBhZGRFdmVudCh1aW50MjU2IF9taWxlYWdlLCANCiAgICAgICAgICAgICAgICAgICAgIHVpbnQyNTYgX3JlcGFpck9yZGVyTnVtYmVyLA0KICAgICAgICAgICAgICAgICAgICAgRXZlbnRUeXBlIF9ldmVudFR5cGUsIA0KICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIF9kZXNjcmlwdGlvbiwgDQogICAgICAgICAgICAgICAgICAgICBzdHJpbmcgX3Zpbikgb25seUF1dGhvcml6ZWQgew0KDQogICAgICAgIGV2ZW50c1tzaGEzKF92aW4pXS5wdXNoKExlZGdlckV2ZW50KHsNCiAgICAgICAgICAgIGNyZWF0aW9uVGltZTogbm93LA0KICAgICAgICAgICAgbWlsZWFnZTogX21pbGVhZ2UsDQogICAgICAgICAgICByZXBhaXJPcmRlck51bWJlcjogX3JlcGFpck9yZGVyTnVtYmVyLA0KICAgICAgICAgICAgdmVyaWZpZXI6IG1zZy5zZW5kZXIsDQogICAgICAgICAgICBldmVudFR5cGU6IF9ldmVudFR5cGUsDQogICAgICAgICAgICBkZXNjcmlwdGlvbjogX2Rlc2NyaXB0aW9uDQogICAgICAgIH0pKTsNCiAgICAgICAgDQogICAgICAgIEV2ZW50TG9nZ2VkKF92aW4sIF9ldmVudFR5cGUsIF9taWxlYWdlLCBtc2cuc2VuZGVyKTsNCiAgICB9DQogICAgDQogICAgLyoqDQogICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGV2ZW50cyBmb3IgYSB2aW4uIChoZWxwZXIgZnVuY3Rpb24gZm9yIGdldEV2ZW50IGZ1bmN0aW9uKQ0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGdldEV2ZW50c0NvdW50KHN0cmluZyBfdmluKSBjb25zdGFudCByZXR1cm5zKHVpbnQyNTYpIHsNCg0KICAgICAgICByZXR1cm4gZXZlbnRzW3NoYTMoX3ZpbildLmxlbmd0aDsNCiAgICB9DQogICAgDQogICAgLyoqDQogICAgICogUmV0dXJucyB0aGUgZGV0YWlscyBvZiBhIHNwZWNpZmljIGV2ZW50LiBUbyBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggdGhlIGZ1bmN0aW9uDQogICAgICogZ2V0RXZlbnRzQ291bnQoKS4NCiAgICAgKi8NCiAgICBmdW5jdGlvbiBnZXRFdmVudChzdHJpbmcgX3ZpbiwgdWludDI1NiBfaW5kZXgpIGNvbnN0YW50DQogICAgICAgICAgICAgICAgcmV0dXJucyAodWludDI1NiBtaWxlYWdlLCBhZGRyZXNzIHZlcmlmaWVyLCANCiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50VHlwZSBldmVudFR5cGUsIHN0cmluZyBkZXNjcmlwdGlvbikgew0KDQogICAgICAgIExlZGdlckV2ZW50IG1lbW9yeSBlID0gZXZlbnRzW3NoYTMoX3ZpbildW19pbmRleF07DQogICAgICAgIG1pbGVhZ2UgPSBlLm1pbGVhZ2U7DQogICAgICAgIHZlcmlmaWVyID0gZS52ZXJpZmllcjsNCiAgICAgICAgZXZlbnRUeXBlID0gZS5ldmVudFR5cGU7DQogICAgICAgIGRlc2NyaXB0aW9uID0gZS5kZXNjcmlwdGlvbjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBMaWZlY3ljbGUgbWFuYWdlbWVudCAoU29saWRpdHkgYmVzdC1wcmFjdGljZSkuDQogICAgICovDQogICAgZnVuY3Rpb24ga2lsbCgpIG9ubHlPd25lciB7IA0KDQogICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7IA0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEZhbGxiYWNrIGZ1bmN0aW9uIChTb2xpZGl0eSBiZXN0LXByYWN0aWNlKS4NCiAgICAgKi8NCiAgICBmdW5jdGlvbigpIHBheWFibGUge30NCn0='