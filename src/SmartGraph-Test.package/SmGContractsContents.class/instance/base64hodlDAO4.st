base 64 content
base64hodlDAO4
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMDsNCi8qKg0KKiBIb2RsZCBEQU8gYW5kIEVSQzIwIHRva2VuDQoqIEF1dGhvcjogQ3VycmVuY3lUeWNvb24gb24gR2l0SHViDQoqIExpY2Vuc2U6IE1JVA0KKiBEYXRlOiAyMDE3DQoqDQoqIERlcGxveSB3aXRoIHRoZSBmb2xsb3dpbmcgYXJnczoNCiogMCwgIkhvZGwgREFPIiwgMTgsICJIT0RMIg0KKg0KKi8NCmNvbnRyYWN0IEhvZGxEQU8gew0KICAgIC8qIEVSQzIwIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovDQogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJ0hEQU8gMC4yJzsNCiAgICBzdHJpbmcgcHVibGljIG5hbWU7DQogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7DQogICAgdWludDggcHVibGljIGRlY2ltYWxzOw0KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Ow0KDQogICAgLyogRVJDMjAgVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovDQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsNCg0KDQogICAgLyogc3RvcmUgdGhlIGJsb2NrIG51bWJlciB3aGVuIGEgd2l0aGRyYXdhbCBoYXMgYmVlbiByZXF1ZXN0ZWQqLw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gd2l0aGRyYXdhbFJlcXVlc3QpIHB1YmxpYyB3aXRoZHJhd2FsUmVxdWVzdHM7DQogICAgc3RydWN0IHdpdGhkcmF3YWxSZXF1ZXN0IHsNCiAgICB1aW50IHNpbmNlQmxvY2s7DQogICAgdWludDI1NiBhbW91bnQ7DQp9DQoNCiAgICAvKioNCiAgICAgKiBmZWVQb3QgY29sbGVjdHMgZmVlcyBmcm9tIHF1aWNrIHdpdGhkcmF3YWxzLiBUaGlzIGdldHMgcmUtZGlzdHJpYnV0ZWQgdG8gc2xvdy13aXRoZHJhd2Fscw0KICAgICovDQogICAgdWludDI1NiBwdWJsaWMgZmVlUG90Ow0KDQogICAgdWludDMyIHB1YmxpYyBjb25zdGFudCBibG9ja1dhaXQgPSAxNzI4MDA7IC8vIHJvdWdobHkgMzAgZGF5cywgICgyNTkyMDAwIC8gMTUpIC0gYXNzdW1pbmcgYmxvY2sgdGltZSBpcyB+MTUgc2VjLg0KICAgIC8vdWludCBwdWJsaWMgY29uc3RhbnQgYmxvY2tXYWl0ID0gODsgLy8gcm91Z2hseSBhc3N1bWluZyBibG9jayB0aW1lIGlzIH4xNSBzZWMuDQoNCg0KICAgIC8qKg0KICAgICAqIEVSQzIwIGV2ZW50cyB0aGVzZSBnZW5lcmF0ZSBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMNCiAgICAqLw0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOw0KDQogICAgZXZlbnQgV2l0aGRyYXdhbFF1aWNrKGFkZHJlc3MgaW5kZXhlZCBieSwgdWludDI1NiBhbW91bnQsIHVpbnQyNTYgZmVlKTsgLy8gcXVpY2sgd2l0aGRyYXdhbCBkb25lDQogICAgZXZlbnQgSW5zdWZmaWNpZW50RmVlKGFkZHJlc3MgaW5kZXhlZCBieSwgdWludDI1NiBmZWVSZXF1aXJlZCk7ICAvLyBub3QgZW5vdWdoIGZlZSBwYWlkIGZvciBxdWljayB3aXRoZHJhd2FsDQogICAgZXZlbnQgV2l0aGRyYXdhbFN0YXJ0ZWQoYWRkcmVzcyBpbmRleGVkIGJ5LCB1aW50MjU2IGFtb3VudCk7DQogICAgZXZlbnQgV2l0aGRyYXdhbERvbmUoYWRkcmVzcyBpbmRleGVkIGJ5LCB1aW50MjU2IGFtb3VudCwgdWludDI1NiByZXdhcmQpOyAvLyBhbW91bnQgaXMgdGhlIGFtb3VudCB0aGF0IHdhcyB1c2VkIHRvIGNhbGN1bGF0ZSByZXdhcmQNCiAgICBldmVudCBXaXRoZHJhd2FsUHJlbWF0dXJlKGFkZHJlc3MgaW5kZXhlZCBieSwgdWludCBibG9ja3NUb1dhaXQpOyAvLyBOZWVkcyB0byB3YWl0IGJsb2Nrc1RvV2FpdCBiZWZvcmUgd2l0aGRyYXdhbCB1bmxvY2tlZA0KICAgIGV2ZW50IERlcG9zaXRlZChhZGRyZXNzIGluZGV4ZWQgYnksIHVpbnQyNTYgYW1vdW50KTsNCg0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdA0KICAgICAqIEluIG91ciBjYXNlLCB0aGVyZSdzIG5vIGluaXRpYWwgc3VwcGx5LiBUb2tlbnMgd2lsbCBiZSBjcmVhdGVkIGFzIGV0aGVyIGlzIHNlbnQNCiAgICAgKiB0byB0aGUgZmFsbC1iYWNrIGZ1bmN0aW9uLiBUaGVuIHRva2VucyBhcmUgYnVybmVkIHdoZW4gZXRoZXIgaXMgd2l0aGRyYXduLg0KICAgICAqLw0KICAgIGZ1bmN0aW9uIEhvZGxEQU8oDQogICAgdWludDI1NiBpbml0aWFsU3VwcGx5LA0KICAgIHN0cmluZyB0b2tlbk5hbWUsDQogICAgdWludDggZGVjaW1hbFVuaXRzLA0KICAgIHN0cmluZyB0b2tlblN5bWJvbA0KICAgICkgew0KDQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IGluaXRpYWxTdXBwbHk7ICAgICAgICAgICAgICAvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2Vucw0KICAgICAgICB0b3RhbFN1cHBseSA9IGluaXRpYWxTdXBwbHk7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRvdGFsIHN1cHBseQ0KICAgICAgICBuYW1lID0gdG9rZW5OYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBuYW1lIGZvciBkaXNwbGF5IHB1cnBvc2VzDQogICAgICAgIHN5bWJvbCA9IHRva2VuU3ltYm9sOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHN5bWJvbCBmb3IgZGlzcGxheSBwdXJwb3Nlcw0KICAgICAgICBkZWNpbWFscyA9IGRlY2ltYWxVbml0czsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1vdW50IG9mIGRlY2ltYWxzIGZvciBkaXNwbGF5IHB1cnBvc2VzDQogICAgfQ0KDQogICAgLyoqDQogICAgICogbm90UGVuZGluZ1dpdGhkcmF3YWwgbW9kaWZpZXIgZ3VhcmRzIHRoZSBmdW5jdGlvbiBmcm9tIGV4ZWN1dGluZyB3aGVuIGENCiAgICAgKiB3aXRoZHJhd2FsIGhhcyBiZWVuIHJlcXVlc3RlZCBhbmQgaXMgY3VycmVudGx5IHBlbmRpbmcNCiAgICAgKi8NCiAgICBtb2RpZmllciBub3RQZW5kaW5nV2l0aGRyYXdhbCB7DQogICAgICAgIGlmICh3aXRoZHJhd2FsUmVxdWVzdHNbbXNnLnNlbmRlcl0uc2luY2VCbG9jayA+IDApIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KDQogICAgLyoqIEVSQzIwIC0gdHJhbnNmZXIgc2VuZHMgdG9rZW5zDQogICAgICogQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYG1zZy5zZW5kZXJgDQogICAgICogQHBhcmFtIF90byBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50DQogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkDQogICAgICogQHJldHVybiBXaGV0aGVyIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCBvciBub3QNCiAgICAgKi8NCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIG5vdFBlbmRpbmdXaXRoZHJhd2FsIHsNCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7ICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gNCiAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHRocm93OyAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzDQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyDQogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQNCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOyAgICAgICAgICAgICAgICAgICAvLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQ0KICAgIH0NCg0KICAgIC8qKiBFUkMyMCBhcHByb3ZlIGFsbG93cyBhbm90aGVyIGNvbnRyYWN0IHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmDQogICAgICogQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9zcGVuZGVyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMNCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zDQogICAgICogQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBhcHByb3ZlZCBmb3IgdHJhbnNmZXINCiAgICAgKiBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdA0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIG5vdFBlbmRpbmdXaXRoZHJhd2FsDQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KDQogICAgLyoqDQogICAgICogRVJDLTIwIEFwcHJvdmVzIGFuZCB0aGVuIGNhbGxzIHRoZSByZWNlaXZpbmcgY29udHJhY3QNCiAgICAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSBub3RQZW5kaW5nV2l0aGRyYXdhbA0KICAgIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsNCg0KICAgIC8vY2FsbCB0aGUgcmVjZWl2ZUFwcHJvdmFsIGZ1bmN0aW9uIG9uIHRoZSBjb250cmFjdCB5b3Ugd2FudCB0byBiZSBub3RpZmllZC4gVGhpcyBjcmFmdHMgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBtYW51YWxseSBzbyBvbmUgZG9lc24ndCBoYXZlIHRvIGluY2x1ZGUgYSBjb250cmFjdCBpbiBoZXJlIGp1c3QgZm9yIHRoaXMuDQogICAgLy9yZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfdmFsdWUsIGFkZHJlc3MgX3Rva2VuQ29udHJhY3QsIGJ5dGVzIF9leHRyYURhdGEpDQogICAgLy9pdCBpcyBhc3N1bWVkIHRoYXQgd2hlbiBkb2VzIHRoaXMgdGhhdCB0aGUgY2FsbCAqc2hvdWxkKiBzdWNjZWVkLCBvdGhlcndpc2Ugb25lIHdvdWxkIHVzZSB2YW5pbGxhIGFwcHJvdmUgaW5zdGVhZC4NCiAgICAgICAgaWYoIV9zcGVuZGVyLmNhbGwoYnl0ZXM0KGJ5dGVzMzIoc2hhMygicmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MsdWludDI1NixhZGRyZXNzLGJ5dGVzKSIpKSksIG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSkpIHsgdGhyb3c7IH0NCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRVJDMjAgQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zDQogICAgICogQG5vdGljZSBzZW5kIGBfdmFsdWVgIHRva2VuIHRvIGBfdG9gIGZyb20gYF9mcm9tYCBvbiB0aGUgY29uZGl0aW9uIGl0IGlzIGFwcHJvdmVkIGJ5IGBfZnJvbWANCiAgICAgKiBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcg0KICAgICAqIEBwYXJhbSBfdG8gVGhlIGFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudA0KICAgICAqIEBwYXJhbSBfdmFsdWUgVGhlIGFtb3VudCBvZiB0b2tlbiB0byBiZSB0cmFuc2ZlcnJlZA0KICAgICAqIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90DQogICAgICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgIG5vdFBlbmRpbmdXaXRoZHJhd2FsDQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChiYWxhbmNlT2ZbX2Zyb21dIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaA0KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7ICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzDQogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsgICAgIC8vIENoZWNrIGFsbG93YW5jZQ0KICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQNCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIHdpdGhkcmF3YWxJbml0aWF0ZSBpbml0aWF0ZXMgdGhlIHdpdGhkcmF3YWwgYnkgZ29pbmcgaW50byBhIHdhaXRpbmcgcGVyaW9kDQogICAgICogSXQgcmVtZW1iZXJzIHRoZSBibG9jayBudW1iZXIgJiBhbW91bnQgaGVsZCBhdCB0aGUgdGltZSBvZiByZXF1ZXN0Lg0KICAgICAqIEFmdGVyIHRoZSB3YWl0aW5nIHBlcmlvZCBmaW5pc2hlcywgdGhlIGNhbGwgd2l0aGRyYXdhbENvbXBsZXRlDQogICAgICovDQogICAgZnVuY3Rpb24gd2l0aGRyYXdhbEluaXRpYXRlKCkgbm90UGVuZGluZ1dpdGhkcmF3YWwgew0KICAgICAgICBXaXRoZHJhd2FsU3RhcnRlZChtc2cuc2VuZGVyLCBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0pOw0KICAgICAgICB3aXRoZHJhd2FsUmVxdWVzdHNbbXNnLnNlbmRlcl0gPSB3aXRoZHJhd2FsUmVxdWVzdChibG9jay5udW1iZXIsIGJhbGFuY2VPZlttc2cuc2VuZGVyXSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogd2l0aGRyYXdhbENvbXBsZXRlIGlzIGNhbGxlZCBhZnRlciB0aGUgd2FpdGluZyBwZXJpb2QuIFRoZSBldGhlciB3aWxsIGJlDQogICAgICogcmV0dXJuZWQgdG8gdGhlIGNhbGxlciBhbmQgdGhlIHRva2VucyB3aWxsIGJlIGJ1cm5lZC4NCiAgICAgKiBBIHJld2FyZCB3aWxsIGJlIGlzc3VlZCBiYXNlZCBvbiB0aGUgYW1vdW50IGluIHRoZSBmZWVQb3QgcmVsYXRpdmUgdG8gdGhlDQogICAgICogYW1vdW50IGhlbGQgd2hlbiB0aGUgd2l0aGRyYXdhbCByZXF1ZXN0IHdhcyBtYWRlLg0KICAgICAqDQogICAgICogR2FzOiAxNzAwOA0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHdpdGhkcmF3YWxDb21wbGV0ZSgpIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgd2l0aGRyYXdhbFJlcXVlc3QgciA9IHdpdGhkcmF3YWxSZXF1ZXN0c1ttc2cuc2VuZGVyXTsNCiAgICAgICAgaWYgKHIuc2luY2VCbG9jayA9PSAwKSB0aHJvdzsNCiAgICAgICAgaWYgKChyLnNpbmNlQmxvY2sgKyBibG9ja1dhaXQpID4gYmxvY2subnVtYmVyKSB7DQogICAgICAgICAgICBXaXRoZHJhd2FsUHJlbWF0dXJlKG1zZy5zZW5kZXIsIHIuc2luY2VCbG9jayArIGJsb2NrV2FpdCAtIGJsb2NrLm51bWJlcik7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgdWludDI1NiBhbW91bnQgPSB3aXRoZHJhd2FsUmVxdWVzdHNbbXNnLnNlbmRlcl0uYW1vdW50Ow0KICAgICAgICB1aW50MjU2IHJld2FyZCA9IGNhbGN1bGF0ZVJld2FyZChyLmFtb3VudCk7DQogICAgICAgIHdpdGhkcmF3YWxSZXF1ZXN0c1ttc2cuc2VuZGVyXS5zaW5jZUJsb2NrID0gMDsNCiAgICAgICAgd2l0aGRyYXdhbFJlcXVlc3RzW21zZy5zZW5kZXJdLmFtb3VudCA9IDA7DQoNCiAgICAgICAgaWYgKHJld2FyZCA+IDApIHsNCiAgICAgICAgICAgIGlmIChmZWVQb3QgLSByZXdhcmQgPiBmZWVQb3QpIHsNCiAgICAgICAgICAgICAgICBmZWVQb3QgPSAwOyAvLyBvdmVyZmxvdw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBmZWVQb3QgLT0gcmV3YXJkOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGRvV2l0aGRyYXdhbChyZXdhcmQpOw0KICAgICAgICBXaXRoZHJhd2FsRG9uZShtc2cuc2VuZGVyLCBhbW91bnQsIHJld2FyZCk7DQogICAgICAgIHJldHVybiB0cnVlOw0KDQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV3YXJkIGlzIGJhc2VkIG9uIHRoZSBhbW91bnQgaGVsZCwgcmVsYXRpdmUgdG8gdG90YWwgc3VwcGx5IG9mIHRva2Vucy4NCiAgICAgKi8NCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVSZXdhcmQodWludDI1NiB2KSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgICAgIHVpbnQyNTYgcmV3YXJkID0gMDsNCiAgICAgICAgaWYgKGZlZVBvdCA+IDApIHsNCiAgICAgICAgICAgIHJld2FyZCA9IHYgLyB0b3RhbFN1cHBseSAqIGZlZVBvdDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gcmV3YXJkOw0KICAgIH0NCg0KICAgIC8qKiBjYWxjdWxhdGUgdGhlIGZlZSBmb3IgcXVpY2sgd2l0aGRyYXdhbA0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUZlZSh1aW50MjU2IHYpIGNvbnN0YW50IHJldHVybnMgICh1aW50MjU2KSB7DQogICAgICAgIHVpbnQyNTYgZmVlUmVxdWlyZWQgPSB2IC8gKDEgd2VpICogMTAwKTsNCiAgICAgICAgcmV0dXJuIGZlZVJlcXVpcmVkOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFF1aWNrIHdpdGhkcmF3YWwsIG5lZWRzIHRvIHNlbmQgZXRoZXIgdG8gdGhpcyBmdW5jdGlvbiBmb3IgdGhlIGZlZS4NCiAgICAgKg0KICAgICAqIEdhcyB1c2U6IDQ0MTI5IChpbmNsdWRpbmcgY2FsbCB0byBwcm9jZXNzV2l0aGRyYXdhbCkNCiAgICAqLw0KICAgIGZ1bmN0aW9uIHF1aWNrV2l0aGRyYXcoKSBwYXlhYmxlIG5vdFBlbmRpbmdXaXRoZHJhd2FsIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgLy8gY2FsY3VsYXRlIHJlcXVpcmVkIGZlZQ0KICAgICAgICB1aW50MjU2IGFtb3VudCA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXTsNCiAgICAgICAgaWYgKGFtb3VudCA8PSAwKSB0aHJvdzsNCiAgICAgICAgdWludDI1NiBmZWVSZXF1aXJlZCA9IGNhbGN1bGF0ZUZlZShhbW91bnQpOw0KICAgICAgICBpZiAobXNnLnZhbHVlIDwgZmVlUmVxdWlyZWQpIHsNCiAgICAgICAgICAgIC8vIG5vdCBlbm91Z2ggZmVlcyBzZW50DQogICAgICAgICAgICBJbnN1ZmZpY2llbnRGZWUobXNnLnNlbmRlciwgZmVlUmVxdWlyZWQpOw0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIHVpbnQyNTYgb3ZlckFtb3VudCA9IG1zZy52YWx1ZSAtIGZlZVJlcXVpcmVkOyAvLyBjYWxjdWxhdGUgYW55IG92ZXItcGF5bWVudA0KICAgICAgICAvLyBhZGQgZmVlIHRvIHRoZSBmZWVQb3QsIGV4Y2x1ZGluZyBhbnkgb3Zlci1wYXltZW50DQoNCiAgICAgICAgaWYgKG92ZXJBbW91bnQgPiAwKSB7DQogICAgICAgICAgICBmZWVQb3QgKz0gbXNnLnZhbHVlIC0gb3ZlckFtb3VudDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGZlZVBvdCArPSBtc2cudmFsdWU7DQogICAgICAgIH0NCg0KICAgICAgICBkb1dpdGhkcmF3YWwob3ZlckFtb3VudCk7IC8vIHdpdGhkcmF3ICsgcmV0dXJuIGFueSBvdmVyIHBheW1lbnQNCiAgICAgICAgV2l0aGRyYXdhbERvbmUobXNnLnNlbmRlciwgYW1vdW50LCAwKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogZG8gd2l0aGRyYXdhbA0KICAgICAqIEdhczogNjI0ODMNCiAgICAgKi8NCiAgICBmdW5jdGlvbiBkb1dpdGhkcmF3YWwodWludDI1NiBleHRyYSkgaW50ZXJuYWwgew0KICAgICAgICB1aW50MjU2IGFtb3VudCA9IGJhbGFuY2VPZlttc2cuc2VuZGVyXTsNCg0KICAgICAgICBpZiAoYW1vdW50IDw9IDApIHRocm93OyAgICAgICAgICAgICAgICAgLy8gY2Fubm90IHdpdGhkcmF3DQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDA7DQogICAgICAgIGlmICh0b3RhbFN1cHBseSA+IHRvdGFsU3VwcGx5IC0gYW1vdW50KSB7DQogICAgICAgICAgICB0b3RhbFN1cHBseSA9IDA7IC8vIGRvbid0IGxldCBpdCBvdmVyZmxvdw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdG90YWxTdXBwbHkgLT0gYW1vdW50OyAvLyBkZWZsYXRlIHRoZSBzdXBwbHkhDQogICAgICAgIH0NCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgMCwgYW1vdW50KTsgLy8gYnVybiBiYWJ5IGJ1cm4NCiAgICAgICAgaWYgKCFtc2cuc2VuZGVyLnNlbmQoYW1vdW50ICsgZXh0cmEpKSB0aHJvdzsgLy8gcmV0dXJuIGJhY2sgdGhlIGV0aGVyIG9yIHJvbGxiYWNrIGlmIGZhaWxlZA0KICAgIH0NCg0KDQogICAgLyoqDQogICAgICogRmFsbGJhY2sgZnVuY3Rpb24gd2hlbiBzZW5kaW5nIGV0aGVyIHRvIHRoZSBjb250cmFjdA0KICAgICAqIEdhcyB1c2U6IDY1MDUxDQogICAgKi8NCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIG5vdFBlbmRpbmdXaXRoZHJhd2FsIHsNCiAgICAgICAgdWludDI1NiBhbW91bnQgPSBtc2cudmFsdWU7ICAvLyBhbW91bnQgdGhhdCB3YXMgc2VudA0KICAgICAgICBpZiAoYW1vdW50IDw9IDApIHRocm93OyAvLyBuZWVkIHRvIHNlbmQgc29tZSBFVEgNCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IGFtb3VudDsgLy8gbWludCBuZXcgdG9rZW5zDQogICAgICAgIHRvdGFsU3VwcGx5ICs9IGFtb3VudDsgLy8gdHJhY2sgdGhlIHN1cHBseQ0KICAgICAgICBUcmFuc2ZlcigwLCBtc2cuc2VuZGVyLCBhbW91bnQpOyAvLyBub3RpZnkgb2YgdGhlIGV2ZW50DQogICAgICAgIERlcG9zaXRlZChtc2cuc2VuZGVyLCBhbW91bnQpOw0KICAgIH0NCn0='