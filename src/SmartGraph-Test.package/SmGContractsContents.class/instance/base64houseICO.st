base 64 content
base64houseICO
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KDQoNCg0KY29udHJhY3QgSG91c2VJQ08gew0KICAgIA0KICAgIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsgcmV0dXJuICJIb3VzZSI7IH0NCiAgICBmdW5jdGlvbiBzeW1ib2woKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsgcmV0dXJuICJIU0UiOyB9DQogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCkgeyByZXR1cm4gMDsgfQ0KCQ0KDQogICAgdWludDI1NiBwdWJsaWMgSU5JVElBTF9TVVBQTFk7DQoJdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQoJDQoJdWludDI1NiBwdWJsaWMgdG90YWxDb250cmliOw0KICAgIA0KICAgIHVpbnQyNTYgcHVibGljIHJhdGU7DQogIA0KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOwkJCQkJCSAgICAvL2luaXQgb3duZXIgYWRkcmVzcw0KCQ0KCXVpbnQyNTYgcHVibGljIGFtb3VudDsNCgkNCgkNCglmdW5jdGlvbiBIb3VzZUlDTygpIHsNCiAgICAgICAgSU5JVElBTF9TVVBQTFkgPSAzMDAwMDAwMDsgICAgICAgICAgICAgICAgICAvL1N0YXJ0aW5nIGNvaW4gc3VwcGx5DQoJCXRvdGFsU3VwcGx5ID0gMDsNCgkJDQoJCXRvdGFsQ29udHJpYiA9IDA7DQogICAgICAgIA0KICAgICAgICByYXRlID0gNTAwMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vSG93IG1hbnkgdG9rZW5zIHBlciBFVEggZ2l2ZW4NCgkJDQoJCW93bmVyID0gbXNnLnNlbmRlcjsJCQkgICAgICAgICAgICAgICAgLy9NYWtlIG93bmVyIG9mIGNvbnRyYWN0IHRoZSBjcmVhdG9yDQoJCQ0KCQliYWxhbmNlc1ttc2cuc2VuZGVyXSA9IElOSVRJQUxfU1VQUExZOwkJLy9TZW5kIG93bmVyIG9mIGNvbnRyYWN0IGFsbCBzdGFydGluZyB0b2tlbnMNCgl9DQoJDQoJDQoJLy9UaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIEV0aGVyIGlzIHNlbnQgdG8gdGhlIGNvbnRyYWN0IGFkZHJlc3MNCgkvL0V2ZW4gaWYgMCBldGhlciBpcyBzZW50Lg0KCWZ1bmN0aW9uICgpIHBheWFibGUgew0KCSAgICANCgkgICAgdWludDI1NiB0cnlBbW91bnQgPSBkaXYoKG11bChtc2cudmFsdWUsIHJhdGUpKSwgMSBldGhlcik7ICAgICAgICAgICAgICAgICAgIC8vRG9uJ3QgbGV0IHBlb3BsZSBidXkgbW9yZSB0b2tlbnMgdGhhbiB0aGVyZSBhcmUuDQoJICAgIA0KCQlpZiAobXNnLnZhbHVlID09IDAgfHwgbXNnLnZhbHVlIDwgMCB8fCBiYWxhbmNlT2Yob3duZXIpIDwgdHJ5QW1vdW50KSB7CQkvL0lmIHplcm8gZXRoZXIgaXMgc2VudCwga2lsbC4gRG8gbm90aGluZy4gDQoJCQlyZXZlcnQoKTsNCgkJfQ0KCQkNCgkgICAgYW1vdW50ID0gMDsJCQkJCQkJCQkgICAgICAgICAgICAgICAgLy9zZXQgdGhlICdhbW91bnQnIHZhciBiYWNrIHRvIHplcm8NCgkJYW1vdW50ID0gZGl2KChtdWwobXNnLnZhbHVlLCByYXRlKSksIDEgZXRoZXIpOwkJCQkvL3Rha2Ugc2VudCBldGhlciwgbXVsdGlwbHkgaXQgYnkgdGhlIHJhdGUgdGhlbiBkaXZpZGUgYnkgMSBldGhlci4NCgkJdHJhbnNmZXJGcm9tKG93bmVyLCBtc2cuc2VuZGVyLCBhbW91bnQpOyAgICAgICAgICAgICAgICAgICAgLy9TZW5kIHRva2VucyB0byBidXllcg0KCQl0b3RhbFN1cHBseSArPSBhbW91bnQ7CQkJCQkJCQkJCS8vS2VlcCB0cmFjayBvZiBob3cgbWFueSBoYXZlIGJlZW4gc29sZC4NCgkJdG90YWxDb250cmliID0gKHRvdGFsQ29udHJpYiArIG1zZy52YWx1ZSk7DQoJCWFtb3VudCA9IDA7CQkJCQkJCQkJICAgICAgICAgICAgICAgIC8vc2V0IHRoZSAnYW1vdW50JyB2YXIgYmFjayB0byB6ZXJvDQoJCQ0KCQkNCgkJb3duZXIudHJhbnNmZXIobXNnLnZhbHVlKTsJCQkJCSAgICAgICAgICAgICAgICAvL1NlbmQgdGhlIEVUSCB0byBjb250cmFjdCBvd25lci4NCg0KCX0JDQoJDQoJDQoJDQogIA0KICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsNCiAgDQogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsNCg0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgICAgICBpZiAoX3ZhbHVlID09IDApIHsgcmV0dXJuIGZhbHNlOyB9DQoNCiAgICAgICAgdWludDI1NiBmcm9tQmFsYW5jZSA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOw0KDQogICAgICAgIGJvb2wgc3VmZmljaWVudEZ1bmRzID0gZnJvbUJhbGFuY2UgPj0gX3ZhbHVlOw0KICAgICAgICBib29sIG92ZXJmbG93ZWQgPSBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZXNbX3RvXTsNCiAgICAgICAgDQogICAgICAgIGlmIChzdWZmaWNpZW50RnVuZHMgJiYgIW92ZXJmbG93ZWQpIHsNCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9DQogICAgfQ0KDQoNCg0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgeyByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsgfQ0KDQoNCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgICAgIGlmIChfdmFsdWUgPT0gMCkgeyByZXR1cm4gZmFsc2U7IH0NCiAgICAgICAgDQogICAgICAgIHVpbnQyNTYgZnJvbUJhbGFuY2UgPSBiYWxhbmNlc1tvd25lcl07DQoNCiAgICAgICAgYm9vbCBzdWZmaWNpZW50RnVuZHMgPSBmcm9tQmFsYW5jZSA+PSBfdmFsdWU7DQoNCiAgICAgICAgaWYgKHN1ZmZpY2llbnRGdW5kcykgew0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQ0KICAgIH0NCg0KCQ0KICAgIGZ1bmN0aW9uIGdldFN0YXRzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiwgdWludDI1Nikgew0KICAgICAgICByZXR1cm4gKHRvdGFsU3VwcGx5LCB0b3RhbENvbnRyaWIpOw0KICAgIH0NCg0KCQ0KCQ0KICBmdW5jdGlvbiBtdWwodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICB1aW50MjU2IGMgPSBhICogYjsNCiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOw0KICAgIHJldHVybiBjOw0KICB9DQoNCiAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgLy8gYXNzZXJ0KGIgPiAwKTsgLy8gU29saWRpdHkgYXV0b21hdGljYWxseSB0aHJvd3Mgd2hlbiBkaXZpZGluZyBieSAwDQogICAgdWludDI1NiBjID0gYSAvIGI7DQogICAgLy8gYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7IC8vIFRoZXJlIGlzIG5vIGNhc2UgaW4gd2hpY2ggdGhpcyBkb2Vzbid0IGhvbGQNCiAgICByZXR1cm4gYzsNCiAgfQ0KDQogIGZ1bmN0aW9uIHN1Yih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikgew0KICAgIGFzc2VydChiIDw9IGEpOw0KICAgIHJldHVybiBhIC0gYjsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFkZCh1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikgew0KICAgIHVpbnQyNTYgYyA9IGEgKyBiOw0KICAgIGFzc2VydChjID49IGEpOw0KICAgIHJldHVybiBjOw0KICB9DQoJDQoJDQoJDQp9'