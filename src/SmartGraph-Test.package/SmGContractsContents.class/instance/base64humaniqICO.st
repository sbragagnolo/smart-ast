base 64 content
base64humaniqICO
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC42Ow0KDQoNCi8qKg0KICogTWF0aCBvcGVyYXRpb25zIHdpdGggc2FmZXR5IGNoZWNrcw0KICovDQpjb250cmFjdCBTYWZlTWF0aCB7DQogIGZ1bmN0aW9uIG11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKiBiOw0KICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICBhc3NlcnQoYiA+IDApOw0KICAgIHVpbnQgYyA9IGEgLyBiOw0KICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOw0KICAgIHJldHVybiBjOw0KICB9DQoNCiAgZnVuY3Rpb24gc3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQoNCiAgZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgdWludCBjID0gYSArIGI7DQogICAgYXNzZXJ0KGMgPj0gYSk7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsNCiAgICBpZiAoIWFzc2VydGlvbikgew0KICAgICAgdGhyb3c7DQogICAgfQ0KICB9DQp9DQoNCg0KLy8vIEltcGxlbWVudHMgRVJDIDIwIFRva2VuIHN0YW5kYXJkOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjANCi8vLyBAdGl0bGUgQWJzdHJhY3QgdG9rZW4gY29udHJhY3QgLSBGdW5jdGlvbnMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgdG9rZW4gY29udHJhY3RzLg0KY29udHJhY3QgQWJzdHJhY3RUb2tlbiB7DQogICAgLy8gVGhpcyBpcyBub3QgYW4gYWJzdHJhY3QgZnVuY3Rpb24sIGJlY2F1c2Ugc29sYyB3b24ndCByZWNvZ25pemUgZ2VuZXJhdGVkIGdldHRlciBmdW5jdGlvbnMgZm9yIHB1YmxpYyB2YXJpYWJsZXMgYXMgZnVuY3Rpb25zDQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSkge30NCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBvd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50MjU2IHZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQyNTYgdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOw0KDQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7DQogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludDI1NiB2YWx1ZSk7DQogICAgZXZlbnQgSXNzdWFuY2UoYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsNCn0NCg0KDQpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEFic3RyYWN0VG9rZW4gew0KDQogICAgLyoNCiAgICAgKiAgRGF0YSBzdHJ1Y3R1cmVzDQogICAgICovDQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7DQogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQoNCiAgICAvKg0KICAgICAqICBSZWFkIGFuZCB3cml0ZSBzdG9yYWdlIGZ1bmN0aW9ucw0KICAgICAqLw0KICAgIC8vLyBAZGV2IFRyYW5zZmVycyBzZW5kZXIncyB0b2tlbnMgdG8gYSBnaXZlbiBhZGRyZXNzLiBSZXR1cm5zIHN1Y2Nlc3MuDQogICAgLy8vIEBwYXJhbSBfdG8gQWRkcmVzcyBvZiB0b2tlbiByZWNlaXZlci4NCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBOdW1iZXIgb2YgdG9rZW5zIHRvIHRyYW5zZmVyLg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b10pIHsNCiAgICAgICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLy8gQGRldiBBbGxvd3MgYWxsb3dlZCB0aGlyZCBwYXJ0eSB0byB0cmFuc2ZlciB0b2tlbnMgZnJvbSBvbmUgYWRkcmVzcyB0byBhbm90aGVyLiBSZXR1cm5zIHN1Y2Nlc3MuDQogICAgLy8vIEBwYXJhbSBfZnJvbSBBZGRyZXNzIGZyb20gd2hlcmUgdG9rZW5zIGFyZSB3aXRoZHJhd24uDQogICAgLy8vIEBwYXJhbSBfdG8gQWRkcmVzcyB0byB3aGVyZSB0b2tlbnMgYXJlIHNlbnQuDQogICAgLy8vIEBwYXJhbSBfdmFsdWUgTnVtYmVyIG9mIHRva2VucyB0byB0cmFuc2Zlci4NCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlID4gYmFsYW5jZXNbX3RvXSkgew0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOw0KICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgdG9rZW5zIG93bmVkIGJ5IGdpdmVuIGFkZHJlc3MuDQogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4NCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBTZXRzIGFwcHJvdmVkIGFtb3VudCBvZiB0b2tlbnMgZm9yIHNwZW5kZXIuIFJldHVybnMgc3VjY2Vzcy4NCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIEFkZHJlc3Mgb2YgYWxsb3dlZCBhY2NvdW50Lg0KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIE51bWJlciBvZiBhcHByb3ZlZCB0b2tlbnMuDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoNCiAgICAgKiBSZWFkIHN0b3JhZ2UgZnVuY3Rpb25zDQogICAgICovDQogICAgLy8vIEBkZXYgUmV0dXJucyBudW1iZXIgb2YgYWxsb3dlZCB0b2tlbnMgZm9yIGdpdmVuIGFkZHJlc3MuDQogICAgLy8vIEBwYXJhbSBfb3duZXIgQWRkcmVzcyBvZiB0b2tlbiBvd25lci4NCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIEFkZHJlc3Mgb2YgdG9rZW4gc3BlbmRlci4NCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7DQogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCiAgICB9DQoNCn0NCg0KDQovLy8gQHRpdGxlIFRva2VuIGNvbnRyYWN0IC0gSW1wbGVtZW50cyBTdGFuZGFyZCBUb2tlbiBJbnRlcmZhY2Ugd2l0aCBIdW1hbmlRIGZlYXR1cmVzLg0KLy8vIEBhdXRob3IgRXZnZW55IFl1cnRhZXYgLSA8ZXZnZW55QGV0aGVyaW9ubGFiLmNvbT4NCi8vLyBAYXV0aG9yIEFsZXhleSBCYXNobHlrb3YgLSA8YWxleGV5QGV0aGVyaW9ubGFiLmNvbT4NCmNvbnRyYWN0IEh1bWFuaXFUb2tlbiBpcyBTdGFuZGFyZFRva2VuLCBTYWZlTWF0aCB7DQoNCiAgICAvKg0KICAgICAqIEV4dGVybmFsIGNvbnRyYWN0cw0KICAgICAqLw0KICAgIGFkZHJlc3MgcHVibGljIG1pbnRlcjsNCg0KICAgIC8qDQogICAgICogVG9rZW4gbWV0YSBkYXRhDQogICAgICovDQogICAgc3RyaW5nIGNvbnN0YW50IHB1YmxpYyBuYW1lID0gIkh1bWFuaXEiOw0KICAgIHN0cmluZyBjb25zdGFudCBwdWJsaWMgc3ltYm9sID0gIkhNUSI7DQogICAgdWludDggY29uc3RhbnQgcHVibGljIGRlY2ltYWxzID0gODsNCg0KICAgIC8vIEFkZHJlc3Mgb2YgdGhlIGZvdW5kZXIgb2YgSHVtYW5pcS4NCiAgICBhZGRyZXNzIHB1YmxpYyBmb3VuZGVyID0gMHhjODkwYjFmNTMyZTY3NDk3N2RmZGI3OTFjYWZhZWU4OThkZmE5NjcxOw0KDQogICAgLy8gTXVsdGlzaWcgYWRkcmVzcyBvZiB0aGUgZm91bmRlcnMNCiAgICBhZGRyZXNzIHB1YmxpYyBtdWx0aXNpZyA9IDB4YTJjOWE3NTc4ZTIxNzJmMzJhMzZjNWMwZTQ5ZDY0Nzc2ZjllNzg4MzsNCg0KICAgIC8vIEFkZHJlc3Mgd2hlcmUgYWxsIHRva2VucyBjcmVhdGVkIGR1cmluZyBJQ08gc3RhZ2UgaW5pdGlhbGx5IGFsbG9jYXRlZA0KICAgIGFkZHJlc3MgY29uc3RhbnQgcHVibGljIGFsbG9jYXRpb25BZGRyZXNzSUNPID0gMHgxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExOw0KDQogICAgLy8gQWRkcmVzcyB3aGVyZSBhbGwgdG9rZW5zIGNyZWF0ZWQgZHVyaW5nIHByZUlDTyBzdGFnZSBpbml0aWFsbHkgYWxsb2NhdGVkDQogICAgYWRkcmVzcyBjb25zdGFudCBwdWJsaWMgYWxsb2NhdGlvbkFkZHJlc3NQcmVJQ08gPSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY7DQoNCiAgICAvLyAzMSA4MjAgMzE0IHRva2VucyB3ZXJlIG1pbnRlZCBkdXJpbmcgcHJlSUNPDQogICAgdWludCBjb25zdGFudCBwdWJsaWMgcHJlSUNPU3VwcGx5ID0gbXVsKDMxODIwMzE0LCAxMDAwMDAwMDApOw0KDQogICAgLy8gMTMxIDAzOCAyODYgdG9rZW5zIHdlcmUgbWludGVkIGR1cmluZyBJQ08NCiAgICB1aW50IGNvbnN0YW50IHB1YmxpYyBJQ09TdXBwbHkgPSBtdWwoMTMxMDM4Mjg2LCAxMDAwMDAwMDApOw0KDQogICAgLy8gTWF4IG51bWJlciBvZiB0b2tlbnMgdGhhdCBjYW4gYmUgbWludGVkDQogICAgdWludCBwdWJsaWMgbWF4VG90YWxTdXBwbHk7DQoNCiAgICAvKg0KICAgICAqIE1vZGlmaWVycw0KICAgICAqLw0KICAgIG1vZGlmaWVyIG9ubHlGb3VuZGVyKCkgew0KICAgICAgICAvLyBPbmx5IGZvdW5kZXIgaXMgYWxsb3dlZCB0byBkbyB0aGlzIGFjdGlvbi4NCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gZm91bmRlcikgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5TWludGVyKCkgew0KICAgICAgICAvLyBPbmx5IG1pbnRlciBpcyBhbGxvd2VkIHRvIHByb2NlZWQuDQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG1pbnRlcikgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICAvKg0KICAgICAqIENvbnRyYWN0IGZ1bmN0aW9ucw0KICAgICAqLw0KDQogICAgLy8vIEBkZXYgQ3Jvd2RmdW5kaW5nIGNvbnRyYWN0IGlzc3VlcyBuZXcgdG9rZW5zIGZvciBhZGRyZXNzLiBSZXR1cm5zIHN1Y2Nlc3MuDQogICAgLy8vIEBwYXJhbSBfZm9yIEFkZHJlc3Mgb2YgcmVjZWl2ZXIuDQogICAgLy8vIEBwYXJhbSB0b2tlbkNvdW50IE51bWJlciBvZiB0b2tlbnMgdG8gaXNzdWUuDQogICAgZnVuY3Rpb24gaXNzdWVUb2tlbnMoYWRkcmVzcyBfZm9yLCB1aW50IHRva2VuQ291bnQpDQogICAgICAgIGV4dGVybmFsDQogICAgICAgIHBheWFibGUNCiAgICAgICAgb25seU1pbnRlcg0KICAgICAgICByZXR1cm5zIChib29sKQ0KICAgIHsNCiAgICAgICAgaWYgKHRva2VuQ291bnQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGFkZCh0b3RhbFN1cHBseSwgdG9rZW5Db3VudCkgPiBtYXhUb3RhbFN1cHBseSkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCg0KICAgICAgICB0b3RhbFN1cHBseSA9IGFkZCh0b3RhbFN1cHBseSwgdG9rZW5Db3VudCk7DQogICAgICAgIGJhbGFuY2VzW19mb3JdID0gYWRkKGJhbGFuY2VzW19mb3JdLCB0b2tlbkNvdW50KTsNCiAgICAgICAgSXNzdWFuY2UoX2ZvciwgdG9rZW5Db3VudCk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8vLyBAZGV2IEZ1bmN0aW9uIHRvIGNoYW5nZSBhZGRyZXNzIHRoYXQgaXMgYWxsb3dlZCB0byBkbyBlbWlzc2lvbi4NCiAgICAvLy8gQHBhcmFtIG5ld0FkZHJlc3MgQWRkcmVzcyBvZiBuZXcgZW1pc3Npb24gY29udHJhY3QuDQogICAgZnVuY3Rpb24gY2hhbmdlTWludGVyKGFkZHJlc3MgbmV3QWRkcmVzcykNCiAgICAgICAgcHVibGljDQogICAgICAgIG9ubHlGb3VuZGVyDQogICAgICAgIHJldHVybnMgKGJvb2wpDQogICAgeyAgIA0KICAgICAgICAvLyBGb3JiaWQgcHJldmlvdXMgZW1pc3Npb24gY29udHJhY3QgdG8gZGlzdHJpYnV0ZSB0b2tlbnMgbWludGVkIGR1cmluZyBJQ08gc3RhZ2UNCiAgICAgICAgZGVsZXRlIGFsbG93ZWRbYWxsb2NhdGlvbkFkZHJlc3NJQ09dW21pbnRlcl07DQoNCiAgICAgICAgbWludGVyID0gbmV3QWRkcmVzczsNCg0KICAgICAgICAvLyBBbGxvdyBlbWlzc2lvbiBjb250cmFjdCB0byBkaXN0cmlidXRlIHRva2VucyBtaW50ZWQgZHVyaW5nIElDTyBzdGFnZQ0KICAgICAgICBhbGxvd2VkW2FsbG9jYXRpb25BZGRyZXNzSUNPXVttaW50ZXJdID0gYmFsYW5jZU9mKGFsbG9jYXRpb25BZGRyZXNzSUNPKTsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBGdW5jdGlvbiB0byBjaGFuZ2UgZm91bmRlciBhZGRyZXNzLg0KICAgIC8vLyBAcGFyYW0gbmV3QWRkcmVzcyBBZGRyZXNzIG9mIG5ldyBmb3VuZGVyLg0KICAgIGZ1bmN0aW9uIGNoYW5nZUZvdW5kZXIoYWRkcmVzcyBuZXdBZGRyZXNzKQ0KICAgICAgICBwdWJsaWMNCiAgICAgICAgb25seUZvdW5kZXINCiAgICAgICAgcmV0dXJucyAoYm9vbCkNCiAgICB7ICAgDQogICAgICAgIGZvdW5kZXIgPSBuZXdBZGRyZXNzOw0KICAgIH0NCg0KICAgIC8vLyBAZGV2IEZ1bmN0aW9uIHRvIGNoYW5nZSBtdWx0aXNpZyBhZGRyZXNzLg0KICAgIC8vLyBAcGFyYW0gbmV3QWRkcmVzcyBBZGRyZXNzIG9mIG5ldyBtdWx0aXNpZy4NCiAgICBmdW5jdGlvbiBjaGFuZ2VNdWx0aXNpZyhhZGRyZXNzIG5ld0FkZHJlc3MpDQogICAgICAgIHB1YmxpYw0KICAgICAgICBvbmx5Rm91bmRlcg0KICAgICAgICByZXR1cm5zIChib29sKQ0KICAgIHsNCiAgICAgICAgbXVsdGlzaWcgPSBuZXdBZGRyZXNzOw0KICAgIH0NCg0KICAgIC8vLyBAZGV2IENvbnRyYWN0IGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHNldHMgaW5pdGlhbCB0b2tlbiBiYWxhbmNlcy4NCiAgICBmdW5jdGlvbiBIdW1hbmlxVG9rZW4oYWRkcmVzcyBmb3VuZGVyQWRkcmVzcykNCiAgICB7ICAgDQogICAgICAgIC8vIFNldCBmb3VuZGVyIGFkZHJlc3MNCiAgICAgICAgZm91bmRlciA9IGZvdW5kZXJBZGRyZXNzOw0KDQogICAgICAgIC8vIEFsbG9jYXRlIGFsbCBjcmVhdGVkIHRva2VucyBkdXJpbmcgSUNPIHN0YWdlIHRvIGFsbG9jYXRpb25BZGRyZXNzSUNPLg0KICAgICAgICBiYWxhbmNlc1thbGxvY2F0aW9uQWRkcmVzc0lDT10gPSBJQ09TdXBwbHk7DQoNCiAgICAgICAgLy8gQWxsb2NhdGUgYWxsIGNyZWF0ZWQgdG9rZW5zIGR1cmluZyBwcmVJQ08gc3RhZ2UgdG8gYWxsb2NhdGlvbkFkZHJlc3NQcmVJQ08uDQogICAgICAgIGJhbGFuY2VzW2FsbG9jYXRpb25BZGRyZXNzUHJlSUNPXSA9IHByZUlDT1N1cHBseTsNCg0KICAgICAgICAvLyBBbGxvdyBmb3VuZGVyIHRvIGRpc3RyaWJ1dGUgdG9rZW5zIG1pbnRlZCBkdXJpbmcgcHJlSUNPIHN0YWdlDQogICAgICAgIGFsbG93ZWRbYWxsb2NhdGlvbkFkZHJlc3NQcmVJQ09dW2ZvdW5kZXJdID0gcHJlSUNPU3VwcGx5Ow0KDQogICAgICAgIC8vIEdpdmUgMTQgcGVyY2VudCBvZiBhbGwgdG9rZW5zIHRvIGZvdW5kZXJzLg0KICAgICAgICBiYWxhbmNlc1ttdWx0aXNpZ10gPSBkaXYobXVsKElDT1N1cHBseSwgMTQpLCA4Nik7DQoNCiAgICAgICAgLy8gU2V0IGNvcnJlY3QgdG90YWxTdXBwbHkgYW5kIGxpbWl0IG1heGltdW0gdG90YWwgc3VwcGx5Lg0KICAgICAgICB0b3RhbFN1cHBseSA9IGFkZChJQ09TdXBwbHksIGJhbGFuY2VzW211bHRpc2lnXSk7DQogICAgICAgIHRvdGFsU3VwcGx5ID0gYWRkKHRvdGFsU3VwcGx5LCBwcmVJQ09TdXBwbHkpOw0KICAgICAgICBtYXhUb3RhbFN1cHBseSA9IG11bCh0b3RhbFN1cHBseSwgNSk7DQogICAgfQ0KfQ0KDQovLy8gQHRpdGxlIEh1bWFuaXFJQ08gY29udHJhY3QgLSBUYWtlcyBmdW5kcyBmcm9tIHVzZXJzIGFuZCBpc3N1ZXMgdG9rZW5zLg0KLy8vIEBhdXRob3IgRXZnZW55IFl1cnRhZXYgLSA8ZXZnZW55QGV0aGVyaW9ubGFiLmNvbT4NCi8vLyBAYXV0aG9yIEFsZXhleSBCYXNobHlrb3YgLSA8YWxleGV5QGV0aGVyaW9ubGFiLmNvbT4NCmNvbnRyYWN0IEh1bWFuaXFJQ08gaXMgU2FmZU1hdGggew0KDQogICAgLyoNCiAgICAgKiBFeHRlcm5hbCBjb250cmFjdHMNCiAgICAgKi8NCiAgICBIdW1hbmlxVG9rZW4gcHVibGljIGh1bWFuaXFUb2tlbjsNCg0KICAgIC8vIEFkZHJlc3Mgb2YgdGhlIGZvdW5kZXIgb2YgSHVtYW5pcS4NCiAgICBhZGRyZXNzIHB1YmxpYyBmb3VuZGVyID0gMHhjODkwYjFmNTMyZTY3NDk3N2RmZGI3OTFjYWZhZWU4OThkZmE5NjcxOw0KDQogICAgLy8gQWRkcmVzcyB3aGVyZSBhbGwgdG9rZW5zIGNyZWF0ZWQgZHVyaW5nIElDTyBzdGFnZSBpbml0aWFsbHkgYWxsb2NhdGVkDQogICAgYWRkcmVzcyBwdWJsaWMgYWxsb2NhdGlvbkFkZHJlc3MgPSAweDExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTE7DQoNCiAgICAvLyBTdGFydCBkYXRlIG9mIHRoZSBJQ08NCiAgICB1aW50IHB1YmxpYyBzdGFydERhdGUgPSAxNDkxNDMzMjAwOyAgLy8gMjAxNy0wNC0wNSAyMzowMDowMCBVVEMNCg0KICAgIC8vIEVuZCBkYXRlIG9mIHRoZSBJQ08NCiAgICB1aW50IHB1YmxpYyBlbmREYXRlID0gMTQ5MzI0NzYwMDsgIC8vIDIwMTctMDQtMjYgMjM6MDA6MDAgVVRDDQoNCiAgICAvLyBUb2tlbiBwcmljZSB3aXRob3V0IGRpc2NvdW50IGR1cmluZyB0aGUgSUNPIHN0YWdlDQogICAgdWludCBwdWJsaWMgYmFzZVRva2VuUHJpY2UgPSAxMDAwMDAwMDsgLy8gMC4wMDEgRVRILCBjb25zaWRlcmluZyA4IGRlY2ltYWwgcGxhY2VzDQoNCiAgICAvLyBOdW1iZXIgb2YgdG9rZW5zIGRpc3RyaWJ1dGVkIHRvIGludmVzdG9ycw0KICAgIHVpbnQgcHVibGljIHRva2Vuc0Rpc3RyaWJ1dGVkID0gMDsNCg0KICAgIC8qDQogICAgICogIE1vZGlmaWVycw0KICAgICAqLw0KICAgIG1vZGlmaWVyIG9ubHlGb3VuZGVyKCkgew0KICAgICAgICAvLyBPbmx5IGZvdW5kZXIgaXMgYWxsb3dlZCB0byBkbyB0aGlzIGFjdGlvbi4NCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gZm91bmRlcikgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBtb2RpZmllciBtaW5JbnZlc3RtZW50KHVpbnQgaW52ZXN0bWVudCkgew0KICAgICAgICAvLyBVc2VyIGhhcyB0byBzZW5kIGF0IGxlYXN0IHRoZSBldGhlciB2YWx1ZSBvZiBvbmUgdG9rZW4uDQogICAgICAgIGlmIChpbnZlc3RtZW50IDwgYmFzZVRva2VuUHJpY2UpIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIF87DQogICAgfQ0KDQogICAgLy8vIEBkZXYgUmV0dXJucyBjdXJyZW50IGJvbnVzDQogICAgZnVuY3Rpb24gZ2V0Q3VycmVudEJvbnVzKCkNCiAgICAgICAgcHVibGljDQogICAgICAgIGNvbnN0YW50DQogICAgICAgIHJldHVybnMgKHVpbnQpDQogICAgew0KICAgICAgICByZXR1cm4gZ2V0Qm9udXMobm93KTsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBSZXR1cm5zIGJvbnVzIGZvciB0aGUgc3BlY2lmaWMgbW9tZW50DQogICAgLy8vIEBwYXJhbSB0aW1lc3RhbXAgVGltZSBvZiBpbnZlc3RtZW50IChpbiBzZWNvbmRzKQ0KICAgIGZ1bmN0aW9uIGdldEJvbnVzKHVpbnQgdGltZXN0YW1wKQ0KICAgICAgICBwdWJsaWMNCiAgICAgICAgY29uc3RhbnQNCiAgICAgICAgcmV0dXJucyAodWludCkNCiAgICB7ICAgDQogICAgICAgIGlmICh0aW1lc3RhbXAgPiBlbmREYXRlKSB7DQogICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChzdGFydERhdGUgPiB0aW1lc3RhbXApIHsNCiAgICAgICAgICAgIHJldHVybiAxNDk5OyAgLy8gNDkuOSUNCiAgICAgICAgfQ0KDQogICAgICAgIHVpbnQgaWNvRHVyYXRpb24gPSB0aW1lc3RhbXAgLSBzdGFydERhdGU7DQogICAgICAgIGlmIChpY29EdXJhdGlvbiA+PSAxNiBkYXlzKSB7DQogICAgICAgICAgICByZXR1cm4gMTAwMDsgIC8vIDAlDQogICAgICAgIH0gZWxzZSBpZiAoaWNvRHVyYXRpb24gPj0gOSBkYXlzKSB7DQogICAgICAgICAgICByZXR1cm4gMTEyNTsgIC8vIDEyLjUlDQogICAgICAgIH0gZWxzZSBpZiAoaWNvRHVyYXRpb24gPj0gMiBkYXlzKSB7DQogICAgICAgICAgICByZXR1cm4gMTI1MDsgIC8vIDI1JQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIDE0OTk7ICAvLyA0OS45JQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY2FsY3VsYXRlVG9rZW5zKHVpbnQgaW52ZXN0bWVudCwgdWludCB0aW1lc3RhbXApDQogICAgICAgIHB1YmxpYw0KICAgICAgICBjb25zdGFudA0KICAgICAgICByZXR1cm5zICh1aW50KQ0KICAgIHsNCiAgICAgICAgLy8gY2FsY3VsYXRlIGRpc2NvdW50ZWRQcmljZQ0KICAgICAgICB1aW50IGRpc2NvdW50ZWRQcmljZSA9IGRpdihtdWwoYmFzZVRva2VuUHJpY2UsIDEwMDApLCBnZXRCb251cyh0aW1lc3RhbXApKTsNCg0KICAgICAgICAvLyBUb2tlbiBjb3VudCBpcyByb3VuZGVkIGRvd24uIFNlbnQgRVRIIHNob3VsZCBiZSBtdWx0aXBsZXMgb2YgYmFzZVRva2VuUHJpY2UuDQogICAgICAgIHJldHVybiBkaXYoaW52ZXN0bWVudCwgZGlzY291bnRlZFByaWNlKTsNCiAgICB9DQoNCg0KICAgIC8vLyBAZGV2IElzc3VlcyB0b2tlbnMgZm9yIHVzZXJzIHdobyBtYWRlIEJUQyBwdXJjaGFzZXMuDQogICAgLy8vIEBwYXJhbSBiZW5lZmljaWFyeSBBZGRyZXNzIHRoZSB0b2tlbnMgd2lsbCBiZSBpc3N1ZWQgdG8uDQogICAgLy8vIEBwYXJhbSBpbnZlc3RtZW50IEludmVzdGVkIGFtb3VudCBpbiBXZWkNCiAgICAvLy8gQHBhcmFtIHRpbWVzdGFtcCBUaW1lIG9mIGludmVzdG1lbnQgKGluIHNlY29uZHMpDQogICAgZnVuY3Rpb24gZml4SW52ZXN0bWVudChhZGRyZXNzIGJlbmVmaWNpYXJ5LCB1aW50IGludmVzdG1lbnQsIHVpbnQgdGltZXN0YW1wKQ0KICAgICAgICBleHRlcm5hbA0KICAgICAgICBvbmx5Rm91bmRlcg0KICAgICAgICBtaW5JbnZlc3RtZW50KGludmVzdG1lbnQpDQogICAgICAgIHJldHVybnMgKHVpbnQpDQogICAgeyAgIA0KDQogICAgICAgIC8vIENhbGN1bGF0ZSBudW1iZXIgb2YgdG9rZW5zIHRvIG1pbnQNCiAgICAgICAgdWludCB0b2tlbkNvdW50ID0gY2FsY3VsYXRlVG9rZW5zKGludmVzdG1lbnQsIHRpbWVzdGFtcCk7DQoNCiAgICAgICAgLy8gVXBkYXRlIGZ1bmQncyBhbmQgdXNlcidzIGJhbGFuY2UgYW5kIHRvdGFsIHN1cHBseSBvZiB0b2tlbnMuDQogICAgICAgIHRva2Vuc0Rpc3RyaWJ1dGVkID0gYWRkKHRva2Vuc0Rpc3RyaWJ1dGVkLCB0b2tlbkNvdW50KTsNCg0KICAgICAgICAvLyBEaXN0cmlidXRlIHRva2Vucy4NCiAgICAgICAgaWYgKCFodW1hbmlxVG9rZW4udHJhbnNmZXJGcm9tKGFsbG9jYXRpb25BZGRyZXNzLCBiZW5lZmljaWFyeSwgdG9rZW5Db3VudCkpIHsNCiAgICAgICAgICAgIC8vIFRva2VucyBjb3VsZCBub3QgYmUgaXNzdWVkLg0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdG9rZW5Db3VudDsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBDb250cmFjdCBjb25zdHJ1Y3Rvcg0KICAgIGZ1bmN0aW9uIEh1bWFuaXFJQ08oYWRkcmVzcyB0b2tlbkFkZHJlc3MsIGFkZHJlc3MgZm91bmRlckFkZHJlc3MpIHsNCiAgICAgICAgLy8gU2V0IHRva2VuIGFkZHJlc3MNCiAgICAgICAgaHVtYW5pcVRva2VuID0gSHVtYW5pcVRva2VuKHRva2VuQWRkcmVzcyk7DQoNCiAgICAgICAgLy8gU2V0IGZvdW5kZXIgYWRkcmVzcw0KICAgICAgICBmb3VuZGVyID0gZm91bmRlckFkZHJlc3M7DQogICAgfQ0KDQogICAgLy8vIEBkZXYgRmFsbGJhY2sgZnVuY3Rpb24NCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsNCiAgICAgICAgdGhyb3c7DQogICAgfQ0KfQ=='