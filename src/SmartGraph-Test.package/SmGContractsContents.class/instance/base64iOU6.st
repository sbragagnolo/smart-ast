base 64 content
base64iOU6
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoNCiAgQWxsb3dzIGJ1eWVycyB0byBzZWN1cmVseS9jb25maWRlbnRseSBidXkgcmVjZW50IElDTyB0b2tlbnMgdGhhdCBhcmUNCiAgc3RpbGwgbm9uLXRyYW5zZmVycmFibGUsIG9uIGFuIElPVSBiYXNpcy4gTGlrZSBIaXRCVEMsIGJ1dCB3aXRoIHByb3RlY3Rpb24sDQogIGNvbnRyb2wsIGFuZCBndWFyYW50ZWUgb2YgZWl0aGVyIHRoZSBwdXJjaGFzZWQgdG9rZW5zIG9yIEVUSCByZWZ1bmRlZC4NCg0KICBUaGUgQnV5ZXIncyBFVEggd2lsbCBiZSBsb2NrZWQgaW50byB0aGUgY29udHJhY3QgdW50aWwgdGhlIHB1cmNoYXNlZA0KICBJT1UvdG9rZW5zIGFycml2ZSBoZXJlIGFuZCBhcmUgcmVhZHkgZm9yIHRoZSBidXllciB0byBpbnZva2Ugd2l0aGRyYXcoKSwNCiAgT1IgdW50aWwgY3V0LW9mZiB0aW1lIGRlZmluZWQgYmVsb3cgaXMgZXhjZWVkZWQgYW5kIGFzIGEgcmVzdWx0IEVUSA0KICByZWZ1bmRzL3dpdGhkcmF3YWxzIGJlY29tZSBlbmFibGVkLg0KDQogIEluIG90aGVyIHdvcmRzLCB0aGUgc2VsbGVyIG11c3QgZnVsZmlsbCB0aGUgSU9VIHRva2VuIHB1cmNoYXNlcyBhbnkgdGltZQ0KICBiZWZvcmUgdGhlIGN1dC1vZmYgdGltZSBkZWZpbmVkIGJlbG93LCBvdGhlcndpc2UgdGhlIGJ1eWVyIGdhaW5zIHRoZQ0KICBhYmlsaXR5IHRvIHdpdGhkcmF3IHRoZWlyIEVUSC4NCg0KICBUaGUgYnV5ZXIncyBFVEggd2lsbCBPTkxZIGJlIHJlbGVhc2VkIHRvIHRoZSBzZWxsZXIgQUZURVIgdGhlIGFkZXF1YXRlDQogIGFtb3VudCBvZiB0b2tlbnMgaGF2ZSBiZWVuIGRlcG9zaXRlZCBmb3IgQUxMIHB1cmNoYXNlcy4NCg0KICBFc3RpbWF0ZWQgVGltZSBvZiBEaXN0cmlidXRpb246IDMtNSB3ZWVrcyBmcm9tIElDTyBhY2NvcmRpbmcgdG8gVGVuWA0KICBDdXQtb2ZmIFRpbWU6IH4gQXVndXN0IDksIDIwMTcNCg0KICBHcmVldHo6IGJsYXN0LCBjaW50aXgNCiAgZm9vYmFyYml6YXJyZUBnbWFpbC5jb20gKFBsZWFzZSByZXBvcnQgYW55IGZpbmRpbmdzIG9yIHN1Z2dlc3Rpb25zIGZvciBhIDEgRVRIIGJvdW50eSEpDQoNCiAgVGhhbmsgeW91DQoqLw0KDQpjb250cmFjdCBFUkMyMCB7DQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSk7DQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKTsNCn0NCg0KY29udHJhY3QgSU9VIHsNCiAgLy8gU3RvcmUgdGhlIGFtb3VudCBvZiBJT1VzIHB1cmNoYXNlZCBieSBhIGJ1eWVyDQogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGlvdV9wdXJjaGFzZWQ7DQoNCiAgLy8gU3RvcmUgdGhlIGFtb3VudCBvZiBFVEggc2VudCBpbiBieSBhIGJ1eWVyDQogIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGV0aF9zZW50Ow0KDQogIC8vIFRvdGFsIElPVXMgYXZhaWxhYmxlIHRvIHNlbGwNCiAgdWludDI1NiBwdWJsaWMgdG90YWxfaW91X2F2YWlsYWJsZSA9IDIwMDAwMDAwMDAwMDAwMDAwMDAwOw0KDQogIC8vIFRvdGFsIElPVXMgcHVyY2hhc2VkIGJ5IGFsbCBidXllcnMNCiAgdWludDI1NiBwdWJsaWMgdG90YWxfaW91X3B1cmNoYXNlZDsNCg0KICAvLyBUb3RhbCBJT1Ugd2l0aGRyYXduIGJ5IGFsbCBidXllcnMgKGtlZXAgdHJhY2sgdG8gcHJvdGVjdCBidXllcnMpDQogIHVpbnQyNTYgcHVibGljIHRvdGFsX2lvdV93aXRoZHJhd247DQoNCiAgLy8gSU9VIHBlciBFVEggKHByaWNlKQ0KICB1aW50MjU2IHB1YmxpYyBwcmljZV9wZXJfZXRoID0gODYwMDsNCg0KICAvLyAgUEFZIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MgKElPVSBvZmZlcmluZykNCiAgRVJDMjAgcHVibGljIHRva2VuID0gRVJDMjAoMHgwRDg3NzVGNjQ4NDMwNjc5QTcwOUU5OGQyYjBDYjYyNTBkMjg4N0VGKTsNCg0KICAvLyBUaGUgc2VsbGVyJ3MgYWRkcmVzcyAodG8gcmVjZWl2ZSBFVEggdXBvbiBkaXN0cmlidXRpb24sIGFuZCBmb3IgYXV0aGluZyBzYWZldGllcykNCiAgYWRkcmVzcyBzZWxsZXIgPSAweDAwNzkzN2NkNTc5ODc1QTFiOWU0RTQ4NWE0OUVlODE0N0JDMDNhMzc7DQoNCiAgLy8gSGFsdCBmdXJ0aGVyIHB1cmNoYXNlIGFiaWxpdHkganVzdCBpbiBjYXNlDQogIGJvb2wgcHVibGljIGhhbHRfcHVyY2hhc2VzOw0KDQogIC8qDQogICAgU2FmZXR5IHRvIHdpdGhkcmF3IHVuYm91Z2h0IHRva2VucyBiYWNrIHRvIHNlbGxlci4gRW5zdXJlcyB0aGUgYW1vdW50DQogICAgdGhhdCBidXllcnMgc3RpbGwgbmVlZCB0byB3aXRoZHJhdyByZW1haW5zIGF2YWlsYWJsZQ0KICAqLw0KICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VucygpIHsNCiAgICBpZihtc2cuc2VuZGVyICE9IHNlbGxlcikgdGhyb3c7DQogICAgdG9rZW4udHJhbnNmZXIoc2VsbGVyLCB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkgLSAodG90YWxfaW91X3B1cmNoYXNlZCAtIHRvdGFsX2lvdV93aXRoZHJhd24pKTsNCiAgfQ0KDQogIC8qDQogICAgU2FmZXR5IHRvIHByZXZlbnQgYW55bW9yZSBwdXJjaGFzZXMvc2FsZXMgZnJvbSBvY2N1cnJpbmcgaW4gdGhlIGV2ZW50IG9mDQogICAgdW5mb3Jlc2VlbiBpc3N1ZS4gQnV5ZXIgd2l0aGRyYXdhbHMgc3RpbGwgcmVtYWluIGVuYWJsZWQuDQogICovDQogIGZ1bmN0aW9uIGhhbHRQdXJjaGFzZXMoKSB7DQogICAgaWYobXNnLnNlbmRlciAhPSBzZWxsZXIpIHRocm93Ow0KICAgIGhhbHRfcHVyY2hhc2VzID0gdHJ1ZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHJlc3VtZVB1cmNoYXNlcygpIHsNCiAgICBpZihtc2cuc2VuZGVyICE9IHNlbGxlcikgdGhyb3c7DQogICAgaGFsdF9wdXJjaGFzZXMgPSBmYWxzZTsNCiAgfQ0KDQogIC8qDQogICAgVXBkYXRlIGF2YWlsYWJsZSBJT1UgdG8gcHVyY2hhc2UNCiAgKi8NCiAgZnVuY3Rpb24gdXBkYXRlQXZhaWxhYmlsaXR5KHVpbnQyNTYgX2lvdV9hbW91bnQpIHsNCiAgICBpZihtc2cuc2VuZGVyICE9IHNlbGxlcikgdGhyb3c7DQogICAgaWYoX2lvdV9hbW91bnQgPCB0b3RhbF9pb3VfcHVyY2hhc2VkKSB0aHJvdzsNCg0KICAgIHRvdGFsX2lvdV9hdmFpbGFibGUgPSBfaW91X2Ftb3VudDsNCiAgfQ0KDQogIC8qDQogICAgVXBkYXRlIElPVSBwcmljZQ0KICAqLw0KICBmdW5jdGlvbiB1cGRhdGVQcmljZSh1aW50MjU2IF9wcmljZSkgew0KICAgIGlmKG1zZy5zZW5kZXIgIT0gc2VsbGVyKSB0aHJvdzsNCiAgICBwcmljZV9wZXJfZXRoID0gX3ByaWNlOw0KICB9DQoNCiAgLyoNCiAgICBSZWxlYXNlIGJ1eWVyJ3MgRVRIIHRvIHNlbGxlciBPTkxZIGlmIGFtb3VudCBvZiBjb250cmFjdCdzIHRva2VucyBiYWxhbmNlDQogICAgaXMgPj0gdG8gdGhlIGFtb3VudCB0aGF0IHN0aWxsIG5lZWRzIHRvIGJlIHdpdGhkcmF3bi4gUHJvdGVjdHMgYnV5ZXIuDQoNCiAgICBUaGUgc2VsbGVyIG11c3QgY2FsbCB0aGlzIGZ1bmN0aW9uIG1hbnVhbGx5IGFmdGVyIGRlcG9zaXRpbmcgdGhlIGFkZXF1YXRlDQogICAgYW1vdW50IG9mIHRva2VucyBmb3IgYWxsIGJ1eWVycyB0byBjb2xsZWN0LCBhcyBkZWZpbmVkIGJ5IHRvdGFsX2lvdV9wdXJjaGFzZWQNCg0KICAgIFRoaXMgZWZmZWN0aXZlbHkgZW5kcyB0aGUgc2FsZSwgYnV0IHdpdGhkcmF3YWxzIHJlbWFpbiBvcGVuIGluZGVmaW5pdGVseQ0KICAqLw0KICBmdW5jdGlvbiBwYXlTZWxsZXIoKSB7DQogICAgaWYobXNnLnNlbmRlciAhPSBzZWxsZXIpIHRocm93Ow0KDQogICAgLy8gbm90IGVub3VnaCB0b2tlbnMgaW4gYmFsYW5jZSB0byByZWxlYXNlIEVUSCwgcHJvdGVjdCBidXllciBhbmQgYWJvcnQNCiAgICBpZih0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkgPCAodG90YWxfaW91X3B1cmNoYXNlZCAtIHRvdGFsX2lvdV93aXRoZHJhd24pKSB0aHJvdzsNCg0KICAgIC8vIEhhbHQgZnVydGhlciBwdXJjaGFzZXMgdG8gcHJldmVudCBhY2NpZGVudGFsIG92ZXItc2VsbGluZw0KICAgIGhhbHRfcHVyY2hhc2VzID0gdHJ1ZTsNCg0KICAgIC8vIFJlbGVhc2UgYnV5ZXIncyBFVEggdG8gdGhlIHNlbGxlcg0KICAgIHNlbGxlci50cmFuc2Zlcih0aGlzLmJhbGFuY2UpOw0KICB9DQoNCiAgZnVuY3Rpb24gd2l0aGRyYXcoKSBwYXlhYmxlIHsNCiAgICAvKg0KICAgICAgTWFpbiBtZWNoYW5pc20gdG8gZW5zdXJlIGEgYnV5ZXIncyBwdXJjaGFzZS9FVEgvSU9VIGlzIHNhZmUuDQoNCiAgICAgIFJlZnVuZCB0aGUgYnV5ZXIncyBFVEggaWYgd2UncmUgYmV5b25kIHRoZSBjdXQtb2ZmIGRhdGUgb2Ygb3VyIGRpc3RyaWJ1dGlvbg0KICAgICAgcHJvbWlzZSBBTkQgaWYgdGhlIGNvbnRyYWN0IGRvZXNuJ3QgaGF2ZSBhbiBhZGVxdWF0ZSBhbW91bnQgb2YgdG9rZW5zDQogICAgICB0byBkaXN0cmlidXRlIHRvIHRoZSBidXllci4gVGltZS1zZW5zaXRpdmUgYnV5ZXIvRVRIIHByb3RlY3Rpb24gaXMgb25seQ0KICAgICAgYXBwbGljYWJsZSBpZiB0aGUgY29udHJhY3QgZG9lc24ndCBoYXZlIGFkZXF1YXRlIHRva2VucyBmb3IgdGhlIGJ1eWVyLg0KDQogICAgICBUaGUgImFkZXF1YWN5IiBjaGVjayBwcmV2ZW50cyB0aGUgc2VsbGVyIGFuZC9vciB0aGlyZCBwYXJ0eSBhdHRhY2tlcg0KICAgICAgZnJvbSBsb2NraW5nIGRvd24gYnV5ZXJzJyBFVEggYnkgc2VuZGluZyBpbiBhbiBhcmJpdHJhcnkgYW1vdW50IG9mIHRva2Vucy4NCg0KICAgICAgSWYgZm9yIHdoYXRldmVyIHJlYXNvbiB0aGUgdG9rZW5zIHJlbWFpbiBsb2NrZWQgZm9yIGFuIHVuZXhwZWN0ZWQgcGVyaW9kDQogICAgICBiZXlvbmQgdGhlIHRpbWUgZGVmaW5lZCBieSBibG9jay5udW1iZXIsIHBhdGllbnQgYnV5ZXJzIG1heSBzdGlsbCB3YWl0IHVudGlsDQogICAgICB0aGUgY29udHJhY3QgaXMgZmlsbGVkIHdpdGggdGhlaXIgcHVyY2hhc2VkIElPVXMvdG9rZW5zLiBPbmNlIHRoZSB0b2tlbnMNCiAgICAgIGFyZSBoZXJlLCB0aGV5IGNhbiBpbml0aWF0ZSBhIHdpdGhkcmF3KCkgdG8gcmV0cmlldmUgdGhlaXIgdG9rZW5zLiBBdHRlbXB0aW5nDQogICAgICB0byB3aXRoZHJhdyBhbnkgc29vbmVyIChhZnRlciB0aGUgYmxvY2sgaGFzIGJlZW4gbWluZWQsIGJ1dCB0b2tlbnMgbm90IGFycml2ZWQpDQogICAgICB3aWxsIHJlc3VsdCBpbiBhIHJlZnVuZCBvZiBidXllcidzIEVUSC4NCiAgICAqLw0KICAgIGlmKGJsb2NrLm51bWJlciA+IDQxOTk5OTkgJiYgaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXSA+IHRva2VuLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSkgew0KICAgICAgLy8gV2UgZGlkbid0IGZ1bGZpbGwgb3VyIHByb21pc2UgdG8gaGF2ZSBhZGVxdWF0ZSB0b2tlbnMgd2l0aGRyYXdhYmxlIGF0IHh4IHRpbWUNCiAgICAgIC8vIFJlZnVuZCB0aGUgYnV5ZXIncyBFVEggYXV0b21hdGljYWxseSBpbnN0ZWFkDQogICAgICB1aW50MjU2IGV0aF90b19yZWZ1bmQgPSBldGhfc2VudFttc2cuc2VuZGVyXTsNCg0KICAgICAgLy8gSWYgdGhlIHVzZXIgZG9lc24ndCBoYXZlIGFueSBFVEggb3IgdG9rZW5zIHRvIHdpdGhkcmF3LCBnZXQgb3V0IEFTQVANCiAgICAgIGlmKGV0aF90b19yZWZ1bmQgPT0gMCB8fCBpb3VfcHVyY2hhc2VkW21zZy5zZW5kZXJdID09IDApIHRocm93Ow0KDQogICAgICAvLyBBZGp1c3QgdG90YWwgcHVyY2hhc2VkIHNvIG90aGVycyBjYW4gYnV5LCBhbmQgc28gbnVtYmVycyBhbGlnbiB3aXRoIHRvdGFsX2lvdV93aXRoZHJhd24NCiAgICAgIHRvdGFsX2lvdV9wdXJjaGFzZWQgLT0gaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXTsNCg0KICAgICAgLy8gQ2xlYXIgcmVjb3JkIG9mIGJ1eWVyJ3MgRVRIIGFuZCBJT1UgYmFsYW5jZSBiZWZvcmUgcmVmdW5kaW5nDQogICAgICBldGhfc2VudFttc2cuc2VuZGVyXSA9IDA7DQogICAgICBpb3VfcHVyY2hhc2VkW21zZy5zZW5kZXJdID0gMDsNCg0KICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihldGhfdG9fcmVmdW5kKTsNCiAgICAgIHJldHVybjsNCiAgICB9DQoNCiAgICAvKg0KICAgICAgQ2hlY2sgaWYgdGhlcmUgaXMgYW4gYWRlcXVhdGUgYW1vdW50IG9mIHRva2VucyBpbiB0aGUgY29udHJhY3QgeWV0DQogICAgICBhbmQgYWxsb3cgdGhlIGJ1eWVyIHRvIHdpdGhkcmF3IHRva2VucyBhbmQgcmVsZWFzZSBFVEggdG8gdGhlIHNlbGxlciBpZiBzbw0KICAgICovDQogICAgaWYodG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpID09IDAgfHwgaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXSA+IHRva2VuLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSkgdGhyb3c7DQoNCiAgICB1aW50MjU2IGlvdV90b193aXRoZHJhdyA9IGlvdV9wdXJjaGFzZWRbbXNnLnNlbmRlcl07DQoNCiAgICAvLyBJZiB0aGUgdXNlciBkb2Vzbid0IGhhdmUgYW55IElPVXMgdG8gd2l0aGRyYXcvcmVsZWFzZSwgZ2V0IG91dCBBU0FQDQogICAgaWYoaW91X3RvX3dpdGhkcmF3ID09IDApIHRocm93Ow0KDQogICAgLy8gQ2xlYXIgcmVjb3JkIG9mIGJ1eWVyJ3MgSU9VIGFuZCBFVEggYmFsYW5jZSBiZWZvcmUgdHJhbnNmZXJyaW5nIG91dA0KICAgIGlvdV9wdXJjaGFzZWRbbXNnLnNlbmRlcl0gPSAwOw0KICAgIGV0aF9zZW50W21zZy5zZW5kZXJdID0gMDsNCg0KICAgIHRvdGFsX2lvdV93aXRoZHJhd24gKz0gaW91X3RvX3dpdGhkcmF3Ow0KDQogICAgLy8gRGlzdHJpYnV0ZSB0b2tlbnMgdG8gdGhlIGJ1eWVyDQogICAgdG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgaW91X3RvX3dpdGhkcmF3KTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHB1cmNoYXNlKCkgcGF5YWJsZSB7DQogICAgaWYoaGFsdF9wdXJjaGFzZXMpIHRocm93Ow0KDQogICAgLy8gRGV0ZXJtaW5lIGFtb3VudCBvZiB0b2tlbnMgdXNlciB3YW50cyB0by9jYW4gYnV5DQogICAgdWludDI1NiBpb3VfdG9fcHVyY2hhc2UgPSBwcmljZV9wZXJfZXRoICogbXNnLnZhbHVlOyAvLyBwcmljZSBpcyAxNjAgcGVyIEVUSA0KDQogICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggSU9VcyBsZWZ0IHRvIHNlbGwNCiAgICBpZigodG90YWxfaW91X3B1cmNoYXNlZCArIGlvdV90b19wdXJjaGFzZSkgPiB0b3RhbF9pb3VfYXZhaWxhYmxlKSB0aHJvdzsNCg0KICAgIC8vIFVwZGF0ZSB0aGUgYW1vdW50IG9mIElPVXMgcHVyY2hhc2VkIGJ5IHVzZXIuIEFsc28ga2VlcCB0cmFjayBvZiB0aGUgdG90YWwgRVRIIHRoZXkgc2VudCBpbg0KICAgIGlvdV9wdXJjaGFzZWRbbXNnLnNlbmRlcl0gKz0gaW91X3RvX3B1cmNoYXNlOw0KICAgIGV0aF9zZW50W21zZy5zZW5kZXJdICs9IG1zZy52YWx1ZTsNCg0KICAgIC8vIFVwZGF0ZSB0aGUgdG90YWwgYW1vdW50IG9mIElPVXMgcHVyY2hhc2VkIGJ5IGFsbCBidXllcnMNCiAgICB0b3RhbF9pb3VfcHVyY2hhc2VkICs9IGlvdV90b19wdXJjaGFzZTsNCiAgfQ0KDQogIC8vIEZhbGxiYWNrIGZ1bmN0aW9uL2VudHJ5IHBvaW50DQogIGZ1bmN0aW9uICgpIHBheWFibGUgew0KICAgIGlmKG1zZy52YWx1ZSA9PSAwKSB7DQogICAgICB3aXRoZHJhdygpOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgIHB1cmNoYXNlKCk7DQogICAgfQ0KICB9DQp9'