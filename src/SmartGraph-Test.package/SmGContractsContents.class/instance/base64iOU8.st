base 64 content
base64iOU8
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KY29udHJhY3QgRVJDMjAgew0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpOw0KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgYmFsYW5jZSk7DQp9DQoNCmNvbnRyYWN0IElPVSB7DQogIC8vIFN0b3JlIHRoZSBhbW91bnQgb2YgSU9VcyBwdXJjaGFzZWQgYnkgYSBidXllcg0KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBpb3VfcHVyY2hhc2VkOw0KDQogIC8vIFN0b3JlIHRoZSBhbW91bnQgb2YgRVRIIHNlbnQgaW4gYnkgYSBidXllcg0KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBldGhfc2VudDsNCg0KICAvLyBUb3RhbCBJT1VzIGF2YWlsYWJsZSB0byBzZWxsDQogIHVpbnQyNTYgcHVibGljIHRvdGFsX2lvdV9hdmFpbGFibGUgPSAyMDAwMDAwMDAwMDAwMDAwMDAwMDsNCg0KICAvLyBUb3RhbCBJT1VzIHB1cmNoYXNlZCBieSBhbGwgYnV5ZXJzDQogIHVpbnQyNTYgcHVibGljIHRvdGFsX2lvdV9wdXJjaGFzZWQ7DQoNCiAgLy8gIEJBVCB0b2tlbiBjb250cmFjdCBhZGRyZXNzIChJT1Ugb2ZmZXJpbmcpDQogIEVSQzIwIHB1YmxpYyB0b2tlbiA9IEVSQzIwKDB4MEQ4Nzc1RjY0ODQzMDY3OUE3MDlFOThkMmIwQ2I2MjUwZDI4ODdFRik7DQoNCiAgLy8gVGhlIHNlbGxlcidzIGFkZHJlc3MgKHRvIHJlY2VpdmUgRVRIIHVwb24gZGlzdHJpYnV0aW9uLCBhbmQgZm9yIGF1dGggd2l0aGRyYXdUb2tlbnMoKSkNCiAgYWRkcmVzcyBzZWxsZXIgPSAweDAwMjAzRjViMjdDQjY4OGE0MDJmQkRCZGQyRWFGODU0MmZmRjcyQjY7DQoNCiAgLy8gU2FmZXR5IHRvIHdpdGhkcmF3IGFsbCB0b2tlbnMgYmFjayB0byBzZWxsZXIgaW4gdGhlIGV2ZW50IGFueSBnZXQgc3RyYW5kZWQNCiAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbnMoKSB7DQogICAgaWYobXNnLnNlbmRlciAhPSBzZWxsZXIpIHRocm93Ow0KICAgIHRva2VuLnRyYW5zZmVyKHNlbGxlciwgdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHdpdGhkcmF3RXRoKCkgew0KICAgIGlmKG1zZy5zZW5kZXIgIT0gc2VsbGVyKSB0aHJvdzsNCiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7DQogIH0NCg0KICBmdW5jdGlvbiBraWxseWEoKSB7DQogICAgaWYobXNnLnNlbmRlciAhPSBzZWxsZXIpIHRocm93Ow0KICAgIHNlbGZkZXN0cnVjdChzZWxsZXIpOw0KICB9DQoNCiAgZnVuY3Rpb24gd2l0aGRyYXcoKSBwYXlhYmxlIHsNCiAgICAvKg0KICAgICAgTWFpbiBtZWNoYW5pc20gdG8gZW5zdXJlIGEgYnV5ZXIncyBwdXJjaGFzZS9FVEgvSU9VIGlzIHNhZmUuDQoNCiAgICAgIFJlZnVuZCB0aGUgYnV5ZXIncyBFVEggaWYgd2UncmUgYmV5b25kIHRoZSBkYXRlIG9mIG91ciBkaXN0cmlidXRpb24NCiAgICAgIHByb21pc2UgQU5EIGlmIHRoZSBjb250cmFjdCBkb2Vzbid0IGhhdmUgYW4gYWRlcXVhdGUgYW1vdW50IG9mIHRva2Vucw0KICAgICAgdG8gZGlzdHJpYnV0ZSB0byB0aGUgYnV5ZXIuIElmIHdlJ3JlIGJleW9uZCB0aGUgZ2l2ZW4gZGF0ZSwgeWV0IHRoZXJlDQogICAgICBpcyBhbiBhZGVxdWF0ZSBhbW91bnQgb2YgdG9rZW5zIGluIHRoZSBjb250cmFjdCdzIGJhbGFuY2UsIHRoZW4gdGhlDQogICAgICBidXllciBjYW4gd2l0aGRyYXcgYWNjb3JkaW5nbHkuIFRoaXMgYWxsb3dzIGJ1eWVycyB0byB3aXRoZHJhdyB3ZWxsDQogICAgICBpbnRvIHRoZSBmdXR1cmUgaWYgdGhleSBuZWVkIHRvLiBJdCBhbHNvIGFsbG93cyB1cyB0byBleHRlbmQgdGhlIHNhbGUuDQogICAgICBUaW1lLXNlbnNpdGl2ZSBFVEggcHJvdGVjdGlvbiBpcyBvbmx5IGFwcGxpY2FibGUgaWYgdGhlIGNvbnRyYWN0DQogICAgICBkb2Vzbid0IGhhdmUgYWRlcXVhdGUgdG9rZW5zIGZvciB0aGUgYnV5ZXIuDQoNCiAgICAgIFRoZSAiYWRlcXVhY3kiIGNoZWNrIHByZXZlbnRzIHRoZSBzZWxsZXIgYW5kL29yIHRoaXJkIHBhcnR5IGF0dGFja2VyDQogICAgICBmcm9tIGxvY2tpbmcgZG93biBidXllcnMnIEVUSC4gaS5lLiBUaGUgYXR0YWNrZXIgc2VuZHMgMSB0b2tlbiBpbnRvIG91cg0KICAgICAgY29udHJhY3QgdG8gZmFsc2VseSBzaWduYWwgdGhhdCB0aGUgY29udHJhY3QgaGFzIGJlZW4gZmlsbGVkIGFuZCBpcyByZWFkeQ0KICAgICAgZm9yIHRva2VuIGRpc3RyaWJ1dGlvbi4gSWYgd2Ugc2ltcGx5IGNoZWNrIGZvciBhID4wIHRva2VuIGJhbGFuY2UsIHdlIHJpc2sNCiAgICAgIGRpc3RyaWJ1dGlvbiBlcnJvcnMgQU5EIHN0cmFuZGluZy9sb2NraW5nIHRoZSBidXllcidzIEVUSC4NCg0KICAgICAgVE9ETzogY29uZmlybSB0aGVyZSBhcmUgbm8gbG9naWNhbCBlcnJvcnMgdGhhdCB3aWxsIGFsbG93IGEgYnV5ZXIvYXR0YWNrZXIgdG8NCiAgICAgICAgICAgIHdpdGhkcmF3IEVUSCBlYXJseS91bmF1dGhvcml6ZWQvZG91Ymx5L2V0Yw0KICAgICovDQogICAgaWYoYmxvY2subnVtYmVyID4gMzk0MzM2NSAmJiBpb3VfcHVyY2hhc2VkW21zZy5zZW5kZXJdID4gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpKSB7DQogICAgICAvLyBXZSBkaWRuJ3QgZnVsZmlsbCBvdXIgcHJvbWlzZSB0byBoYXZlIGFkZXF1YXRlIHRva2VucyB3aXRoZHJhd2FibGUgYXQgeHggdGltZS4NCiAgICAgIC8vIFJlZnVuZCB0aGUgYnV5ZXIncyBFVEggYXV0b21hdGljYWxseSBpbnN0ZWFkLg0KICAgICAgdWludDI1NiBldGhfdG9fcmVmdW5kID0gZXRoX3NlbnRbbXNnLnNlbmRlcl07DQoNCiAgICAgIC8vIElmIHRoZSB1c2VyIGRvZXNuJ3QgaGF2ZSBhbnkgRVRIIG9yIHRva2VucyB0byB3aXRoZHJhdywgZ2V0IG91dCBBU0FQDQogICAgICBpZihldGhfdG9fcmVmdW5kID09IDAgfHwgaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXSA9PSAwKSB0aHJvdzsNCg0KICAgICAgLy8gQWRqdXN0IHRvdGFsIGFjY3VyYXRlbHkgaW4gdGhlIGV2ZW50IHdlIGFsbG93IHB1cmNoYXNlcyBpbiB0aGUgZnV0dXJlDQogICAgICB0b3RhbF9pb3VfcHVyY2hhc2VkIC09IGlvdV9wdXJjaGFzZWRbbXNnLnNlbmRlcl07DQoNCiAgICAgIC8vIENsZWFyIHJlY29yZCBvZiBidXllcidzIEVUSCBhbmQgSU9VIGJhbGFuY2UgYmVmb3JlIHJlZnVuZGluZw0KICAgICAgZXRoX3NlbnRbbXNnLnNlbmRlcl0gPSAwOw0KICAgICAgaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXSA9IDA7DQoNCiAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoZXRoX3RvX3JlZnVuZCk7DQogICAgICByZXR1cm47IC8vID8NCiAgICB9DQoNCiAgICAvKg0KICAgICAgQXQgdGhpcyBwb2ludCwgd2UgYXJlIHN0aWxsIGJlZm9yZSBvdXIgZGlzdHJpYnV0aW9uIGRhdGUgcHJvbWlzZS4NCiAgICAgIENoZWNrIGlmIHRoZXJlIGlzIGFuIGFkZXF1YXRlIGFtb3VudCBvZiB0b2tlbnMgaW4gdGhlIGNvbnRyYWN0IHlldA0KICAgICAgYW5kIGFsbG93IGJ1eWVyJ3MgdG9rZW4gd2l0aGRyYXdhbCBhbmQgc2VsbGVyJ3MgRVRIIGRpc3RyaWJ1dGlvbiBpZiBzby4NCg0KICAgICAgVE9ETzogY29uZmlybSB0aGVyZSBhcmUgbm8gbG9naWNhbCBlcnJvcnMgdGhhdCB3aWxsIGFsbG93IGEgYnV5ZXIvYXR0YWNrZXIgdG8NCiAgICAgICAgICAgIHdpdGhkcmF3IElPVSB0b2tlbnMgZWFybHkvdW5hdXRob3JpemVkL2RvdWJseS9ldGMNCiAgICAqLw0KICAgIGlmKHRva2VuLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSA9PSAwIHx8IGlvdV9wdXJjaGFzZWRbbXNnLnNlbmRlcl0gPiB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkpIHRocm93Ow0KDQogICAgdWludDI1NiBpb3VfdG9fd2l0aGRyYXcgPSBpb3VfcHVyY2hhc2VkW21zZy5zZW5kZXJdOw0KICAgIHVpbnQyNTYgZXRoX3RvX3JlbGVhc2UgPSBldGhfc2VudFttc2cuc2VuZGVyXTsNCg0KICAgIC8vIElmIHRoZSB1c2VyIGRvZXNuJ3QgaGF2ZSBhbnkgSU9VcyBvciBFVEggdG8gd2l0aGRyYXcvcmVsZWFzZSwgZ2V0IG91dCBBU0FQDQogICAgaWYoaW91X3RvX3dpdGhkcmF3ID09IDAgfHwgZXRoX3RvX3JlbGVhc2UgPT0gMCkgdGhyb3c7DQoNCiAgICAvLyBDbGVhciByZWNvcmQgb2YgYnV5ZXIncyBJT1UgYW5kIEVUSCBiYWxhbmNlIGJlZm9yZSB0cmFuc2ZlcnJpbmcgb3V0DQogICAgaW91X3B1cmNoYXNlZFttc2cuc2VuZGVyXSA9IDA7DQogICAgZXRoX3NlbnRbbXNnLnNlbmRlcl0gPSAwOw0KDQogICAgLy8gRGlzdHJpYnV0ZSB0b2tlbnMgdG8gdGhlIGJ1eWVyDQogICAgdG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgaW91X3RvX3dpdGhkcmF3KTsNCg0KICAgIC8vIFJlbGVhc2UgYnV5ZXIncyBFVEggdG8gdGhlIHNlbGxlcg0KICAgIHNlbGxlci50cmFuc2ZlcihldGhfdG9fcmVsZWFzZSk7DQogIH0NCg0KICBmdW5jdGlvbiBwdXJjaGFzZSgpIHBheWFibGUgew0KICAgIC8vIENoZWNrIGZvciBwcmUtZGV0ZXJtaW5lZCBzYWxlIHN0YXJ0IHRpbWUNCiAgICAvL2lmKGJsb2NrLm51bWJlciA8IDM5NjA5OTApIHRocm93Ow0KICAgIC8vIENoZWNrIGlmIHNhbGUgd2luZG93IGlzIHN0aWxsIG9wZW4gb3Igbm90IChkYXRlIG9mIHByb21pc2VkIGRpc3RyaWJ1dGlvbiAtIGdyYWNlPykNCiAgICAvL2lmKGJsb2NrLm51bWJlciA+IDM5OTA5OTApIHRocm93Ow0KDQogICAgLy8gRGV0ZXJtaW5lIGFtb3VudCBvZiB0b2tlbnMgdXNlciB3YW50cyB0by9jYW4gYnV5DQogICAgdWludDI1NiBpb3VfdG9fcHVyY2hhc2UgPSA4NjAwICogbXNnLnZhbHVlOyAvLyBwcmljZSBpcyA4NjAwIHBlciBFVEgNCg0KICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIElPVXMgbGVmdCB0byBzZWxsDQogICAgaWYoKHRvdGFsX2lvdV9wdXJjaGFzZWQgKyBpb3VfdG9fcHVyY2hhc2UpID4gdG90YWxfaW91X2F2YWlsYWJsZSkgdGhyb3c7DQoNCiAgICAvLyBVcGRhdGUgdGhlIGFtb3VudCBvZiBJT1VzIHB1cmNoYXNlZCBieSB1c2VyLiBBbHNvIGtlZXAgdHJhY2sgb2YgdGhlIHRvdGFsIEVUSCB0aGV5IHNlbnQgaW4NCiAgICBpb3VfcHVyY2hhc2VkW21zZy5zZW5kZXJdICs9IGlvdV90b19wdXJjaGFzZTsNCiAgICBldGhfc2VudFttc2cuc2VuZGVyXSArPSBtc2cudmFsdWU7DQoNCiAgICAvLyBVcGRhdGUgdGhlIHRvdGFsIGFtb3VudCBvZiBJT1VzIHB1cmNoYXNlZCBieSBhbGwgYnV5ZXJzDQogICAgdG90YWxfaW91X3B1cmNoYXNlZCArPSBpb3VfdG9fcHVyY2hhc2U7DQogIH0NCg0KICAvLyBGYWxsYmFjayBmdW5jdGlvbi9lbnRyeSBwb2ludA0KICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsNCiAgICBpZihtc2cudmFsdWUgPT0gMCkgeyAvLyBJZiB0aGUgdXNlciBzZW50IGEgMCBFVEggdHJhbnNhY3Rpb24sIHdpdGhkcmF3KCkNCiAgICAgIHdpdGhkcmF3KCk7DQogICAgfQ0KICAgIGVsc2UgeyAvLyBJZiB0aGUgdXNlciBzZW50IEVUSCwgcHVyY2hhc2UgSU9VDQogICAgICBwdXJjaGFzZSgpOw0KICAgIH0NCiAgfQ0KfQ=='