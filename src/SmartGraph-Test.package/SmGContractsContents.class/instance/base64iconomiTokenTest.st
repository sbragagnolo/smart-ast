base 64 content
base64iconomiTokenTest
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4wOw0KDQpjb250cmFjdCBJY29ub21pVG9rZW4gew0KDQogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsNCiAgZXZlbnQgQmxvY2tMb2NrU2V0KHVpbnQyNTYgX3ZhbHVlKTsNCiAgZXZlbnQgTmV3T3duZXIoYWRkcmVzcyBfbmV3T3duZXIpOw0KDQogIG1vZGlmaWVyIG9ubHlPd25lciB7DQogICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHsNCiAgICAgIF87DQogICAgfQ0KICB9DQoNCiAgbW9kaWZpZXIgYmxvY2tMb2NrKGFkZHJlc3MgX3NlbmRlcikgew0KICAgIGlmICghaXNMb2NrZWQoKSB8fCBfc2VuZGVyID09IG93bmVyKSB7DQogICAgICBfOw0KICAgIH0NCiAgfQ0KDQogIG1vZGlmaWVyIGNoZWNrSWZUb0NvbnRyYWN0KGFkZHJlc3MgX3RvKSB7DQogICAgaWYoX3RvICE9IGFkZHJlc3ModGhpcykpICB7DQogICAgICBfOw0KICAgIH0NCiAgfQ0KDQogIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Ow0KICBzdHJpbmcgcHVibGljIG5hbWU7DQogIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsNCiAgc3RyaW5nIHB1YmxpYyBzeW1ib2w7DQogIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICcwLjAuMSc7DQogIGFkZHJlc3MgcHVibGljIG93bmVyOw0KICB1aW50MjU2IHB1YmxpYyBsb2NrZWRVbnRpbEJsb2NrOw0KDQogIGZ1bmN0aW9uIEljb25vbWlUb2tlbigNCiAgICB1aW50MjU2IF9pbml0aWFsQW1vdW50LA0KICAgIHN0cmluZyBfdG9rZW5OYW1lLA0KICAgIHVpbnQ4IF9kZWNpbWFsVW5pdHMsDQogICAgc3RyaW5nIF90b2tlblN5bWJvbCwNCiAgICB1aW50MjU2IF9sb2NrZWRVbnRpbEJsb2NrDQogICAgKSB7DQogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBfaW5pdGlhbEFtb3VudDsNCiAgICB0b3RhbFN1cHBseSA9IF9pbml0aWFsQW1vdW50Ow0KICAgIG5hbWUgPSBfdG9rZW5OYW1lOw0KICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsNCiAgICBzeW1ib2wgPSBfdG9rZW5TeW1ib2w7DQogICAgbG9ja2VkVW50aWxCbG9jayA9IF9sb2NrZWRVbnRpbEJsb2NrOw0KICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgfQ0KDQogIC8qIEFwcHJvdmVzIGFuZCB0aGVuIGNhbGxzIHRoZSByZWNlaXZpbmcgY29udHJhY3QgKi8NCiAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7DQoNCiAgICAvL2NhbGwgdGhlIHJlY2VpdmVBcHByb3ZhbCBmdW5jdGlvbiBvbiB0aGUgY29udHJhY3QgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQuIFRoaXMgY3JhZnRzIHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgbWFudWFsbHkgc28gb25lIGRvZXNuJ3QgaGF2ZSB0byBpbmNsdWRlIGEgY29udHJhY3QgaW4gaGVyZSBqdXN0IGZvciB0aGlzLg0KICAgIC8vcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbkNvbnRyYWN0LCBieXRlcyBfZXh0cmFEYXRhKQ0KICAgIC8vaXQgaXMgYXNzdW1lZCB0aGF0IHdoZW4gZG9lcyB0aGlzIHRoYXQgdGhlIGNhbGwgKnNob3VsZCogc3VjY2VlZCwgb3RoZXJ3aXNlIG9uZSB3b3VsZCB1c2UgdmFuaWxsYSBhcHByb3ZlIGluc3RlYWQuDQogICAgaWYoIV9zcGVuZGVyLmNhbGwoYnl0ZXM0KHNoYTMoInJlY2VpdmVBcHByb3ZhbChhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyxieXRlcykiKSksIG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSkpIHsgdGhyb3c7IH0NCiAgICByZXR1cm4gdHJ1ZTsNCg0KICB9DQoNCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBibG9ja0xvY2sobXNnLnNlbmRlcikgY2hlY2tJZlRvQ29udHJhY3QoX3RvKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgew0KICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQogICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9IGVsc2Ugew0KICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICB9DQoNCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgYmxvY2tMb2NrKF9mcm9tKSBjaGVja0lmVG9Db250cmFjdChfdG8pIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsNCiAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsNCiAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9IGVsc2Ugew0KICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICB9DQoNCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsNCiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgew0KICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICB9DQoNCiAgZnVuY3Rpb24gc2V0QmxvY2tMb2NrKHVpbnQyNTYgX2xvY2tlZFVudGlsQmxvY2spIG9ubHlPd25lciByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICBsb2NrZWRVbnRpbEJsb2NrID0gX2xvY2tlZFVudGlsQmxvY2s7DQogICAgQmxvY2tMb2NrU2V0KF9sb2NrZWRVbnRpbEJsb2NrKTsNCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzTG9ja2VkKCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgcmV0dXJuIGxvY2tlZFVudGlsQmxvY2sgPiBibG9jay5udW1iZXI7DQogIH0NCg0KICBmdW5jdGlvbiByZXBsYWNlT3duZXIoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHlPd25lciByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICBvd25lciA9IF9uZXdPd25lcjsNCiAgICBOZXdPd25lcihfbmV3T3duZXIpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsNCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOw0KfQ0KDQoNCmNvbnRyYWN0IEljb25vbWlUb2tlblRlc3QgaXMgSWNvbm9taVRva2VuIHsNCiAgZnVuY3Rpb24gSWNvbm9taVRva2VuVGVzdCgNCiAgICB1aW50MjU2IF9pbml0aWFsQW1vdW50LA0KICAgIHN0cmluZyBfdG9rZW5OYW1lLA0KICAgIHVpbnQ4IF9kZWNpbWFsVW5pdHMsDQogICAgc3RyaW5nIF90b2tlblN5bWJvbCwNCiAgICB1aW50MjU2IF9sb2NrZWRVbnRpbEJsb2NrDQogICAgKSBJY29ub21pVG9rZW4oX2luaXRpYWxBbW91bnQsIF90b2tlbk5hbWUsIF9kZWNpbWFsVW5pdHMsIF90b2tlblN5bWJvbCwgX2xvY2tlZFVudGlsQmxvY2spIHsNCiAgfQ0KDQogIGZ1bmN0aW9uIGRlc3RydWN0KCkgb25seU93bmVyIHsNCiAgICBzZWxmZGVzdHJ1Y3Qob3duZXIpOw0KICB9DQp9'