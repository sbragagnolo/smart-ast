base 64 content
base64jackPot
	^'Y29udHJhY3QgSmFja1BvdCB7DQogICAgYWRkcmVzcyBwdWJsaWMgaG9zdDsNCgl1aW50IG1pbkFtb3VudDsNCiAgICB1aW50W10gcHVibGljIGNvbnRyaWJ1dGlvbnM7DQogICAgYWRkcmVzc1tdIHB1YmxpYyBjb250cmlidXRvcnM7DQoJdWludCBwdWJsaWMgbnVtUGxheWVyczsNCgl1aW50IHB1YmxpYyBuZXh0RHJhdzsNCglieXRlczMyIHB1YmxpYyBzZWVkSGFzaDsNCglieXRlczMyIHJhbmRvbTsJDQoNCiAgICBzdHJ1Y3QgV2luIHsNCiAgICAgICAgYWRkcmVzcyB3aW5uZXI7DQogICAgICAgIHVpbnQgdGltZXN0YW1wOw0KICAgICAgICB1aW50IGNvbnRyaWJ1dGlvbjsNCgkJdWludCBhbW91bnRXb247DQogICAgfQ0KDQogICAgV2luW10gcHVibGljIHJlY2VudFdpbnM7DQogICAgdWludCByZWNlbnRXaW5zQ291bnQgPSAxMDsNCgkNCglmdW5jdGlvbiBpbnNlcnRfY29udHJpYnV0aW9uKGFkZHJlc3MgYWRkciwgdWludCB2YWx1ZSkgaW50ZXJuYWwgew0KCQkvLyBjaGVjayBpZiBhcnJheSBuZWVkcyBleHRlbmRpbmcNCgkJaWYobnVtUGxheWVycyA9PSBjb250cmlidXRpb25zLmxlbmd0aCkgew0KCQkJLy8gZXh0ZW5kIHRoZSBhcnJheXMNCgkJCWNvbnRyaWJ1dGlvbnMubGVuZ3RoICs9IDE7DQoJCQljb250cmlidXRvcnMubGVuZ3RoICs9IDE7DQoJCX0NCgkJY29udHJpYnV0aW9uc1tudW1QbGF5ZXJzXSA9IHZhbHVlOw0KCQljb250cmlidXRvcnNbbnVtUGxheWVycysrXSA9IGFkZHI7DQoJfQ0KCQ0KCWZ1bmN0aW9uIGdldENvbnRyaWJ1dGlvbnMoYWRkcmVzcyBhZGRyKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7DQogICAgICAgIHVpbnQgaTsNCiAgICAgICAgZm9yIChpPTA7IGkgPCBudW1QbGF5ZXJzOyBpKyspIHsNCgkJCWlmIChjb250cmlidXRvcnNbaV0gPT0gYWRkcikgeyAvLyBpZiBpbiB0aGUgbGlzdCBhbHJlYWR5DQoJCQkJYnJlYWs7DQoJCQl9DQoJCX0NCgkJDQoJCWlmKGkgPT0gbnVtUGxheWVycykgeyAvLyBEaWQgbm90IGZpbmQgc2VuZGVyIGFscmVhZHkgaW4gdGhlIGxpc3QNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICB9IGVsc2Ugew0KCQkJcmV0dXJuIGNvbnRyaWJ1dGlvbnNbaV07DQoJCX0NCiAgICB9DQoJDQoJZnVuY3Rpb24gSmFja1BvdCgpIHsNCiAgICAgICAgaG9zdCA9IG1zZy5zZW5kZXI7DQoJCXNlZWRIYXNoID0gc2hhMygnYWFhYScpOw0KCQltaW5BbW91bnQgPSAxMCAqIDEgZmlubmV5Ow0KICAgICAgICByZWNlbnRXaW5zQ291bnQgPSAxMDsNCgkJbmV4dERyYXcgPSAxMjM0Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uKCkgew0KICAgICAgICBhZGRUb0NvbnRyaWJ1dGlvbigpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFkZFRvQ29udHJpYnV0aW9uKCkgew0KICAgICAgICBhZGRWYWx1ZVRvQ29udHJpYnV0aW9uKG1zZy52YWx1ZSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYWRkVmFsdWVUb0NvbnRyaWJ1dGlvbih1aW50IHZhbHVlKSBpbnRlcm5hbCB7DQogICAgICAgIC8vIEZpcnN0LCBtYWtlIHN1cmUgdGhpcyBpcyBhIHZhbGlkIHRyYW5zYWN0aW9uLg0KICAgICAgICBpZih2YWx1ZSA8IG1pbkFtb3VudCkgdGhyb3c7DQoJICAgIHVpbnQgaTsNCiAgICAgICAgZm9yIChpPTA7IGkgPCBudW1QbGF5ZXJzOyBpKyspIHsNCgkJCWlmIChjb250cmlidXRvcnNbaV0gPT0gbXNnLnNlbmRlcikgeyAvLyBBbHJlYWR5IGNvbnRyaWJ1dGVkPw0KCQkJCWJyZWFrOw0KCQkJfQ0KCQl9DQoJCQ0KCQlpZihpID09IG51bVBsYXllcnMpIHsgLy8gRGlkIG5vdCBmaW5kIHNlbmRlciBhbHJlYWR5IGluIHRoZSBsaXN0DQoJCQlpbnNlcnRfY29udHJpYnV0aW9uKG1zZy5zZW5kZXIsIHZhbHVlKTsNCiAgICAgICAgfSBlbHNlIHsNCgkJCWNvbnRyaWJ1dGlvbnNbaV0rPSB2YWx1ZTsgLy8gVXBkYXRlIGFtb3VudA0KCQl9DQoJCQ0KCQlyYW5kb20gPSBzaGEzKHJhbmRvbSwgYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDEpKTsJCQ0KICAgIH0NCgkNCgkvL2RyYXdQb3QgdHJpZ2dlcmVkIGZyb20gSG9zdCBhZnRlciB0aW1lIGhhcyBwYXNzZWQgb3IgcG90IGlzIG1hdHVyZWQuDQoJZnVuY3Rpb24gZHJhd1BvdChzdHJpbmcgc2VlZCwgc3RyaW5nIG5ld1NlZWQpIHsNCgkJaWYobXNnLnNlbmRlciAhPSBob3N0KSB0aHJvdzsNCgkJaWYgKHNoYTMoc2VlZCkgPT0gc2VlZEhhc2gpIHsNCgkJCQ0KCQkJLy8gSW5pdGlhbGl6ZSBzZWVkSGFzaCBmb3IgbmV4dCBkcmF3DQoJCQlzZWVkSGFzaCA9IHNoYTMobmV3U2VlZCk7DQoJCQkvLyBDaG9vc2UgYSB3aW5uZXIgdXNpbmcgdGhlIHNlZWQgYXMgcmFuZG9tDQoJCQl1aW50IHdpbm5lcl9pbmRleCA9IHNlbGVjdFdpbm5lcihzZWVkKTsNCg0KCQkJLy8gU2VuZCB0aGUgZGV2ZWxvcGVyIGEgMSUgZmVlDQoJCQlob3N0LnNlbmQodGhpcy5iYWxhbmNlIC8gMTAwKTsNCgkJCQ0KCQkJdWludCBhbW91bnRXb24gPSB0aGlzLmJhbGFuY2U7IA0KCQkJDQoJCQkvLyBTZW5kIHRoZSB3aW5uZXIgdGhlIHJlbWFpbmluZyBiYWxhbmNlIG9uIHRoZSBjb250cmFjdC4NCgkJCWNvbnRyaWJ1dG9yc1t3aW5uZXJfaW5kZXhdLnNlbmQodGhpcy5iYWxhbmNlKTsNCgkJCQ0KCQkJLy8gTWFrZSBhIG5vdGUgdGhhdCBzb21lb25lIHdvbiwgdGhlbiBzdGFydCBhbGwgb3ZlciENCgkJCXJlY29yZFdpbih3aW5uZXJfaW5kZXgsIGFtb3VudFdvbik7DQoNCgkJCXJlc2V0KCk7DQoJCQluZXh0RHJhdyA9IG5vdyArIDcgZGF5czsJDQoNCgkJfQ0KCX0NCg0KCWZ1bmN0aW9uIHNldERyYXdEYXRlKHVpbnQgX25ld0RyYXcpIHsNCgkJaWYobXNnLnNlbmRlciAhPSBob3N0KSB0aHJvdzsNCgkJbmV4dERyYXcgPSBfbmV3RHJhdzsNCgl9DQoJDQoJDQogICAgZnVuY3Rpb24gc2VsZWN0V2lubmVyKHN0cmluZyBzZWVkKSBpbnRlcm5hbCByZXR1cm5zICh1aW50IHdpbm5lcl9pbmRleCkgew0KDQogICAgICAgIHVpbnQgc2VtaXJhbmRvbSA9IHVpbnQoc2hhMyhyYW5kb20sIHNlZWQpKSAlIHRoaXMuYmFsYW5jZTsNCiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBudW1QbGF5ZXJzOyArK2kpIHsNCiAgICAgICAgICAgIGlmKHNlbWlyYW5kb20gPCBjb250cmlidXRpb25zW2ldKSByZXR1cm4gaTsNCiAgICAgICAgICAgIHNlbWlyYW5kb20gLT0gY29udHJpYnV0aW9uc1tpXTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlY29yZFdpbih1aW50IHdpbm5lcl9pbmRleCwgdWludCBhbW91bnQpIGludGVybmFsIHsNCiAgICAgICAgaWYocmVjZW50V2lucy5sZW5ndGggPCByZWNlbnRXaW5zQ291bnQpIHsNCiAgICAgICAgICAgIHJlY2VudFdpbnMubGVuZ3RoKys7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvLyBBbHJlYWR5IGF0IGNhcGFjaXR5IGZvciB0aGUgbnVtYmVyIG9mIHdpbm5lcnMgdG8gcmVtZW1iZXIuDQogICAgICAgICAgICAvLyBGb3JnZXQgdGhlIG9sZGVzdCBvbmUgYnkgc2hpZnRpbmcgZWFjaCBlbnRyeSAnbGVmdCcNCiAgICAgICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgcmVjZW50V2luc0NvdW50IC0gMTsgKytpKSB7DQogICAgICAgICAgICAgICAgcmVjZW50V2luc1tpXSA9IHJlY2VudFdpbnNbaSArIDFdOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmVjZW50V2luc1tyZWNlbnRXaW5zLmxlbmd0aCAtIDFdID0gV2luKGNvbnRyaWJ1dG9yc1t3aW5uZXJfaW5kZXhdLCBibG9jay50aW1lc3RhbXAsIGNvbnRyaWJ1dGlvbnNbd2lubmVyX2luZGV4XSwgYW1vdW50KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZXNldCgpIGludGVybmFsIHsNCiAgICAgICAgLy8gQ2xlYXIgdGhlIGxpc3RzIHdpdGggbWluIGdhcyBhZnRlciB0aGUgZHJhdy4NCgkJbnVtUGxheWVycyA9IDA7DQogICAgfQ0KDQoNCiAgICAvKiBUaGlzIHNob3VsZCBvbmx5IGJlIG5lZWRlZCBpZiBhIGJ1ZyBpcyBkaXNjb3ZlcmVkDQogICAgaW4gdGhlIGNvZGUgYW5kIHRoZSBjb250cmFjdCBtdXN0IGJlIGRlc3Ryb3llZC4gKi8NCiAgICBmdW5jdGlvbiBkZXN0cm95KCkgew0KICAgICAgICBpZihtc2cuc2VuZGVyICE9IGhvc3QpIHRocm93Ow0KDQogICAgICAgIC8vIFJlZnVuZCBldmVyeW9uZSdzIGNvbnRyaWJ1dGlvbnMuDQogICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgbnVtUGxheWVyczsgKytpKSB7DQogICAgICAgICAgICBjb250cmlidXRvcnNbaV0uc2VuZChjb250cmlidXRpb25zW2ldKTsNCiAgICAgICAgfQ0KDQoJCXJlc2V0KCk7DQogICAgICAgIHNlbGZkZXN0cnVjdChob3N0KTsNCiAgICB9DQp9'