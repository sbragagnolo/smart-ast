base 64 content
base64jackPot1
	^'Y29udHJhY3QgSmFja1BvdCB7DQogICAgYWRkcmVzcyBwdWJsaWMgaG9zdDsNCgl1aW50IG1pbkFtb3VudDsNCiAgICB1aW50W10gcHVibGljIGNvbnRyaWJ1dGlvbnM7DQogICAgYWRkcmVzc1tdIHB1YmxpYyBjb250cmlidXRvcnM7DQoJdWludCBwdWJsaWMgbnVtUGxheWVycyA9IDA7DQoJdWludCBwdWJsaWMgbmV4dERyYXc7DQoJYnl0ZXMzMiBzZWVkSGFzaDsNCglieXRlczMyIHJhbmRvbTsJDQoNCiAgICBzdHJ1Y3QgV2luIHsNCiAgICAgICAgYWRkcmVzcyB3aW5uZXI7DQogICAgICAgIHVpbnQgdGltZXN0YW1wOw0KICAgICAgICB1aW50IGNvbnRyaWJ1dGlvbjsNCgkJdWludCBhbW91bnRXb247DQogICAgfQ0KDQogICAgV2luW10gcHVibGljIHJlY2VudFdpbnM7DQogICAgdWludCByZWNlbnRXaW5zQ291bnQ7DQoJDQoJZnVuY3Rpb24gaW5zZXJ0X2NvbnRyaWJ1dGlvbihhZGRyZXNzIGFkZHIsIHVpbnQgdmFsdWUpIGludGVybmFsIHsNCgkJLy8gY2hlY2sgaWYgYXJyYXkgbmVlZHMgZXh0ZW5kaW5nDQoJCWlmKG51bVBsYXllcnMgPT0gY29udHJpYnV0aW9ucy5sZW5ndGgpIHsNCgkJCS8vIGV4dGVuZCB0aGUgYXJyYXlzDQoJCQljb250cmlidXRpb25zLmxlbmd0aCArPSAxOw0KCQkJY29udHJpYnV0b3JzLmxlbmd0aCArPSAxOw0KCQl9DQoJCWNvbnRyaWJ1dGlvbnNbbnVtUGxheWVyc10gPSB2YWx1ZTsNCgkJY29udHJpYnV0b3JzW251bVBsYXllcnMrK10gPSBhZGRyOw0KCX0NCgkNCglmdW5jdGlvbiBnZXRDb250cmlidXRpb25zKGFkZHJlc3MgYWRkcikgY29uc3RhbnQgcmV0dXJucyAodWludCkgew0KICAgICAgICB1aW50IGk7DQogICAgICAgIGZvciAoaT0wOyBpIDwgbnVtUGxheWVyczsgaSsrKSB7DQoJCQlpZiAoY29udHJpYnV0b3JzW2ldID09IGFkZHIpIHsgLy8gaWYgaW4gdGhlIGxpc3QgYWxyZWFkeQ0KCQkJCWJyZWFrOw0KCQkJfQ0KCQl9DQoJCQ0KCQlpZihpID09IG51bVBsYXllcnMpIHsgLy8gRGlkIG5vdCBmaW5kIHNlbmRlciBhbHJlYWR5IGluIHRoZSBsaXN0DQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfSBlbHNlIHsNCgkJCXJldHVybiBjb250cmlidXRpb25zW2ldOw0KCQl9DQogICAgfQ0KCQ0KCWZ1bmN0aW9uIEphY2tQb3QoKSB7DQoNCiAgICAgICAgaG9zdCA9IG1zZy5zZW5kZXI7DQoJCXNlZWRIYXNoID0gc2hhMygxMTExKTsNCgkJbWluQW1vdW50ID0gMTAgKiAxIGZpbm5leTsNCiAgICAgICAgcmVjZW50V2luc0NvdW50ID0gMTA7DQoJCW5leHREcmF3ID0gMTIzNDsgLy8gSW5pdGlhbGl6ZSB0byBzdGFydCB0aW1lIG9mIHRoZSBibG9jaw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uKCkgew0KICAgICAgICBhZGRUb0NvbnRyaWJ1dGlvbigpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFkZFRvQ29udHJpYnV0aW9uKCkgew0KICAgICAgICBhZGRWYWx1ZVRvQ29udHJpYnV0aW9uKG1zZy52YWx1ZSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYWRkVmFsdWVUb0NvbnRyaWJ1dGlvbih1aW50IHZhbHVlKSBpbnRlcm5hbCB7DQogICAgICAgIC8vIEZpcnN0LCBtYWtlIHN1cmUgdGhpcyBpcyBhIHZhbGlkIHRyYW5zYWN0aW9uLg0KICAgICAgICBpZih2YWx1ZSA8IG1pbkFtb3VudCkgdGhyb3c7DQoJICAgIHVpbnQgaTsNCiAgICAgICAgZm9yIChpPTA7IGkgPCBudW1QbGF5ZXJzOyBpKyspIHsNCgkJCWlmIChjb250cmlidXRvcnNbaV0gPT0gbXNnLnNlbmRlcikgeyAvLyBBbHJlYWR5IGNvbnRyaWJ1dGVkPw0KCQkJCWJyZWFrOw0KCQkJfQ0KCQl9DQoJCQ0KCQlpZihpID09IG51bVBsYXllcnMpIHsgLy8gRGlkIG5vdCBmaW5kIHNlbmRlciBhbHJlYWR5IGluIHRoZSBsaXN0DQoJCQlpbnNlcnRfY29udHJpYnV0aW9uKG1zZy5zZW5kZXIsIHZhbHVlKTsNCiAgICAgICAgfSBlbHNlIHsNCgkJCWNvbnRyaWJ1dGlvbnNbaV0rPSB2YWx1ZTsgLy8gVXBkYXRlIGFtb3VudA0KCQl9DQoJCQ0KCQlyYW5kb20gPSBzaGEzKHJhbmRvbSwgYmxvY2suYmxvY2toYXNoKGJsb2NrLm51bWJlciAtIDEpKTsJCQ0KICAgIH0NCgkNCgkvL2RyYXdQb3QgdHJpZ2dlcmVkIGZyb20gSG9zdCBhZnRlciB0aW1lIGhhcyBwYXNzZWQgb3IgcG90IGlzIG1hdHVyZWQuDQoJZnVuY3Rpb24gZHJhd1BvdChieXRlczMyIHNlZWQsIGJ5dGVzMzIgbmV3U2VlZCkgew0KCQlpZihtc2cuc2VuZGVyICE9IGhvc3QpIHRocm93Ow0KCQkNCgkJLy8gY2hlY2sgdGhhdCBzZWVkIGdpdmVuIGlzIHRoZSBzYW1lIGFzIHRoZSBzZWVkSGFzaCBzbyBvcGVyYXRvcnMgb2YgamFja3BvdCBjYW4gbm90IGNoZWF0IA0KCQlpZiAoc2hhMyhzZWVkKSA9PSBzZWVkSGFzaCkgew0KCQkJc2VlZEhhc2ggPSBzaGEzKG5ld1NlZWQpOw0KCQkJLy8gQ2hvb3NlIGEgd2lubmVyIHVzaW5nIHRoZSBzZWVkIGFzIHJhbmRvbQ0KICAgICAgICAgICAgdWludCB3aW5uZXJfaW5kZXggPSBzZWxlY3RXaW5uZXIoc2VlZCk7DQoNCiAgICAgICAgICAgIC8vIFNlbmQgdGhlIGRldmVsb3BlciBhIDElIGZlZQ0KICAgICAgICAgICAgaG9zdC5zZW5kKHRoaXMuYmFsYW5jZSAvIDEwMCk7DQoJCQkNCgkJCXVpbnQgYW1vdW50V29uID0gdGhpcy5iYWxhbmNlOyANCgkJCQ0KICAgICAgICAgICAgLy8gU2VuZCB0aGUgd2lubmVyIHRoZSByZW1haW5pbmcgYmFsYW5jZSBvbiB0aGUgY29udHJhY3QuDQogICAgICAgICAgICBjb250cmlidXRvcnNbd2lubmVyX2luZGV4XS5zZW5kKHRoaXMuYmFsYW5jZSk7DQoJCQkNCgkJCS8vIE1ha2UgYSBub3RlIHRoYXQgc29tZW9uZSB3b24sIHRoZW4gc3RhcnQgYWxsIG92ZXIhDQogICAgICAgICAgICByZWNvcmRXaW4od2lubmVyX2luZGV4LCBhbW91bnRXb24pOw0KDQogICAgICAgICAgICByZXNldCgpOw0KCQkJbmV4dERyYXcgPSBub3cgKyA3IGRheXM7CQ0KCQl9DQoJfQ0KDQoJZnVuY3Rpb24gc2V0RHJhd0RhdGUodWludCBfbmV3RHJhdykgew0KCQlpZihtc2cuc2VuZGVyICE9IGhvc3QpIHRocm93Ow0KCQluZXh0RHJhdyA9IF9uZXdEcmF3Ow0KCX0NCgkNCgkNCiAgICBmdW5jdGlvbiBzZWxlY3RXaW5uZXIoYnl0ZXMzMiBzZWVkKSBpbnRlcm5hbCByZXR1cm5zICh1aW50IHdpbm5lcl9pbmRleCkgew0KDQogICAgICAgIHVpbnQgc2VtaXJhbmRvbSA9IHVpbnQoc2hhMyhyYW5kb20sIHNlZWQpKSAlIHRoaXMuYmFsYW5jZTsNCiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGkgPCBudW1QbGF5ZXJzOyArK2kpIHsNCiAgICAgICAgICAgIGlmKHNlbWlyYW5kb20gPCBjb250cmlidXRpb25zW2ldKSByZXR1cm4gaTsNCiAgICAgICAgICAgIHNlbWlyYW5kb20gLT0gY29udHJpYnV0aW9uc1tpXTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlY29yZFdpbih1aW50IHdpbm5lcl9pbmRleCwgdWludCBhbW91bnQpIGludGVybmFsIHsNCiAgICAgICAgaWYocmVjZW50V2lucy5sZW5ndGggPCByZWNlbnRXaW5zQ291bnQpIHsNCiAgICAgICAgICAgIHJlY2VudFdpbnMubGVuZ3RoKys7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvLyBBbHJlYWR5IGF0IGNhcGFjaXR5IGZvciB0aGUgbnVtYmVyIG9mIHdpbm5lcnMgdG8gcmVtZW1iZXIuDQogICAgICAgICAgICAvLyBGb3JnZXQgdGhlIG9sZGVzdCBvbmUgYnkgc2hpZnRpbmcgZWFjaCBlbnRyeSAnbGVmdCcNCiAgICAgICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgcmVjZW50V2luc0NvdW50IC0gMTsgKytpKSB7DQogICAgICAgICAgICAgICAgcmVjZW50V2luc1tpXSA9IHJlY2VudFdpbnNbaSArIDFdOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmVjZW50V2luc1tyZWNlbnRXaW5zLmxlbmd0aCAtIDFdID0gV2luKGNvbnRyaWJ1dG9yc1t3aW5uZXJfaW5kZXhdLCBibG9jay50aW1lc3RhbXAsIGNvbnRyaWJ1dGlvbnNbd2lubmVyX2luZGV4XSwgYW1vdW50KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZXNldCgpIGludGVybmFsIHsNCiAgICAgICAgLy8gQ2xlYXIgdGhlIGxpc3RzIHdpdGggbWluIGdhcyBhZnRlciB0aGUgZHJhdy4NCgkJbnVtUGxheWVycyA9IDA7DQogICAgfQ0KDQoNCiAgICAvKiBUaGlzIHNob3VsZCBvbmx5IGJlIG5lZWRlZCBpZiBhIGJ1ZyBpcyBkaXNjb3ZlcmVkDQogICAgaW4gdGhlIGNvZGUgYW5kIHRoZSBjb250cmFjdCBtdXN0IGJlIGRlc3Ryb3llZC4gKi8NCiAgICBmdW5jdGlvbiBkZXN0cm95KCkgew0KICAgICAgICBpZihtc2cuc2VuZGVyICE9IGhvc3QpIHRocm93Ow0KDQogICAgICAgIC8vIFJlZnVuZCBldmVyeW9uZSdzIGNvbnRyaWJ1dGlvbnMuDQogICAgICAgIGZvcih1aW50IGkgPSAwOyBpIDwgbnVtUGxheWVyczsgKytpKSB7DQogICAgICAgICAgICBjb250cmlidXRvcnNbaV0uc2VuZChjb250cmlidXRpb25zW2ldKTsNCiAgICAgICAgfQ0KDQoJCXJlc2V0KCk7DQogICAgICAgIHNlbGZkZXN0cnVjdChob3N0KTsNCiAgICB9DQp9'