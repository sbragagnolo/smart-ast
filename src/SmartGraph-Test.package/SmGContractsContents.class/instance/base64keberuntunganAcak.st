base 64 content
base64keberuntunganAcak
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KY29udHJhY3QgS2ViZXJ1bnR1bmdhbkFjYWsgew0KLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQovLyMjUGF5b3V0IGlhbGFoIGFjYWsgZGFuIHRpZGFrIG1lbmdpa3V0IGFudHJpYW4jIyMjDQovLyMjS2VhY2FrYW4gYmVyZGFzYXJrYW4gcmFuZG9tIGhhc2hibG9jayBvbGVoIG1pbmVyIyMjIw0KLy8jIyMjIERlcG9zaXQgMC4wNSBFVEhFUiArIGZlZSBnYXMgdXRrIHBhcnRpc2lwYXNpICMjIyMNCi8vIyMjIyAyJSBkYXJpIDAuMDUgRXRoZXIgYWthbiBkaXBlcnVudHVra2FuIHV0ayBmZWUga2VwYWRhIG93bmVyICMjIyMNCi8vIyMjIyBKaWthIHRyYW5zZmVyIGxlYmloIGRhcmkgMC4wNUV0aGVyIG1ha2Egc2lzYW55YSBha2FuIGRpa2VtYmFsaWthbiAjIyMjDQovLyMjI0ppa2EgYmVydW50dW5nIG1ha2EgYmlzYSBsZ3MgZGFwYXQgcGF5b3V0IyMjIyMjIyMjIw0KLy8jIyNKaWthIGdhayBiZXJ1bnR1bmcgbWFrYSBoYXJ1cyB3YWl0ICMjIyMjIyMjIyMNCi8vIyMjcGF5b3V0IGlhbGFoIDEyNSUgIyMjIyMjIyMjIw0KLy8jIyNwYXlvdXQgaWFsYWggb3RvbWF0aXMgZGFuIGNvbnRyYWN0IHRpZGFrIGRhcGF0IGRpbW9kaWYgbGFnaSBzZXRlbGFoIGRlcGxveSBvbGVoIHNlc2lhcGFwdW4gdGVybWFzdWsgb3duZXIgIyMjIyMjIyMjIw0KLy9DT1BZUklHSFQgMjAxNyBoYWRpb25leWVzb25lbm8NCi8vRWR1a2FzaSBkYW4gZWtzcGVyaW1lbiBwdXJwb3NlIG9ubHkNCg0KDQogICAgYWRkcmVzcyBwcml2YXRlIG93bmVyOw0KICAgIA0KICAgIC8vU3RvcmVkIHZhcmlhYmxlcw0KICAgIHVpbnQgcHJpdmF0ZSBiYWxhbmNlID0gMDsNCiAgICB1aW50IHByaXZhdGUgZmVlID0gMjsNCiAgICB1aW50IHByaXZhdGUgbXVsdGlwbGllciA9IDEyNTsNCg0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gVXNlcikgcHJpdmF0ZSB1c2VyczsNCiAgICBFbnRyeVtdIHByaXZhdGUgZW50cmllczsNCiAgICB1aW50W10gcHJpdmF0ZSB1bnBhaWRFbnRyaWVzOw0KICAgIA0KICAgIC8vU2V0IG93bmVyIG9uIGNvbnRyYWN0IGNyZWF0aW9uDQogICAgZnVuY3Rpb24gS2ViZXJ1bnR1bmdhbkFjYWsoKSB7DQogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5b3duZXIgeyBpZiAobXNnLnNlbmRlciA9PSBvd25lcikgXyA7fQ0KICAgIA0KICAgIHN0cnVjdCBVc2VyIHsNCiAgICAgICAgYWRkcmVzcyBpZDsNCiAgICAgICAgdWludCBkZXBvc2l0czsNCiAgICAgICAgdWludCBwYXlvdXRzUmVjZWl2ZWQ7DQogICAgfQ0KICAgIA0KICAgIHN0cnVjdCBFbnRyeSB7DQogICAgICAgIGFkZHJlc3MgZW50cnlBZGRyZXNzOw0KICAgICAgICB1aW50IGRlcG9zaXQ7DQogICAgICAgIHVpbnQgcGF5b3V0Ow0KICAgICAgICBib29sIHBhaWQ7DQogICAgfQ0KDQogICAgLy9GYWxsYmFjayBmdW5jdGlvbg0KICAgIGZ1bmN0aW9uKCkgew0KICAgICAgICBpbml0KCk7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIGluaXQoKSBwcml2YXRlew0KICAgICAgICANCiAgICAgICAgaWYgKG1zZy52YWx1ZSA8IDUwIGZpbm5leSkgew0KICAgICAgICAgICAgIChtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGpvaW4oKTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gam9pbigpIHB1YmxpYyBwYXlhYmxlIHsNCiAgICAgICAgDQogICAgICAgIC8vTGltaXQgZGVwb3NpdHMgdG8gMC4wNUVUSA0KICAgICAgICB1aW50IGRWYWx1ZSA9IDUwIGZpbm5leTsNCiAgICAgICAgDQogICAgICAgIGlmIChtc2cudmFsdWUgPiA1MCBmaW5uZXkpIHsNCiAgICAgICAgICAgIA0KICAgICAgICAJKG1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUgLSA1MCBmaW5uZXkpKTsJDQogICAgICAgIAlkVmFsdWUgPSA1MCBmaW5uZXk7DQogICAgICAgIH0NCiAgICAgIA0KICAgICAgICAvL0FkZCBuZXcgdXNlcnMgdG8gdGhlIHVzZXJzIGFycmF5DQogICAgICAgIGlmICh1c2Vyc1ttc2cuc2VuZGVyXS5pZCA9PSBhZGRyZXNzKDApKQ0KICAgICAgICB7DQogICAgICAgICAgICB1c2Vyc1ttc2cuc2VuZGVyXS5pZCA9IG1zZy5zZW5kZXI7DQogICAgICAgICAgICB1c2Vyc1ttc2cuc2VuZGVyXS5kZXBvc2l0cyA9IDA7DQogICAgICAgICAgICB1c2Vyc1ttc2cuc2VuZGVyXS5wYXlvdXRzUmVjZWl2ZWQgPSAwOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICAvL0FkZCBuZXcgZW50cnkgdG8gdGhlIGVudHJpZXMgYXJyYXkNCiAgICAgICAgZW50cmllcy5wdXNoKEVudHJ5KG1zZy5zZW5kZXIsIGRWYWx1ZSwgKGRWYWx1ZSAqIChtdWx0aXBsaWVyKSAvIDEwMCksIGZhbHNlKSk7DQogICAgICAgIHVzZXJzW21zZy5zZW5kZXJdLmRlcG9zaXRzKys7DQogICAgICAgIHVucGFpZEVudHJpZXMucHVzaChlbnRyaWVzLmxlbmd0aCAtMSk7DQogICAgICAgIA0KICAgICAgICAvL0NvbGxlY3QgZmVlcyBhbmQgdXBkYXRlIGNvbnRyYWN0IGJhbGFuY2UNCiAgICAgICAgYmFsYW5jZSArPSAoZFZhbHVlICogKDEwMCAtIGZlZSkpIC8gMTAwOw0KICAgICAgICANCiAgICAgICAgdWludCBpbmRleCA9IHVucGFpZEVudHJpZXMubGVuZ3RoID4gMSA/IHJhbmQodW5wYWlkRW50cmllcy5sZW5ndGgpIDogMDsNCiAgICAgICAgRW50cnkgdGhlRW50cnkgPSBlbnRyaWVzW3VucGFpZEVudHJpZXNbaW5kZXhdXTsNCiAgICAgICAgDQogICAgICAgIC8vUGF5IHBlbmRpbmcgZW50cmllcyBpZiB0aGUgbmV3IGJhbGFuY2UgYWxsb3dzIGZvciBpdA0KICAgICAgICBpZiAoYmFsYW5jZSA+IHRoZUVudHJ5LnBheW91dCkgew0KICAgICAgICAgICAgDQogICAgICAgICAgICB1aW50IHBheW91dCA9IHRoZUVudHJ5LnBheW91dDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgKHRoZUVudHJ5LmVudHJ5QWRkcmVzcy5zZW5kKHBheW91dCkpOw0KICAgICAgICAgICAgdGhlRW50cnkucGFpZCA9IHRydWU7DQogICAgICAgICAgICB1c2Vyc1t0aGVFbnRyeS5lbnRyeUFkZHJlc3NdLnBheW91dHNSZWNlaXZlZCsrOw0KDQogICAgICAgICAgICBiYWxhbmNlIC09IHBheW91dDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKGluZGV4IDwgdW5wYWlkRW50cmllcy5sZW5ndGggLSAxKQ0KICAgICAgICAgICAgICAgIHVucGFpZEVudHJpZXNbaW5kZXhdID0gdW5wYWlkRW50cmllc1t1bnBhaWRFbnRyaWVzLmxlbmd0aCAtIDFdOw0KICAgICAgICAgICANCiAgICAgICAgICAgIHVucGFpZEVudHJpZXMubGVuZ3RoLS07DQogICAgICAgICAgICANCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgLy9Db2xsZWN0IG1vbmV5IGZyb20gZmVlcyBhbmQgcG9zc2libGUgbGVmdG92ZXJzIGZyb20gZXJyb3JzIChhY3R1YWwgYmFsYW5jZSB1bnRvdWNoZWQpDQogICAgICAgIHVpbnQgZmVlcyA9IHRoaXMuYmFsYW5jZSAtIGJhbGFuY2U7DQogICAgICAgIGlmIChmZWVzID4gMCkNCiAgICAgICAgew0KICAgICAgICAgICAgICAgIChvd25lci5zZW5kKGZlZXMpKTsNCiAgICAgICAgfSAgICAgIA0KICAgICAgIA0KICAgIH0NCiAgICANCiAgICAvL0dlbmVyYXRlIHJhbmRvbSBudW1iZXIgYmV0d2VlbiAwICYgbWF4DQogICAgdWludDI1NiBjb25zdGFudCBwcml2YXRlIEZBQ1RPUiA9ICAxMTU3OTIwODkyMzczMTYxOTU0MjM1NzA5ODUwMDg2ODc5MDc4NTMyNjk5ODQ2NjU2NDA1NjQwMzk0NTc1ODQwMDc5MTMxMjk2Mzk5Ow0KICAgIGZ1bmN0aW9uIHJhbmQodWludCBtYXgpIGNvbnN0YW50IHByaXZhdGUgcmV0dXJucyAodWludDI1NiByZXN1bHQpew0KICAgICAgICB1aW50MjU2IGZhY3RvciA9IEZBQ1RPUiAqIDEwMCAvIG1heDsNCiAgICAgICAgdWludDI1NiBsYXN0QmxvY2tOdW1iZXIgPSBibG9jay5udW1iZXIgLSAxOw0KICAgICAgICB1aW50MjU2IGhhc2hWYWwgPSB1aW50MjU2KGJsb2NrLmJsb2NraGFzaChsYXN0QmxvY2tOdW1iZXIpKTsNCiAgICANCiAgICAgICAgcmV0dXJuIHVpbnQyNTYoKHVpbnQyNTYoaGFzaFZhbCkgLyBmYWN0b3IpKSAlIG1heDsNCiAgICB9DQogICAgDQogICAgDQogICAgLy9Db250cmFjdCBtYW5hZ2VtZW50DQogICAgZnVuY3Rpb24gY2hhbmdlT3duZXIoYWRkcmVzcyBuZXdPd25lcikgb25seW93bmVyIHByaXZhdGUgew0KICAgICAgICBvd25lciA9IG5ld093bmVyOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBjaGFuZ2VNdWx0aXBsaWVyKHVpbnQgbXVsdGkpIG9ubHlvd25lciBwcml2YXRlIHsNCiAgICAgICAgaWYgKG11bHRpIDwgMTEwIHx8IG11bHRpID4gMTUwKSB0aHJvdzsNCiAgICAgICAgDQogICAgICAgIG11bHRpcGxpZXIgPSBtdWx0aTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gY2hhbmdlRmVlKHVpbnQgbmV3RmVlKSBvbmx5b3duZXIgcHJpdmF0ZSB7DQogICAgICAgIGlmIChmZWUgPiAyKSANCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICBmZWUgPSBuZXdGZWU7DQogICAgfQ0KICAgIA0KICAgIA0KICAgIC8vSlNPTiBmdW5jdGlvbnMNCiAgICBmdW5jdGlvbiBtdWx0aXBsaWVyRmFjdG9yKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBmYWN0b3IsIHN0cmluZyBpbmZvKSB7DQogICAgICAgIGZhY3RvciA9IG11bHRpcGxpZXI7DQogICAgICAgIGluZm8gPSAnbXVsdGlwbGl5ZXIgaWFsYWggMTI1JSc7IA0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBjdXJyZW50RmVlKCkgY29uc3RhbnQgcmV0dXJucyAodWludCBmZWVQZXJjZW50YWdlLCBzdHJpbmcgaW5mbykgew0KICAgICAgICBmZWVQZXJjZW50YWdlID0gZmVlOw0KICAgICAgICBpbmZvID0gJ2ZlZSBpYWxhaCAyJS4nOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiB0b3RhbEVudHJpZXMoKSBjb25zdGFudCByZXR1cm5zICh1aW50IGNvdW50LCBzdHJpbmcgaW5mbykgew0KICAgICAgICBjb3VudCA9IGVudHJpZXMubGVuZ3RoOw0KICAgICAgICBpbmZvID0gJ3NlYmVyYXBhIGJhbnlhayBkZXBvc2l0JzsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gdXNlclN0YXRzKGFkZHJlc3MgdXNlcikgY29uc3RhbnQgcmV0dXJucyAodWludCBkZXBvc2l0cywgdWludCBwYXlvdXRzLCBzdHJpbmcgaW5mbykNCiAgICB7DQogICAgICAgIGlmICh1c2Vyc1t1c2VyXS5pZCAhPSBhZGRyZXNzKDB4MCkpDQogICAgICAgIHsNCiAgICAgICAgICAgIGRlcG9zaXRzID0gdXNlcnNbdXNlcl0uZGVwb3NpdHM7DQogICAgICAgICAgICBwYXlvdXRzID0gdXNlcnNbdXNlcl0ucGF5b3V0c1JlY2VpdmVkOw0KICAgICAgICAgICAgaW5mbyA9ICdVc2VycyBzdGF0czogdG90YWwgZGVwb3NpdHMsIHBheW91dHMgZGl0ZXJpbWEuJzsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBlbnRyeURldGFpbHModWludCBpbmRleCkgY29uc3RhbnQgcmV0dXJucyAoYWRkcmVzcyB1c2VyLCB1aW50IHBheW91dCwgYm9vbCBwYWlkLCBzdHJpbmcgaW5mbykNCiAgICB7DQogICAgICAgIGlmIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7DQogICAgICAgICAgICB1c2VyID0gZW50cmllc1tpbmRleF0uZW50cnlBZGRyZXNzOw0KICAgICAgICAgICAgcGF5b3V0ID0gZW50cmllc1tpbmRleF0ucGF5b3V0IC8gMSBmaW5uZXk7DQogICAgICAgICAgICBwYWlkID0gZW50cmllc1tpbmRleF0ucGFpZDsNCiAgICAgICAgICAgIGluZm8gPSAnRW50cnkgaW5mbzogdXNlciBhZGRyZXNzLCBleHBlY3RlZCBwYXlvdXQgaW4gRmlubmV5cywgcGF5b3V0IHN0YXR1cy4nOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIA0KfQ=='