base 64 content
base64kkICOTest77
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KDQoNCg0KY29udHJhY3Qga2tJQ09UZXN0Nzcgew0KICAgIA0KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsNCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsNCiAgICANCiAgICB1aW50MjU2IHB1YmxpYyBkZWNpbWFsczsNCiAgICB1aW50MjU2IHB1YmxpYyBJTklUSUFMX1NVUFBMWTsNCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsNCiAgICANCiAgICB1aW50MjU2IHB1YmxpYyByYXRlOw0KICANCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsJCQkJCQkgICAgLy9pbml0IG93bmVyIGFkZHJlc3M/DQoJdWludDI1NiBwdWJsaWMgdG9rZW5zOwkJCQkJCQkvL2luaXQgdGhlIGNvaW4gc3VwcGx5IHZhcg0KCQ0KCXVpbnQyNTYgcHVibGljIGFtb3VudDsNCgkNCgkNCglmdW5jdGlvbiBra0lDT1Rlc3Q3NygpIHsJCQkvL1RoaXMgZnVuY3Rpb24gZ2l2ZXMgdGhlIHRvdGFsIHN1cHBseSB0byB0aGUgY29udHJhY3QNCiAgICAgICAgbmFtZSA9ICJra1RFU1Q3NyI7DQogICAgICAgIHN5bWJvbCA9ICJra1RTVDc3IjsNCiAgICAgICAgDQogICAgICAgIGRlY2ltYWxzID0gMDsNCiAgICAgICAgSU5JVElBTF9TVVBQTFkgPSAzMDAwMDAwMDsNCiAgICAgICAgDQogICAgICAgIHJhdGUgPSA1MDAwOw0KCQkNCgkJb3duZXIgPSBtc2cuc2VuZGVyOwkJCSAgICAvL01ha2Ugb3duZXIgb2YgY29udHJhY3QgdGhlIGNyZWF0b3INCgkJdG9rZW5zID0gSU5JVElBTF9TVVBQTFk7DQoJCXRvdGFsU3VwcGx5ID0gSU5JVElBTF9TVVBQTFk7DQoJfQ0KCQ0KCQ0KCS8vVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiBFdGhlciBpcyBzZW50IHRvIHRoZSBjb250cmFjdCBhZGRyZXNzDQoJLy9FdmVuIGlmIDAgZXRoZXIgaXMgc2VudC4NCglmdW5jdGlvbiAoKSBwYXlhYmxlIHsNCgkgICAgDQoJICAgIHVpbnQyNTYgdHJ5QW1vdW50ID0gZGl2KChtdWwobXNnLnZhbHVlLCByYXRlKSksIDEgZXRoZXIpOyAgICAgICAgICAgLy9Eb24ndCBsZXQgcGVvcGxlIGJ1eSBtb3JlIHRva2VucyB0aGFuIHRoZXJlIGFyZS4NCgkgICAgDQoJCWlmIChtc2cudmFsdWUgPT0gMCB8fCBtc2cudmFsdWUgPCAwIHx8IHRva2VucyA8IHRyeUFtb3VudCkgewkJLy9JZiB6ZXJvIGV0aGVyIGlzIHNlbnQsIGtpbGwuIERvIG5vdGhpbmcuIA0KCQkJdGhyb3c7DQoJCX0NCgkJDQoJCWJ1eVRva2Vucyhtc2cudmFsdWUpOwkJLy9jYWxsIGJ1eVRva2VucyB3aXRoIHRoZSBldGhlciBzZW50IGFtb3VudCBhcyBhbiBhcmcNCg0KCX0NCgkNCgkNCgkvL1RoaXMgZnVuY3Rpb24gdGFrZXMgdGhlIGFtb3VudCBvZiBldGhlciBzZW50IGFuZCBidXlzIHRva2Vucw0KCS8vVGhlbiBzZW5kcyB0aGUgdG9rZW5zIHRvIGJ1eWVyDQoJZnVuY3Rpb24gYnV5VG9rZW5zKHVpbnQyNTYgZXRoZXJTZW50KSBwYXlhYmxlIHsJICAgICAgICAgICAgICAgIC8vVGFrZSB0aGUgZXRoZXJTZW50IHZhciBhbmQgZG8gc3R1ZmYNCgkgICAgYW1vdW50ID0gMDsJCQkJCQkJCQkgICAgICAgICAgICAgICAgLy9zZXQgdGhlICdhbW91bnQnIHZhciBiYWNrIHRvIHplcm8NCgkJYW1vdW50ID0gZGl2KChtdWwoZXRoZXJTZW50LCByYXRlKSksIDEgZXRoZXIpOwkJLy90YWtlIHNlbnQgZXRoZXIsIG11bHRpcGx5IGl0IGJ5IHRoZSByYXRlIHRoZW4gZGl2aWRlIGJ5IDEgZXRoZXIuDQoJCWJhbGFuY2VzW21zZy5zZW5kZXJdICs9IGFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vU2VuZCB0b2tlbnMgdG8gYnV5ZXINCgkJdG9rZW5zIC09IGFtb3VudDsJCSAgCQkJCQkgICAgICAgICAgICAgICAgLy9TdWJ0cmFjdCBib3VnaHQgdG9rZW5zIGZyb20gc3VwcGx5DQoJCWFtb3VudCA9IDA7CQkJCQkJCQkJICAgICAgICAgICAgICAgIC8vc2V0IHRoZSAnYW1vdW50JyB2YXIgYmFjayB0byB6ZXJvDQoJCQ0KCQkNCgkJb3duZXIudHJhbnNmZXIobXNnLnZhbHVlKTsJCQkJCS8vU2VuZCB0aGUgRVRIIHRvIGNvbnRyYWN0IG93bmVyLg0KDQoJfQ0KCQ0KCQ0KCQ0KCQ0KCQ0KCQ0KCQ0KICANCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7DQogIA0KICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsNCiAgDQogIA0KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7DQoNCg0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsNCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsNCiAgICBiYWxhbmNlc1tfdG9dID0gYWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7DQogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCg0KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOw0KICB9DQogIA0KICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7DQoNCg0KDQogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsNCiAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOw0KDQoNCiAgICBiYWxhbmNlc1tfdG9dID0gYWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7DQogICAgYmFsYW5jZXNbX2Zyb21dID0gc3ViKGJhbGFuY2VzW19mcm9tXSwgX3ZhbHVlKTsNCiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpOw0KICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KDQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpIHsNCg0KICAgIHJlcXVpcmUoKF92YWx1ZSA9PSAwKSB8fCAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPT0gMCkpOw0KDQogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KDQogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsNCiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCiAgfQkNCgkNCgkNCgkNCgkNCgkNCiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgdWludDI1NiBjID0gYSAqIGI7DQogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KDQogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikgew0KICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMA0KICAgIHVpbnQyNTYgYyA9IGEgLyBiOw0KICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkDQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICBhc3NlcnQoYiA8PSBhKTsNCiAgICByZXR1cm4gYSAtIGI7DQogIH0NCg0KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICB1aW50MjU2IGMgPSBhICsgYjsNCiAgICBhc3NlcnQoYyA+PSBhKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KCQ0KCQ0KCQ0KCQ0KCQ0KfQ=='