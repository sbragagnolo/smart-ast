base 64 content
base64lamboCoin
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMDsNCg0KY29udHJhY3QgRm9yZWlnblRva2VuIHsNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7DQp9DQoNCmNvbnRyYWN0IExhbWJvQ29pbiB7DQogICAgYWRkcmVzcyBvd25lciA9IG1zZy5zZW5kZXI7DQoNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsNCg0KCWJvb2wgcHVibGljIHB1cmNoYXNpbmdBbGxvd2VkID0gZmFsc2U7DQogICAgdWludDI1NiBwdWJsaWMgdG90YWxDb250cmlidXRpb24gPSAwOw0KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5ID0gMDsNCgl1aW50MjU2IHB1YmxpYyBtYXhTdXBwbHkgPSAwOw0KDQogICAgZnVuY3Rpb24gbmFtZSgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZykgeyByZXR1cm4gIkxhbWJvQ29pbiI7IH0NCiAgICBmdW5jdGlvbiBzeW1ib2woKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsgcmV0dXJuICJMQkMiOyB9DQogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCkgeyByZXR1cm4gMTg7IH0NCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07IH0NCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIC8vIG1pdGlnYXRlcyB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sNCiAgICAgICAgaWYobXNnLmRhdGEubGVuZ3RoIDwgKDIgKiAzMikgKyA0KSB7IHRocm93OyB9DQoNCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSB7IHJldHVybiBmYWxzZTsgfQ0KDQogICAgICAgIHVpbnQyNTYgZnJvbUJhbGFuY2UgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsNCg0KICAgICAgICBib29sIHN1ZmZpY2llbnRGdW5kcyA9IGZyb21CYWxhbmNlID49IF92YWx1ZTsNCiAgICAgICAgYm9vbCBvdmVyZmxvd2VkID0gYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VzW190b107DQoNCiAgICAgICAgaWYgKHN1ZmZpY2llbnRGdW5kcyAmJiAhb3ZlcmZsb3dlZCkgew0KICAgICAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQoNCiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KCQkJcmV0dXJuIGZhbHNlOw0KCQl9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIC8vIG1pdGlnYXRlcyB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sNCiAgICAgICAgaWYobXNnLmRhdGEubGVuZ3RoIDwgKDMgKiAzMikgKyA0KSB7IHRocm93OyB9DQoNCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSB7IHJldHVybiBmYWxzZTsgfQ0KDQogICAgICAgIHVpbnQyNTYgZnJvbUJhbGFuY2UgPSBiYWxhbmNlc1tfZnJvbV07DQogICAgICAgIHVpbnQyNTYgYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07DQoNCiAgICAgICAgYm9vbCBzdWZmaWNpZW50RnVuZHMgPSBmcm9tQmFsYW5jZSA8PSBfdmFsdWU7DQogICAgICAgIGJvb2wgc3VmZmljaWVudEFsbG93YW5jZSA9IGFsbG93YW5jZSA8PSBfdmFsdWU7DQogICAgICAgIGJvb2wgb3ZlcmZsb3dlZCA9IGJhbGFuY2VzW190b10gKyBfdmFsdWUgPiBiYWxhbmNlc1tfdG9dOw0KDQogICAgICAgIGlmIChzdWZmaWNpZW50RnVuZHMgJiYgc3VmZmljaWVudEFsbG93YW5jZSAmJiAhb3ZlcmZsb3dlZCkgew0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOw0KDQogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQoNCiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCgkJCXJldHVybiBmYWxzZTsNCgkJfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICAvLyBtaXRpZ2F0ZXMgdGhlIEVSQzIwIHNwZW5kL2FwcHJvdmFsIHJhY2UgY29uZGl0aW9uDQogICAgICAgIGlmIChfdmFsdWUgIT0gMCAmJiBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSAhPSAwKSB7IHJldHVybiBmYWxzZTsgfQ0KDQogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGVuYWJsZVB1cmNoYXNpbmcoKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7IHRocm93OyB9DQoNCiAgICAgICAgcHVyY2hhc2luZ0FsbG93ZWQgPSB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGRpc2FibGVQdXJjaGFzaW5nKCkgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgeyB0aHJvdzsgfQ0KDQogICAgICAgIHB1cmNoYXNpbmdBbGxvd2VkID0gZmFsc2U7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gd2l0aGRyYXdGb3JlaWduVG9rZW5zKGFkZHJlc3MgX3Rva2VuQ29udHJhY3QpIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsgdGhyb3c7IH0NCg0KICAgICAgICBGb3JlaWduVG9rZW4gdG9rZW4gPSBGb3JlaWduVG9rZW4oX3Rva2VuQ29udHJhY3QpOw0KDQogICAgICAgIHVpbnQyNTYgYW1vdW50ID0gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOw0KICAgICAgICByZXR1cm4gdG9rZW4udHJhbnNmZXIob3duZXIsIGFtb3VudCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0U3RhdHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2LCB1aW50MjU2LCB1aW50MjU2LCBib29sKSB7DQogICAgICAgIHJldHVybiAodG90YWxDb250cmlidXRpb24sIHRvdGFsU3VwcGx5LCBtYXhTdXBwbHksIHB1cmNoYXNpbmdBbGxvd2VkKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbigpIHBheWFibGUgew0KICAgICAgICBpZiAoIXB1cmNoYXNpbmdBbGxvd2VkKSB7IHRocm93OyB9DQogICAgICAgIGlmIChtc2cudmFsdWUgPT0gMCkgeyByZXR1cm47IH0NCg0KCQkvL3ByZXZlbnQgdG9rZW5zIGlzc3VlZCBnb2luZyBvdmVyIGN1cnJlbnQgbWF4IHN1cHBseSB1bmxlc3MgaXRzIHRoZSBvd25lcg0KCQlpZiAodG90YWxTdXBwbHkgPiBtYXhTdXBwbHkgJiYgbXNnLnNlbmRlciAhPSBvd25lcikgeyB0aHJvdzsgfQ0KDQogICAgICAgIG93bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7DQoNCiAgICAgICAgdG90YWxDb250cmlidXRpb24gKz0gbXNnLnZhbHVlOw0KICAgICAgICB1aW50MjU2IHRva2Vuc0lzc3VlZCA9IChtc2cudmFsdWUgKiAxMDApOw0KCQl0b3RhbFN1cHBseSArPSB0b2tlbnNJc3N1ZWQ7DQoNCgkJLy9BbGxvdyBvd25lciB0byBpbmNyZWFzZSBtYXggc3VwcGx5IGFzIGRlc2lyZWQNCgkJaWYoIG1zZy5zZW5kZXIgPT0gb3duZXIgKSB7DQoJCQltYXhTdXBwbHkgKz0gKG1zZy52YWx1ZSAqIDEwMDAwMDAwMDAwMDAwMDAwMDApOyAvL21heCBzdXBwbHkgd2lsbCBiZSB2YWx1ZSBvZiBvd25lciBzZW5kZXIgYW1vdW50IHggV2VpDQoJCX0NCg0KCQliYWxhbmNlc1ttc2cuc2VuZGVyXSArPSB0b2tlbnNJc3N1ZWQ7DQogICAgICAgIFRyYW5zZmVyKGFkZHJlc3ModGhpcyksIG1zZy5zZW5kZXIsIHRva2Vuc0lzc3VlZCk7DQogICAgfQ0KDQoJZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7DQp9'