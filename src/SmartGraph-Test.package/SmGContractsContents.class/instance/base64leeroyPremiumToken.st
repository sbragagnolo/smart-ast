base 64 content
base64leeroyPremiumToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KDQpjb250cmFjdCBTYWZlTWF0aCB7DQoNCiAgICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsNCiAgICAgICAgaWYgKCFhc3NlcnRpb24pIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IHgsIHVpbnQyNTYgeSkgaW50ZXJuYWwgcmV0dXJucyh1aW50MjU2KSB7DQogICAgICAgIHVpbnQyNTYgeiA9IHggKyB5Ow0KICAgICAgICBhc3NlcnQoKHogPj0geCkgJiYgKHogPj0geSkpOw0KICAgICAgICByZXR1cm4gejsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzYWZlU3VidHJhY3QodWludDI1NiB4LCB1aW50MjU2IHkpIGludGVybmFsIHJldHVybnModWludDI1Nikgew0KICAgICAgICBhc3NlcnQoeCA+PSB5KTsNCiAgICAgICAgdWludDI1NiB6ID0geCAtIHk7DQogICAgICAgIHJldHVybiB6Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNhZmVNdWx0KHVpbnQyNTYgeCwgdWludDI1NiB5KSBpbnRlcm5hbCByZXR1cm5zKHVpbnQyNTYpIHsNCiAgICAgICAgdWludDI1NiB6ID0geCAqIHk7DQogICAgICAgIGFzc2VydCgoeCA9PSAwKXx8KHoveCA9PSB5KSk7DQogICAgICAgIHJldHVybiB6Ow0KICAgIH0NCg0KfQ0KDQpjb250cmFjdCBUb2tlbiB7DQogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZyk7DQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7DQp9DQoNCi8qICBFUkMgMjAgdG9rZW4gKi8NCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgVG9rZW4gew0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgX3ZhbHVlID4gMCkgew0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgaWYgKGJhbGFuY2VzW19mcm9tXSA+PSBfdmFsdWUgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX3ZhbHVlICYmIF92YWx1ZSA+IDApIHsNCiAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7DQogICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsNCiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgew0KICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQogICAgfQ0KDQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7DQp9DQoNCg0KLyogIEVSQyAyMCB0b2tlbiAqLw0KY29udHJhY3QgTGVlcm95UHJlbWl1bVRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIFNhZmVNYXRoIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCg0KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJMZWVyb3kgUHJlbWl1bSBUb2tlbiI7DQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiTFBUIjsNCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDE4Ow0KICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICIxLjAiOw0KDQogICAgYm9vbCBwdWJsaWMgaXNGaW5hbGl6ZWQ7DQogICAgdWludDI1NiBwdWJsaWMgZnVuZGluZ1N0YXJ0QmxvY2sgPSAzOTY1NTI1Ow0KICAgIHVpbnQyNTYgcHVibGljIGZ1bmRpbmdFbmRCbG9jayA9IDQxMTU1MjU7DQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgcmVzZXJ2ZWRMUFQgPSAzNzUgKiAoMTAqKjYpICogMTAqKmRlY2ltYWxzOw0KICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHRva2VuRXhjaGFuZ2VSYXRlID0gMzIwMDA7DQogICAgdWludDI1NiBwdWJsaWMgY29uc3RhbnQgdG9rZW5DcmVhdGlvbkNhcCA9ICAyMDAwICogKDEwKio2KSAqIDEwKipkZWNpbWFsczsNCiAgICB1aW50MjU2IHB1YmxpYyBjb25zdGFudCB0b2tlbkNyZWF0aW9uTWluID0gIDc3NSAqICgxMCoqNikgKiAxMCoqZGVjaW1hbHM7DQoNCiAgICAvLyBldmVudHMNCiAgICBldmVudCBMb2dSZWZ1bmQoYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICAgIGV2ZW50IENyZWF0ZUxQVChhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQoNCiAgICBmdW5jdGlvbiBMZWVyb3lQcmVtaXVtVG9rZW4oKSB7DQogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICAgICAgdG90YWxTdXBwbHkgPSByZXNlcnZlZExQVDsNCiAgICAgICAgYmFsYW5jZXNbb3duZXJdID0gcmVzZXJ2ZWRMUFQ7DQogICAgICAgIENyZWF0ZUxQVChvd25lciwgcmVzZXJ2ZWRMUFQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgew0KICAgICAgICBjcmVhdGVUb2tlbnMoKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjcmVhdGVUb2tlbnMoKSBwYXlhYmxlIHsNCiAgICAgIGlmIChpc0ZpbmFsaXplZCkgdGhyb3c7DQogICAgICBpZiAoYmxvY2subnVtYmVyIDwgZnVuZGluZ1N0YXJ0QmxvY2spIHRocm93Ow0KICAgICAgaWYgKGJsb2NrLm51bWJlciA+IGZ1bmRpbmdFbmRCbG9jaykgdGhyb3c7DQogICAgICBpZiAobXNnLnZhbHVlID09IDApIHRocm93Ow0KDQogICAgICB1aW50MjU2IHRva2VucyA9IHNhZmVNdWx0KG1zZy52YWx1ZSwgdG9rZW5FeGNoYW5nZVJhdGUpOw0KICAgICAgdWludDI1NiBjaGVja2VkU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG9rZW5zKTsNCg0KICAgICAgaWYgKHRva2VuQ3JlYXRpb25DYXAgPCBjaGVja2VkU3VwcGx5KSB0aHJvdzsNCg0KICAgICAgdG90YWxTdXBwbHkgPSBjaGVja2VkU3VwcGx5Ow0KICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdG9rZW5zOw0KICAgICAgQ3JlYXRlTFBUKG1zZy5zZW5kZXIsIHRva2Vucyk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZmluYWxpemUoKSBleHRlcm5hbCB7DQogICAgICBpZiAoaXNGaW5hbGl6ZWQpIHRocm93Ow0KICAgICAgaWYodG90YWxTdXBwbHkgPCB0b2tlbkNyZWF0aW9uTWluKSB0aHJvdzsNCiAgICAgIGlmKGJsb2NrLm51bWJlciA8PSBmdW5kaW5nRW5kQmxvY2sgJiYgdG90YWxTdXBwbHkgIT0gdG9rZW5DcmVhdGlvbkNhcCkgdGhyb3c7DQogICAgICBpc0ZpbmFsaXplZCA9IHRydWU7DQogICAgICBpZighb3duZXIuc2VuZCh0aGlzLmJhbGFuY2UpKSB0aHJvdzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZWZ1bmQoKSBleHRlcm5hbCB7DQogICAgICBpZihpc0ZpbmFsaXplZCkgdGhyb3c7DQogICAgICBpZiAoYmxvY2subnVtYmVyIDw9IGZ1bmRpbmdFbmRCbG9jaykgdGhyb3c7DQogICAgICBpZih0b3RhbFN1cHBseSA+PSB0b2tlbkNyZWF0aW9uTWluKSB0aHJvdzsNCiAgICAgIHVpbnQyNTYgTFBUVmFsID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07DQogICAgICBpZiAoTFBUVmFsID09IDApIHRocm93Ow0KICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOw0KICAgICAgdG90YWxTdXBwbHkgPSBzYWZlU3VidHJhY3QodG90YWxTdXBwbHksIExQVFZhbCk7DQogICAgICB1aW50MjU2IGV0aFZhbCA9IExQVFZhbCAvIHRva2VuRXhjaGFuZ2VSYXRlOw0KICAgICAgTG9nUmVmdW5kKG1zZy5zZW5kZXIsIGV0aFZhbCk7DQogICAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZChldGhWYWwpKSB0aHJvdzsNCiAgICB9DQp9'