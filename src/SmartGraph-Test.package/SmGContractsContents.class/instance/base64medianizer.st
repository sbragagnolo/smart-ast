base 64 content
base64medianizer
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KDQpjb250cmFjdCBEU0F1dGhvcml0eSB7DQogICAgZnVuY3Rpb24gY2FuQ2FsbCgNCiAgICAgICAgYWRkcmVzcyBzcmMsIGFkZHJlc3MgZHN0LCBieXRlczQgc2lnDQogICAgKSBjb25zdGFudCByZXR1cm5zIChib29sKTsNCn0NCg0KY29udHJhY3QgRFNBdXRoRXZlbnRzIHsNCiAgICBldmVudCBMb2dTZXRBdXRob3JpdHkgKGFkZHJlc3MgaW5kZXhlZCBhdXRob3JpdHkpOw0KICAgIGV2ZW50IExvZ1NldE93bmVyICAgICAoYWRkcmVzcyBpbmRleGVkIG93bmVyKTsNCn0NCg0KY29udHJhY3QgRFNBdXRoIGlzIERTQXV0aEV2ZW50cyB7DQogICAgRFNBdXRob3JpdHkgIHB1YmxpYyAgYXV0aG9yaXR5Ow0KICAgIGFkZHJlc3MgICAgICBwdWJsaWMgIG93bmVyOw0KDQogICAgZnVuY3Rpb24gRFNBdXRoKCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgICAgIExvZ1NldE93bmVyKG1zZy5zZW5kZXIpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldE93bmVyKGFkZHJlc3Mgb3duZXJfKQ0KICAgICAgICBhdXRoDQogICAgew0KICAgICAgICBvd25lciA9IG93bmVyXzsNCiAgICAgICAgTG9nU2V0T3duZXIob3duZXIpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldEF1dGhvcml0eShEU0F1dGhvcml0eSBhdXRob3JpdHlfKQ0KICAgICAgICBhdXRoDQogICAgew0KICAgICAgICBhdXRob3JpdHkgPSBhdXRob3JpdHlfOw0KICAgICAgICBMb2dTZXRBdXRob3JpdHkoYXV0aG9yaXR5KTsNCiAgICB9DQoNCiAgICBtb2RpZmllciBhdXRoIHsNCiAgICAgICAgYXNzZXJ0KGlzQXV0aG9yaXplZChtc2cuc2VuZGVyLCBtc2cuc2lnKSk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgbW9kaWZpZXIgYXV0aG9yaXplZChieXRlczQgc2lnKSB7DQogICAgICAgIGFzc2VydChpc0F1dGhvcml6ZWQobXNnLnNlbmRlciwgc2lnKSk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaXNBdXRob3JpemVkKGFkZHJlc3Mgc3JjLCBieXRlczQgc2lnKSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7DQogICAgICAgIGlmIChzcmMgPT0gYWRkcmVzcyh0aGlzKSkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSBpZiAoc3JjID09IG93bmVyKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIGlmIChhdXRob3JpdHkgPT0gRFNBdXRob3JpdHkoMCkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBhdXRob3JpdHkuY2FuQ2FsbChzcmMsIHRoaXMsIHNpZyk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhc3NlcnQoYm9vbCB4KSBpbnRlcm5hbCB7DQogICAgICAgIGlmICgheCkgdGhyb3c7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBEU05vdGUgew0KICAgIGV2ZW50IExvZ05vdGUoDQogICAgICAgIGJ5dGVzNCAgIGluZGV4ZWQgIHNpZywNCiAgICAgICAgYWRkcmVzcyAgaW5kZXhlZCAgZ3V5LA0KICAgICAgICBieXRlczMyICBpbmRleGVkICBmb28sDQogICAgICAgIGJ5dGVzMzIgIGluZGV4ZWQgIGJhciwNCgl1aW50CSAJICB3YWQsDQogICAgICAgIGJ5dGVzICAgICAgICAgICAgIGZheA0KICAgICkgYW5vbnltb3VzOw0KDQogICAgbW9kaWZpZXIgbm90ZSB7DQogICAgICAgIGJ5dGVzMzIgZm9vOw0KICAgICAgICBieXRlczMyIGJhcjsNCg0KICAgICAgICBhc3NlbWJseSB7DQogICAgICAgICAgICBmb28gOj0gY2FsbGRhdGFsb2FkKDQpDQogICAgICAgICAgICBiYXIgOj0gY2FsbGRhdGFsb2FkKDM2KQ0KICAgICAgICB9DQoNCiAgICAgICAgTG9nTm90ZShtc2cuc2lnLCBtc2cuc2VuZGVyLCBmb28sIGJhciwgbXNnLnZhbHVlLCBtc2cuZGF0YSk7DQoNCiAgICAgICAgXzsNCiAgICB9DQp9DQoNCmNvbnRyYWN0IERTTWF0aCB7DQogICAgDQogICAgLyoNCiAgICBzdGFuZGFyZCB1aW50MjU2IGZ1bmN0aW9ucw0KICAgICAqLw0KDQogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsNCiAgICAgICAgYXNzZXJ0KCh6ID0geCArIHkpID49IHgpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7DQogICAgICAgIGFzc2VydCgoeiA9IHggLSB5KSA8PSB4KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgew0KICAgICAgICBhc3NlcnQoKHogPSB4ICogeSkgPj0geCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsNCiAgICAgICAgeiA9IHggLyB5Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG1pbih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7DQogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsNCiAgICB9DQogICAgZnVuY3Rpb24gbWF4KHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsNCiAgICAgICAgcmV0dXJuIHggPj0geSA/IHggOiB5Ow0KICAgIH0NCg0KICAgIC8qDQogICAgdWludDEyOCBmdW5jdGlvbnMgKGggaXMgZm9yIGhhbGYpDQogICAgICovDQoNCg0KICAgIGZ1bmN0aW9uIGhhZGQodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgew0KICAgICAgICBhc3NlcnQoKHogPSB4ICsgeSkgPj0geCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaHN1Yih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIGFzc2VydCgoeiA9IHggLSB5KSA8PSB4KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBobXVsKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsNCiAgICAgICAgYXNzZXJ0KCh6ID0geCAqIHkpID49IHgpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGhkaXYodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgew0KICAgICAgICB6ID0geCAvIHk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaG1pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsNCiAgICB9DQogICAgZnVuY3Rpb24gaG1heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsNCiAgICB9DQoNCg0KICAgIC8qDQogICAgaW50MjU2IGZ1bmN0aW9ucw0KICAgICAqLw0KDQogICAgZnVuY3Rpb24gaW1pbihpbnQyNTYgeCwgaW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKGludDI1NiB6KSB7DQogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsNCiAgICB9DQogICAgZnVuY3Rpb24gaW1heChpbnQyNTYgeCwgaW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKGludDI1NiB6KSB7DQogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsNCiAgICB9DQoNCiAgICAvKg0KICAgIFdBRCBtYXRoDQogICAgICovDQoNCiAgICB1aW50MTI4IGNvbnN0YW50IFdBRCA9IDEwICoqIDE4Ow0KDQogICAgZnVuY3Rpb24gd2FkZCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaGFkZCh4LCB5KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB3c3ViKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7DQogICAgICAgIHJldHVybiBoc3ViKHgsIHkpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHdtdWwodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgew0KICAgICAgICB6ID0gY2FzdCgodWludDI1Nih4KSAqIHkgKyBXQUQgLyAyKSAvIFdBRCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gd2Rpdih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogV0FEICsgeSAvIDIpIC8geSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gd21pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaG1pbih4LCB5KTsNCiAgICB9DQogICAgZnVuY3Rpb24gd21heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaG1heCh4LCB5KTsNCiAgICB9DQoNCiAgICAvKg0KICAgIFJBWSBtYXRoDQogICAgICovDQoNCiAgICB1aW50MTI4IGNvbnN0YW50IFJBWSA9IDEwICoqIDI3Ow0KDQogICAgZnVuY3Rpb24gcmFkZCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaGFkZCh4LCB5KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByc3ViKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7DQogICAgICAgIHJldHVybiBoc3ViKHgsIHkpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJtdWwodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgew0KICAgICAgICB6ID0gY2FzdCgodWludDI1Nih4KSAqIHkgKyBSQVkgLyAyKSAvIFJBWSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmRpdih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogUkFZICsgeSAvIDIpIC8geSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcnBvdyh1aW50MTI4IHgsIHVpbnQ2NCBuKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsNCiAgICAgICAgLy8gVGhpcyBmYW1vdXMgYWxnb3JpdGhtIGlzIGNhbGxlZCAiZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmciDQogICAgICAgIC8vIGFuZCBjYWxjdWxhdGVzIHhebiB3aXRoIHggYXMgZml4ZWQtcG9pbnQgYW5kIG4gYXMgcmVndWxhciB1bnNpZ25lZC4NCiAgICAgICAgLy8NCiAgICAgICAgLy8gSXQncyBPKGxvZyBuKSwgaW5zdGVhZCBvZiBPKG4pIGZvciBuYWl2ZSByZXBlYXRlZCBtdWx0aXBsaWNhdGlvbi4NCiAgICAgICAgLy8NCiAgICAgICAgLy8gVGhlc2UgZmFjdHMgYXJlIHdoeSBpdCB3b3JrczoNCiAgICAgICAgLy8NCiAgICAgICAgLy8gIElmIG4gaXMgZXZlbiwgdGhlbiB4Xm4gPSAoeF4yKV4obi8yKS4NCiAgICAgICAgLy8gIElmIG4gaXMgb2RkLCAgdGhlbiB4Xm4gPSB4ICogeF4obi0xKSwNCiAgICAgICAgLy8gICBhbmQgYXBwbHlpbmcgdGhlIGVxdWF0aW9uIGZvciBldmVuIHggZ2l2ZXMNCiAgICAgICAgLy8gICAgeF5uID0geCAqICh4XjIpXigobi0xKSAvIDIpLg0KICAgICAgICAvLw0KICAgICAgICAvLyAgQWxzbywgRVZNIGRpdmlzaW9uIGlzIGZsb29yaW5nIGFuZA0KICAgICAgICAvLyAgICBmbG9vclsobi0xKSAvIDJdID0gZmxvb3JbbiAvIDJdLg0KDQogICAgICAgIHogPSBuICUgMiAhPSAwID8geCA6IFJBWTsNCg0KICAgICAgICBmb3IgKG4gLz0gMjsgbiAhPSAwOyBuIC89IDIpIHsNCiAgICAgICAgICAgIHggPSBybXVsKHgsIHgpOw0KDQogICAgICAgICAgICBpZiAobiAlIDIgIT0gMCkgew0KICAgICAgICAgICAgICAgIHogPSBybXVsKHosIHgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcm1pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaG1pbih4LCB5KTsNCiAgICB9DQogICAgZnVuY3Rpb24gcm1heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaG1heCh4LCB5KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjYXN0KHVpbnQyNTYgeCkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIGFzc2VydCgoeiA9IHVpbnQxMjgoeCkpID09IHgpOw0KICAgIH0NCg0KfQ0KDQpjb250cmFjdCBEU1RoaW5nIGlzIERTQXV0aCwgRFNOb3RlLCBEU01hdGggew0KfQ0KDQpjb250cmFjdCBEU1ZhbHVlIGlzIERTVGhpbmcgew0KICAgIGJvb2wgICAgaGFzOw0KICAgIGJ5dGVzMzIgdmFsOw0KICAgIGZ1bmN0aW9uIHBlZWsoKSBjb25zdGFudCByZXR1cm5zIChieXRlczMyLCBib29sKSB7DQogICAgICAgIHJldHVybiAodmFsLGhhcyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIHJlYWQoKSBjb25zdGFudCByZXR1cm5zIChieXRlczMyKSB7DQogICAgICAgIHZhciAod3V0LCBoYXMpID0gcGVlaygpOw0KICAgICAgICBhc3NlcnQoaGFzKTsNCiAgICAgICAgcmV0dXJuIHd1dDsNCiAgICB9DQogICAgZnVuY3Rpb24gcG9rZShieXRlczMyIHd1dCkgbm90ZSBhdXRoIHsNCiAgICAgICAgdmFsID0gd3V0Ow0KICAgICAgICBoYXMgPSB0cnVlOw0KICAgIH0NCiAgICBmdW5jdGlvbiB2b2lkKCkgbm90ZSBhdXRoIHsgLy8gdW5zZXQgdGhlIHZhbHVlDQogICAgICAgIGhhcyA9IGZhbHNlOw0KICAgIH0NCn0NCg0KY29udHJhY3QgTWVkaWFuaXplciBpcyBEU1ZhbHVlIHsNCiAgICBtYXBwaW5nIChieXRlczEyID0+IGFkZHJlc3MpIHB1YmxpYyB2YWx1ZXM7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBieXRlczEyKSBwdWJsaWMgaW5kZXhlczsNCiAgICBieXRlczEyIHB1YmxpYyBuZXh0ID0gMHgxOw0KDQogICAgdWludDk2IHB1YmxpYyBtaW4gPSAweDE7DQoNCiAgICBmdW5jdGlvbiBzZXQoYWRkcmVzcyB3YXQpIGF1dGggew0KICAgICAgICBieXRlczEyIG5leHRJZCA9IGJ5dGVzMTIodWludDk2KG5leHQpICsgMSk7DQogICAgICAgIGFzc2VydChuZXh0SWQgIT0gMHgwKTsNCiAgICAgICAgc2V0KG5leHQsIHdhdCk7DQogICAgICAgIG5leHQgPSBuZXh0SWQ7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2V0KGJ5dGVzMTIgcG9zLCBhZGRyZXNzIHdhdCkgbm90ZSBhdXRoIHsNCiAgICAgICAgaWYgKHBvcyA9PSAweDApIHRocm93Ow0KDQogICAgICAgIGlmICh3YXQgIT0gMCAmJiBpbmRleGVzW3dhdF0gIT0gMCkgdGhyb3c7DQoNCiAgICAgICAgaW5kZXhlc1t2YWx1ZXNbcG9zXV0gPSAwOyAvLyBNYWtpbmcgc3VyZSB0byByZW1vdmUgYSBwb3NzaWJsZSBleGlzdGluZyBhZGRyZXNzIGluIHRoYXQgcG9zaXRpb24NCg0KICAgICAgICBpZiAod2F0ICE9IDApIHsNCiAgICAgICAgICAgIGluZGV4ZXNbd2F0XSA9IHBvczsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhbHVlc1twb3NdID0gd2F0Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldE1pbih1aW50OTYgbWluXykgbm90ZSBhdXRoIHsNCiAgICAgICAgaWYgKG1pbl8gPT0gMHgwKSB0aHJvdzsNCiAgICAgICAgbWluID0gbWluXzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzZXROZXh0KGJ5dGVzMTIgbmV4dF8pIG5vdGUgYXV0aCB7DQogICAgICAgIGlmIChuZXh0XyA9PSAweDApIHRocm93Ow0KICAgICAgICBuZXh0ID0gbmV4dF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdW5zZXQoYnl0ZXMxMiBwb3MpIHsNCiAgICAgICAgc2V0KHBvcywgMCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdW5zZXQoYWRkcmVzcyB3YXQpIHsNCiAgICAgICAgc2V0KGluZGV4ZXNbd2F0XSwgMCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcG9rZSgpIHsNCiAgICAgICAgcG9rZSgwKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwb2tlKGJ5dGVzMzIpIG5vdGUgew0KICAgICAgICAodmFsLCBoYXMpID0gY29tcHV0ZSgpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNvbXB1dGUoKSBjb25zdGFudCByZXR1cm5zIChieXRlczMyLCBib29sKSB7DQogICAgICAgIGJ5dGVzMzJbXSBtZW1vcnkgd3V0cyA9IG5ldyBieXRlczMyW10odWludDk2KG5leHQpIC0gMSk7DQogICAgICAgIHVpbnQ5NiBjdHIgPSAwOw0KICAgICAgICBmb3IgKHVpbnQ5NiBpID0gMTsgaSA8IHVpbnQ5NihuZXh0KTsgaSsrKSB7DQogICAgICAgICAgICBpZiAodmFsdWVzW2J5dGVzMTIoaSldICE9IDApIHsNCiAgICAgICAgICAgICAgICB2YXIgKHd1dCwgd3V6KSA9IERTVmFsdWUodmFsdWVzW2J5dGVzMTIoaSldKS5wZWVrKCk7DQogICAgICAgICAgICAgICAgaWYgKHd1eikgew0KICAgICAgICAgICAgICAgICAgICBpZiAoY3RyID09IDAgfHwgd3V0ID49IHd1dHNbY3RyIC0gMV0pIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHd1dHNbY3RyXSA9IHd1dDsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ5NiBqID0gMDsNCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh3dXQgPj0gd3V0c1tqXSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKzsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodWludDk2IGsgPSBjdHI7IGsgPiBqOyBrLS0pIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3dXRzW2tdID0gd3V0c1trIC0gMV07DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB3dXRzW2pdID0gd3V0Ow0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChjdHIgPCBtaW4pIHJldHVybiAodmFsLCBmYWxzZSk7DQoNCiAgICAgICAgYnl0ZXMzMiB2YWx1ZTsNCiAgICAgICAgaWYgKGN0ciAlIDIgPT0gMCkgew0KICAgICAgICAgICAgdWludDEyOCB2YWwxID0gdWludDEyOCh3dXRzWyhjdHIgLyAyKSAtIDFdKTsNCiAgICAgICAgICAgIHVpbnQxMjggdmFsMiA9IHVpbnQxMjgod3V0c1tjdHIgLyAyXSk7DQogICAgICAgICAgICB2YWx1ZSA9IGJ5dGVzMzIod2RpdihoYWRkKHZhbDEsIHZhbDIpLCAyIGV0aGVyKSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB2YWx1ZSA9IHd1dHNbKGN0ciAtIDEpIC8gMl07DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gKHZhbHVlLCB0cnVlKTsNCiAgICB9DQoNCn0='