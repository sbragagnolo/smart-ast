base 64 content
base64myAdvancedToken7
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMzsNCi8vIFBldGVyJ3MgVGlUb2sgVG9rZW4gQ29udHJhY3QgTXlBZHZhbmNlZFRva2VuNyAyNXRoIEp1bHkgMjAxNw0KDQpjb250cmFjdCBNeUFkdmFuY2VkVG9rZW43ICB7DQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQogICAgdWludDI1NiBwdWJsaWMgc2VsbFByaWNlOw0KICAgIHVpbnQyNTYgcHVibGljIGJ1eVByaWNlOw0KDQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBib29sKSBwdWJsaWMgZnJvemVuQWNjb3VudDsNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOw0KDQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludDI1NiB2YWx1ZSk7DQogICAgZXZlbnQgRnJvemVuRnVuZHMoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJvemVuKTsNCiANCg0KICAgIC8qIFB1YmxpYyB2YXJpYWJsZXMgb2YgdGhlIHRva2VuICovDQogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdUb2tlbiAwLjEnOw0KICAgIHN0cmluZyBwdWJsaWMgbmFtZTsNCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsNCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7DQogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQoNCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsNCiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsNCiAgICB9DQoNCiAgICAvKiBBbGxvdyBhbm90aGVyIGNvbnRyYWN0IHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmICovDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkNCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qIFRoaXMgdW5uYW1lZCBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbmV2ZXIgc29tZW9uZSB0cmllcyB0byBzZW5kIGV0aGVyIHRvIGl0ICovDQogICAgZnVuY3Rpb24gKCkgew0KICAgICAgICByZXZlcnQoKTsgICAgIC8vIFByZXZlbnRzIGFjY2lkZW50YWwgc2VuZGluZyBvZiBldGhlcg0KICAgIH0NCg0KICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIHRvIHRoZSBjcmVhdG9yIG9mIHRoZSBjb250cmFjdCAqLw0KICAgIGZ1bmN0aW9uIE15QWR2YW5jZWRUb2tlbjcoDQogICAgICAgIHVpbnQyNTYgaW5pdGlhbFN1cHBseSwNCiAgICAgICAgc3RyaW5nIHRva2VuTmFtZSwNCiAgICAgICAgdWludDggZGVjaW1hbFVuaXRzLA0KICAgICAgICBzdHJpbmcgdG9rZW5TeW1ib2wNCiAgICApIA0KICAgIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgICAgICANCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zDQogICAgICAgIHRvdGFsU3VwcGx5ID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdG90YWwgc3VwcGx5DQogICAgICAgIG5hbWUgPSB0b2tlbk5hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMNCiAgICAgICAgc3ltYm9sID0gdG9rZW5TeW1ib2w7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzDQogICAgICAgIGRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW91bnQgb2YgZGVjaW1hbHMgZm9yIGRpc3BsYXkgcHVycG9zZXMNCiAgICB9DQogICAgDQogICAgLyogU2VuZCBjb2lucyAqLw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgew0KICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSByZXZlcnQoKTsgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaA0KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MNCiAgICAgICAgaWYgKGZyb3plbkFjY291bnRbbXNnLnNlbmRlcl0pIHJldmVydCgpOyAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBmcm96ZW4NCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlDQogICAgfQ0KDQogICAgLyogQSBjb250cmFjdCBhdHRlbXB0cyB0byBnZXQgdGhlIGNvaW5zICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W19mcm9tXSkgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZnJvemVuICAgICAgICAgICAgDQogICAgICAgIGlmIChiYWxhbmNlT2ZbX2Zyb21dIDwgX3ZhbHVlKSByZXZlcnQoKTsgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaA0KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgcmV2ZXJ0KCk7ICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzDQogICAgICAgIGlmIChfdmFsdWUgPiBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdKSByZXZlcnQoKTsgICAvLyBDaGVjayBhbGxvd2FuY2UNCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSAtPSBfdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbWludFRva2VuKGFkZHJlc3MgdGFyZ2V0LCB1aW50MjU2IG1pbnRlZEFtb3VudCkgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgcmV2ZXJ0KCk7DQogICAgICAgIA0KICAgICAgICBiYWxhbmNlT2ZbdGFyZ2V0XSArPSBtaW50ZWRBbW91bnQ7DQogICAgICAgIHRvdGFsU3VwcGx5ICs9IG1pbnRlZEFtb3VudDsNCiAgICAgICAgVHJhbnNmZXIoMCwgdGhpcywgbWludGVkQW1vdW50KTsNCiAgICAgICAgVHJhbnNmZXIodGhpcywgdGFyZ2V0LCBtaW50ZWRBbW91bnQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGZyZWV6ZUFjY291bnQoYWRkcmVzcyB0YXJnZXQsIGJvb2wgZnJlZXplKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSByZXZlcnQoKTsNCiAgICAgICAgDQogICAgICAgIGZyb3plbkFjY291bnRbdGFyZ2V0XSA9IGZyZWV6ZTsNCiAgICAgICAgRnJvemVuRnVuZHModGFyZ2V0LCBmcmVlemUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldFByaWNlcyh1aW50MjU2IG5ld1NlbGxQcmljZSwgdWludDI1NiBuZXdCdXlQcmljZSkgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgcmV2ZXJ0KCk7DQogICAgICAgIA0KICAgICAgICBzZWxsUHJpY2UgPSBuZXdTZWxsUHJpY2U7DQogICAgICAgIGJ1eVByaWNlID0gbmV3QnV5UHJpY2U7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSB7DQogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlIC8gYnV5UHJpY2U7ICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZXMgdGhlIGFtb3VudA0KICAgICAgICBpZiAoYmFsYW5jZU9mW3RoaXNdIDwgYW1vdW50KSByZXZlcnQoKTsgICAgICAgICAgICAgLy8gY2hlY2tzIGlmIGl0IGhhcyBlbm91Z2ggdG8gc2VsbA0KICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gYW1vdW50OyAgICAgICAgICAgICAgICAgICAvLyBhZGRzIHRoZSBhbW91bnQgdG8gYnV5ZXIncyBiYWxhbmNlDQogICAgICAgIGJhbGFuY2VPZlt0aGlzXSAtPSBhbW91bnQ7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0cyBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlDQogICAgICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIGFtb3VudCk7ICAgICAgICAgICAgICAgIC8vIGV4ZWN1dGUgYW4gZXZlbnQgcmVmbGVjdGluZyB0aGUgY2hhbmdlDQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2VsbCh1aW50MjU2IGFtb3VudCkgew0KICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgYW1vdW50ICkgcmV2ZXJ0KCk7ICAgICAgICAvLyBjaGVja3MgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoIHRvIHNlbGwNCiAgICAgICAgYmFsYW5jZU9mW3RoaXNdICs9IGFtb3VudDsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkcyB0aGUgYW1vdW50IHRvIG93bmVyJ3MgYmFsYW5jZQ0KICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gYW1vdW50OyAgICAgICAgICAgICAgICAgICAvLyBzdWJ0cmFjdHMgdGhlIGFtb3VudCBmcm9tIHNlbGxlcidzIGJhbGFuY2UNCiAgICAgICAgDQogICAgICAgIA0KICAgICAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZChhbW91bnQgKiBzZWxsUHJpY2UpKSB7ICAgICAgICAvLyBzZW5kcyBldGhlciB0byB0aGUgc2VsbGVyLiBJdCdzIGltcG9ydGFudA0KICAgICAgICAgICAgcmV2ZXJ0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBkbyB0aGlzIGxhc3QgdG8gYXZvaWQgcmVjdXJzaW9uIGF0dGFja3MNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRoaXMsIGFtb3VudCk7ICAgICAgICAgICAgLy8gZXhlY3V0ZXMgYW4gZXZlbnQgcmVmbGVjdGluZyBvbiB0aGUgY2hhbmdlDQogICAgICAgIH0gICAgICAgICAgICAgICANCiAgICB9DQp9'