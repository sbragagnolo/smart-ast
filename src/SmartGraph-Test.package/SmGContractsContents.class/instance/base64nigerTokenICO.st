base 64 content
base64nigerTokenICO
	^'Y29udHJhY3QgTmlnZXJUb2tlbklDTyB7DQogICAgDQogICAgZnVuY3Rpb24gbmFtZSgpIGNvbnN0YW50IHJldHVybnMgKHN0cmluZykgeyByZXR1cm4gIk5pZ2dlckNvaW4iOyB9DQogICAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7IHJldHVybiAiTkdSIjsgfQ0KICAgIGZ1bmN0aW9uIGRlY2ltYWxzKCkgY29uc3RhbnQgcmV0dXJucyAodWludDgpIHsgcmV0dXJuIDQ7IH0NCgkNCg0KICAgIHVpbnQyNTYgcHVibGljIElOSVRJQUxfU1VQUExZOw0KCXVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Ow0KCQ0KCXVpbnQyNTYgcHVibGljIHRvdGFsQ29udHJpYjsNCiAgICANCiAgICB1aW50MjU2IHB1YmxpYyByYXRlOw0KICANCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsJCQkJCQkgICAgLy9pbml0IG93bmVyIGFkZHJlc3MNCgkNCgl1aW50MjU2IHB1YmxpYyBhbW91bnQ7DQoJDQoJDQoJZnVuY3Rpb24gTmlnZXJUb2tlbklDTygpIHsNCiAgICAgICAgSU5JVElBTF9TVVBQTFkgPSA2MDAwMDAwMDAwMDsgICAgICAgICAgICAgICAgICAvL1N0YXJ0aW5nIGNvaW4gc3VwcGx5DQoJCXRvdGFsU3VwcGx5ID0gMDsNCgkJDQoJCXRvdGFsQ29udHJpYiA9IDA7DQogICAgICAgIA0KICAgICAgICByYXRlID0gMTQ4ODAwMDAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0hvdyBtYW55IHRva2VucyBwZXIgRVRIIGdpdmVuDQoJCQ0KCQlvd25lciA9IG1zZy5zZW5kZXI7CQkJICAgICAgICAgICAgICAgIC8vTWFrZSBvd25lciBvZiBjb250cmFjdCB0aGUgY3JlYXRvcg0KCQkNCgkJYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBJTklUSUFMX1NVUFBMWTsJCS8vU2VuZCBvd25lciBvZiBjb250cmFjdCBhbGwgc3RhcnRpbmcgdG9rZW5zDQoJfQ0KCQ0KCQ0KCS8vVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiBFdGhlciBpcyBzZW50IHRvIHRoZSBjb250cmFjdCBhZGRyZXNzDQoJLy9FdmVuIGlmIDAgZXRoZXIgaXMgc2VudC4NCglmdW5jdGlvbiAoKSBwYXlhYmxlIHsNCgkgICAgDQoJICAgIHVpbnQyNTYgdHJ5QW1vdW50ID0gZGl2KChtdWwobXNnLnZhbHVlLCByYXRlKSksIDEgZXRoZXIpOyAgICAgICAgICAgICAgICAgICAvL0Rvbid0IGxldCBwZW9wbGUgYnV5IG1vcmUgdG9rZW5zIHRoYW4gdGhlcmUgYXJlLg0KCSAgICANCgkJaWYgKG1zZy52YWx1ZSA9PSAwIHx8IG1zZy52YWx1ZSA8IDAgfHwgYmFsYW5jZU9mKG93bmVyKSA8IHRyeUFtb3VudCkgewkJLy9JZiB6ZXJvIGV0aGVyIGlzIHNlbnQsIGtpbGwuIERvIG5vdGhpbmcuIA0KCQkJcmV2ZXJ0KCk7DQoJCX0NCgkJDQoJICAgIGFtb3VudCA9IDA7CQkJCQkJCQkJICAgICAgICAgICAgICAgIC8vc2V0IHRoZSAnYW1vdW50JyB2YXIgYmFjayB0byB6ZXJvDQoJCWFtb3VudCA9IGRpdigobXVsKG1zZy52YWx1ZSwgcmF0ZSkpLCAxIGV0aGVyKTsJCQkJLy90YWtlIHNlbnQgZXRoZXIsIG11bHRpcGx5IGl0IGJ5IHRoZSByYXRlIHRoZW4gZGl2aWRlIGJ5IDEgZXRoZXIuDQoJCXRyYW5zZmVyRnJvbShvd25lciwgbXNnLnNlbmRlciwgYW1vdW50KTsgICAgICAgICAgICAgICAgICAgIC8vU2VuZCB0b2tlbnMgdG8gYnV5ZXINCgkJdG90YWxTdXBwbHkgKz0gYW1vdW50OwkJCQkJCQkJCQkvL0tlZXAgdHJhY2sgb2YgaG93IG1hbnkgaGF2ZSBiZWVuIHNvbGQuDQoJCXRvdGFsQ29udHJpYiA9ICh0b3RhbENvbnRyaWIgKyBtc2cudmFsdWUpOw0KCQlhbW91bnQgPSAwOwkJCQkJCQkJCSAgICAgICAgICAgICAgICAvL3NldCB0aGUgJ2Ftb3VudCcgdmFyIGJhY2sgdG8gemVybw0KCQkNCgkJDQoJCW93bmVyLnRyYW5zZmVyKG1zZy52YWx1ZSk7CQkJCQkgICAgICAgICAgICAgICAgLy9TZW5kIHRoZSBFVEggdG8gY29udHJhY3Qgb3duZXIuDQoNCgl9CQ0KCQ0KCQ0KCQ0KICANCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQogIA0KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludDI1NikgYmFsYW5jZXM7DQoNCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQoNCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSB7IHJldHVybiBmYWxzZTsgfQ0KDQogICAgICAgIHVpbnQyNTYgZnJvbUJhbGFuY2UgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsNCg0KICAgICAgICBib29sIHN1ZmZpY2llbnRGdW5kcyA9IGZyb21CYWxhbmNlID49IF92YWx1ZTsNCiAgICAgICAgYm9vbCBvdmVyZmxvd2VkID0gYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VzW190b107DQogICAgICAgIA0KICAgICAgICBpZiAoc3VmZmljaWVudEZ1bmRzICYmICFvdmVyZmxvd2VkKSB7DQogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQ0KICAgIH0NCg0KDQoNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07IH0NCg0KDQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgICAgICBpZiAoX3ZhbHVlID09IDApIHsgcmV0dXJuIGZhbHNlOyB9DQogICAgICAgIA0KICAgICAgICB1aW50MjU2IGZyb21CYWxhbmNlID0gYmFsYW5jZXNbb3duZXJdOw0KDQogICAgICAgIGJvb2wgc3VmZmljaWVudEZ1bmRzID0gZnJvbUJhbGFuY2UgPj0gX3ZhbHVlOw0KDQogICAgICAgIGlmIChzdWZmaWNpZW50RnVuZHMpIHsNCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgICAgICAgICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0NCiAgICB9DQoNCgkNCiAgICBmdW5jdGlvbiBnZXRTdGF0cygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYsIHVpbnQyNTYpIHsNCiAgICAgICAgcmV0dXJuICh0b3RhbFN1cHBseSwgdG90YWxDb250cmliKTsNCiAgICB9DQoNCgkNCgkNCiAgZnVuY3Rpb24gbXVsKHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgdWludDI1NiBjID0gYSAqIGI7DQogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KDQogIGZ1bmN0aW9uIGRpdih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikgew0KICAgIC8vIGFzc2VydChiID4gMCk7IC8vIFNvbGlkaXR5IGF1dG9tYXRpY2FsbHkgdGhyb3dzIHdoZW4gZGl2aWRpbmcgYnkgMA0KICAgIHVpbnQyNTYgYyA9IGEgLyBiOw0KICAgIC8vIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOyAvLyBUaGVyZSBpcyBubyBjYXNlIGluIHdoaWNoIHRoaXMgZG9lc24ndCBob2xkDQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBzdWIodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICBhc3NlcnQoYiA8PSBhKTsNCiAgICByZXR1cm4gYSAtIGI7DQogIH0NCg0KICBmdW5jdGlvbiBhZGQodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICB1aW50MjU2IGMgPSBhICsgYjsNCiAgICBhc3NlcnQoYyA+PSBhKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KCQ0KCQ0KCQ0KfQ=='