base 64 content
base64presale2
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC40Ow0KDQovKioNCiAqIEB0aXRsZSBDb250cmFjdCBmb3Igb2JqZWN0IHRoYXQgaGF2ZSBhbiBvd25lcg0KICovDQpjb250cmFjdCBPd25lZCB7DQogICAgLyoqDQogICAgICogQ29udHJhY3Qgb3duZXIgYWRkcmVzcw0KICAgICAqLw0KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOw0KDQogICAgLyoqDQogICAgICogQGRldiBEZWxlZ2F0ZSBjb250cmFjdCB0byBhbm90aGVyIHBlcnNvbg0KICAgICAqIEBwYXJhbSBfb3duZXIgTmV3IG93bmVyIGFkZHJlc3MgDQogICAgICovDQogICAgZnVuY3Rpb24gc2V0T3duZXIoYWRkcmVzcyBfb3duZXIpIG9ubHlPd25lcg0KICAgIHsgb3duZXIgPSBfb3duZXI7IH0NCg0KICAgIC8qKg0KICAgICAqIEBkZXYgT3duZXIgY2hlY2sgbW9kaWZpZXINCiAgICAgKi8NCiAgICBtb2RpZmllciBvbmx5T3duZXIgeyBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7IF87IH0NCn0NCg0KLyoqDQogKiBAdGl0bGUgQ29tbW9uIHBhdHRlcm4gZm9yIGRlc3Ryb3lhYmxlIGNvbnRyYWN0cyANCiAqLw0KY29udHJhY3QgRGVzdHJveWFibGUgew0KICAgIGFkZHJlc3MgcHVibGljIGhhbW1lcjsNCg0KICAgIC8qKg0KICAgICAqIEBkZXYgSGFtbWVyIHNldHRlcg0KICAgICAqIEBwYXJhbSBfaGFtbWVyIE5ldyBoYW1tZXIgYWRkcmVzcw0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHNldEhhbW1lcihhZGRyZXNzIF9oYW1tZXIpIG9ubHlIYW1tZXINCiAgICB7IGhhbW1lciA9IF9oYW1tZXI7IH0NCg0KICAgIC8qKg0KICAgICAqIEBkZXYgRGVzdHJveSBjb250cmFjdCBhbmQgc2NydWIgYSBkYXRhDQogICAgICogQG5vdGljZSBPbmx5IGhhbW1lciBjYW4gY2FsbCBpdCANCiAgICAgKi8NCiAgICBmdW5jdGlvbiBkZXN0cm95KCkgb25seUhhbW1lcg0KICAgIHsgc3VpY2lkZShtc2cuc2VuZGVyKTsgfQ0KDQogICAgLyoqDQogICAgICogQGRldiBIYW1tZXIgY2hlY2sgbW9kaWZpZXINCiAgICAgKi8NCiAgICBtb2RpZmllciBvbmx5SGFtbWVyIHsgaWYgKG1zZy5zZW5kZXIgIT0gaGFtbWVyKSB0aHJvdzsgXzsgfQ0KfQ0KDQovKioNCiAqIEB0aXRsZSBHZW5lcmljIG93bmVkIGRlc3Ryb3lhYmxlIGNvbnRyYWN0DQogKi8NCmNvbnRyYWN0IE9iamVjdCBpcyBPd25lZCwgRGVzdHJveWFibGUgew0KICAgIGZ1bmN0aW9uIE9iamVjdCgpIHsNCiAgICAgICAgb3duZXIgID0gbXNnLnNlbmRlcjsNCiAgICAgICAgaGFtbWVyID0gbXNnLnNlbmRlcjsNCiAgICB9DQp9DQoNCi8vIFN0YW5kYXJkIHRva2VuIGludGVyZmFjZSAoRVJDIDIwKQ0KLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwDQpjb250cmFjdCBFUkMyMCANCnsNCi8vIEZ1bmN0aW9uczoNCiAgICAvLy8gQHJldHVybiB0b3RhbCBhbW91bnQgb2YgdG9rZW5zDQogICAgdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7DQoNCiAgICAvLy8gQHBhcmFtIF9vd25lciBUaGUgYWRkcmVzcyBmcm9tIHdoaWNoIHRoZSBiYWxhbmNlIHdpbGwgYmUgcmV0cmlldmVkDQogICAgLy8vIEByZXR1cm4gVGhlIGJhbGFuY2UNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOw0KDQogICAgLy8vIEBub3RpY2Ugc2VuZCBgX3ZhbHVlYCB0b2tlbiB0byBgX3RvYCBmcm9tIGBtc2cuc2VuZGVyYA0KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQNCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkDQogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90DQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKTsNCg0KICAgIC8vLyBAbm90aWNlIHNlbmQgYF92YWx1ZWAgdG9rZW4gdG8gYF90b2AgZnJvbSBgX2Zyb21gIG9uIHRoZSBjb25kaXRpb24gaXQgaXMgYXBwcm92ZWQgYnkgYF9mcm9tYA0KICAgIC8vLyBAcGFyYW0gX2Zyb20gVGhlIGFkZHJlc3Mgb2YgdGhlIHNlbmRlcg0KICAgIC8vLyBAcGFyYW0gX3RvIFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQNCiAgICAvLy8gQHBhcmFtIF92YWx1ZSBUaGUgYW1vdW50IG9mIHRva2VuIHRvIGJlIHRyYW5zZmVycmVkDQogICAgLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwgb3Igbm90DQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7DQoNCiAgICAvLy8gQG5vdGljZSBgbXNnLnNlbmRlcmAgYXBwcm92ZXMgYF9hZGRyYCB0byBzcGVuZCBgX3ZhbHVlYCB0b2tlbnMNCiAgICAvLy8gQHBhcmFtIF9zcGVuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IGFibGUgdG8gdHJhbnNmZXIgdGhlIHRva2Vucw0KICAgIC8vLyBAcGFyYW0gX3ZhbHVlIFRoZSBhbW91bnQgb2Ygd2VpIHRvIGJlIGFwcHJvdmVkIGZvciB0cmFuc2Zlcg0KICAgIC8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGFwcHJvdmFsIHdhcyBzdWNjZXNzZnVsIG9yIG5vdA0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wpOw0KDQogICAgLy8vIEBwYXJhbSBfb3duZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgb3duaW5nIHRva2Vucw0KICAgIC8vLyBAcGFyYW0gX3NwZW5kZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgYWJsZSB0byB0cmFuc2ZlciB0aGUgdG9rZW5zDQogICAgLy8vIEByZXR1cm4gQW1vdW50IG9mIHJlbWFpbmluZyB0b2tlbnMgYWxsb3dlZCB0byBzcGVudA0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nik7DQoNCi8vIEV2ZW50czoNCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsNCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKTsNCn0NCg0KY29udHJhY3QgUHJlc2FsZSBpcyBPYmplY3Qgew0KICAgIEVSQzIwICAgcHVibGljIHRva2VuOw0KICAgIHVpbnQyNTYgcHVibGljIGJvdW50eTsNCiAgICB1aW50MjU2IHB1YmxpYyBkb25hdGlvbjsNCg0KICAgIC8qKg0KICAgICAqIEBkZXYgUHJlc2FsZSBjb250cmFjdCBjb25zdHJ1Y3Rvcg0KICAgICAqIEBwYXJhbSBfdG9rZW4gQm91bnR5IHRva2VuIGFkZHJlc3MNCiAgICAgKiBAcGFyYW0gX2JvdW50eSBCb3VudCB2YWx1ZSBieSBkb25hdGlvbg0KICAgICAqIEBwYXJhbSBfZG9uYXRpb24gRG9uYXRpb24gdmFsdWUNCiAgICAgKi8NCiAgICBmdW5jdGlvbiBQcmVzYWxlKGFkZHJlc3MgX3Rva2VuLCB1aW50MjU2IF9ib3VudHksIHVpbnQyNTYgX2RvbmF0aW9uKSB7DQogICAgICAgIHRva2VuICAgID0gRVJDMjAoX3Rva2VuKTsNCiAgICAgICAgYm91bnR5ICAgPSBfYm91bnR5Ow0KICAgICAgICBkb25hdGlvbiA9IF9kb25hdGlvbjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAZGV2IENhbmNlbCBwcmVzYWxlIGNvbnRyYWN0IGJ5IG93bmVyLCBib3VudHkgcmVmdW5kZWQgdG8gb3duZXINCiAgICAgKi8NCiAgICBmdW5jdGlvbiBjYW5jZWwoKSBvbmx5T3duZXIgew0KICAgICAgICBpZiAoIXRva2VuLnRyYW5zZmVyKG93bmVyLCBib3VudHkpKSB0aHJvdzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAqIEBkZXYgQWNjZXB0IHByZXNhbGUgY29udHJhY3QsDQogICAgKiAgICAgIGJvdW50eSB0cmFuc2ZlcmVkIHRvIHNlbmRlciAtIGRvbmF0aW9uIHRvIG93bmVyDQogICAgKi8NCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsNCiAgICAgICAgaWYgKG1zZy52YWx1ZSAhPSBkb25hdGlvbikgdGhyb3c7DQogICAgICAgIGlmICghdG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgYm91bnR5KSkgdGhyb3c7DQogICAgICAgIGlmICghb3duZXIuc2VuZChtc2cudmFsdWUpKSB0aHJvdzsNCiAgICB9DQp9'