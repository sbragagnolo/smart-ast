base 64 content
base64presaleToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC40Ow0KDQovLyBFUkMyMCB0b2tlbiBpbnRlcmZhY2UgaXMgaW1wbGVtZW50ZWQgb25seSBwYXJ0aWFsbHkNCi8vIChubyBTYWZlTWF0aCBpcyB1c2VkIGJlY2F1c2UgY29udHJhY3QgY29kZSBpcyB2ZXJ5IHNpbXBsZSkNCi8vIA0KLy8gU29tZSBmdW5jdGlvbnMgbGVmdCB1bmRlZmluZWQ6DQovLyAgLSB0cmFuc2ZlciwgdHJhbnNmZXJGcm9tLA0KLy8gIC0gYXBwcm92ZSwgYWxsb3dhbmNlLg0KY29udHJhY3QgUHJlc2FsZVRva2VuDQp7DQovLy8gRmllbGRzOg0KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJTcXVhckV4IFByaXZhdGUgUm91bmQgU1FFWCBUb2tlbiI7DQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiU1FFWCI7DQogICAgdWludCBwdWJsaWMgY29uc3RhbnQgZGVjaW1hbHMgPSAxODsNCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBQUklDRSA9IDE3MDA7ICAvLyBwZXIgMSBFdGhlcg0KDQogICAgLy8gIHByaWNlDQogICAgLy8gQ2FwIGlzIDI1MDAgRVRIDQogICAgLy8gMSBFVEggPSAxNzAwIFByaXZhdGUgUm91bmQgU1FFWCB0b2tlbnMNCiAgICAvLyANCiAgICAvLyBFVEggcHJpY2UgfjIwMCQgZm9yIDMwLjA3LjIwMTcNCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBUT0tFTl9TVVBQTFlfTElNSVQgPSBQUklDRSAqIDI1MDAgKiAoMSBldGhlciAvIDEgd2VpKTsNCg0KICAgIGVudW0gU3RhdGV7DQogICAgICAgSW5pdCwNCiAgICAgICBSdW5uaW5nLA0KICAgICAgIFBhdXNlZCwNCiAgICAgICBNaWdyYXRpbmcsDQogICAgICAgTWlncmF0ZWQNCiAgICB9DQoNCiAgICBTdGF0ZSBwdWJsaWMgY3VycmVudFN0YXRlID0gU3RhdGUuUnVubmluZzsNCiAgICB1aW50IHB1YmxpYyB0b3RhbFN1cHBseSA9IDA7IC8vIGFtb3VudCBvZiB0b2tlbnMgYWxyZWFkeSBzb2xkDQoNCiAgICAvLyBHYXRoZXJlZCBmdW5kcyBjYW4gYmUgd2l0aGRyYXduIG9ubHkgdG8gZXNjcm93J3MgYWRkcmVzcy4NCiAgICBhZGRyZXNzIHB1YmxpYyBlc2Nyb3cgPSAwOw0KDQogICAgLy8gVG9rZW4gbWFuYWdlciBoYXMgZXhjbHVzaXZlIHByaXZlbGVnZXMgdG8gY2FsbCBhZG1pbmlzdHJhdGl2ZQ0KICAgIC8vIGZ1bmN0aW9ucyBvbiB0aGlzIGNvbnRyYWN0Lg0KICAgIGFkZHJlc3MgcHVibGljIHRva2VuTWFuYWdlciA9IDA7DQoNCiAgICAvLyBDcm93ZHNhbGUgbWFuYWdlciBoYXMgZXhjbHVzaXZlIHByaXZlbGVnZXMgdG8gYnVybiBwcmVzYWxlIHRva2Vucy4NCiAgICBhZGRyZXNzIHB1YmxpYyBjcm93ZHNhbGVNYW5hZ2VyID0gMDsNCg0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBiYWxhbmNlOw0KDQovLy8gTW9kaWZpZXJzOg0KICAgIG1vZGlmaWVyIG9ubHlUb2tlbk1hbmFnZXIoKSAgICAgeyBpZihtc2cuc2VuZGVyICE9IHRva2VuTWFuYWdlcikgdGhyb3c7IF87IH0NCiAgICBtb2RpZmllciBvbmx5Q3Jvd2RzYWxlTWFuYWdlcigpIHsgaWYobXNnLnNlbmRlciAhPSBjcm93ZHNhbGVNYW5hZ2VyKSB0aHJvdzsgXzsgfQ0KICAgIG1vZGlmaWVyIG9ubHlJblN0YXRlKFN0YXRlIHN0YXRlKXsgaWYoc3RhdGUgIT0gY3VycmVudFN0YXRlKSB0aHJvdzsgXzsgfQ0KDQovLy8gRXZlbnRzOg0KICAgIGV2ZW50IExvZ0J1eShhZGRyZXNzIGluZGV4ZWQgb3duZXIsIHVpbnQgdmFsdWUpOw0KICAgIGV2ZW50IExvZ0J1cm4oYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50IHZhbHVlKTsNCiAgICBldmVudCBMb2dTdGF0ZVN3aXRjaChTdGF0ZSBuZXdTdGF0ZSk7DQoNCi8vLyBGdW5jdGlvbnM6DQogICAgLy8vIEBkZXYgQ29uc3RydWN0b3INCiAgICAvLy8gQHBhcmFtIF90b2tlbk1hbmFnZXIgVG9rZW4gbWFuYWdlciBhZGRyZXNzLg0KICAgIGZ1bmN0aW9uIFByZXNhbGVUb2tlbihhZGRyZXNzIF90b2tlbk1hbmFnZXIsIGFkZHJlc3MgX2VzY3JvdykgDQogICAgew0KICAgICAgICBpZihfdG9rZW5NYW5hZ2VyPT0wKSB0aHJvdzsNCiAgICAgICAgaWYoX2VzY3Jvdz09MCkgdGhyb3c7DQoNCiAgICAgICAgdG9rZW5NYW5hZ2VyID0gX3Rva2VuTWFuYWdlcjsNCiAgICAgICAgZXNjcm93ID0gX2VzY3JvdzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBidXlUb2tlbnMoYWRkcmVzcyBfYnV5ZXIpIHB1YmxpYyBwYXlhYmxlIG9ubHlJblN0YXRlKFN0YXRlLlJ1bm5pbmcpDQogICAgew0KICAgICAgICBpZihtc2cudmFsdWUgPT0gMCkgdGhyb3c7DQogICAgICAgIHVpbnQgbmV3VG9rZW5zID0gbXNnLnZhbHVlICogUFJJQ0U7DQoNCiAgICAgICAgaWYgKHRvdGFsU3VwcGx5ICsgbmV3VG9rZW5zID4gVE9LRU5fU1VQUExZX0xJTUlUKSB0aHJvdzsNCg0KICAgICAgICBiYWxhbmNlW19idXllcl0gKz0gbmV3VG9rZW5zOw0KICAgICAgICB0b3RhbFN1cHBseSArPSBuZXdUb2tlbnM7DQoNCiAgICAgICAgTG9nQnV5KF9idXllciwgbmV3VG9rZW5zKTsNCiAgICB9DQoNCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiB0b2tlbnMgb3duZWQgYnkgZ2l2ZW4gYWRkcmVzcy4NCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLg0KICAgIGZ1bmN0aW9uIGJ1cm5Ub2tlbnMoYWRkcmVzcyBfb3duZXIpIHB1YmxpYyBvbmx5Q3Jvd2RzYWxlTWFuYWdlciBvbmx5SW5TdGF0ZShTdGF0ZS5NaWdyYXRpbmcpDQogICAgew0KICAgICAgICB1aW50IHRva2VucyA9IGJhbGFuY2VbX293bmVyXTsNCiAgICAgICAgaWYodG9rZW5zID09IDApIHRocm93Ow0KDQogICAgICAgIGJhbGFuY2VbX293bmVyXSA9IDA7DQogICAgICAgIHRvdGFsU3VwcGx5IC09IHRva2VuczsNCg0KICAgICAgICBMb2dCdXJuKF9vd25lciwgdG9rZW5zKTsNCg0KICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IHN3aXRjaCBwaGFzZSB3aGVuIG1pZ3JhdGlvbiBpcyBkb25lLg0KICAgICAgICBpZih0b3RhbFN1cHBseSA9PSAwKSANCiAgICAgICAgew0KICAgICAgICAgICAgY3VycmVudFN0YXRlID0gU3RhdGUuTWlncmF0ZWQ7DQogICAgICAgICAgICBMb2dTdGF0ZVN3aXRjaChTdGF0ZS5NaWdyYXRlZCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLy8gQGRldiBSZXR1cm5zIG51bWJlciBvZiB0b2tlbnMgb3duZWQgYnkgZ2l2ZW4gYWRkcmVzcy4NCiAgICAvLy8gQHBhcmFtIF9vd25lciBBZGRyZXNzIG9mIHRva2VuIG93bmVyLg0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgDQogICAgew0KICAgICAgICByZXR1cm4gYmFsYW5jZVtfb3duZXJdOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldFByZXNhbGVTdGF0ZShTdGF0ZSBfbmV4dFN0YXRlKSBwdWJsaWMgb25seVRva2VuTWFuYWdlcg0KICAgIHsNCiAgICAgICAgLy8gSW5pdCAtPiBSdW5uaW5nDQogICAgICAgIC8vIFJ1bm5pbmcgLT4gUGF1c2VkDQogICAgICAgIC8vIFJ1bm5pbmcgLT4gTWlncmF0aW5nDQogICAgICAgIC8vIFBhdXNlZCAtPiBSdW5uaW5nDQogICAgICAgIC8vIFBhdXNlZCAtPiBNaWdyYXRpbmcNCiAgICAgICAgLy8gTWlncmF0aW5nIC0+IE1pZ3JhdGVkDQogICAgICAgIGJvb2wgY2FuU3dpdGNoU3RhdGUNCiAgICAgICAgICAgICA9ICAoY3VycmVudFN0YXRlID09IFN0YXRlLkluaXQgJiYgX25leHRTdGF0ZSA9PSBTdGF0ZS5SdW5uaW5nKQ0KICAgICAgICAgICAgIHx8IChjdXJyZW50U3RhdGUgPT0gU3RhdGUuUnVubmluZyAmJiBfbmV4dFN0YXRlID09IFN0YXRlLlBhdXNlZCkNCiAgICAgICAgICAgICAvLyBzd2l0Y2ggdG8gbWlncmF0aW9uIHBoYXNlIG9ubHkgaWYgY3Jvd2RzYWxlIG1hbmFnZXIgaXMgc2V0DQogICAgICAgICAgICAgfHwgKChjdXJyZW50U3RhdGUgPT0gU3RhdGUuUnVubmluZyB8fCBjdXJyZW50U3RhdGUgPT0gU3RhdGUuUGF1c2VkKQ0KICAgICAgICAgICAgICAgICAmJiBfbmV4dFN0YXRlID09IFN0YXRlLk1pZ3JhdGluZw0KICAgICAgICAgICAgICAgICAmJiBjcm93ZHNhbGVNYW5hZ2VyICE9IDB4MCkNCiAgICAgICAgICAgICB8fCAoY3VycmVudFN0YXRlID09IFN0YXRlLlBhdXNlZCAmJiBfbmV4dFN0YXRlID09IFN0YXRlLlJ1bm5pbmcpDQogICAgICAgICAgICAgLy8gc3dpdGNoIHRvIG1pZ3JhdGVkIG9ubHkgaWYgZXZlcnl0aW5nIGlzIG1pZ3JhdGVkDQogICAgICAgICAgICAgfHwgKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRpbmcgJiYgX25leHRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRlZA0KICAgICAgICAgICAgICAgICAmJiB0b3RhbFN1cHBseSA9PSAwKTsNCg0KICAgICAgICBpZighY2FuU3dpdGNoU3RhdGUpIHRocm93Ow0KDQogICAgICAgIGN1cnJlbnRTdGF0ZSA9IF9uZXh0U3RhdGU7DQogICAgICAgIExvZ1N0YXRlU3dpdGNoKF9uZXh0U3RhdGUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHdpdGhkcmF3RXRoZXIoKSBwdWJsaWMgb25seVRva2VuTWFuYWdlcg0KICAgIHsNCiAgICAgICAgaWYodGhpcy5iYWxhbmNlID4gMCkgDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmKCFlc2Nyb3cuc2VuZCh0aGlzLmJhbGFuY2UpKSB0aHJvdzsNCiAgICAgICAgfQ0KICAgIH0NCg0KLy8vIFNldHRlcnMvZ2V0dGVycw0KICAgIGZ1bmN0aW9uIHNldFRva2VuTWFuYWdlcihhZGRyZXNzIF9tZ3IpIHB1YmxpYyBvbmx5VG9rZW5NYW5hZ2VyDQogICAgew0KICAgICAgICB0b2tlbk1hbmFnZXIgPSBfbWdyOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldENyb3dkc2FsZU1hbmFnZXIoYWRkcmVzcyBfbWdyKSBwdWJsaWMgb25seVRva2VuTWFuYWdlcg0KICAgIHsNCiAgICAgICAgLy8gWW91IGNhbid0IGNoYW5nZSBjcm93ZHNhbGUgY29udHJhY3Qgd2hlbiBtaWdyYXRpb24gaXMgaW4gcHJvZ3Jlc3MuDQogICAgICAgIGlmKGN1cnJlbnRTdGF0ZSA9PSBTdGF0ZS5NaWdyYXRpbmcpIHRocm93Ow0KDQogICAgICAgIGNyb3dkc2FsZU1hbmFnZXIgPSBfbWdyOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFRva2VuTWFuYWdlcigpY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIHRva2VuTWFuYWdlcjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRDcm93ZHNhbGVNYW5hZ2VyKCljb25zdGFudCByZXR1cm5zKGFkZHJlc3MpDQogICAgew0KICAgICAgICByZXR1cm4gY3Jvd2RzYWxlTWFuYWdlcjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRDdXJyZW50U3RhdGUoKWNvbnN0YW50IHJldHVybnMoU3RhdGUpDQogICAgew0KICAgICAgICByZXR1cm4gY3VycmVudFN0YXRlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFByaWNlKCljb25zdGFudCByZXR1cm5zKHVpbnQpDQogICAgew0KICAgICAgICByZXR1cm4gUFJJQ0U7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0VG90YWxTdXBwbHkoKWNvbnN0YW50IHJldHVybnModWludCkNCiAgICB7DQogICAgICAgIHJldHVybiB0b3RhbFN1cHBseTsNCiAgICB9DQoNCg0KICAgIC8vIERlZmF1bHQgZmFsbGJhY2sgZnVuY3Rpb24NCiAgICBmdW5jdGlvbigpIHBheWFibGUgDQogICAgew0KICAgICAgICBidXlUb2tlbnMobXNnLnNlbmRlcik7DQogICAgfQ0KfQ=='