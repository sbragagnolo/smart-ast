base 64 content
base64presaleToken4
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC40Ow0KDQoNCi8vIEVSQzIwIHRva2VuIGludGVyZmFjZSBpcyBpbXBsZW1lbnRlZCBvbmx5IHBhcnRpYWxseS4NCg0KLy8gIHNvbWUgZnVuY3Rpb25zIGFyZSBub3QgaW1wbGVtZW50ZWQgdW5kZWZpbmVkOg0KLy8gIC0gdHJhbnNmZXIsIHRyYW5zZmVyRnJvbSwNCi8vICAtIGFwcHJvdmUsIGFsbG93YW5jZS4NCi8vIGhlbmNlICBhbiBlY29ub21pY2FsIGluY2VudGl2ZSB0byBpbmNyZWFzZSB0aGUgdmFsdWUgb2YgdGhlIHRva2VuLCBhbmQgaW52ZXN0b3JzIHByb3RlY3Rpb24gZnJvbSB0aGUgcmlzayBvZiBpbW1lZGlhdGUgdG9rZW4gZHVtcGluZyBmb2xsb3dpbmcgSUNPDQoNCmNvbnRyYWN0IFByZXNhbGVUb2tlbiB7DQoNCiAgICANCiAgICBmdW5jdGlvbiBQcmVzYWxlVG9rZW4oYWRkcmVzcyBfdG9rZW5NYW5hZ2VyKSB7DQogICAgICAgIHRva2VuTWFuYWdlciA9IF90b2tlbk1hbmFnZXI7DQogICAgfQ0KDQogICAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIkRPQkkgUHJlc2FsZSBUb2tlbiI7DQogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiRE9CSSI7DQogICAgdWludCAgIHB1YmxpYyBkZWNpbWFscyA9IDE4Ow0KDQogICAgLy9QcmVzYWxlIEN1cCBpcyB+IDEgODAwIEVUSA0KICAgIC8vL0R1cmluZyBQcmVzYWxlIFBoYXNlIDogMSBldGggPSAxNyBwcmVzYWxlIHRva2Vucw0KICAgIC8vUHJlc2FsZSBDdXAgaW4gJCBpcyB+IDc1IDYwMCQNCg0KICAgIHVpbnQgcHVibGljIFBSSUNFID0gMTc7IA0KDQogICAgdWludCBwdWJsaWMgVE9LRU5fU1VQUExZX0xJTUlUID0gMzAwMDAgKiAoMSBldGhlciAvIDEgd2VpKTsNCg0KICAgIGVudW0gUGhhc2Ugew0KICAgICAgICBDcmVhdGVkLA0KICAgICAgICBSdW5uaW5nLA0KICAgICAgICBQYXVzZWQsDQogICAgICAgIE1pZ3JhdGluZywNCiAgICAgICAgTWlncmF0ZWQNCiAgICB9DQoNCiAgICBQaGFzZSBwdWJsaWMgY3VycmVudFBoYXNlID0gUGhhc2UuQ3JlYXRlZDsNCg0KICAgIC8vIGFtb3VudCBvZiB0b2tlbnMgYWxyZWFkeSBzb2xkDQogICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHkgPSAwOyANCg0KICAgIC8vIFRva2VuIG1hbmFnZXIgaGFzIGV4Y2x1c2l2ZSBwcml2ZWxlZ2VzIHRvIGNhbGwgYWRtaW5pc3RyYXRpdmUNCiAgICAvLyBmdW5jdGlvbnMgb24gdGhpcyBjb250cmFjdC4NCiAgICBhZGRyZXNzIHB1YmxpYyB0b2tlbk1hbmFnZXI7DQogICAgLy8gQ3Jvd2RzYWxlIG1hbmFnZXIgaGFzIGV4Y2x1c2l2ZSBwcml2ZWxlZ2VzIHRvIGJ1cm4gcHJlc2FsZSB0b2tlbnMuDQogICAgYWRkcmVzcyBwdWJsaWMgY3Jvd2RzYWxlTWFuYWdlcjsNCg0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBiYWxhbmNlOw0KDQogICAgbW9kaWZpZXIgb25seVRva2VuTWFuYWdlcigpICAgICB7IGlmKG1zZy5zZW5kZXIgIT0gdG9rZW5NYW5hZ2VyKSB0aHJvdzsgXzsgfQ0KICAgIG1vZGlmaWVyIG9ubHlDcm93ZHNhbGVNYW5hZ2VyKCkgeyBpZihtc2cuc2VuZGVyICE9IGNyb3dkc2FsZU1hbmFnZXIpIHRocm93OyBfOyB9DQogICAgDQoNCiAgICBldmVudCBMb2dCdXkoYWRkcmVzcyBpbmRleGVkIG93bmVyLCB1aW50IHZhbHVlKTsNCiAgICBldmVudCBMb2dCdXJuKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgdWludCB2YWx1ZSk7DQogICAgZXZlbnQgTG9nUGhhc2VTd2l0Y2goUGhhc2UgbmV3UGhhc2UpOw0KICAgIA0KDQogICAgZnVuY3Rpb24oKSBwYXlhYmxlIHsNCiAgICAgICAgYnV5VG9rZW5zKG1zZy5zZW5kZXIpOw0KICAgIH0NCg0KICAgDQogICAgZnVuY3Rpb24gYnV5VG9rZW5zKGFkZHJlc3MgX2J1eWVyKSBwdWJsaWMgcGF5YWJsZSB7DQogICAgICAgIC8vIEF2YWlsYWJsZSBvbmx5IGlmIHByZXNhbGUgaXMgaW4gcHJvZ3Jlc3MuDQogICAgICAgIGlmKGN1cnJlbnRQaGFzZSAhPSBQaGFzZS5SdW5uaW5nKSB0aHJvdzsNCg0KICAgICAgICBpZihtc2cudmFsdWUgPT0gMCkgdGhyb3c7DQogICAgICAgIHVpbnQgbmV3VG9rZW5zID0gbXNnLnZhbHVlICogUFJJQ0U7DQogICAgICAgIGlmICh0b3RhbFN1cHBseSArIG5ld1Rva2VucyA+IFRPS0VOX1NVUFBMWV9MSU1JVCkgdGhyb3c7DQogICAgICAgIGJhbGFuY2VbX2J1eWVyXSArPSBuZXdUb2tlbnM7DQogICAgICAgIHRvdGFsU3VwcGx5ICs9IG5ld1Rva2VuczsNCiAgICAgICAgTG9nQnV5KF9idXllciwgbmV3VG9rZW5zKTsNCiAgICB9DQoNCg0KICAgDQogICAgZnVuY3Rpb24gYnVyblRva2VucyhhZGRyZXNzIF9vd25lcikgcHVibGljDQogICAgICAgIG9ubHlDcm93ZHNhbGVNYW5hZ2VyDQogICAgew0KICAgICAgICAvLyBBdmFpbGFibGUgb25seSBkdXJpbmcgbWlncmF0aW9uIHBoYXNlDQogICAgICAgIGlmKGN1cnJlbnRQaGFzZSAhPSBQaGFzZS5NaWdyYXRpbmcpIHRocm93Ow0KDQogICAgICAgIHVpbnQgdG9rZW5zID0gYmFsYW5jZVtfb3duZXJdOw0KICAgICAgICBpZih0b2tlbnMgPT0gMCkgdGhyb3c7DQogICAgICAgIGJhbGFuY2VbX293bmVyXSA9IDA7DQogICAgICAgIHRvdGFsU3VwcGx5IC09IHRva2VuczsNCiAgICAgICAgTG9nQnVybihfb3duZXIsIHRva2Vucyk7DQoNCiAgICAgICAgLy8gQXV0b21hdGljYWxseSBzd2l0Y2ggcGhhc2Ugd2hlbiBtaWdyYXRpb24gaXMgZG9uZS4NCiAgICAgICAgaWYodG90YWxTdXBwbHkgPT0gMCkgew0KICAgICAgICAgICAgY3VycmVudFBoYXNlID0gUGhhc2UuTWlncmF0ZWQ7DQogICAgICAgICAgICBMb2dQaGFzZVN3aXRjaChQaGFzZS5NaWdyYXRlZCk7DQogICAgICAgIH0NCiAgICB9DQoNCg0KICAgDQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgICAgIHJldHVybiBiYWxhbmNlW19vd25lcl07DQogICAgfQ0KDQoNCiAgICANCg0KICAgIGZ1bmN0aW9uIHNldFByZXNhbGVQaGFzZShQaGFzZSBfbmV4dFBoYXNlKSBwdWJsaWMNCiAgICAgICAgb25seVRva2VuTWFuYWdlcg0KICAgIHsNCiAgICAgICAgYm9vbCBjYW5Td2l0Y2hQaGFzZQ0KICAgICAgICAgICAgPSAgKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5DcmVhdGVkICYmIF9uZXh0UGhhc2UgPT0gUGhhc2UuUnVubmluZykNCiAgICAgICAgICAgIHx8IChjdXJyZW50UGhhc2UgPT0gUGhhc2UuUnVubmluZyAmJiBfbmV4dFBoYXNlID09IFBoYXNlLlBhdXNlZCkNCiAgICAgICAgICAgICAgICAvLyBzd2l0Y2ggdG8gbWlncmF0aW9uIHBoYXNlIG9ubHkgaWYgY3Jvd2RzYWxlIG1hbmFnZXIgaXMgc2V0DQogICAgICAgICAgICB8fCAoKGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5SdW5uaW5nIHx8IGN1cnJlbnRQaGFzZSA9PSBQaGFzZS5QYXVzZWQpDQogICAgICAgICAgICAgICAgJiYgX25leHRQaGFzZSA9PSBQaGFzZS5NaWdyYXRpbmcNCiAgICAgICAgICAgICAgICAmJiBjcm93ZHNhbGVNYW5hZ2VyICE9IDB4MCkNCiAgICAgICAgICAgIHx8IChjdXJyZW50UGhhc2UgPT0gUGhhc2UuUGF1c2VkICYmIF9uZXh0UGhhc2UgPT0gUGhhc2UuUnVubmluZykNCiAgICAgICAgICAgICAgICAvLyBzd2l0Y2ggdG8gbWlncmF0ZWQgb25seSBpZiBldmVyeXRpbmcgaXMgbWlncmF0ZWQNCiAgICAgICAgICAgIHx8IChjdXJyZW50UGhhc2UgPT0gUGhhc2UuTWlncmF0aW5nICYmIF9uZXh0UGhhc2UgPT0gUGhhc2UuTWlncmF0ZWQNCiAgICAgICAgICAgICAgICAmJiB0b3RhbFN1cHBseSA9PSAwKTsNCg0KICAgICAgICBpZighY2FuU3dpdGNoUGhhc2UpIHRocm93Ow0KICAgICAgICBjdXJyZW50UGhhc2UgPSBfbmV4dFBoYXNlOw0KICAgICAgICBMb2dQaGFzZVN3aXRjaChfbmV4dFBoYXNlKTsNCiAgICB9DQoNCg0KICAgIGZ1bmN0aW9uIHdpdGhkcmF3RXRoZXIoKSBwdWJsaWMNCiAgICAgICAgb25seVRva2VuTWFuYWdlcg0KICAgIHsNCiAgICAgICAgLy8gQXZhaWxhYmxlIGF0IGFueSBwaGFzZS4NCiAgICAgICAgaWYodGhpcy5iYWxhbmNlID4gMCkgew0KICAgICAgICAgICAgaWYoIXRva2VuTWFuYWdlci5zZW5kKHRoaXMuYmFsYW5jZSkpIHRocm93Ow0KICAgICAgICB9DQogICAgfQ0KDQoNCiAgICBmdW5jdGlvbiBzZXRDcm93ZHNhbGVNYW5hZ2VyKGFkZHJlc3MgX21ncikgcHVibGljDQogICAgICAgIG9ubHlUb2tlbk1hbmFnZXINCiAgICB7DQogICAgICAgIC8vIFlvdSBjYW4ndCBjaGFuZ2UgY3Jvd2RzYWxlIGNvbnRyYWN0IHdoZW4gbWlncmF0aW9uIGlzIGluIHByb2dyZXNzLg0KICAgICAgICBpZihjdXJyZW50UGhhc2UgPT0gUGhhc2UuTWlncmF0aW5nKSB0aHJvdzsNCiAgICAgICAgY3Jvd2RzYWxlTWFuYWdlciA9IF9tZ3I7DQogICAgfQ0KfQ=='