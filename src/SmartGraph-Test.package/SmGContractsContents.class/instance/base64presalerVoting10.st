base 64 content
base64presalerVoting10
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLy8NCi8vID09PT0gRElTQ0xBSU1FUiA9PT09DQovLw0KLy8gRVRIRVJFVU0gSVMgU1RJTEwgQU4gRVhQRVJFTUVOVEFMIFRFQ0hOT0xPR1kuDQovLyBBTFRIT1VHSCBUSElTIFNNQVJUIENPTlRSQUNUIFdBUyBDUkVBVEVEIFdJVEggR1JFQVQgQ0FSRSBBTkQgSU4gVEhFIEhPUEUgT0YgQkVJTkcgVVNFRlVMLCBOTyBHVUFSQU5URUVTIE9GIEZMQVdMRVNTIE9QRVJBVElPTiBDQU4gQkUgR0lWRU4uDQovLyBJTiBQQVJUSUNVTEFSIC0gU1VCVElMRSBCVUdTLCBIQUNLRVIgQVRUQUNLUyBPUiBNQUxGVU5DVElPTiBPRiBVTkRFUkxZSU5HIFRFQ0hOT0xPR1kgQ0FOIENBVVNFIFVOSU5URU5USU9OQUwgQkVIQVZJT1VSLg0KLy8gWU9VIEFSRSBTVFJPTkdMWSBFTkNPVVJBR0VEIFRPIFNUVURZIFRISVMgU01BUlQgQ09OVFJBQ1QgQ0FSRUZVTExZIElOIE9SREVSIFRPIFVOREVSU1RBTkQgUE9TU0lCTEUgRURHRSBDQVNFUyBBTkQgUklTS1MuDQovLyBET04nVCBVU0UgVEhJUyBTTUFSVCBDT05UUkFDVCBJRiBZT1UgSEFWRSBTVUJTVEFOVElBTCBET1VCVFMgT1IgSUYgWU9VIERPTidUIEtOT1cgV0hBVCBZT1UgQVJFIERPSU5HLg0KLy8NCi8vIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkNCi8vIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwNCi8vIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsDQovLyBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwNCi8vIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuDQovLyA9PT09DQovLw0KLy8NCi8vID09PT0gUEFSQU5PSUEgTk9USUNFID09PT0NCi8vIEEgY2FyZWZ1bCByZWFkZXIgd2lsbCBmaW5kIHNvbWUgYWRkaXRpb25hbCBjaGVja3MgYW5kIGV4Y2Vzc2l2ZSBjb2RlLCBjb25zdW1pbmcgc29tZSBleHRyYSBnYXMuIFRoaXMgaXMgaW50ZW50aW9uYWwuDQovLyBFdmVuIHRob3VnaCB0aGUgY29udHJhY3Qgc2hvdWxkIHdvcmsgd2l0aG91dCB0aGVzZSBwYXJ0cywgdGhleSBtYWtlIHRoZSBjb2RlIG1vcmUgc2VjdXJlIGluIHByb2R1Y3Rpb24gYW5kIGZvciBmdXR1cmUgcmVmYWN0b3JpbmcuDQovLyBBbHNvLCB0aGV5IHNob3cgbW9yZSBjbGVhcmx5IHdoYXQgd2UgaGF2ZSBjb25zaWRlcmVkIGFuZCBhZGRyZXNzZWQgZHVyaW5nIGRldmVsb3BtZW50Lg0KLy8gRGlzY3Vzc2lvbiBpcyB3ZWxjb21lIQ0KLy8gPT09PQ0KLy8NCg0KLy8vIEBhdXRob3IgZXRoZXJuaWFuDQovLy8gQG5vdGljZSByZXBvcnQgYnVncyB0bzogYnVnc0BldGhlcm5pYW4uY29tDQovLy8gQHRpdGxlIFByZXNhbGVyIFZvdGluZyBDb250cmFjdA0KDQppbnRlcmZhY2UgVG9rZW5TdG9yYWdlIHsNCiAgICBmdW5jdGlvbiBiYWxhbmNlcyhhZGRyZXNzIGFjY291bnQpIHB1YmxpYyByZXR1cm5zKHVpbnQgYmFsYW5jZSk7DQp9DQoNCmNvbnRyYWN0IFByZXNhbGVyVm90aW5nIHsNCg0KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgVkVSU0lPTiA9ICIwLjAuMiI7DQoNCiAgICAvKiA9PT09PT0gY29uZmlndXJhdGlvbiBTVEFSVCA9PT09PT0gKi8NCg0KICAgIHVpbnQgcHVibGljIFZPVElOR19TVEFSVF9CTE9DS05SICA9IDA7DQogICAgdWludCBwdWJsaWMgVk9USU5HX0VORF9USU1FICAgICAgID0gMDsNCg0KICAgIC8qID09PT09PSBjb25maWd1cmF0aW9uIEVORCA9PT09PT0gKi8NCg0KICAgIFRva2VuU3RvcmFnZSBQUkVTQUxFX0NPTlRSQUNUID0gVG9rZW5TdG9yYWdlKDB4NEZkOTk3RWQ3YzEwRGJEMDRlOTVkMzczMGNkNzdENzk1MTMwNzZGMik7DQoNCiAgICBzdHJpbmdbNV0gcHJpdmF0ZSBzdGF0ZU5hbWVzID0gWyJCRUZPUkVfU1RBUlQiLCAgIlZPVElOR19SVU5OSU5HIiwgIkNMT1NFRCIgXTsNCiAgICBlbnVtIFN0YXRlIHsgQkVGT1JFX1NUQVJULCAgVk9USU5HX1JVTk5JTkcsIENMT1NFRCB9DQoNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyByYXdWb3RlczsNCg0KICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNQVhfQU1PVU5UX0VRVV8wX1BFUkNFTlQgICA9IDEgZmlubmV5Ow0KICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNSU5fQU1PVU5UX0VRVV8xMDBfUEVSQ0VOVCA9IDEgZXRoZXIgOw0KDQogICAgYWRkcmVzcyBvd25lcjsNCg0KICAgIC8vY29uc3RydWN0b3INCiAgICBmdW5jdGlvbiBQcmVzYWxlclZvdGluZyAoKSB7DQogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICB9DQoNCiAgICAvL2FjY2VwdCAoYW5kIHNlbmQgYmFjaykgdm90aW5nIHBheW1lbnRzIGhlcmUNCiAgICBmdW5jdGlvbiAoKQ0KICAgIG9ubHlQcmVzYWxlcg0KICAgIG9ubHlTdGF0ZShTdGF0ZS5WT1RJTkdfUlVOTklORykNCiAgICBwYXlhYmxlIHsNCiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDEgZXRoZXIgfHwgIW1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpKSB0aHJvdzsNCiAgICAgICAgcmF3Vm90ZXNbbXNnLnNlbmRlcl0gPSBtc2cudmFsdWU7DQogICAgfQ0KDQogICAgLy8vIEBub3RpY2Ugc3RhcnQgdm90aW5nIGF0IGBzdGFydEJsb2NrTnJgIGZvciBgZHVyYXRpb25IcnNgLg0KICAgIC8vLyBSZXN0cmljdGVkIGZvciBvd25lciBvbmx5Lg0KICAgIC8vLyBAcGFyYW0gc3RhcnRCbG9ja05yIGJsb2NrIG51bWJlciB0byBzdGFydCB2b3Rpbmc7IHN0YXJ0cyBpbW1lZGlhdGx5IGlmIGxlc3MgdGhhbiBjdXJyZW50IGJsb2NrIG51bWJlci4NCiAgICAvLy8gQHBhcmFtIGR1cmF0aW9uSHJzIHZvdGluZyBkdXJhdGlvbiAoZnJvbSBub3chKTsgYXQgbGVhc3QgMSBob3VyLg0KICAgIGZ1bmN0aW9uIHN0YXJ0Vm90aW5nKHVpbnQgc3RhcnRCbG9ja05yLCB1aW50IGR1cmF0aW9uSHJzKSBvbmx5T3duZXIgew0KICAgICAgICBWT1RJTkdfU1RBUlRfQkxPQ0tOUiA9IG1heChibG9jay5udW1iZXIsIHN0YXJ0QmxvY2tOcik7DQogICAgICAgIFZPVElOR19FTkRfVElNRSA9IG5vdyArIG1heChkdXJhdGlvbkhycywxKSAqIDEgaG91cnM7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2V0T3duZXIoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHtvd25lciA9IG5ld093bmVyO30NCg0KICAgIC8vLyBAbm90aWNlIHJldHVybnMgY3VycmVudCB2b3RpbmcgcmVzdWx0IGZvciBnaXZlbiBhZGRyZXNzIGluIHBlcmNlbnQuDQogICAgLy8vIEBwYXJhbSB2b3RlciBiYWxhbmNlIGhvbGRlciBhZGRyZXNzLg0KICAgIGZ1bmN0aW9uIHZvdGVkUGVyQ2VudChhZGRyZXNzIHZvdGVyKSBjb25zdGFudCBleHRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgICAgIHZhciByYXdWb3RlID0gcmF3Vm90ZXNbdm90ZXJdOw0KICAgICAgICBpZiAocmF3Vm90ZTw9TUFYX0FNT1VOVF9FUVVfMF9QRVJDRU5UKSByZXR1cm4gMDsNCiAgICAgICAgZWxzZSBpZiAocmF3Vm90ZT49TUlOX0FNT1VOVF9FUVVfMTAwX1BFUkNFTlQpIHJldHVybiAxMDA7DQogICAgICAgIGVsc2UgcmV0dXJuIHJhd1ZvdGUgKiAxMDAgLyAxIGV0aGVyOw0KICAgIH0NCg0KICAgIC8vLyBAbm90aWNlIHJldHVybiB2b3RpbmcgcmVtYWluaW5nIHRpbWUgKGhvdXJzLCBtaW51dGVzKS4NCiAgICBmdW5jdGlvbiB2b3RpbmdFbmRzSW5ISE1NKCkgY29uc3RhbnQgcmV0dXJucyAodWludDE2LCB1aW50MTYpIHsNCiAgICAgICAgdmFyIHRzZWMgPSBWT1RJTkdfRU5EX1RJTUUgLSBub3c7DQogICAgICAgIHJldHVybiBWT1RJTkdfRU5EX1RJTUU9PTAgPyAoMCwwKSA6ICh1aW50MTYodHNlYyAvIDEgaG91cnMpLCB1aW50MTYodHNlYyAlIDEgaG91cnMgLyAxIG1pbnV0ZXMpKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjdXJyZW50U3RhdGUoKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zIChTdGF0ZSkgew0KICAgICAgICBpZiAoVk9USU5HX1NUQVJUX0JMT0NLTlIgPT0gMCB8fCBibG9jay5udW1iZXIgPCBWT1RJTkdfU1RBUlRfQkxPQ0tOUikgew0KICAgICAgICAgICAgcmV0dXJuIFN0YXRlLkJFRk9SRV9TVEFSVDsNCiAgICAgICAgfSBlbHNlIGlmIChub3cgPD0gVk9USU5HX0VORF9USU1FKSB7DQogICAgICAgICAgICByZXR1cm4gU3RhdGUuVk9USU5HX1JVTk5JTkc7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gU3RhdGUuQ0xPU0VEOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8vIEBub3RpY2UgcmV0dXJucyBjdXJyZW50IHN0YXRlIG9mIHRoZSB2b3RpbmcuDQogICAgZnVuY3Rpb24gc3RhdGUoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyhzdHJpbmcpIHsNCiAgICAgICAgcmV0dXJuIHN0YXRlTmFtZXNbdWludChjdXJyZW50U3RhdGUoKSldOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG1heCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCBtYXhWYWx1ZSkgeyByZXR1cm4gYT5iID8gYSA6IGI7IH0NCg0KICAgIG1vZGlmaWVyIG9ubHlQcmVzYWxlcigpIHsNCiAgICAgICAgaWYgKFBSRVNBTEVfQ09OVFJBQ1QuYmFsYW5jZXMobXNnLnNlbmRlcikgPT0gMCkgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgbW9kaWZpZXIgb25seVN0YXRlKFN0YXRlIHN0YXRlKSB7DQogICAgICAgIGlmIChjdXJyZW50U3RhdGUoKSE9c3RhdGUpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIhPW93bmVyKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoNCn0vL2NvbnRyYWN0'