base 64 content
base64presalerVoting8
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLy8NCi8vID09PT0gRElTQ0xBSU1FUiA9PT09DQovLw0KLy8gRVRIRVJFVU0gSVMgU1RJTEwgQU4gRVhQRVJFTUVOVEFMIFRFQ0hOT0xPR1kuDQovLyBBTFRIT1VHSCBUSElTIFNNQVJUIENPTlRSQUNUIFdBUyBDUkVBVEVEIFdJVEggR1JFQVQgQ0FSRSBBTkQgSU4gVEhFIEhPUEUgT0YgQkVJTkcgVVNFRlVMLCBOTyBHVUFSQU5URUVTIE9GIEZMQVdMRVNTIE9QRVJBVElPTiBDQU4gQkUgR0lWRU4uDQovLyBJTiBQQVJUSUNVTEFSIC0gU1VCVElMRSBCVUdTLCBIQUNLRVIgQVRUQUNLUyBPUiBNQUxGVU5DVElPTiBPRiBVTkRFUkxZSU5HIFRFQ0hOT0xPR1kgQ0FOIENBVVNFIFVOSU5URU5USU9OQUwgQkVIQVZJT1VSLg0KLy8gWU9VIEFSRSBTVFJPTkdMWSBFTkNPVVJBR0VEIFRPIFNUVURZIFRISVMgU01BUlQgQ09OVFJBQ1QgQ0FSRUZVTExZIElOIE9SREVSIFRPIFVOREVSU1RBTkQgUE9TU0lCTEUgRURHRSBDQVNFUyBBTkQgUklTS1MuDQovLyBET04nVCBVU0UgVEhJUyBTTUFSVCBDT05UUkFDVCBJRiBZT1UgSEFWRSBTVUJTVEFOVElBTCBET1VCVFMgT1IgSUYgWU9VIERPTidUIEtOT1cgV0hBVCBZT1UgQVJFIERPSU5HLg0KLy8NCi8vIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkNCi8vIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwNCi8vIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsDQovLyBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwNCi8vIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuDQovLyA9PT09DQovLw0KLy8NCi8vID09PT0gUEFSQU5PSUEgTk9USUNFID09PT0NCi8vIEEgY2FyZWZ1bCByZWFkZXIgd2lsbCBmaW5kIHNvbWUgYWRkaXRpb25hbCBjaGVja3MgYW5kIGV4Y2Vzc2l2ZSBjb2RlLCBjb25zdW1pbmcgc29tZSBleHRyYSBnYXMuIFRoaXMgaXMgaW50ZW50aW9uYWwuDQovLyBFdmVuIHRob3VnaCB0aGUgY29udHJhY3Qgc2hvdWxkIHdvcmsgd2l0aG91dCB0aGVzZSBwYXJ0cywgdGhleSBtYWtlIHRoZSBjb2RlIG1vcmUgc2VjdXJlIGluIHByb2R1Y3Rpb24gYW5kIGZvciBmdXR1cmUgcmVmYWN0b3JpbmcuDQovLyBBbHNvLCB0aGV5IHNob3cgbW9yZSBjbGVhcmx5IHdoYXQgd2UgaGF2ZSBjb25zaWRlcmVkIGFuZCBhZGRyZXNzZWQgZHVyaW5nIGRldmVsb3BtZW50Lg0KLy8gRGlzY3Vzc2lvbiBpcyB3ZWxjb21lIQ0KLy8gPT09PQ0KLy8NCg0KLy8vIEBhdXRob3IgZXRoZXJuaWFuDQovLy8gQG5vdGljZSByZXBvcnQgYnVncyB0bzogYnVnc0BldGhlcm5pYW4uY29tDQovLy8gQHRpdGxlIFByZXNhbGVyIFZvdGluZyBDb250cmFjdA0KDQppbnRlcmZhY2UgVG9rZW5TdG9yYWdlIHsNCiAgICBmdW5jdGlvbiBiYWxhbmNlcyhhZGRyZXNzIGFjY291bnQpIHB1YmxpYyByZXR1cm5zKHVpbnQgYmFsYW5jZSk7DQp9DQoNCmNvbnRyYWN0IFByZXNhbGVyVm90aW5nIHsNCg0KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgVkVSU0lPTiA9ICIwLjAuNCI7DQoNCiAgICAvKiA9PT09PT0gY29uZmlndXJhdGlvbiBTVEFSVCA9PT09PT0gKi8NCg0KICAgIHVpbnQgcHVibGljIFZPVElOR19TVEFSVF9CTE9DS05SICA9IDA7DQogICAgdWludCBwdWJsaWMgVk9USU5HX0VORF9USU1FICAgICAgID0gMDsNCg0KICAgIC8qID09PT09PSBjb25maWd1cmF0aW9uIEVORCA9PT09PT0gKi8NCg0KICAgIFRva2VuU3RvcmFnZSBQUkVTQUxFX0NPTlRSQUNUID0gVG9rZW5TdG9yYWdlKDB4NEZkOTk3RWQ3YzEwRGJEMDRlOTVkMzczMGNkNzdENzk1MTMwNzZGMik7DQoNCiAgICBzdHJpbmdbM10gcHJpdmF0ZSBzdGF0ZU5hbWVzID0gWyJCRUZPUkVfU1RBUlQiLCAgIlZPVElOR19SVU5OSU5HIiwgIkNMT1NFRCIgXTsNCiAgICBlbnVtIFN0YXRlIHsgQkVGT1JFX1NUQVJULCAgVk9USU5HX1JVTk5JTkcsIENMT1NFRCB9DQoNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyByYXdWb3RlczsNCg0KICAgIHVpbnQgcHJpdmF0ZSBjb25zdGFudCBNQVhfQU1PVU5UX0VRVV8wX1BFUkNFTlQgICA9IDEwIGZpbm5leTsNCiAgICB1aW50IHByaXZhdGUgY29uc3RhbnQgTUlOX0FNT1VOVF9FUVVfMTAwX1BFUkNFTlQgPSAxIGV0aGVyIDsNCg0KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOw0KDQogICAgLy9jb25zdHJ1Y3RvcnMNCiAgICBmdW5jdGlvbiBQcmVzYWxlclZvdGluZyAoKSB7DQogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICB9DQoNCiAgICAvL2FjY2VwdCAoYW5kIHNlbmQgYmFjaykgdm90aW5nIHBheW1lbnRzIGhlcmUNCiAgICBmdW5jdGlvbiAoKQ0KICAgIG9ubHlQcmVzYWxlcg0KICAgIG9ubHlTdGF0ZShTdGF0ZS5WT1RJTkdfUlVOTklORykNCiAgICBwYXlhYmxlIHsNCiAgICAgICAgaWYgKG1zZy52YWx1ZSA+IDEgZXRoZXIgfHwgIW1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpKSB0aHJvdzsNCiAgICAgICAgLy9zcGVjaWFsIHRyZWF0bWVudCBmb3IgMC1ldGhlciBwYXltZW50cw0KICAgICAgICByYXdWb3Rlc1ttc2cuc2VuZGVyXSA9IG1zZy52YWx1ZSA+IDAgPyBtc2cudmFsdWUgOiAxIHdlaTsNCiAgICB9DQoNCiAgICAvLy8gQG5vdGljZSBzdGFydCB2b3RpbmcgYXQgYHN0YXJ0QmxvY2tOcmAgZm9yIGBkdXJhdGlvbkhyc2AuDQogICAgLy8vIFJlc3RyaWN0ZWQgZm9yIG93bmVyIG9ubHkuDQogICAgLy8vIEBwYXJhbSBzdGFydEJsb2NrTnIgYmxvY2sgbnVtYmVyIHRvIHN0YXJ0IHZvdGluZzsgc3RhcnRzIGltbWVkaWF0bHkgaWYgbGVzcyB0aGFuIGN1cnJlbnQgYmxvY2sgbnVtYmVyLg0KICAgIC8vLyBAcGFyYW0gZHVyYXRpb25IcnMgdm90aW5nIGR1cmF0aW9uIChmcm9tIG5vdyEpOyBhdCBsZWFzdCAxIGhvdXIuDQogICAgZnVuY3Rpb24gc3RhcnRWb3RpbmcodWludCBzdGFydEJsb2NrTnIsIHVpbnQgZHVyYXRpb25IcnMpIG9ubHlPd25lciB7DQogICAgICAgIFZPVElOR19TVEFSVF9CTE9DS05SID0gbWF4KGJsb2NrLm51bWJlciwgc3RhcnRCbG9ja05yKTsNCiAgICAgICAgVk9USU5HX0VORF9USU1FID0gbm93ICsgbWF4KGR1cmF0aW9uSHJzLDEpICogMSBob3VyczsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzZXRPd25lcihhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIge293bmVyID0gbmV3T3duZXI7fQ0KDQogICAgLy8vIEBub3RpY2UgcmV0dXJucyBjdXJyZW50IHZvdGluZyByZXN1bHQgZm9yIGdpdmVuIGFkZHJlc3MgaW4gcGVyY2VudC4NCiAgICAvLy8gQHBhcmFtIHZvdGVyIGJhbGFuY2UgaG9sZGVyIGFkZHJlc3MuDQogICAgZnVuY3Rpb24gdm90ZWRQZXJDZW50KGFkZHJlc3Mgdm90ZXIpIGNvbnN0YW50IGV4dGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgdmFyIHJhd1ZvdGUgPSByYXdWb3Rlc1t2b3Rlcl07DQogICAgICAgIGlmIChyYXdWb3RlPD1NQVhfQU1PVU5UX0VRVV8wX1BFUkNFTlQpIHJldHVybiAwOw0KICAgICAgICBlbHNlIGlmIChyYXdWb3RlPj1NSU5fQU1PVU5UX0VRVV8xMDBfUEVSQ0VOVCkgcmV0dXJuIDEwMDsNCiAgICAgICAgZWxzZSByZXR1cm4gcmF3Vm90ZSAqIDEwMCAvIDEgZXRoZXI7DQogICAgfQ0KDQogICAgLy8vIEBub3RpY2UgcmV0dXJuIHZvdGluZyByZW1haW5pbmcgdGltZSAoaG91cnMsIG1pbnV0ZXMpLg0KICAgIGZ1bmN0aW9uIHZvdGluZ0VuZHNJbkhITU0oKSBjb25zdGFudCByZXR1cm5zICh1aW50OCwgdWludDgpIHsNCiAgICAgICAgdmFyIHRzZWMgPSBWT1RJTkdfRU5EX1RJTUUgLSBub3c7DQogICAgICAgIHJldHVybiBWT1RJTkdfRU5EX1RJTUU9PTAgPyAoMCwwKSA6ICh1aW50OCh0c2VjIC8gMSBob3VycyksIHVpbnQ4KHRzZWMgJSAxIGhvdXJzIC8gMSBtaW51dGVzKSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY3VycmVudFN0YXRlKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAoU3RhdGUpIHsNCiAgICAgICAgaWYgKFZPVElOR19TVEFSVF9CTE9DS05SID09IDAgfHwgYmxvY2subnVtYmVyIDwgVk9USU5HX1NUQVJUX0JMT0NLTlIpIHsNCiAgICAgICAgICAgIHJldHVybiBTdGF0ZS5CRUZPUkVfU1RBUlQ7DQogICAgICAgIH0gZWxzZSBpZiAobm93IDw9IFZPVElOR19FTkRfVElNRSkgew0KICAgICAgICAgICAgcmV0dXJuIFN0YXRlLlZPVElOR19SVU5OSU5HOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIFN0YXRlLkNMT1NFRDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8vLyBAbm90aWNlIHJldHVybnMgY3VycmVudCBzdGF0ZSBvZiB0aGUgdm90aW5nLg0KICAgIGZ1bmN0aW9uIHN0YXRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBzdGF0ZU5hbWVzW3VpbnQoY3VycmVudFN0YXRlKCkpXTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtYXgodWludCBhLCB1aW50IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQgbWF4VmFsdWUpIHsgcmV0dXJuIGE+YiA/IGEgOiBiOyB9DQoNCiAgICBtb2RpZmllciBvbmx5UHJlc2FsZXIoKSB7DQogICAgICAgIGlmIChQUkVTQUxFX0NPTlRSQUNULmJhbGFuY2VzKG1zZy5zZW5kZXIpID09IDApIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlTdGF0ZShTdGF0ZSBzdGF0ZSkgew0KICAgICAgICBpZiAoY3VycmVudFN0YXRlKCkhPXN0YXRlKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyIT1vd25lcikgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQp9Ly9jb250cmFjdA=='