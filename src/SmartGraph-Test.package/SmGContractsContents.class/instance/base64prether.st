base 64 content
base64prether
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KY29udHJhY3QgRVJDMjAgew0KCS8vU2V0cyBmdW5jdGlvbnMgYW5kIGV2ZW50cyB0byBjb21wbHkgd2l0aCBFUkMyMA0KCWV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludCBfdmFsdWUpOw0KCWV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludCBfdmFsdWUpOw0KCQ0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpOw0KCWZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KfQ0KDQpjb250cmFjdCBPd25lZCB7DQoJLy9QdWJsaWMgdmFyaWFibGUNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCg0KCS8vU2V0cyBjb250cmFjdCBjcmVhdG9yIGFzIHRoZSBvd25lcg0KICAgIGZ1bmN0aW9uIE93bmVkKCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgfQ0KCQ0KCS8vU2V0cyBvbmx5T3duZXIgbW9kaWZpZXIgZm9yIHNwZWNpZmllZCBmdW5jdGlvbnMNCiAgICBtb2RpZmllciBvbmx5T3duZXIgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQoJLy9BbGxvd3MgZm9yIHRyYW5zZmVyIG9mIGNvbnRyYWN0IG93bmVyc2hpcA0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7DQogICAgICAgIG93bmVyID0gbmV3T3duZXI7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBUb2tlbiBpcyBFUkMyMCwgT3duZWQgew0KCS8vUHVibGljIHZhcmlhYmxlcw0KCXN0cmluZyBwdWJsaWMgbmFtZTsgDQoJc3RyaW5nIHB1YmxpYyBzeW1ib2w7IA0KCXVpbnQ4IHB1YmxpYyBkZWNpbWFsczsgDQoJdWludDI1NiBwdWJsaWMgdG90YWxTdXBwbHk7IA0KCQ0KCS8vQ3JlYXRlcyBhcnJheXMgZm9yIGJhbGFuY2VzDQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlOw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsNCgkNCglmdW5jdGlvbiBUb2tlbihzdHJpbmcgdG9rZW5OYW1lLCBzdHJpbmcgdG9rZW5TeW1ib2wsIHVpbnQ4IGRlY2ltYWxVbml0cywgdWludDI1NiBpbml0aWFsU3VwcGx5KSB7DQoJCW5hbWUgPSB0b2tlbk5hbWU7IA0KCQlzeW1ib2wgPSB0b2tlblN5bWJvbDsgDQoJCWRlY2ltYWxzID0gZGVjaW1hbFVuaXRzOyANCgkJdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5OyANCgl9DQoJDQoJLy9Qcm92aWRlcyB0aGUgcmVtYWluaW5nIGJhbGFuY2Ugb2YgYXBwcm92ZWQgdG9rZW5zIGZyb20gZnVuY3Rpb24gYXBwcm92ZSANCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7DQogICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCiAgICB9DQoNCgkvL0FsbG93cyBmb3IgYSBjZXJ0YWluIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgc3BlbnQgb24gYmVoYWxmIG9mIHRoZSBhY2NvdW50IG93bmVyDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX3ZhbHVlKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQoJLy9SZXR1cm5zIHRoZSBhY2NvdW50IGJhbGFuY2UgDQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZ0JhbGFuY2UpIHsNCiAgICAgICAgcmV0dXJuIGJhbGFuY2VbX293bmVyXTsNCiAgICB9DQoNCgkvL1NlbmRzIHRva2VucyBmcm9tIHNlbmRlcidzIGFjY291bnQNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBpZiAoYmFsYW5jZVttc2cuc2VuZGVyXSA+PSBfdmFsdWUgJiYgYmFsYW5jZVtfdG9dICsgX3ZhbHVlID4gYmFsYW5jZVtfdG9dKSB7DQogICAgICAgICAgICBiYWxhbmNlW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgICAgIGJhbGFuY2VbX3RvXSArPSBfdmFsdWU7DQogICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsgDQoJCQlyZXR1cm4gZmFsc2U7IA0KCQl9DQogICAgfQ0KCQ0KCS8vVHJhbnNmZXJzIHRva2VucyBhbiBhcHByb3ZlZCBhY2NvdW50IA0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBpZiAoYmFsYW5jZVtfZnJvbV0gPj0gX3ZhbHVlICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF92YWx1ZSAmJiBiYWxhbmNlW190b10gKyBfdmFsdWUgPiBiYWxhbmNlW190b10pIHsNCiAgICAgICAgICAgIGJhbGFuY2VbX3RvXSArPSBfdmFsdWU7DQogICAgICAgICAgICBiYWxhbmNlW19mcm9tXSAtPSBfdmFsdWU7DQogICAgICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSB7IA0KCQkJcmV0dXJuIGZhbHNlOyANCgkJfQ0KICAgIH0NCn0NCg0KY29udHJhY3QgUHJldGhlciBpcyBUb2tlbiB7DQogICAgLy9QdWJsaWMgdmFyaWFibGVzDQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlBSRVRIRVIiOw0KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgc3ltYm9sID0gIlBUSCI7IA0KICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDA7IA0KICAgIHVpbnQyNTYgcHVibGljIGNvbnN0YW50IHN1cHBseSA9IDEwMDAwMDAwOyANCiAgICANCgkvL0luaXRpYWxpemVzIFByZXRoZXIgYXMgYSBUb2tlbg0KCWZ1bmN0aW9uIFByZXRoZXIoKQ0KCSAgICBUb2tlbihuYW1lLCBzeW1ib2wsIGRlY2ltYWxzLCBzdXBwbHkpIHsNCgkJCWJhbGFuY2VbbXNnLnNlbmRlcl0gPSBzdXBwbHk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIH0NCgkNCgkvL1ByZXZlbnRzIHNlbmRpbmcgRXRoZXIgdG8gdGhlIGNvbnRyYWN0DQoJZnVuY3Rpb24oKSB7DQoJCXRocm93OyANCgl9DQoJDQoJLy9BbGxvd3MgY29udHJhY3Qgb3duZXIgdG8gbWludCBuZXcgdG9rZW5zLCBwcmV2ZW50cyBudW1lcmljYWwgb3ZlcmZsb3cNCglmdW5jdGlvbiBtaW50VG9rZW4oYWRkcmVzcyB0YXJnZXQsIHVpbnQyNTYgbWludGVkQW1vdW50KSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQoJCWlmICgodG90YWxTdXBwbHkgKyBtaW50ZWRBbW91bnQpIDwgdG90YWxTdXBwbHkpIHsNCgkJCXRocm93OyANCgkJfSBlbHNlIHsNCgkJCWJhbGFuY2VbdGFyZ2V0XSArPSBtaW50ZWRBbW91bnQ7DQoJCQl0b3RhbFN1cHBseSArPSBtaW50ZWRBbW91bnQ7DQoJCQlUcmFuc2ZlcigwLCB0YXJnZXQsIG1pbnRlZEFtb3VudCk7DQoJCQlyZXR1cm4gdHJ1ZTsgDQoJCX0NCgl9DQp9'