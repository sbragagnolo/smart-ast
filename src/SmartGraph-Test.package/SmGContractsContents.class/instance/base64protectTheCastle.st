base 64 content
base64protectTheCastle
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC45Ow0KDQovKg0KUHJvdGVjdCBUaGUgQ2FzdGxlICENCg0KVGhlIGNhc3RsZSBpcyB1bmRlciBhdHRhY2sgYW5kIG5lZWRzIHRoZSBoZWxwIG9mIGl0cyBjaXRpemVucyB0byBzdXBwb3J0IHRoZSBjb3N0IG9mIHdhci4NCg0KSWYgeW91IGFyZSBhIGxveWFsIGNpdGl6ZW4gYW5kIGhlbHAgdG8gZmluYW5jZSB0aGUgZGVmZW5zZSBvZiB0aGUgY2FzdGxlLCB0aGUgS2luZyB3aWxsIHBheSB5b3UgYmFjayAyIHRpbWVzIHdoYXQgeW91IGludmVzdGVkIHdoZW4gaXRzIGZ1bmQgd2lsbCBhbGxvdyBoaW0gdG8uDQoNCklmIG5vIG9uZSBjb250cmlidXRlcyB0byB0aGUgcmVwYXJhdGlvbiBmb3IgNiBob3VycywgdGhlIGNhc3RsZSB3aWxsIGZhbGwgdW5kZXIgdGhlIGF0dGFjayBhbmQgdGhlIGxhc3QgMyBjaXRpemVucyB3aG8gZmluYW5jZWQgdGhlIGRlZmVuc2Ugd2lsbCBnZXQgdGhlIEtpbmfigJlzIFBpZ2d5IGJhbmsgKHJlc3BlY3RpdmVseSA1NSUsIDMwJSBhbmQgMTUlKS4NCg0KSWYgeW91IGFyZSB0aGUgZmlyc3Qgb25lIHRvIGludmVzdCBhZnRlciB0aGUgY2FzdGxlIGhhcyBmYWxsZW4sIHlvdSB3aWxsIGJlIHRoZSBuZXcgS2luZydzIEplc3RlciBhbmQgdGFrZSAzJSBvZiBhbGwgdGhlIHRyYW5zYWN0aW9ucyB1bnRpbCB0aGUgY2FzdGxlIGZhbGxzIGFnYWluLg0KDQpUaGVyZSBhcmUgYWx3YXlzIHNvbWUgcGVvcGxlIHRvIGJyaWJlLCBzbyBhIHNtYWxsIGZlZSBvZiAzJSBpcyB0YWtlbiB0byBlbnN1cmUgdGhlIHN5c3RlbSBrZWVwcyB3b3JraW5nLg0KDQpOTyBTVVJSRU5ERVIgRURJVElPTiAtIG5vIHNlbGYtZGVzdHJ1Y3QgLSB0aGlzIGdhbWUgd2lsbCBydW4gZm9yZXZlciENCiovDQoNCmNvbnRyYWN0IFByb3RlY3RUaGVDYXN0bGUgew0KICAgIC8vIEtpbmcncyBKZXN0ZXINCiAgICBhZGRyZXNzIHB1YmxpYyBqZXN0ZXI7DQogICAgLy8gUmVjb3JkIHRoZSBsYXN0IFJlcGFyYXRpb24gdGltZQ0KICAgIHVpbnQgcHVibGljIGxhc3RSZXBhcmF0aW9uOw0KICAgIC8vIFBpZ2d5IEJhbmsgQW1vdW50DQogICAgdWludCBwdWJsaWMgcGlnZ3lCYW5rOw0KDQogICAgLy8gQ29sbGVjdGVkIEZlZSBBbW91bnQNCiAgICB1aW50IHB1YmxpYyBjb2xsZWN0ZWRGZWU7DQoNCiAgICAvLyBUcmFjayB0aGUgY2l0aXplbnMgd2hvIGhlbHBlZCB0byByZXBhaXIgdGhlIGNhc3RsZQ0KICAgIGFkZHJlc3NbXSBwdWJsaWMgY2l0aXplbnNBZGRyZXNzZXM7DQogICAgdWludFtdIHB1YmxpYyBjaXRpemVuc0Ftb3VudHM7DQogICAgdWludDMyIHB1YmxpYyB0b3RhbENpdGl6ZW5zOw0KICAgIHVpbnQzMiBwdWJsaWMgbGFzdENpdGl6ZW5QYWlkOw0KICAgIC8vIEJyaWJlZCBDaXRpemVuIHdobyBtYWRlIHRoZSBzeXN0ZW0gd29ya3MNCiAgICBhZGRyZXNzIHB1YmxpYyBicmliZWRDaXRpemVuOw0KICAgIC8vIFJlY29yZCBob3cgbWFueSB0aW1lcyB0aGUgY2FzdGxlIGhhcyBmYWxsZW4NCiAgICB1aW50MzIgcHVibGljIHJvdW5kOw0KICAgIC8vIEFtb3VudCBhbHJlYWR5IHBhaWQgYmFjayBpbiB0aGlzIHJvdW5kDQogICAgdWludCBwdWJsaWMgYW1vdW50QWxyZWFkeVBhaWRCYWNrOw0KICAgIC8vIEFtb3VudCBpbnZlc3RlZCBpbiB0aGlzIHJvdW5kDQogICAgdWludCBwdWJsaWMgYW1vdW50SW52ZXN0ZWQ7DQoNCiAgICB1aW50IGNvbnN0YW50IFNJWF9IT1VSUyA9IDYwICogNjAgKiA2Ow0KDQogICAgZnVuY3Rpb24gUHJvdGVjdFRoZUNhc3RsZSgpIHsNCiAgICAgICAgLy8gRGVmaW5lIHRoZSBmaXJzdCBjYXN0bGUNCiAgICAgICAgYnJpYmVkQ2l0aXplbiA9IG1zZy5zZW5kZXI7DQogICAgICAgIGplc3RlciA9IG1zZy5zZW5kZXI7DQogICAgICAgIGxhc3RSZXBhcmF0aW9uID0gYmxvY2sudGltZXN0YW1wOw0KICAgICAgICBhbW91bnRBbHJlYWR5UGFpZEJhY2sgPSAwOw0KICAgICAgICBhbW91bnRJbnZlc3RlZCA9IDA7DQogICAgICAgIHRvdGFsQ2l0aXplbnMgPSAwOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlcGFpclRoZUNhc3RsZSgpIHBheWFibGUgcmV0dXJucyhib29sKSB7DQogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOw0KICAgICAgICAvLyBDaGVjayBpZiB0aGUgbWluaW11bSBhbW91bnQgaWYgcmVhY2hlZA0KICAgICAgICBpZiAoYW1vdW50IDwgMTAgZmlubmV5KSB7DQogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICAvLyBJZiB0aGUgYW1vdW50IHJlY2VpdmVkIGlzIG1vcmUgdGhhbiAxMDAgRVRIIHJldHVybiB0aGUgZGlmZmVyZW5jZQ0KICAgICAgICBpZiAoYW1vdW50ID4gMTAwIGV0aGVyKSB7DQogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlIC0gMTAwIGV0aGVyKTsNCiAgICAgICAgICAgIGFtb3VudCA9IDEwMCBldGhlcjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIENoZWNrIGlmIHRoZSBDYXN0bGUgaGFzIGZlbGwNCiAgICAgICAgaWYgKGxhc3RSZXBhcmF0aW9uICsgU0lYX0hPVVJTIDwgYmxvY2sudGltZXN0YW1wKSB7DQogICAgICAgICAgICAvLyBTZW5kIHRoZSBQaWdneSBCYW5rIHRvIHRoZSBsYXN0IDMgY2l0aXplbnMNCiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIG9uZSB3aG8gY29udHJpYnV0ZWQgdGhpcyBsYXN0IDYgaG91cnMsIG5vIGFjdGlvbiBuZWVkZWQNCiAgICAgICAgICAgIGlmICh0b3RhbENpdGl6ZW5zID09IDEpIHsNCiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBvbmx5IG9uZSBDaXRpemVuIHdobyBjb250cmlidXRlZCwgaGUgZ2V0cyB0aGUgZnVsbCBQaWdnIEJhbmsNCiAgICAgICAgICAgICAgICBjaXRpemVuc0FkZHJlc3Nlc1tjaXRpemVuc0FkZHJlc3Nlcy5sZW5ndGggLSAxXS5zZW5kKHBpZ2d5QmFuayk7DQogICAgICAgICAgICB9IGVsc2UgaWYgKHRvdGFsQ2l0aXplbnMgPT0gMikgew0KICAgICAgICAgICAgICAgIC8vIElmIG9ubHkgMiBjaXRpemVucyBjb250cmlidXRlZA0KICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDFdLnNlbmQocGlnZ3lCYW5rICogNjUgLyAxMDApOw0KICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDJdLnNlbmQocGlnZ3lCYW5rICogMzUgLyAxMDApOw0KICAgICAgICAgICAgfSBlbHNlIGlmICh0b3RhbENpdGl6ZW5zID49IDMpIHsNCiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgMyBvciBtb3JlIGNpdGl6ZW5zIHdobyBjb250cmlidXRlZA0KICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDFdLnNlbmQocGlnZ3lCYW5rICogNTUgLyAxMDApOw0KICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDJdLnNlbmQocGlnZ3lCYW5rICogMzAgLyAxMDApOw0KICAgICAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzW2NpdGl6ZW5zQWRkcmVzc2VzLmxlbmd0aCAtIDNdLnNlbmQocGlnZ3lCYW5rICogMTUgLyAxMDApOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBEZWZpbmUgdGhlIG5ldyBQaWdneSBCYW5rDQogICAgICAgICAgICBwaWdneUJhbmsgPSAwOw0KDQogICAgICAgICAgICAvLyBEZWZpbmUgdGhlIG5ldyBDYXN0bGUNCiAgICAgICAgICAgIGplc3RlciA9IG1zZy5zZW5kZXI7DQogICAgICAgICAgICBsYXN0UmVwYXJhdGlvbiA9IGJsb2NrLnRpbWVzdGFtcDsNCiAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzLnB1c2gobXNnLnNlbmRlcik7DQogICAgICAgICAgICBjaXRpemVuc0Ftb3VudHMucHVzaChhbW91bnQgKiAyKTsNCiAgICAgICAgICAgIHRvdGFsQ2l0aXplbnMgKz0gMTsNCiAgICAgICAgICAgIGFtb3VudEludmVzdGVkICs9IGFtb3VudDsNCg0KICAgICAgICAgICAgLy8gQWxsIGdvZXMgdG8gdGhlIFBpZ2d5IEJhbmsNCiAgICAgICAgICAgIHBpZ2d5QmFuayArPSBhbW91bnQ7DQoNCiAgICAgICAgICAgIC8vIFRoZSBKZXN0ZXIgdGFrZSAzJQ0KICAgICAgICAgICAgamVzdGVyLnNlbmQoYW1vdW50ICogMyAvIDEwMCk7DQoNCiAgICAgICAgICAgIC8vIFRoZSBicmliZWQgQ2l0aXplbiB0YWtlcyAzJQ0KICAgICAgICAgICAgY29sbGVjdGVkRmVlICs9IGFtb3VudCAqIDMgLyAxMDA7DQoNCiAgICAgICAgICAgIHJvdW5kICs9IDE7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvLyBUaGUgQ2FzdGxlIGlzIHN0aWxsIHVwDQogICAgICAgICAgICBsYXN0UmVwYXJhdGlvbiA9IGJsb2NrLnRpbWVzdGFtcDsNCiAgICAgICAgICAgIGNpdGl6ZW5zQWRkcmVzc2VzLnB1c2gobXNnLnNlbmRlcik7DQogICAgICAgICAgICBjaXRpemVuc0Ftb3VudHMucHVzaChhbW91bnQgKiAyKTsNCiAgICAgICAgICAgIHRvdGFsQ2l0aXplbnMgKz0gMTsNCiAgICAgICAgICAgIGFtb3VudEludmVzdGVkICs9IGFtb3VudDsNCg0KICAgICAgICAgICAgLy8gNSUgZ29lcyB0byB0aGUgUGlnZ3kgQmFuaw0KICAgICAgICAgICAgcGlnZ3lCYW5rICs9IChhbW91bnQgKiA1IC8gMTAwKTsNCg0KICAgICAgICAgICAgLy8gVGhlIEplc3RlciB0YWtlcyAzJQ0KICAgICAgICAgICAgamVzdGVyLnNlbmQoYW1vdW50ICogMyAvIDEwMCk7DQoNCiAgICAgICAgICAgIC8vIFRoZSBicmliZWQgQ2l0aXplbiB0YWtlcyAzJQ0KICAgICAgICAgICAgY29sbGVjdGVkRmVlICs9IGFtb3VudCAqIDMgLyAxMDA7DQoNCiAgICAgICAgICAgIHdoaWxlIChjaXRpemVuc0Ftb3VudHNbbGFzdENpdGl6ZW5QYWlkXSA8IChhZGRyZXNzKHRoaXMpLmJhbGFuY2UgLSBwaWdneUJhbmsgLSBjb2xsZWN0ZWRGZWUpICYmIGxhc3RDaXRpemVuUGFpZCA8PSB0b3RhbENpdGl6ZW5zKSB7DQogICAgICAgICAgICAgICAgY2l0aXplbnNBZGRyZXNzZXNbbGFzdENpdGl6ZW5QYWlkXS5zZW5kKGNpdGl6ZW5zQW1vdW50c1tsYXN0Q2l0aXplblBhaWRdKTsNCiAgICAgICAgICAgICAgICBhbW91bnRBbHJlYWR5UGFpZEJhY2sgKz0gY2l0aXplbnNBbW91bnRzW2xhc3RDaXRpemVuUGFpZF07DQogICAgICAgICAgICAgICAgbGFzdENpdGl6ZW5QYWlkICs9IDE7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBmYWxsYmFjayBmdW5jdGlvbg0KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7DQogICAgICAgIHJlcGFpclRoZUNhc3RsZSgpOw0KICAgIH0NCg0KICAgIC8vIFdoZW4gdGhlIGJyaWJlZCBDaXRpemVuIGRlY2lkZXMgdG8gZ2l2ZSBoaXMgc2VhdCB0byBzb21lb25lIGVsc2UNCiAgICBmdW5jdGlvbiBuZXdCcmliZWRDaXRpemVuKGFkZHJlc3MgbmV3QnJpYmVkQ2l0aXplbikgew0KICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBicmliZWRDaXRpemVuKSB7DQogICAgICAgICAgICBicmliZWRDaXRpemVuID0gbmV3QnJpYmVkQ2l0aXplbjsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8vIFdoZW4gdGhlIGJyaWJlZCBDaXRpemVuIGRlY2lkZXMgdG8gY29sbGVjdCBoaXMgZmVlcw0KICAgIGZ1bmN0aW9uIGNvbGxlY3RGZWUoKSBwYXlhYmxlIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gYnJpYmVkQ2l0aXplbikgew0KICAgICAgICAgICAgYnJpYmVkQ2l0aXplbi5zZW5kKGNvbGxlY3RlZEZlZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBXaGVuIHRoZSBqZXN0ZXIgY2FuJ3QgaGFuZGxlIGl0IGFueW1vcmUsIGhlIGNhbiBnaXZlIGhpcyBwb3NpdGlvbiB0byBzb21lb25lIGVsc2UNCiAgICBmdW5jdGlvbiBuZXdKZXN0ZXIoYWRkcmVzcyBuZXdKZXN0ZXIpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gamVzdGVyKSB7DQogICAgICAgICAgICBqZXN0ZXIgPSBuZXdKZXN0ZXI7DQogICAgICAgIH0NCiAgICB9ICAgICAgIA0KfQ=='