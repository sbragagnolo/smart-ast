base 64 content
base64publicResolver1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4wOw0KDQoNCg0KY29udHJhY3QgQWJzdHJhY3RFTlMgew0KICAgIGZ1bmN0aW9uIG93bmVyKGJ5dGVzMzIgbm9kZSkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKTsNCiAgICBmdW5jdGlvbiByZXNvbHZlcihieXRlczMyIG5vZGUpIGNvbnN0YW50IHJldHVybnMoYWRkcmVzcyk7DQogICAgZnVuY3Rpb24gdHRsKGJ5dGVzMzIgbm9kZSkgY29uc3RhbnQgcmV0dXJucyh1aW50NjQpOw0KICAgIGZ1bmN0aW9uIHNldE93bmVyKGJ5dGVzMzIgbm9kZSwgYWRkcmVzcyBvd25lcik7DQogICAgZnVuY3Rpb24gc2V0U3Vibm9kZU93bmVyKGJ5dGVzMzIgbm9kZSwgYnl0ZXMzMiBsYWJlbCwgYWRkcmVzcyBvd25lcik7DQogICAgZnVuY3Rpb24gc2V0UmVzb2x2ZXIoYnl0ZXMzMiBub2RlLCBhZGRyZXNzIHJlc29sdmVyKTsNCiAgICBmdW5jdGlvbiBzZXRUVEwoYnl0ZXMzMiBub2RlLCB1aW50NjQgdHRsKTsNCg0KICAgIC8vIExvZ2dlZCB3aGVuIHRoZSBvd25lciBvZiBhIG5vZGUgYXNzaWducyBhIG5ldyBvd25lciB0byBhIHN1Ym5vZGUuDQogICAgZXZlbnQgTmV3T3duZXIoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIGJ5dGVzMzIgaW5kZXhlZCBsYWJlbCwgYWRkcmVzcyBvd25lcik7DQoNCiAgICAvLyBMb2dnZWQgd2hlbiB0aGUgb3duZXIgb2YgYSBub2RlIHRyYW5zZmVycyBvd25lcnNoaXAgdG8gYSBuZXcgYWNjb3VudC4NCiAgICBldmVudCBUcmFuc2ZlcihieXRlczMyIGluZGV4ZWQgbm9kZSwgYWRkcmVzcyBvd25lcik7DQoNCiAgICAvLyBMb2dnZWQgd2hlbiB0aGUgcmVzb2x2ZXIgZm9yIGEgbm9kZSBjaGFuZ2VzLg0KICAgIGV2ZW50IE5ld1Jlc29sdmVyKGJ5dGVzMzIgaW5kZXhlZCBub2RlLCBhZGRyZXNzIHJlc29sdmVyKTsNCg0KICAgIC8vIExvZ2dlZCB3aGVuIHRoZSBUVEwgb2YgYSBub2RlIGNoYW5nZXMNCiAgICBldmVudCBOZXdUVEwoYnl0ZXMzMiBpbmRleGVkIG5vZGUsIHVpbnQ2NCB0dGwpOw0KfQ0KDQoNCi8qKg0KICogQSBzaW1wbGUgcmVzb2x2ZXIgYW55b25lIGNhbiB1c2U7IG9ubHkgYWxsb3dzIHRoZSBvd25lciBvZiBhIG5vZGUgdG8gc2V0IGl0cw0KICogYWRkcmVzcy4NCiAqLw0KY29udHJhY3QgUHVibGljUmVzb2x2ZXIgew0KICAgIEFic3RyYWN0RU5TIGVuczsNCiAgICBtYXBwaW5nKGJ5dGVzMzI9PmFkZHJlc3MpIGFkZHJlc3NlczsNCiAgICBtYXBwaW5nKGJ5dGVzMzI9PmJ5dGVzMzIpIGhhc2hlczsNCg0KICAgIG1vZGlmaWVyIG9ubHlfb3duZXIoYnl0ZXMzMiBub2RlKSB7DQogICAgICAgIGlmKGVucy5vd25lcihub2RlKSAhPSBtc2cuc2VuZGVyKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDb25zdHJ1Y3Rvci4NCiAgICAgKiBAcGFyYW0gZW5zQWRkciBUaGUgRU5TIHJlZ2lzdHJhciBjb250cmFjdC4NCiAgICAgKi8NCiAgICBmdW5jdGlvbiBQdWJsaWNSZXNvbHZlcihBYnN0cmFjdEVOUyBlbnNBZGRyKSB7DQogICAgICAgIGVucyA9IGVuc0FkZHI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRmFsbGJhY2sgZnVuY3Rpb24uDQogICAgICovDQogICAgZnVuY3Rpb24oKSB7DQogICAgICAgIHRocm93Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIG5vZGUgaGFzIHRoZSBzcGVjaWZpZWQgcmVjb3JkIHR5cGUuDQogICAgICogQHBhcmFtIG5vZGUgVGhlIEVOUyBub2RlIHRvIHF1ZXJ5Lg0KICAgICAqIEBwYXJhbSBraW5kIFRoZSByZWNvcmQgdHlwZSBuYW1lLCBhcyBzcGVjaWZpZWQgaW4gRUlQMTM3Lg0KICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGlzIHJlc29sdmVyIGhhcyBhIHJlY29yZCBvZiB0aGUgcHJvdmlkZWQgdHlwZSBvbiB0aGUNCiAgICAgKiAgICAgICAgIHByb3ZpZGVkIG5vZGUuDQogICAgICovDQogICAgZnVuY3Rpb24gaGFzKGJ5dGVzMzIgbm9kZSwgYnl0ZXMzMiBraW5kKSBjb25zdGFudCByZXR1cm5zIChib29sKSB7DQogICAgICAgIHJldHVybiAoa2luZCA9PSAiYWRkciIgJiYgYWRkcmVzc2VzW25vZGVdICE9IDApIHx8IChraW5kID09ICJoYXNoIiAmJiBoYXNoZXNbbm9kZV0gIT0gMCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSByZXNvbHZlciBpbXBsZW1lbnRzIHRoZSBpbnRlcmZhY2Ugc3BlY2lmaWVkIGJ5IHRoZSBwcm92aWRlZCBoYXNoLg0KICAgICAqIEBwYXJhbSBpbnRlcmZhY2VJRCBUaGUgSUQgb2YgdGhlIGludGVyZmFjZSB0byBjaGVjayBmb3IuDQogICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBjb250cmFjdCBpbXBsZW1lbnRzIHRoZSByZXF1ZXN0ZWQgaW50ZXJmYWNlLg0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHN1cHBvcnRzSW50ZXJmYWNlKGJ5dGVzNCBpbnRlcmZhY2VJRCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICByZXR1cm4gaW50ZXJmYWNlSUQgPT0gMHgzYjNiNTdkZSB8fCBpbnRlcmZhY2VJRCA9PSAweGQ4Mzg5ZGM1Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHVybnMgdGhlIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIGFuIEVOUyBub2RlLg0KICAgICAqIEBwYXJhbSBub2RlIFRoZSBFTlMgbm9kZSB0byBxdWVyeS4NCiAgICAgKiBAcmV0dXJuIFRoZSBhc3NvY2lhdGVkIGFkZHJlc3MuDQogICAgICovDQogICAgZnVuY3Rpb24gYWRkcihieXRlczMyIG5vZGUpIGNvbnN0YW50IHJldHVybnMgKGFkZHJlc3MgcmV0KSB7DQogICAgICAgIHJldCA9IGFkZHJlc3Nlc1tub2RlXTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4NCiAgICAgKiBNYXkgb25seSBiZSBjYWxsZWQgYnkgdGhlIG93bmVyIG9mIHRoYXQgbm9kZSBpbiB0aGUgRU5TIHJlZ2lzdHJ5Lg0KICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHVwZGF0ZS4NCiAgICAgKiBAcGFyYW0gYWRkciBUaGUgYWRkcmVzcyB0byBzZXQuDQogICAgICovDQogICAgZnVuY3Rpb24gc2V0QWRkcihieXRlczMyIG5vZGUsIGFkZHJlc3MgYWRkcikgb25seV9vd25lcihub2RlKSB7DQogICAgICAgIGFkZHJlc3Nlc1tub2RlXSA9IGFkZHI7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmV0dXJucyB0aGUgY29udGVudCBoYXNoIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4NCiAgICAgKiBOb3RlIHRoYXQgdGhpcyByZXNvdXJjZSB0eXBlIGlzIG5vdCBzdGFuZGFyZGl6ZWQsIGFuZCB3aWxsIGxpa2VseSBjaGFuZ2UNCiAgICAgKiBpbiBmdXR1cmUgdG8gYSByZXNvdXJjZSB0eXBlIGJhc2VkIG9uIG11bHRpaGFzaC4NCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgRU5TIG5vZGUgdG8gcXVlcnkuDQogICAgICogQHJldHVybiBUaGUgYXNzb2NpYXRlZCBjb250ZW50IGhhc2guDQogICAgICovDQogICAgZnVuY3Rpb24gY29udGVudChieXRlczMyIG5vZGUpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIgcmV0KSB7DQogICAgICAgIHJldCA9IGhhc2hlc1tub2RlXTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXRzIHRoZSBjb250ZW50IGhhc2ggYXNzb2NpYXRlZCB3aXRoIGFuIEVOUyBub2RlLg0KICAgICAqIE1heSBvbmx5IGJlIGNhbGxlZCBieSB0aGUgb3duZXIgb2YgdGhhdCBub2RlIGluIHRoZSBFTlMgcmVnaXN0cnkuDQogICAgICogTm90ZSB0aGF0IHRoaXMgcmVzb3VyY2UgdHlwZSBpcyBub3Qgc3RhbmRhcmRpemVkLCBhbmQgd2lsbCBsaWtlbHkgY2hhbmdlDQogICAgICogaW4gZnV0dXJlIHRvIGEgcmVzb3VyY2UgdHlwZSBiYXNlZCBvbiBtdWx0aWhhc2guDQogICAgICogQHBhcmFtIG5vZGUgVGhlIG5vZGUgdG8gdXBkYXRlLg0KICAgICAqIEBwYXJhbSBoYXNoIFRoZSBjb250ZW50IGhhc2ggdG8gc2V0DQogICAgICovDQogICAgZnVuY3Rpb24gc2V0Q29udGVudChieXRlczMyIG5vZGUsIGJ5dGVzMzIgaGFzaCkgb25seV9vd25lcihub2RlKSB7DQogICAgICAgIGhhc2hlc1tub2RlXSA9IGhhc2g7DQogICAgfQ0KfQ=='