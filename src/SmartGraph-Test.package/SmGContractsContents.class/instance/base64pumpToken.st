base 64 content
base64pumpToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMDsNCg0KY29udHJhY3QgQnVsbGlzaFRva2VuIHsNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7DQp9DQpjb250cmFjdCBvd25lZCB7DQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQoNCiAgICBmdW5jdGlvbiBvd25lZCgpIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlPd25lciB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgew0KICAgICAgICBvd25lciA9IG5ld093bmVyOw0KICAgIH0NCn0NCg0KY29udHJhY3QgUHVtcFRva2VuIGlzIG93bmVkIHsNCiAgICANCiAgICBhZGRyZXNzIG93bmVyID0gbXNnLnNlbmRlcjsNCg0KICAgIGJvb2wgcHVibGljIHB1cmNoYXNpbmdBbGxvd2VkID0gZmFsc2U7DQogICANCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsNCiAgICANCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbENvbnRyaWJ1dGlvbiA9IDA7DQogICAgdWludDI1NiBwdWJsaWMgdG90YWxCb251c1Rva2Vuc0lzc3VlZCA9IDA7DQogICAgDQoNCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseSA9IDA7DQoNCiAgICBmdW5jdGlvbiBuYW1lKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKSB7IHJldHVybiAiUHVtcCBUb2tlbiI7IH0NCiAgICBmdW5jdGlvbiBzeW1ib2woKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcpIHsgcmV0dXJuICJQVEsiOyB9DQogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBjb25zdGFudCByZXR1cm5zICh1aW50OCkgeyByZXR1cm4gNTsgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NikgeyByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIC8vIG1pdGlnYXRlcyB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sNCiAgICAgICAgaWYobXNnLmRhdGEubGVuZ3RoIDwgKDIgKiAzMikgKyA0KSB7IHRocm93OyB9DQoNCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSB7IHJldHVybiBmYWxzZTsgfQ0KDQogICAgICAgIHVpbnQyNTYgZnJvbUJhbGFuY2UgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsNCg0KICAgICAgICBib29sIHN1ZmZpY2llbnRGdW5kcyA9IGZyb21CYWxhbmNlID49IF92YWx1ZTsNCiAgICAgICAgYm9vbCBvdmVyZmxvd2VkID0gYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VzW190b107DQogICAgICAgIA0KICAgICAgICBpZiAoc3VmZmljaWVudEZ1bmRzICYmICFvdmVyZmxvd2VkKSB7DQogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZTsgfQ0KICAgIH0NCiAgICAgDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIC8vIG1pdGlnYXRlcyB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sNCiAgICAgICAgaWYobXNnLmRhdGEubGVuZ3RoIDwgKDMgKiAzMikgKyA0KSB7IHRocm93OyB9DQoNCiAgICAgICAgaWYgKF92YWx1ZSA9PSAwKSB7IHJldHVybiBmYWxzZTsgfQ0KICAgICAgICANCiAgICAgICAgdWludDI1NiBmcm9tQmFsYW5jZSA9IGJhbGFuY2VzW19mcm9tXTsNCiAgICAgICAgdWludDI1NiBhbGxvd2FuY2UgPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXTsNCg0KICAgICAgICBib29sIHN1ZmZpY2llbnRGdW5kcyA9IGZyb21CYWxhbmNlIDw9IF92YWx1ZTsNCiAgICAgICAgYm9vbCBzdWZmaWNpZW50QWxsb3dhbmNlID0gYWxsb3dhbmNlIDw9IF92YWx1ZTsNCiAgICAgICAgYm9vbCBvdmVyZmxvd2VkID0gYmFsYW5jZXNbX3RvXSArIF92YWx1ZSA+IGJhbGFuY2VzW190b107DQoNCiAgICAgICAgaWYgKHN1ZmZpY2llbnRGdW5kcyAmJiBzdWZmaWNpZW50QWxsb3dhbmNlICYmICFvdmVyZmxvd2VkKSB7DQogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfdmFsdWU7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0NCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIC8vIG1pdGlnYXRlcyB0aGUgRVJDMjAgc3BlbmQvYXBwcm92YWwgcmFjZSBjb25kaXRpb24NCiAgICAgICAgaWYgKF92YWx1ZSAhPSAwICYmIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdICE9IDApIHsgcmV0dXJuIGZhbHNlOyB9DQogICAgICAgIA0KICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsNCiAgICAgICAgDQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICAgIH0NCg0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOw0KDQogICAgZnVuY3Rpb24gZW5hYmxlUHVyY2hhc2luZygpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsgdGhyb3c7IH0NCg0KICAgICAgICBwdXJjaGFzaW5nQWxsb3dlZCA9IHRydWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZGlzYWJsZVB1cmNoYXNpbmcoKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7IHRocm93OyB9DQoNCiAgICAgICAgcHVyY2hhc2luZ0FsbG93ZWQgPSBmYWxzZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB3aXRoZHJhd0ZvcmVpZ25Ub2tlbnMoYWRkcmVzcyBfdG9rZW5Db250cmFjdCkgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgeyB0aHJvdzsgfQ0KDQogICAgICAgIEJ1bGxpc2hUb2tlbiB0b2tlbiA9IEJ1bGxpc2hUb2tlbihfdG9rZW5Db250cmFjdCk7DQoNCiAgICAgICAgdWludDI1NiBhbW91bnQgPSB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSk7DQogICAgICAgIHJldHVybiB0b2tlbi50cmFuc2Zlcihvd25lciwgYW1vdW50KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRTdGF0cygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYsIHVpbnQyNTYsIHVpbnQyNTYsIGJvb2wpIHsNCiAgICAgICAgcmV0dXJuICh0b3RhbENvbnRyaWJ1dGlvbiwgdG90YWxTdXBwbHksIHRvdGFsQm9udXNUb2tlbnNJc3N1ZWQsIHB1cmNoYXNpbmdBbGxvd2VkKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbigpIHBheWFibGUgew0KICAgICAgICBpZiAoIXB1cmNoYXNpbmdBbGxvd2VkKSB7IHRocm93OyB9DQogICAgICAgIA0KICAgICAgICBpZiAobXNnLnZhbHVlID09IDApIHsgcmV0dXJuOyB9DQoNCiAgICAgICAgb3duZXIudHJhbnNmZXIobXNnLnZhbHVlKTsNCiAgICAgICAgdG90YWxDb250cmlidXRpb24gKz0gbXNnLnZhbHVlOw0KDQogICAgICAgIHVpbnQyNTYgdG9rZW5zSXNzdWVkID0gKG1zZy52YWx1ZSAqIDIwKTsNCg0KICAgICAgICBpZiAobXNnLnZhbHVlID49IDEwIGZpbm5leSkgew0KICAgICAgICAgICAgdG9rZW5zSXNzdWVkICs9IHRvdGFsQ29udHJpYnV0aW9uOw0KDQogICAgICAgICAgICBieXRlczIwIGJvbnVzSGFzaCA9IHJpcGVtZDE2MChibG9jay5jb2luYmFzZSwgYmxvY2subnVtYmVyLCBibG9jay50aW1lc3RhbXApOw0KICAgICAgICAgICAgaWYgKGJvbnVzSGFzaFswXSA9PSAwKSB7DQogICAgICAgICAgICAgICAgdWludDggYm9udXNNdWx0aXBsaWVyID0NCiAgICAgICAgICAgICAgICAgICAgKChib251c0hhc2hbMV0gJiAweDAxICE9IDApID8gMSA6IDApICsgKChib251c0hhc2hbMV0gJiAweDAyICE9IDApID8gMSA6IDApICsNCiAgICAgICAgICAgICAgICAgICAgKChib251c0hhc2hbMV0gJiAweDA0ICE9IDApID8gMSA6IDApICsgKChib251c0hhc2hbMV0gJiAweDA4ICE9IDApID8gMSA6IDApDQogICAgICAgICAgICAgICAgICAgIDsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB1aW50MjU2IGJvbnVzVG9rZW5zSXNzdWVkID0gKG1zZy52YWx1ZSAqIDEwMCkgKiBib251c011bHRpcGxpZXI7DQogICAgICAgICAgICAgICAgdG9rZW5zSXNzdWVkICs9IGJvbnVzVG9rZW5zSXNzdWVkOw0KDQogICAgICAgICAgICAgICAgdG90YWxCb251c1Rva2Vuc0lzc3VlZCArPSBib251c1Rva2Vuc0lzc3VlZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHRvdGFsU3VwcGx5ICs9IHRva2Vuc0lzc3VlZDsNCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gdG9rZW5zSXNzdWVkOw0KICAgICAgICANCiAgICAgICAgVHJhbnNmZXIoYWRkcmVzcyh0aGlzKSwgbXNnLnNlbmRlciwgdG9rZW5zSXNzdWVkKTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gbWludFRva2VuKGFkZHJlc3MgdGFyZ2V0LCB1aW50MjU2IG1pbnRlZEFtb3VudCkgb25seU93bmVyIHsNCiAgICANCiAgICB0b3RhbFN1cHBseSAtPSBtaW50ZWRBbW91bnQ7DQogICAgVHJhbnNmZXIoMCwgb3duZXIsIG1pbnRlZEFtb3VudCk7DQogICAgVHJhbnNmZXIob3duZXIsIHRhcmdldCwgbWludGVkQW1vdW50KTsNCn0NCn0='