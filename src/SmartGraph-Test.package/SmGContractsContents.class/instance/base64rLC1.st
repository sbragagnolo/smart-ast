base 64 content
base64rLC1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KDQpjb250cmFjdCBFUkMyMCB7DQogIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5Ow0KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOw0KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsNCg0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsNCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7DQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsNCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7DQogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOw0KfQ0KDQoNCmNvbnRyYWN0IE93bmFibGUgew0KICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCg0KICBmdW5jdGlvbiBPd25hYmxlKCkgew0KICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgfQ0KDQogIG1vZGlmaWVyIG9ubHlPd25lcigpIHsNCiAgICBpZiAobXNnLnNlbmRlciA9PSBvd25lcikNCiAgICAgIF87DQogIH0NCg0KICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgew0KICAgIGlmIChuZXdPd25lciAhPSBhZGRyZXNzKDApKSBvd25lciA9IG5ld093bmVyOw0KICB9DQoNCn0NCg0KDQpjb250cmFjdCBUb2tlblNwZW5kZXIgew0KICAgIGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpOw0KfQ0KDQpjb250cmFjdCBTYWZlTWF0aCB7DQogIGZ1bmN0aW9uIHNhZmVNdWwodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICB1aW50IGMgPSBhICogYjsNCiAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOw0KICAgIHJldHVybiBjOw0KICB9DQoNCiAgZnVuY3Rpb24gc2FmZURpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIGFzc2VydChiID4gMCk7DQogICAgdWludCBjID0gYSAvIGI7DQogICAgYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQoNCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKyBiOw0KICAgIGFzc2VydChjPj1hICYmIGM+PWIpOw0KICAgIHJldHVybiBjOw0KICB9DQoNCiAgZnVuY3Rpb24gbWF4NjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsNCiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7DQogIH0NCg0KICBmdW5jdGlvbiBtaW42NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgew0KICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOw0KICB9DQoNCiAgZnVuY3Rpb24gbWF4MjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOw0KICB9DQoNCiAgZnVuY3Rpb24gbWluMjU2KHVpbnQyNTYgYSwgdWludDI1NiBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7DQogIH0NCg0KICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsNCiAgICBpZiAoIWFzc2VydGlvbikgew0KICAgICAgdGhyb3c7DQogICAgfQ0KICB9DQp9DQoNCg0KY29udHJhY3QgUkxDIGlzIEVSQzIwLCBTYWZlTWF0aCwgT3duYWJsZSB7DQoNCiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLw0KICBzdHJpbmcgcHVibGljIG5hbWU7ICAgICAgIC8vZmFuY3kgbmFtZQ0KICBzdHJpbmcgcHVibGljIHN5bWJvbDsNCiAgdWludDggcHVibGljIGRlY2ltYWxzOyAgICAvL0hvdyBtYW55IGRlY2ltYWxzIHRvIHNob3cuDQogIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICd2MC4xJzsgDQogIHVpbnQgcHVibGljIGluaXRpYWxTdXBwbHk7DQogIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5Ow0KICBib29sIHB1YmxpYyBsb2NrZWQ7DQogIC8vdWludCBwdWJsaWMgdW5sb2NrQmxvY2s7DQoNCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOw0KICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7DQoNCiAgLy8gbG9jayB0cmFuc2ZlciBkdXJpbmcgdGhlIElDTw0KICBtb2RpZmllciBvbmx5VW5sb2NrZWQoKSB7DQogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIgJiYgbG9ja2VkKSB0aHJvdzsNCiAgICBfOw0KICB9DQoNCiAgLyoNCiAgICogIFRoZSBSTEMgVG9rZW4gY3JlYXRlZCB3aXRoIHRoZSB0aW1lIGF0IHdoaWNoIHRoZSBjcm93ZHNhbGUgZW5kDQogICAqLw0KDQogIGZ1bmN0aW9uIFJMQygpIHsNCiAgICAvLyBsb2NrIHRoZSB0cmFuc2ZlciBmdW5jdGlvbiBkdXJpbmcgdGhlIGNyb3dkc2FsZQ0KICAgIGxvY2tlZCA9IHRydWU7DQogICAgLy91bmxvY2tCbG9jaz0gIG5vdyArIDQ1IGRheXM7IC8vICh0ZXN0bmV0KSAtIGZvciBtYWlubmV0IHB1dCB0aGUgYmxvY2sgbnVtYmVyDQoNCiAgICBpbml0aWFsU3VwcGx5ID0gODcwMDAwMDAwMDAwMDAwMDA7DQogICAgdG90YWxTdXBwbHkgPSBpbml0aWFsU3VwcGx5Ow0KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gaW5pdGlhbFN1cHBseTsvLyBHaXZlIHRoZSBjcmVhdG9yIGFsbCBpbml0aWFsIHRva2VucyAgICAgICAgICAgICAgICAgICAgDQogICAgbmFtZSA9ICdpRXguZWMgTmV0d29yayBUb2tlbic7ICAgICAgICAvLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMgICAgIA0KICAgIHN5bWJvbCA9ICdSTEMnOyAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBzeW1ib2wgZm9yIGRpc3BsYXkgcHVycG9zZXMgIA0KICAgIGRlY2ltYWxzID0gOTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW91bnQgb2YgZGVjaW1hbHMgZm9yIGRpc3BsYXkgcHVycG9zZXMNCiAgfQ0KDQogIGZ1bmN0aW9uIHVubG9jaygpIG9ubHlPd25lciB7DQogICAgbG9ja2VkID0gZmFsc2U7DQogIH0NCg0KICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKXsNCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZXNbbXNnLnNlbmRlcl0sIF92YWx1ZSkgOw0KICAgIHRvdGFsU3VwcGx5ID0gc2FmZVN1Yih0b3RhbFN1cHBseSwgX3ZhbHVlKTsNCiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCAweDAsIF92YWx1ZSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlVbmxvY2tlZCByZXR1cm5zIChib29sKSB7DQogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VzW21zZy5zZW5kZXJdLCBfdmFsdWUpOw0KICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7DQogICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgb25seVVubG9ja2VkIHJldHVybnMgKGJvb2wpIHsNCiAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOw0KICAgIA0KICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7DQogICAgYmFsYW5jZXNbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7DQogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKF9hbGxvd2FuY2UsIF92YWx1ZSk7DQogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7DQogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07DQogIH0NCg0KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7DQogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICAgIC8qIEFwcHJvdmUgYW5kIHRoZW4gY29tdW5pY2F0ZSB0aGUgYXBwcm92ZWQgY29udHJhY3QgaW4gYSBzaW5nbGUgdHggKi8NCiAgZnVuY3Rpb24gYXBwcm92ZUFuZENhbGwoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUsIGJ5dGVzIF9leHRyYURhdGEpeyAgICANCiAgICAgIFRva2VuU3BlbmRlciBzcGVuZGVyID0gVG9rZW5TcGVuZGVyKF9zcGVuZGVyKTsNCiAgICAgIGlmIChhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpKSB7DQogICAgICAgICAgc3BlbmRlci5yZWNlaXZlQXBwcm92YWwobXNnLnNlbmRlciwgX3ZhbHVlLCB0aGlzLCBfZXh0cmFEYXRhKTsNCiAgICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsNCiAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCiAgfQ0KICANCn0='