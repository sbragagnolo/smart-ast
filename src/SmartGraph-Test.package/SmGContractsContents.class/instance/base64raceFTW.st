base 64 content
base64raceFTW
	^'LyoNCg0KTGFzdCBjb250cmlidXRvciBiZWZvcmUgdGhlIGRlYWRsaW5lIGdldHMgYWxsIGV0aGVyLCBzdG9yZWQgaW4gdGhlIGNvbnRyYWN0IQ0KVHJ5IHlvdXIgbHVjayENCg0KdmFyIHJhY2VBZGRyZXNzID0gIjB4MDJlMDFlOWE3M2VkMmNiMjRiMzI2MjhjOTM1MjU2ZTQ1NWIwYTA3OCAiOw0KdmFyIHJhY2VmdHdDb250cmFjdCA9IHdlYjMuZXRoLmNvbnRyYWN0KFt7ImNvbnN0YW50IjpmYWxzZSwiaW5wdXRzIjpbXSwibmFtZSI6ImdldEN1cnJlbnRXaW5uZXIiLCJvdXRwdXRzIjpbeyJuYW1lIjoiIiwidHlwZSI6ImFkZHJlc3MifV0sInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOmZhbHNlLCJpbnB1dHMiOltdLCJuYW1lIjoiY2xhaW1SZXdhcmQiLCJvdXRwdXRzIjpbXSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6ZmFsc2UsImlucHV0cyI6W10sIm5hbWUiOiJnZXREaXNjbGFpbWVyIiwib3V0cHV0cyI6W3sibmFtZSI6IiIsInR5cGUiOiJzdHJpbmcifV0sInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOmZhbHNlLCJpbnB1dHMiOltdLCJuYW1lIjoiZ2V0UmFjZUVuZEJsb2NrIiwib3V0cHV0cyI6W3sibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImlucHV0cyI6W10sInR5cGUiOiJjb25zdHJ1Y3RvciJ9LHsiYW5vbnltb3VzIjpmYWxzZSwiaW5wdXRzIjpbeyJpbmRleGVkIjpmYWxzZSwibmFtZSI6Im5ld1dpbm5lciIsInR5cGUiOiJhZGRyZXNzIn1dLCJuYW1lIjoiTGFzdENvbnRyaWJ1dG9yQ2hhbmdlZCIsInR5cGUiOiJldmVudCJ9XSk7DQp2YXIgcmFjZWZ0dyA9IHJhY2VmdHdDb250cmFjdC5hdChyYWNlQWRkcmVzcyk7DQoNCmNvbnNvbGUubG9nKCJjdXJyZW50IHdpbm5lcjogIiwgcmFjZWZ0dy5nZXRDdXJyZW50V2lubmVyLmNhbGwoKSk7DQpjb25zb2xlLmxvZygicmFjZSBlbmRzIGF0IGJsb2NrOiAiLCByYWNlZnR3LmdldFJhY2VFbmRCbG9jay5jYWxsKCksICIgY3VycmVudCBibG9jazoiLCBldGguYmxvY2tOdW1iZXIpOw0KY29uc29sZS5sb2coImN1cnJlbnQgYmFsYW5jZTogIiwgd2ViMy5mcm9tV2VpKGV0aC5nZXRCYWxhbmNlKHJhY2VBZGRyZXNzKSwgImV0aGVyIikpOw0KDQoNCg0KLy9UbyBwYXJ0aWNpcGF0ZSBpbiB0aGUgcmFjZToNCmV0aC5zZW5kVHJhbnNhY3Rpb24oe2Zyb206PHlvdXIgYWRkcmVzcz4sIHRvOiIweDAyZTAxZTlhNzNlZDJjYjI0YjMyNjI4YzkzNTI1NmU0NTViMGEwNzggIiwgdmFsdWU6d2ViMy50b1dlaSgxMCwgImZpbm5leSIpLCBnYXM6NTAwMDB9KTsNCg0KLy9UaGUgd2lubmVyIGNhbiBjbGFpbSB0aGVpciByZXdhcmQgYnkgc2VuZGluZyB0aGUgZm9sbG93aW5nIHRyYW5zYWN0aW9uOg0KcmFjZWZ0dy5jbGFpbVJld2FyZC5zZW5kVHJhbnNhY3Rpb24oe2Zyb206PHlvdXIgYWRkcmVzcz4sIGdhczo1MDAwMH0pDQoNCiovDQpjb250cmFjdCBSYWNlRlRXIHsNCiAgICANCiAgICAvKiBEaXNjbGFpbWVyICovDQogICAgc3RyaW5nIGRpc2NsYWltZXIgPSAiQ29weXJpZ2h0IChjKSAyMDE2IFwiVGhlIG93bmVyIG9mIHRoaXMgY29udHJhY3RcIiBcblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4iOw0KICAgIA0KICAgIGZ1bmN0aW9uIGdldERpc2NsYWltZXIoKSByZXR1cm5zIChzdHJpbmcpIHsNCiAgICAgICAgcmV0dXJuIGRpc2NsYWltZXI7DQogICAgfQ0KICAgIA0KICAgIGFkZHJlc3MgbGFzdENvbnRyaWJ1dG9yOw0KICAgIHVpbnQgZml4ZWRDb250cmlidXRpb24gPSAxMCBmaW5uZXk7DQogICAgDQogICAgdWludCByYWNlRW5kcyA9IDA7DQogICAgDQogICAgLy8gbnVtYmVyIG9mIGJsb2Nrcy4gcm91Z2hseSAzIG1vbnRocyBhdCB0aGUgY29udHJhY3QgY3JlYXRpb24gYmxvY2tzIHJhdGUNCiAgICB1aW50IFJBQ0VfTEVOR1RIID0gNTU1NTU1Ow0KICAgIA0KICAgIGV2ZW50IExhc3RDb250cmlidXRvckNoYW5nZWQoYWRkcmVzcyBuZXdXaW5uZXIpOw0KICAgIA0KICAgIGZ1bmN0aW9uIFJhY2VGVFcgKCkgew0KICAgICAgICByYWNlRW5kcyA9IGJsb2NrLm51bWJlciArIFJBQ0VfTEVOR1RIOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBnZXRSYWNlRW5kQmxvY2soKSByZXR1cm5zICh1aW50KSB7DQogICAgICAgIHJldHVybiByYWNlRW5kczsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gZ2V0Q3VycmVudFdpbm5lcigpIHJldHVybnMgKGFkZHJlc3MpIHsNCiAgICAgICAgcmV0dXJuIGxhc3RDb250cmlidXRvcjsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gKCkgew0KICAgICAgICAvL3JlZnVuZCBpZiB0aGUgcmFjZSBlbmRlZA0KICAgICAgICBpZiAoYmxvY2subnVtYmVyID4gcmFjZUVuZHMpIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIC8vcmVmdW5kIGlmIHNlbnQgYW1vdW50IG5vdCBlcXVhbCB0byAxIGZpbm5leQ0KICAgICAgICBpZiAobXNnLnZhbHVlICE9IGZpeGVkQ29udHJpYnV0aW9uKSB7DQogICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfQ0KICAgICAgICAvL3JhaXNlIGV2ZW50IGlmIG5lZWRlZA0KICAgICAgICBpZiAobGFzdENvbnRyaWJ1dG9yICE9IG1zZy5zZW5kZXIpIHsNCiAgICAgICAgICAgIExhc3RDb250cmlidXRvckNoYW5nZWQobXNnLnNlbmRlcik7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIC8vY2hhbmdlIHRoZSBsYXN0IGNvbnRyaWJ1dG9yDQogICAgICAgIGxhc3RDb250cmlidXRvciA9IG1zZy5zZW5kZXI7DQogICAgfQ0KICAgIA0KICAgIA0KICAgIGZ1bmN0aW9uIGNsYWltUmV3YXJkKCkgew0KICAgICAgICAvL29ubHkgbGFzdENvbnRyaWJ1dG9yIGNhbiBjbGFpbQ0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBsYXN0Q29udHJpYnV0b3IpIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIC8vcmVmdW5kIGlmIHJhY2UgaXMgbm90IG92ZXIgeWV0DQogICAgICAgIGlmIChibG9jay5udW1iZXIgPCByYWNlRW5kcykgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgaWYgKHRoaXMuYmFsYW5jZSA+IDApIHsNCiAgICAgICAgICAgIGxhc3RDb250cmlidXRvci5zZW5kKHRoaXMuYmFsYW5jZSk7DQogICAgICAgIH0NCiAgICB9DQp9'