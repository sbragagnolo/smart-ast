base 64 content
base64resilience
	^'cHJhZ21hIHNvbGlkaXR5XiAwLjQgLjY7DQoNCmNvbnRyYWN0IENsb3NlSWZCdWcgew0KDQogICAgICAgIGFkZHJlc3MgcHVibGljIEpvaGFuTnlncmVuOw0KICAgICAgICBib29sIHB1YmxpYyBidWdEaXNjb3ZlcmVkOyAvLyBjbG9zZXMgZXZlcnl0aGluZyBidXQgc2VsbCgpDQoNCiAgICAgICAgZnVuY3Rpb24gQ2xvc2VJZkJ1ZygpIHsNCiAgICAgICAgICAgICAgICBidWdEaXNjb3ZlcmVkID0gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBtb2RpZmllciBvbmx5Sm9oYW4gew0KICAgICAgICAgICAgICAgIGlmIChtc2cuc2VuZGVyICE9IEpvaGFuTnlncmVuKSB0aHJvdzsNCiAgICAgICAgICAgICAgICBfOw0KICAgICAgICB9DQoNCiAgICAgICAgbW9kaWZpZXIgaXNPcGVuIHsNCiAgICAgICAgICAgICAgICBpZiAoYnVnRGlzY292ZXJlZCAhPSBmYWxzZSkgdGhyb3c7DQogICAgICAgICAgICAgICAgXzsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIGNsb3NlQ2FtcGFpZ24oKSBvbmx5Sm9oYW4gew0KICAgICAgICAgICAgICAgIGJ1Z0Rpc2NvdmVyZWQgPSB0cnVlOw0KICAgICAgICB9DQoNCn0NCg0KDQoNCmNvbnRyYWN0IFJFUyBpcyBDbG9zZUlmQnVnIHsNCg0KICAgICAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLw0KICAgICAgICBzdHJpbmcgcHVibGljIG5hbWU7DQogICAgICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOw0KICAgICAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7DQoNCiAgICAgICAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7DQoNCiAgICAgICAgLyogVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovDQogICAgICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOw0KDQogICAgICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLw0KICAgICAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsNCg0KICAgICAgICAvKiBCb3VnaHQgb3Igc29sZCAqLw0KDQogICAgICAgIGV2ZW50IEJvdWdodChhZGRyZXNzIGZyb20sIHVpbnQgYW1vdW50KTsNCiAgICAgICAgZXZlbnQgU29sZChhZGRyZXNzIGZyb20sIHVpbnQgYW1vdW50KTsNCg0KICAgICAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIG5hbWUsIHN5bWJvbCBhbmQgZGVjaW1hbHMgKi8NCg0KICAgICAgICBmdW5jdGlvbiBSRVMoKSB7DQogICAgICAgICAgICAgICAgbmFtZSA9ICJSRVMiOw0KICAgICAgICAgICAgICAgIHN5bWJvbCA9ICJSRVMiOw0KICAgICAgICAgICAgICAgIGRlY2ltYWxzID0gMTg7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBidXkoKSBpc09wZW4gcHVibGljIHBheWFibGUgew0KICAgICAgICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSArPSBtc2cudmFsdWU7DQogICAgICAgICAgICAgICAgdG90YWxTdXBwbHkgKz0gbXNnLnZhbHVlOw0KICAgICAgICAgICAgICAgIEJvdWdodChtc2cuc2VuZGVyLCBtc2cudmFsdWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgZnVuY3Rpb24gc2VsbCh1aW50MjU2IF92YWx1ZSkgcHVibGljIHsNCiAgICAgICAgICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsNCiAgICAgICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KDQogICAgICAgICAgICAgICAgaWYgKCFtc2cuc2VuZGVyLnNlbmQoX3ZhbHVlKSkgdGhyb3c7DQoNCiAgICAgICAgICAgICAgICB0b3RhbFN1cHBseSAtPSBfdmFsdWU7DQogICAgICAgICAgICAgICAgU29sZChtc2cuc2VuZGVyLCBfdmFsdWUpOw0KDQogICAgICAgIH0NCg0KfQ0KDQpjb250cmFjdCBTd2FybVJlZGlzdHJpYnV0aW9uIGlzIENsb3NlSWZCdWcsIFJFUyB7DQoNCiAgICAgICAgc3RydWN0IGRpdmlkZW5kUGF0aHdheSB7DQogICAgICAgICAgICAgICAgYWRkcmVzcyBmcm9tOw0KICAgICAgICAgICAgICAgIHVpbnQgYW1vdW50Ow0KICAgICAgICAgICAgICAgIHVpbnQgdGltZVN0YW1wOw0KICAgICAgICB9DQoNCiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IGRpdmlkZW5kUGF0aHdheVtdKSBwdWJsaWMgZGl2aWRlbmRQYXRod2F5czsNCg0KICAgICAgICBtYXBwaW5nKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGlzSHVtYW47DQoNCiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyB0b3RhbEJhc2ljSW5jb21lOw0KDQogICAgICAgIHVpbnQgdGF4UmF0ZTsNCiAgICAgICAgdWludCBleGNoYW5nZVJhdGU7DQoNCiAgICAgICAgYWRkcmVzc1tdIGh1bWFuczsNCiAgICAgICAgbWFwcGluZyhhZGRyZXNzID0+IGJvb2wpIGluSHVtYW5zOw0KDQogICAgICAgIGV2ZW50IFN3YXJtKGFkZHJlc3MgaW5kZXhlZCBsZWFmLCBhZGRyZXNzIGluZGV4ZWQgbm9kZSwgdWludDI1NiBzaGFyZSk7DQoNCiAgICAgICAgZnVuY3Rpb24gU3dhcm1SZWRpc3RyaWJ1dGlvbigpIHsNCg0KICAgICAgICAgICAgICAgIC8qIFRheC1yYXRlIGluIHBhcnRzIHBlciB0aG91c2FuZCAqLw0KICAgICAgICAgICAgICAgIHRheFJhdGUgPSAyMDsNCg0KICAgICAgICAgICAgICAgIC8qIEV4Y2hhbmdlLXJhdGUgaW4gcGFydHMgcGVyIHRob3VzYW5kICovDQogICAgICAgICAgICAgICAgZXhjaGFuZ2VSYXRlID0gMDsNCg0KICAgICAgICB9DQoNCiAgICAgICAgLyogU2VuZCBjb2lucyAqLw0KICAgICAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIGlzT3BlbiB7DQogICAgICAgICAgICAgICAgLyogcmVqZWN0IHRyYW5zYWN0aW9uIHRvIHNlbGYgdG8gcHJldmVudCBkaXZpZGVuZCBwYXRod2F5IGxvb3BzKi8NCiAgICAgICAgICAgICAgICBpZiAoX3RvID09IG1zZy5zZW5kZXIpIHRocm93Ow0KDQogICAgICAgICAgICAgICAgLyogaWYgdGhlIHNlbmRlciBkb2Vuc3QgaGF2ZSBlbm91Z2ggYmFsYW5jZSB0aGVuIHN0b3AgKi8NCiAgICAgICAgICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsNCiAgICAgICAgICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7DQoNCiAgICAgICAgICAgICAgICAvKiBDYWxjdWxhdGUgdGF4ICovDQogICAgICAgICAgICAgICAgdWludDI1NiB0YXhDb2xsZWN0ZWQgPSBfdmFsdWUgKiB0YXhSYXRlIC8gMTAwMDsNCiAgICAgICAgICAgICAgICB1aW50MjU2IHNlbnRBbW91bnQ7DQoNCiAgICAgICAgICAgICAgICAvKiBDcmVhdGUgdGhlIGRpdmlkZW5kIHBhdGh3YXkgKi8NCiAgICAgICAgICAgICAgICBkaXZpZGVuZFBhdGh3YXlzW190b10ucHVzaChkaXZpZGVuZFBhdGh3YXkoew0KICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogbXNnLnNlbmRlciwNCiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogX3ZhbHVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgdGltZVN0YW1wOiBub3cNCiAgICAgICAgICAgICAgICB9KSk7DQoNCiAgICAgICAgICAgICAgICBpdGVyYXRlVGhyb3VnaFN3YXJtKF90bywgbm93LCB0YXhDb2xsZWN0ZWQpOw0KDQogICAgICAgICAgICAgICAgaWYgKGh1bWFucy5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBkb1N3YXJtKF90bywgdGF4Q29sbGVjdGVkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnRBbW91bnQgPSBfdmFsdWU7DQogICAgICAgICAgICAgICAgfSBlbHNlIHNlbnRBbW91bnQgPSBfdmFsdWUgLSB0YXhDb2xsZWN0ZWQ7IC8qIFJldHVybiB0YXggKi8NCg0KDQogICAgICAgICAgICAgICAgLyogQWRkIGFuZCBzdWJ0cmFjdCBuZXcgYmFsYW5jZXMgKi8NCg0KICAgICAgICAgICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBzZW50QW1vdW50Ow0KICAgICAgICAgICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZSAtIHRheENvbGxlY3RlZDsNCg0KICAgICAgICAgICAgICAgIC8qIE5vdGlmaXkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZSAqLw0KICAgICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgc2VudEFtb3VudCk7DQogICAgICAgIH0NCg0KDQogICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVUaHJvdWdoU3dhcm0oYWRkcmVzcyBfbm9kZSwgdWludCBfdGltZVN0YW1wLCB1aW50IF90YXhDb2xsZWN0ZWQpIGludGVybmFsIHsNCiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBkaXZpZGVuZFBhdGh3YXlzW19ub2RlXS5sZW5ndGg7IGkrKykgew0KDQogICAgICAgICAgICAgICAgICAgICAgICB1aW50IHRpbWVTdGFtcCA9IGRpdmlkZW5kUGF0aHdheXNbX25vZGVdW2ldLnRpbWVTdGFtcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lU3RhbXAgPD0gX3RpbWVTdGFtcCkgew0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3Mgbm9kZSA9IGRpdmlkZW5kUGF0aHdheXNbX25vZGVdW2ldLmZyb207DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSHVtYW5bbm9kZV0gPT0gdHJ1ZSAmJg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluSHVtYW5zW25vZGVdID09IGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh1bWFucy5wdXNoKG5vZGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluSHVtYW5zW25vZGVdID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXZpZGVuZFBhdGh3YXlzW19ub2RlXVtpXS5hbW91bnQgLSBfdGF4Q29sbGVjdGVkID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdmlkZW5kUGF0aHdheXNbX25vZGVdW2ldLmFtb3VudCAtPSBfdGF4Q29sbGVjdGVkOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcmVtb3ZlRGl2aWRlbmRQYXRod2F5KF9ub2RlLCBpKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlVGhyb3VnaFN3YXJtKG5vZGUsIHRpbWVTdGFtcCwgX3RheENvbGxlY3RlZCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgZnVuY3Rpb24gZG9Td2FybShhZGRyZXNzIF9sZWFmLCB1aW50MjU2IF90YXhDb2xsZWN0ZWQpIGludGVybmFsIHsNCg0KICAgICAgICAgICAgICAgIHVpbnQyNTYgc2hhcmUgPSBfdGF4Q29sbGVjdGVkIC8gaHVtYW5zLmxlbmd0aDsNCg0KICAgICAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGh1bWFucy5sZW5ndGg7IGkrKykgew0KDQogICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlT2ZbaHVtYW5zW2ldXSArPSBzaGFyZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQmFzaWNJbmNvbWVbaHVtYW5zW2ldXSArPSBzaGFyZTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaW5IdW1hbnNbaHVtYW5zW2ldXSA9IGZhbHNlOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAvKiBOb3RpZml5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHN3YXJtIHRvb2sgcGxhY2UgKi8NCiAgICAgICAgICAgICAgICAgICAgICAgIFN3YXJtKF9sZWFmLCBodW1hbnNbaV0sIHNoYXJlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZGVsZXRlIGh1bWFuczsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIHJlbW92ZURpdmlkZW5kUGF0aHdheShhZGRyZXNzIG5vZGUsIHVpbnQgaW5kZXgpIGludGVybmFsIHsNCiAgICAgICAgICAgICAgICBkZWxldGUgZGl2aWRlbmRQYXRod2F5c1tub2RlXVtpbmRleF07DQogICAgICAgICAgICAgICAgZm9yICh1aW50IGkgPSBpbmRleDsgaSA8IGRpdmlkZW5kUGF0aHdheXNbbm9kZV0ubGVuZ3RoIC0gMTsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBkaXZpZGVuZFBhdGh3YXlzW25vZGVdW2ldID0gZGl2aWRlbmRQYXRod2F5c1tub2RlXVtpICsgMV07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGRpdmlkZW5kUGF0aHdheXNbbm9kZV0ubGVuZ3RoLS07DQogICAgICAgIH0NCg0KfQ0KDQpjb250cmFjdCBSZXNpbGllbmNlIGlzIENsb3NlSWZCdWcsIFJFUywgU3dhcm1SZWRpc3RyaWJ1dGlvbiB7DQogICAgICAgIA0KICAgICAgICBmdW5jdGlvbiBSZXNpbGllbmNlKCkgew0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBmdW5jdGlvbiBzZXRCZW5lZmljaWFyeSgpIHsNCiAgICAgICAgICAgIGlmKEpvaGFuTnlncmVuICE9IDApIHRocm93Ow0KICAgICAgICAgICAgSm9oYW5OeWdyZW4gPSBtc2cuc2VuZGVyOw0KICAgICAgICAgICAgaXNIdW1hbltKb2hhbk55Z3Jlbl0gPSB0cnVlOw0KICAgICAgICB9DQoNCg0KfQ=='