base 64 content
base64sOCToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4yOw0KDQpjb250cmFjdCBTT0NUb2tlbiB7DQogICAgLyogVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovDQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOw0KDQogICAgLyogSW5pdGlhbGl6ZXMgY29udHJhY3Qgd2l0aCBpbml0aWFsIHN1cHBseSB0b2tlbnMgdG8gdGhlIGNyZWF0b3Igb2YgdGhlIGNvbnRyYWN0ICovDQogICAgZnVuY3Rpb24gU09DVG9rZW4oDQogICAgICAgIHVpbnQyNTYgaW5pdGlhbFN1cHBseQ0KICAgICAgICApIHsNCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gaW5pdGlhbFN1cHBseTsgICAgICAgICAgICAgIC8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIGluaXRpYWwgdG9rZW5zDQogICAgfQ0KDQogICAgLyogU2VuZCBjb2lucyAqLw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgew0KICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaA0KICAgICAgICBpZiAoYmFsYW5jZU9mW190b10gKyBfdmFsdWUgPCBiYWxhbmNlT2ZbX3RvXSkgdGhyb3c7IC8vIENoZWNrIGZvciBvdmVyZmxvd3MNCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgIH0NCn0NCg0KDQpjb250cmFjdCBTT0NUb2tlblNhbGUgew0KICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYXJ5Ow0KICAgIHVpbnQgcHVibGljIGZ1bmRpbmdHb2FsOyANCgl1aW50IHB1YmxpYyBhbW91bnRSYWlzZWQ7IA0KCXVpbnQgcHVibGljIGRlYWRsaW5lOyANCgl1aW50IHB1YmxpYyBwcmljZTsNCiAgICBTT0NUb2tlbiBwdWJsaWMgdG9rZW5SZXdhcmQ7DQogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7DQogICAgYm9vbCBmdW5kaW5nR29hbFJlYWNoZWQgPSBmYWxzZTsNCiAgICB1aW50IHNvZnRNYXJrZXRpbmdMaW1pdCA9IDI1ICogMSBldGhlcjsJDQogICAgZXZlbnQgR29hbFJlYWNoZWQoYWRkcmVzcyBiZW5lZmljaWFyeSwgdWludCBhbW91bnRSYWlzZWQpOw0KICAgIGV2ZW50IEZ1bmRUcmFuc2ZlcihhZGRyZXNzIGJhY2tlciwgdWludCBhbW91bnQsIGJvb2wgaXNDb250cmlidXRpb24pOw0KICAgIGJvb2wgY3Jvd2RzYWxlQ2xvc2VkID0gZmFsc2U7DQoNCiAgICAvKiBkYXRhIHN0cnVjdHVyZSB0byBob2xkIGluZm9ybWF0aW9uIGFib3V0IGNhbXBhaWduIGNvbnRyaWJ1dG9ycyAqLw0KDQogICAgLyogIGF0IGluaXRpYWxpemF0aW9uLCBzZXR1cCB0aGUgb3duZXIgKi8NCiAgICBmdW5jdGlvbiBTT0NUb2tlblNhbGUoDQogICAgICAgIGFkZHJlc3MgaWZTdWNjZXNzZnVsU2VuZFRvLA0KICAgICAgICB1aW50IGZ1bmRpbmdHb2FsSW5FdGhlcnMsDQogICAgICAgIHVpbnQgZHVyYXRpb25Jbk1pbnV0ZXMsDQogICAgICAgIHVpbnQgcHJpY2VQZXJFdGhlciwNCiAgICAgICAgU09DVG9rZW4gYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQNCiAgICApIHsNCiAgICAgICAgYmVuZWZpY2lhcnkgPSBpZlN1Y2Nlc3NmdWxTZW5kVG87DQogICAgICAgIGZ1bmRpbmdHb2FsID0gZnVuZGluZ0dvYWxJbkV0aGVycyAqIDEgZXRoZXI7DQogICAgICAgIGRlYWRsaW5lID0gbm93ICsgZHVyYXRpb25Jbk1pbnV0ZXMgKiAxIG1pbnV0ZXM7DQogICAgICAgIHByaWNlID0gMSBldGhlciAvIHByaWNlUGVyRXRoZXI7DQogICAgICAgIHRva2VuUmV3YXJkID0gU09DVG9rZW4oYWRkcmVzc09mVG9rZW5Vc2VkQXNSZXdhcmQpOw0KICAgIH0NCg0KICAgIC8qIFRoZSBmdW5jdGlvbiB3aXRob3V0IG5hbWUgaXMgdGhlIGRlZmF1bHQgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55b25lIHNlbmRzIGZ1bmRzIHRvIGEgY29udHJhY3QgKi8NCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsNCiAgICAgICAgaWYgKGNyb3dkc2FsZUNsb3NlZCkgdGhyb3c7DQogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOw0KICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBhbW91bnQ7DQogICAgICAgIGFtb3VudFJhaXNlZCArPSBhbW91bnQ7DQogICAgICAgIHRva2VuUmV3YXJkLnRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCAvIHByaWNlKTsNCiAgICAgICAgRnVuZFRyYW5zZmVyKG1zZy5zZW5kZXIsIGFtb3VudCwgdHJ1ZSk7DQogICAgfQ0KDQogICAgbW9kaWZpZXIgYWZ0ZXJEZWFkbGluZSgpIHsgaWYgKG5vdyA+PSBkZWFkbGluZSkgXzsgfQ0KDQogICAgLyogY2hlY2tzIGlmIHRoZSBnb2FsIG9yIHRpbWUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZCBhbmQgZW5kcyB0aGUgY2FtcGFpZ24gKi8NCiAgICBmdW5jdGlvbiBjaGVja0dvYWxSZWFjaGVkKCkgYWZ0ZXJEZWFkbGluZSB7DQogICAgICAgIGlmIChhbW91bnRSYWlzZWQgPj0gZnVuZGluZ0dvYWwpew0KICAgICAgICAgICAgZnVuZGluZ0dvYWxSZWFjaGVkID0gdHJ1ZTsNCiAgICAgICAgICAgIEdvYWxSZWFjaGVkKGJlbmVmaWNpYXJ5LCBhbW91bnRSYWlzZWQpOw0KICAgICAgICB9DQogICAgICAgIGNyb3dkc2FsZUNsb3NlZCA9IHRydWU7DQogICAgfQ0KDQoNCiAgICBmdW5jdGlvbiB3aXRoZHJhd2FsKHVpbnQgYW1vdW50KSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGJlbmVmaWNpYXJ5KSB7DQogICAgICAgICAgICBpZiAoYmVuZWZpY2lhcnkuc2VuZChhbW91bnQgKiAxIGZpbm5leSkpIHsNCiAgICAJCQlGdW5kVHJhbnNmZXIoYmVuZWZpY2lhcnksIGFtb3VudCAqIDEgZmlubmV5LCBmYWxzZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9CQ0KCQ0KICAgIGZ1bmN0aW9uIHNhZmVXaXRoZHJhd2FsKCkgYWZ0ZXJEZWFkbGluZSB7DQogICAgICAgIGlmIChhbW91bnRSYWlzZWQgPCBzb2Z0TWFya2V0aW5nTGltaXQpIHsNCiAgICAgICAgICAgIHVpbnQgYW1vdW50ID0gYmFsYW5jZU9mW21zZy5zZW5kZXJdOw0KICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gMDsNCiAgICAgICAgICAgIGlmIChhbW91bnQgPiAwKSB7DQogICAgICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIuc2VuZChhbW91bnQpKSB7DQogICAgICAgICAgICAgICAgICAgIEZ1bmRUcmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSBhbW91bnQ7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGZ1bmRpbmdHb2FsUmVhY2hlZCAmJiBiZW5lZmljaWFyeSA9PSBtc2cuc2VuZGVyKSB7DQogICAgICAgICAgICBpZiAoYmVuZWZpY2lhcnkuc2VuZCh0aGlzLmJhbGFuY2UpKSB7DQogICAgICAgICAgICAgICAgRnVuZFRyYW5zZmVyKGJlbmVmaWNpYXJ5LCB0aGlzLmJhbGFuY2UsIGZhbHNlKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgZnVuZGluZ0dvYWxSZWFjaGVkID0gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9'