base 64 content
base64sandwichShop1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KY29udHJhY3QgU2FuZHdpY2hTaG9wDQp7DQogICAgYWRkcmVzcyBvd25lcjsNCg0KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpDQogICAgew0KICAgICAgICByZXF1aXJlKG1zZy5zZW5kZXIgPT0gb3duZXIpOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIHN0cnVjdCBTYW5kd2ljaA0KICAgIHsNCiAgICAgICAgdWludCBzYW5kd2ljaElEOw0KICAgICAgICBzdHJpbmcgc2FuZHdpY2hOYW1lOw0KICAgICAgICBzdHJpbmcgc2FuZHdpY2hEZXNjOw0KICAgICAgICBzdHJpbmcgY2Fsb3JpZXM7DQogICAgICAgIHVpbnQgcHJpY2U7DQogICAgICAgIHVpbnQgcXVhbnRpdHk7DQogICAgfQ0KDQogICAgc3RydWN0IE9yZGVyZWRTYW5kd2ljaA0KICAgIHsNCiAgICAgICAgdWludCBzYW5kd2ljaElkTnVtYmVyOw0KICAgICAgICBzdHJpbmcgbm90ZXM7DQogICAgICAgIHVpbnQgcHJpY2U7DQogICAgfQ0KICAgIA0KICAgIGV2ZW50IE5ld1NhbmR3aWNoVGlja2V0KCBzdHJpbmcgbmFtZSwgYWRkcmVzcyBjdXN0b21lciwgc3RyaW5nIHNhbmROYW1lLCBzdHJpbmcgc2FuZENoYW5nZXMgKTsNCg0KICAgIFNhbmR3aWNoWzVdIHNob3BTYW5kd2ljaDsNCiAgICBtYXBwaW5nKCBhZGRyZXNzID0+IE9yZGVyZWRTYW5kd2ljaFtdICkgcHVibGljIGNhcnQ7DQogICAgbWFwcGluZyggYWRkcmVzcyA9PiB1aW50ICkgcHVibGljIHN1YnRvdGFsOw0KDQogICAgZnVuY3Rpb24gU2FuZHdpY2hTaG9wKCkgcHVibGljDQogICAgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQoNCiAgICAgICAgc2hvcFNhbmR3aWNoWzBdLnNhbmR3aWNoSUQgPSAwOw0KICAgICAgICBzaG9wU2FuZHdpY2hbMF0uc2FuZHdpY2hOYW1lID0gIjAwOiAgSGFtICYgU3dpc3MiOw0KICAgICAgICBzaG9wU2FuZHdpY2hbMF0uc2FuZHdpY2hEZXNjID0gIkhhbSBTd2lzcyBNdXN0YXJkIFJ5ZSI7DQogICAgICAgIHNob3BTYW5kd2ljaFswXS5jYWxvcmllcyA9ICI0NTAgY2Fsb3JpZXMiOw0KICAgICAgICBzaG9wU2FuZHdpY2hbMF0ucHJpY2UgPSA0MCBmaW5uZXk7DQogICAgICAgIHNob3BTYW5kd2ljaFswXS5xdWFudGl0eSA9IDIwMDsNCg0KICAgICAgICBzaG9wU2FuZHdpY2hbMV0uc2FuZHdpY2hJRCA9IDE7DQogICAgICAgIHNob3BTYW5kd2ljaFsxXS5zYW5kd2ljaE5hbWUgPSAiMDE6ICBUdXJrZXkgJiBQZXBwZXJqYWNrIjsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzFdLnNhbmR3aWNoRGVzYyA9ICJUdXJrZXkgUGVwcGVyamFjayBNYXlvIFdoaXRlIEJyZWFkIjsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzFdLmNhbG9yaWVzID0gIjUwMCBjYWxvcmllcyI7DQogICAgICAgIHNob3BTYW5kd2ljaFsxXS5wcmljZSA9IDQ1IGZpbm5leTsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzFdLnF1YW50aXR5ID0gMjAwOw0KDQogICAgICAgIHNob3BTYW5kd2ljaFsyXS5zYW5kd2ljaElEID0gMjsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzJdLnNhbmR3aWNoTmFtZSA9ICIwMjogIFJvYXN0IEJlZWYgJiBBbWVyaWNhbiI7DQogICAgICAgIHNob3BTYW5kd2ljaFsyXS5zYW5kd2ljaERlc2MgPSAiUm9hc3QgQmVlZiBIYXZhcnRpIEhvcnNlcmFkaXNoIFdoaXRlIEJyZWFkIjsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzJdLmNhbG9yaWVzID0gIjYwMCBjYWxvcmllcyI7DQogICAgICAgIHNob3BTYW5kd2ljaFsyXS5wcmljZSA9IDUwIGZpbm5leTsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzJdLnF1YW50aXR5ID0gMjAwOw0KDQogICAgICAgIHNob3BTYW5kd2ljaFszXS5zYW5kd2ljaElEID0gMzsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzNdLnNhbmR3aWNoTmFtZSA9ICIwMzogIFJldWJlbiI7DQogICAgICAgIHNob3BTYW5kd2ljaFszXS5zYW5kd2ljaERlc2MgPSAiQ29ybmVkIEJlZWYgU2F1ZXJrcmF1dCBTd2lzcyBSeWUiOw0KICAgICAgICBzaG9wU2FuZHdpY2hbM10uY2Fsb3JpZXMgPSAiNTUwIGNhbG9yaWVzIjsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzNdLnByaWNlID0gNTAgZmlubmV5Ow0KICAgICAgICBzaG9wU2FuZHdpY2hbM10ucXVhbnRpdHkgPSAyMDA7DQoNCiAgICAgICAgc2hvcFNhbmR3aWNoWzRdLnNhbmR3aWNoSUQgPSA0Ow0KICAgICAgICBzaG9wU2FuZHdpY2hbNF0uc2FuZHdpY2hOYW1lID0gIjA0OiAgSXRhbGlhbiI7DQogICAgICAgIHNob3BTYW5kd2ljaFs0XS5zYW5kd2ljaERlc2MgPSAiU2FsYW1pIFBlcHBlcnMgUHJvdm9sb25lIE9pbCBWaW5lZ2FyIFdoaXRlIjsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzRdLmNhbG9yaWVzID0gIjUwMCBjYWxvcmllcyI7DQogICAgICAgIHNob3BTYW5kd2ljaFs0XS5wcmljZSA9IDQwIGZpbm5leTsNCiAgICAgICAgc2hvcFNhbmR3aWNoWzRdLnF1YW50aXR5ID0gMjAwOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldE1lbnUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZykNCiAgICB7DQogICAgICAgIHJldHVybiAoc2hvcFNhbmR3aWNoWzBdLnNhbmR3aWNoTmFtZSwgc2hvcFNhbmR3aWNoWzFdLnNhbmR3aWNoTmFtZSwNCiAgICAgICAgICAgICAgICBzaG9wU2FuZHdpY2hbMl0uc2FuZHdpY2hOYW1lLCBzaG9wU2FuZHdpY2hbM10uc2FuZHdpY2hOYW1lLA0KICAgICAgICAgICAgICAgIHNob3BTYW5kd2ljaFs0XS5zYW5kd2ljaE5hbWUgKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRTYW5kd2ljaEluZm8odWludCBfc2FuZHdpY2hJZCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgdWludCwgdWludCkNCiAgICB7DQogICAgICAgIGlmKCBfc2FuZHdpY2hJZCA+IDQgKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKCAid3JvbmcgSUQiLCAid3JvbmcgSUQiLCAiemVybyIsIDAsIDApOw0KICAgICAgICB9DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIChzaG9wU2FuZHdpY2hbX3NhbmR3aWNoSWRdLnNhbmR3aWNoTmFtZSwgc2hvcFNhbmR3aWNoW19zYW5kd2ljaElkXS5zYW5kd2ljaERlc2MsDQogICAgICAgICAgICAgICAgICAgIHNob3BTYW5kd2ljaFtfc2FuZHdpY2hJZF0uY2Fsb3JpZXMsIHNob3BTYW5kd2ljaFtfc2FuZHdpY2hJZF0ucHJpY2UsIHNob3BTYW5kd2ljaFtfc2FuZHdpY2hJZF0ucXVhbnRpdHkpOw0KDQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhZGRUb0NhcnQodWludCBfc2FuZHdpY2hJRCwgc3RyaW5nIF9ub3RlcykgcmV0dXJucyAodWludCkNCiAgICB7DQogICAgICAgIGlmKCBzaG9wU2FuZHdpY2hbX3NhbmR3aWNoSURdLnF1YW50aXR5ID4gMCApDQogICAgICAgIHsNCiAgICAgICAgICAgIE9yZGVyZWRTYW5kd2ljaCBtZW1vcnkgbmV3T3JkZXI7DQogICAgICAgICAgICBuZXdPcmRlci5zYW5kd2ljaElkTnVtYmVyID0gX3NhbmR3aWNoSUQ7DQogICAgICAgICAgICBuZXdPcmRlci5ub3RlcyA9IF9ub3RlczsNCiAgICAgICAgICAgIG5ld09yZGVyLnByaWNlID0gc2hvcFNhbmR3aWNoW19zYW5kd2ljaElEXS5wcmljZTsNCiAgICAgICAgICAgIHN1YnRvdGFsW21zZy5zZW5kZXJdICs9IG5ld09yZGVyLnByaWNlOw0KDQogICAgICAgICAgICByZXR1cm4gY2FydFttc2cuc2VuZGVyXS5wdXNoKG5ld09yZGVyKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBjYXJ0W21zZy5zZW5kZXJdLmxlbmd0aDsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gZ2V0Q2FydExlbmd0aChhZGRyZXNzIF9jdXJpb3VzKSBjb25zdGFudCByZXR1cm5zICh1aW50KQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGNhcnRbX2N1cmlvdXNdLmxlbmd0aDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRDYXJ0SXRlbUluZm8oYWRkcmVzcyBfY3VyaW91cywgdWludCBfc2xvdCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGNhcnRbX2N1cmlvdXNdW19zbG90XS5ub3RlczsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBlbXB0eUNhcnQoKSBwdWJsaWMNCiAgICB7DQogICAgICAgIGRlbGV0ZSBjYXJ0W21zZy5zZW5kZXJdOw0KICAgICAgICBzdWJ0b3RhbFttc2cuc2VuZGVyXSA9IDA7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0Q2FydFN1YnRvdGFsKGFkZHJlc3MgX2N1cmlvdXMpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpDQogICAgew0KICAgICAgICByZXR1cm4gc3VidG90YWxbX2N1cmlvdXNdOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoZWNrb3V0Q2FydChzdHJpbmcgX2ZpcnN0bmFtZSkgcGF5YWJsZSByZXR1cm5zICh1aW50KQ0KICAgIHsNCiAgICAgICAgaWYoIG1zZy52YWx1ZSA8IHN1YnRvdGFsW21zZy5zZW5kZXJdICl7IHJldmVydCgpOyB9DQoNCiAgICAgICAgZm9yKCB1aW50IHggPSAwOyB4IDwgY2FydFttc2cuc2VuZGVyXS5sZW5ndGg7IHgrKyApDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmKCBzaG9wU2FuZHdpY2hbIGNhcnRbbXNnLnNlbmRlcl1beF0uc2FuZHdpY2hJZE51bWJlciBdLnF1YW50aXR5ID4gMCApDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTmV3U2FuZHdpY2hUaWNrZXQoIF9maXJzdG5hbWUsIG1zZy5zZW5kZXIsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9wU2FuZHdpY2hbIGNhcnRbbXNnLnNlbmRlcl1beF0uc2FuZHdpY2hJZE51bWJlciBdLnNhbmR3aWNoTmFtZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FydFttc2cuc2VuZGVyXVt4XS5ub3RlcyApOw0KICAgICAgICAgICAgICAgIGRlY3JlbWVudFF1YW50aXR5KCBjYXJ0W21zZy5zZW5kZXJdW3hdLnNhbmR3aWNoSWROdW1iZXIgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXZlcnQoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBzdWJ0b3RhbFttc2cuc2VuZGVyXSA9IDA7DQogICAgICAgIGRlbGV0ZSBjYXJ0W21zZy5zZW5kZXJdOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnVuZHNBZG1pbk9ubHkoYWRkcmVzcyBhZGRyLCB1aW50IGFtb3VudCkgb25seU93bmVyDQogICAgew0KICAgICAgICBpZiggYW1vdW50IDw9IHRoaXMuYmFsYW5jZSApDQogICAgICAgIHsNCiAgICAgICAgICAgIGFkZHIudHJhbnNmZXIoYW1vdW50KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGRlY3JlbWVudFF1YW50aXR5KHVpbnQgX3NhbmRudW0pIHByaXZhdGUNCiAgICB7DQogICAgICAgIHNob3BTYW5kd2ljaFtfc2FuZG51bV0ucXVhbnRpdHktLTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzZXRRdWFudGl0eUFkbWluT25seSh1aW50IF9zYW5kbnVtLCB1aW50IF9xdWFudGl0eSkgb25seU93bmVyDQogICAgew0KICAgICAgICBzaG9wU2FuZHdpY2hbX3NhbmRudW1dLnF1YW50aXR5ID0gX3F1YW50aXR5Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGtpbGxBZG1pbk9ubHkoKSBvbmx5T3duZXINCiAgICB7DQogICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7DQogICAgfQ0KDQp9'