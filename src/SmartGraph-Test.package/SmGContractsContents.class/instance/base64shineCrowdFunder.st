base 64 content
base64shineCrowdFunder
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC42Ow0KDQpjb250cmFjdCBTYWZlTWF0aCB7DQogICAgZnVuY3Rpb24gbXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgICAgIHVpbnQgYyA9IGEgKiBiOw0KICAgICAgICBhc3NlcnQoYSA9PSAwIHx8IGMgLyBhID09IGIpOw0KICAgICAgICByZXR1cm4gYzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBkaXYodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgYXNzZXJ0KGIgPiAwKTsNCiAgICAgICAgdWludCBjID0gYSAvIGI7DQogICAgICAgIGFzc2VydChhID09IGIgKiBjICsgYSAlIGIpOw0KICAgICAgICByZXR1cm4gYzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgICAgIHJldHVybiBhIC0gYjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgdWludCBjID0gYSArIGI7DQogICAgICAgIGFzc2VydChjID49IGEpOw0KICAgICAgICByZXR1cm4gYzsNCiAgICB9DQp9DQoNCmNvbnRyYWN0IFRva2VuQ29udHJvbGxlciB7DQogICAgZnVuY3Rpb24gcHJveHlQYXltZW50KGFkZHJlc3MgX293bmVyKSBwYXlhYmxlIHJldHVybnMgKGJvb2wpOw0KDQogICAgZnVuY3Rpb24gb25UcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfYW1vdW50KSByZXR1cm5zIChib29sKTsNCg0KICAgIGZ1bmN0aW9uIG9uQXBwcm92ZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlciwgdWludCBfYW1vdW50KQ0KICAgIHJldHVybnMgKGJvb2wpOw0KfQ0KDQoNCmNvbnRyYWN0IENvbnRyb2xsZWQgew0KICAgIG1vZGlmaWVyIG9ubHlDb250cm9sbGVyIHtpZiAobXNnLnNlbmRlciAhPSBjb250cm9sbGVyKSB0aHJvdzsNCiAgICAgICAgXzt9DQoNCiAgICBhZGRyZXNzIHB1YmxpYyBjb250cm9sbGVyOw0KDQogICAgZnVuY3Rpb24gQ29udHJvbGxlZCgpIHtjb250cm9sbGVyID0gbXNnLnNlbmRlcjt9DQoNCiAgICBmdW5jdGlvbiBjaGFuZ2VDb250cm9sbGVyKGFkZHJlc3MgX25ld0NvbnRyb2xsZXIpIG9ubHlDb250cm9sbGVyIHsNCiAgICAgICAgY29udHJvbGxlciA9IF9uZXdDb250cm9sbGVyOw0KICAgIH0NCn0NCg0KDQpjb250cmFjdCBBcHByb3ZlQW5kQ2FsbEZhbGxCYWNrIHsNCiAgICBmdW5jdGlvbiByZWNlaXZlQXBwcm92YWwoYWRkcmVzcyBmcm9tLCB1aW50MjU2IF9hbW91bnQsIGFkZHJlc3MgX3Rva2VuLCBieXRlcyBfZGF0YSk7DQp9DQoNCg0KY29udHJhY3QgU2hpbmVDb2luVG9rZW4gaXMgQ29udHJvbGxlZCB7DQogICAgc3RyaW5nIHB1YmxpYyBuYW1lOw0KICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsNCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbDsNCiAgICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAnU0hJTkVfMC4xJzsNCg0KICAgIHN0cnVjdCBDaGVja3BvaW50IHsNCiAgICAgICAgdWludDEyOCBmcm9tQmxvY2s7DQogICAgICAgIHVpbnQxMjggdmFsdWU7DQogICAgfQ0KDQogICAgU2hpbmVDb2luVG9rZW4gcHVibGljIHBhcmVudFRva2VuOw0KDQogICAgYWRkcmVzcyBwdWJsaWMgZnJvemVuUmVzZXJ2ZVRlYW1SZWNpcGllbnQ7DQoNCiAgICB1aW50IHB1YmxpYyBwYXJlbnRTbmFwU2hvdEJsb2NrOw0KDQogICAgdWludCBwdWJsaWMgY3JlYXRpb25CbG9jazsNCg0KICAgIC8vIFBlcmlvZHMNCiAgICB1aW50IHB1YmxpYyBmaXJzdFJld2FyZFBlcmlvZEVuZEJsb2NrOw0KDQogICAgdWludCBwdWJsaWMgc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2s7DQoNCiAgICB1aW50IHB1YmxpYyB0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrOw0KDQogICAgdWludCBwdWJsaWMgZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jazsNCg0KICAgIC8vIExvb3MNCiAgICB1aW50IHB1YmxpYyBmaXJzdExvb3M7DQoNCiAgICB1aW50IHB1YmxpYyBzZWNvbmRMb29zOw0KDQogICAgdWludCBwdWJsaWMgdGhpcmRMb29zOw0KDQogICAgdWludCBwdWJsaWMgZmluYWxMb29zOw0KDQoNCiAgICAvLyBQZXJjZW50cw0KICAgIHVpbnQgcHVibGljIGZpcnN0UmV3YXJkUGVyaW9kUGVyY2VudDsNCg0KICAgIHVpbnQgcHVibGljIHNlY29uZFJld2FyZFBlcmlvZFBlcmNlbnQ7DQoNCiAgICB1aW50IHB1YmxpYyB0aGlyZFJld2FyZFBlcmlvZFBlcmNlbnQ7DQoNCiAgICB1aW50IHB1YmxpYyBmaW5hbFJld2FyZFBlcmlvZFBlcmNlbnQ7DQoNCiAgICAvLyBVbmZyZWV6ZSB0ZWFtIHdhbGxldCBmb3IgdHJhbnNmZXJzDQogICAgdWludCBwdWJsaWMgdW5mcmVlemVUZWFtUmVjZXBpZW50QmxvY2s7DQoNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IENoZWNrcG9pbnRbXSkgYmFsYW5jZXM7DQoNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7DQoNCiAgICBDaGVja3BvaW50W10gdG90YWxTdXBwbHlIaXN0b3J5Ow0KDQogICAgYm9vbCBwdWJsaWMgdHJhbnNmZXJzRW5hYmxlZDsNCg0KICAgIFNoaW5lQ29pblRva2VuRmFjdG9yeSBwdWJsaWMgdG9rZW5GYWN0b3J5Ow0KDQogICAgZnVuY3Rpb24gU2hpbmVDb2luVG9rZW4oDQogICAgICAgIGFkZHJlc3MgX3Rva2VuRmFjdG9yeSwNCiAgICAgICAgYWRkcmVzcyBfcGFyZW50VG9rZW4sDQogICAgICAgIHVpbnQgX3BhcmVudFNuYXBTaG90QmxvY2ssDQogICAgICAgIHN0cmluZyBfdG9rZW5OYW1lLA0KICAgICAgICB1aW50OCBfZGVjaW1hbFVuaXRzLA0KICAgICAgICBzdHJpbmcgX3Rva2VuU3ltYm9sLA0KICAgICAgICBib29sIF90cmFuc2ZlcnNFbmFibGVkDQogICAgKSB7DQogICAgICAgIHRva2VuRmFjdG9yeSA9IFNoaW5lQ29pblRva2VuRmFjdG9yeShfdG9rZW5GYWN0b3J5KTsNCiAgICAgICAgbmFtZSA9IF90b2tlbk5hbWU7DQogICAgICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsNCiAgICAgICAgc3ltYm9sID0gX3Rva2VuU3ltYm9sOw0KICAgICAgICBwYXJlbnRUb2tlbiA9IFNoaW5lQ29pblRva2VuKF9wYXJlbnRUb2tlbik7DQogICAgICAgIHBhcmVudFNuYXBTaG90QmxvY2sgPSBfcGFyZW50U25hcFNob3RCbG9jazsNCiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9IF90cmFuc2ZlcnNFbmFibGVkOw0KICAgICAgICBjcmVhdGlvbkJsb2NrID0gYmxvY2subnVtYmVyOw0KICAgICAgICB1bmZyZWV6ZVRlYW1SZWNlcGllbnRCbG9jayA9IGJsb2NrLm51bWJlciArICgoMzk2ICogMjQgKiAzNjAwKSAvIDE4KTsgLy8gMzk2IGRheXMNCg0KICAgICAgICBmaXJzdFJld2FyZFBlcmlvZEVuZEJsb2NrID0gY3JlYXRpb25CbG9jayArICgoMTIxICogMjQgKiAzNjAwKSAvIDE4KTsgLy8gMTIxIGRheXMNCiAgICAgICAgc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2sgPSBjcmVhdGlvbkJsb2NrICsgKCgxODEgKiAyNCAqIDM2MDApIC8gMTgpOyAvLyAxODEgZGF5cw0KICAgICAgICB0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrID0gY3JlYXRpb25CbG9jayArICgoMjExICogMjQgKiAzNjAwKSAvIDE4KTsgLy8gMjExIGRheXMNCiAgICAgICAgZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jayA9IGNyZWF0aW9uQmxvY2sgKyAoKDc2MCAqIDI0ICogMzYwMCkgLyAxOCk7IC8vIDIgeWVhcnMNCg0KICAgICAgICBmaXJzdFJld2FyZFBlcmlvZFBlcmNlbnQgPSAyOTsNCiAgICAgICAgc2Vjb25kUmV3YXJkUGVyaW9kUGVyY2VudCA9IDIzOw0KICAgICAgICB0aGlyZFJld2FyZFBlcmlvZFBlcmNlbnQgPSAxODsNCiAgICAgICAgZmluYWxSZXdhcmRQZXJpb2RQZXJjZW50ID0gMTI7DQoNCiAgICAgICAgZmlyc3RMb29zID0gKCgxNSAqIDI0ICogMzYwMCkgLyAxOCk7IC8vIDE1IGRheXM7DQogICAgICAgIHNlY29uZExvb3MgPSAoKDEwICogMjQgKiAzNjAwKSAvIDE4KTsgLy8gMTAgZGF5czsNCiAgICAgICAgdGhpcmRMb29zID0gKCg1ICogMjQgKiAzNjAwKSAvIDE4KTsgLy8gNSBkYXlzOw0KICAgICAgICBmaW5hbExvb3MgPSAoKDEgKiAyNCAqIDM2MDApIC8gMTgpOyAvLyAxIGRheXM7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY2hhbmdlUmVzZXJ2ZVRlYW1SZWNlcGllbnQoYWRkcmVzcyBfbmV3UmVzZXJ2ZVRlYW1SZWNpcGllbnQpIG9ubHlDb250cm9sbGVyIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgZnJvemVuUmVzZXJ2ZVRlYW1SZWNpcGllbnQgPSBfbmV3UmVzZXJ2ZVRlYW1SZWNpcGllbnQ7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8NCiAgICAvLyBFUkMyMCBNZXRob2RzDQogICAgLy8vLy8vLy8vLy8vLy8vLy8vLw0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmICghdHJhbnNmZXJzRW5hYmxlZCkgdGhyb3c7DQogICAgICAgIGlmICgoYWRkcmVzcyhtc2cuc2VuZGVyKSA9PSBmcm96ZW5SZXNlcnZlVGVhbVJlY2lwaWVudCkgJiYgKGJsb2NrLm51bWJlciA8IHVuZnJlZXplVGVhbVJlY2VwaWVudEJsb2NrKSkgdGhyb3c7DQogICAgICAgIGlmICgoX3RvID09IGZyb3plblJlc2VydmVUZWFtUmVjaXBpZW50KSAmJiAoYmxvY2subnVtYmVyIDwgdW5mcmVlemVUZWFtUmVjZXBpZW50QmxvY2spKSB0aHJvdzsNCiAgICAgICAgcmV0dXJuIGRvVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGNvbnRyb2xsZXIpIHsNCiAgICAgICAgICAgIGlmICghdHJhbnNmZXJzRW5hYmxlZCkgdGhyb3c7DQoNCiAgICAgICAgICAgIGlmIChhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA8IF9hbW91bnQpIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGRvVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZG9UcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfYW1vdW50KSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7DQoNCiAgICAgICAgaWYgKF9hbW91bnQgPT0gMCkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAocGFyZW50U25hcFNob3RCbG9jayA+PSBibG9jay5udW1iZXIpIHRocm93Ow0KDQogICAgICAgIGlmICgoX3RvID09IDApIHx8IChfdG8gPT0gYWRkcmVzcyh0aGlzKSkpIHRocm93Ow0KDQogICAgICAgIHZhciBwcmV2aW91c0JhbGFuY2VGcm9tID0gYmFsYW5jZU9mQXQoX2Zyb20sIGJsb2NrLm51bWJlcik7DQogICAgICAgIGlmIChwcmV2aW91c0JhbGFuY2VGcm9tIDwgX2Ftb3VudCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlzQ29udHJhY3QoY29udHJvbGxlcikpIHsNCiAgICAgICAgICAgIGlmICghVG9rZW5Db250cm9sbGVyKGNvbnRyb2xsZXIpLm9uVHJhbnNmZXIoX2Zyb20sIF90bywgX2Ftb3VudCkpDQogICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfQ0KDQogICAgICAgIENoZWNrcG9pbnRbXSBjaGVja3BvaW50cyA9IGJhbGFuY2VzW19mcm9tXTsNCiAgICAgICAgdWludCBsYXN0QmxvY2sgPSBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGggLSAxXS5mcm9tQmxvY2s7DQogICAgICAgIHVpbnQgYmxvY2tzRnJvbUxhc3RCbG9jayA9IGJsb2NrLm51bWJlciAtIGxhc3RCbG9jazsNCiAgICAgICAgdWludCByZXdhcmRBbW91bnQgPSAwOw0KDQogICAgICAgIGlmIChibG9jay5udW1iZXIgPD0gZmlyc3RSZXdhcmRQZXJpb2RFbmRCbG9jaykgew0KICAgICAgICAgICAgaWYgKGJsb2Nrc0Zyb21MYXN0QmxvY2sgPiBmaXJzdExvb3MpIHsNCiAgICAgICAgICAgICAgICByZXdhcmRBbW91bnQgPSBwcmV2aW91c0JhbGFuY2VGcm9tICogZmlyc3RSZXdhcmRQZXJpb2RQZXJjZW50ICogYmxvY2tzRnJvbUxhc3RCbG9jazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBlbHNlIGlmIChibG9jay5udW1iZXIgPD0gc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2spIHsNCiAgICAgICAgICAgIGlmIChibG9ja3NGcm9tTGFzdEJsb2NrID4gc2Vjb25kTG9vcykgew0KICAgICAgICAgICAgICAgIGlmIChsYXN0QmxvY2sgPCBmaXJzdFJld2FyZFBlcmlvZEVuZEJsb2NrKSB7DQogICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaXJzdFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmlyc3RSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGxhc3RCbG9jaykgKyBwcmV2aW91c0JhbGFuY2VGcm9tICogc2Vjb25kUmV3YXJkUGVyaW9kUGVyY2VudCAqIChzZWNvbmRSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGJsb2NrLm51bWJlcik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICByZXdhcmRBbW91bnQgPSBwcmV2aW91c0JhbGFuY2VGcm9tICogc2Vjb25kUmV3YXJkUGVyaW9kUGVyY2VudCAqIGJsb2Nrc0Zyb21MYXN0QmxvY2s7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGVsc2UgaWYgKGJsb2NrLm51bWJlciA8PSB0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrKSB7DQogICAgICAgICAgICBpZiAoYmxvY2tzRnJvbUxhc3RCbG9jayA+IHRoaXJkTG9vcykgew0KICAgICAgICAgICAgICAgIGlmIChsYXN0QmxvY2sgPCBmaXJzdFJld2FyZFBlcmlvZEVuZEJsb2NrKSB7DQogICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaXJzdFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmlyc3RSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGxhc3RCbG9jaykgKyBwcmV2aW91c0JhbGFuY2VGcm9tICogc2Vjb25kUmV3YXJkUGVyaW9kUGVyY2VudCAqICh0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIHRoaXJkUmV3YXJkUGVyaW9kUGVyY2VudCAqICh0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAobGFzdEJsb2NrIDwgc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2spIHsNCiAgICAgICAgICAgICAgICAgICAgcmV3YXJkQW1vdW50ID0gcHJldmlvdXNCYWxhbmNlRnJvbSAqIHNlY29uZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBsYXN0QmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIHRoaXJkUmV3YXJkUGVyaW9kUGVyY2VudCAqICh0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiB0aGlyZFJld2FyZFBlcmlvZFBlcmNlbnQgKiBibG9ja3NGcm9tTGFzdEJsb2NrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBlbHNlIGlmIChibG9jay5udW1iZXIgPD0gZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jaykgew0KICAgICAgICAgICAgaWYgKGJsb2Nrc0Zyb21MYXN0QmxvY2sgPiBmaW5hbExvb3MpIHsNCiAgICAgICAgICAgICAgICBpZiAobGFzdEJsb2NrIDwgZmlyc3RSZXdhcmRQZXJpb2RFbmRCbG9jaykgew0KICAgICAgICAgICAgICAgICAgICByZXdhcmRBbW91bnQgPSBwcmV2aW91c0JhbGFuY2VGcm9tICogZmlyc3RSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpcnN0UmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBsYXN0QmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIHNlY29uZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAodGhpcmRSZXdhcmRQZXJpb2RFbmRCbG9jayAtIHNlY29uZFJld2FyZFBlcmlvZEVuZEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiB0aGlyZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jayAtIHRoaXJkUmV3YXJkUGVyaW9kRW5kQmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIGZpbmFsUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAobGFzdEJsb2NrIDwgc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2spIHsNCiAgICAgICAgICAgICAgICAgICAgcmV3YXJkQW1vdW50ID0gcHJldmlvdXNCYWxhbmNlRnJvbSAqIHNlY29uZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBsYXN0QmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIHRoaXJkUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gdGhpcmRSZXdhcmRQZXJpb2RFbmRCbG9jaykgKyBwcmV2aW91c0JhbGFuY2VGcm9tICogZmluYWxSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpbmFsUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBibG9jay5udW1iZXIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIGlmIChsYXN0QmxvY2sgPCBzZWNvbmRSZXdhcmRQZXJpb2RFbmRCbG9jaykgew0KICAgICAgICAgICAgICAgICAgICByZXdhcmRBbW91bnQgPSBwcmV2aW91c0JhbGFuY2VGcm9tICogdGhpcmRSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpbmFsUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBsYXN0QmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIGZpbmFsUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaW5hbFJld2FyZFBlcmlvZFBlcmNlbnQgKiBibG9ja3NGcm9tTGFzdEJsb2NrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIGlmIChibG9ja3NGcm9tTGFzdEJsb2NrID4gZmluYWxMb29zKSB7DQogICAgICAgICAgICAgICAgaWYgKGxhc3RCbG9jayA8IGZpcnN0UmV3YXJkUGVyaW9kRW5kQmxvY2spIHsNCiAgICAgICAgICAgICAgICAgICAgcmV3YXJkQW1vdW50ID0gcHJldmlvdXNCYWxhbmNlRnJvbSAqIGZpcnN0UmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaXJzdFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gbGFzdEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiBzZWNvbmRSZXdhcmRQZXJpb2RQZXJjZW50ICogKHRoaXJkUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBzZWNvbmRSZXdhcmRQZXJpb2RFbmRCbG9jaykgKyBwcmV2aW91c0JhbGFuY2VGcm9tICogdGhpcmRSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpbmFsUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSB0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaW5hbFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGJsb2NrLm51bWJlcik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxhc3RCbG9jayA8IHNlY29uZFJld2FyZFBlcmlvZEVuZEJsb2NrKSB7DQogICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiBzZWNvbmRSZXdhcmRQZXJpb2RQZXJjZW50ICogKHNlY29uZFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gbGFzdEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiB0aGlyZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jayAtIHRoaXJkUmV3YXJkUGVyaW9kRW5kQmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIGZpbmFsUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAobGFzdEJsb2NrIDwgc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2spIHsNCiAgICAgICAgICAgICAgICAgICAgcmV3YXJkQW1vdW50ID0gcHJldmlvdXNCYWxhbmNlRnJvbSAqIHRoaXJkUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gbGFzdEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaW5hbFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGJsb2NrLm51bWJlcik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICByZXdhcmRBbW91bnQgPSBwcmV2aW91c0JhbGFuY2VGcm9tICogZmluYWxSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpbmFsUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSB0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXdhcmRBbW91bnQgPSByZXdhcmRBbW91bnQgLyAxMDAwMDsNCiAgICAgICAgdWludCBjdXJUb3RhbFN1cHBseSA9IDA7DQoNCiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfZnJvbV0sIHByZXZpb3VzQmFsYW5jZUZyb20gLSBfYW1vdW50ICsgcmV3YXJkQW1vdW50KTsNCg0KICAgICAgICAvLyBVUERBVEUgVE9UQUwNCiAgICAgICAgaWYgKHJld2FyZEFtb3VudCA+IDApIHsNCiAgICAgICAgICAgIGN1clRvdGFsU3VwcGx5ID0gZ2V0VmFsdWVBdCh0b3RhbFN1cHBseUhpc3RvcnksIGJsb2NrLm51bWJlcik7DQogICAgICAgICAgICBpZiAoY3VyVG90YWxTdXBwbHkgKyByZXdhcmRBbW91bnQgPCBjdXJUb3RhbFN1cHBseSkgdGhyb3c7IC8vIENoZWNrIGZvciBvdmVyZmxvdw0KICAgICAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFN1cHBseUhpc3RvcnksIGN1clRvdGFsU3VwcGx5ICsgcmV3YXJkQW1vdW50KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJld2FyZEFtb3VudCA9IDA7DQoNCiAgICAgICAgdmFyIHByZXZpb3VzQmFsYW5jZVRvID0gYmFsYW5jZU9mQXQoX3RvLCBibG9jay5udW1iZXIpOw0KICAgICAgICBpZiAocHJldmlvdXNCYWxhbmNlVG8gKyBfYW1vdW50IDwgcHJldmlvdXNCYWxhbmNlVG8pIHRocm93Ow0KDQogICAgICAgIGNoZWNrcG9pbnRzID0gYmFsYW5jZXNbX3RvXTsNCiAgICAgICAgaWYgKGNoZWNrcG9pbnRzLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgIGxhc3RCbG9jayA9IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtIDFdLmZyb21CbG9jazsNCiAgICAgICAgICAgIGJsb2Nrc0Zyb21MYXN0QmxvY2sgPSBibG9jay5udW1iZXIgLSBsYXN0QmxvY2s7DQoNCiAgICAgICAgICAgIGlmIChfYW1vdW50ID49IChwcmV2aW91c0JhbGFuY2VUbyAvIDMpKSB7DQogICAgICAgICAgICAgICAgaWYgKGJsb2Nrc0Zyb21MYXN0QmxvY2sgPiBmaW5hbExvb3MpIHsNCg0KICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2subnVtYmVyIDw9IGZpcnN0UmV3YXJkUGVyaW9kRW5kQmxvY2spIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaXJzdFJld2FyZFBlcmlvZFBlcmNlbnQgKiBibG9ja3NGcm9tTGFzdEJsb2NrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJsb2NrLm51bWJlciA8PSBzZWNvbmRSZXdhcmRQZXJpb2RFbmRCbG9jaykgew0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEJsb2NrIDwgZmlyc3RSZXdhcmRQZXJpb2RFbmRCbG9jaykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaXJzdFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmlyc3RSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGxhc3RCbG9jaykgKyBwcmV2aW91c0JhbGFuY2VGcm9tICogc2Vjb25kUmV3YXJkUGVyaW9kUGVyY2VudCAqIChzZWNvbmRSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGJsb2NrLm51bWJlcik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXdhcmRBbW91bnQgPSBwcmV2aW91c0JhbGFuY2VGcm9tICogc2Vjb25kUmV3YXJkUGVyaW9kUGVyY2VudCAqIGJsb2Nrc0Zyb21MYXN0QmxvY2s7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChibG9jay5udW1iZXIgPD0gdGhpcmRSZXdhcmRQZXJpb2RFbmRCbG9jaykgew0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEJsb2NrIDwgZmlyc3RSZXdhcmRQZXJpb2RFbmRCbG9jaykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaXJzdFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmlyc3RSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGxhc3RCbG9jaykgKyBwcmV2aW91c0JhbGFuY2VGcm9tICogc2Vjb25kUmV3YXJkUGVyaW9kUGVyY2VudCAqICh0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIHRoaXJkUmV3YXJkUGVyaW9kUGVyY2VudCAqICh0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxhc3RCbG9jayA8IHNlY29uZFJld2FyZFBlcmlvZEVuZEJsb2NrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkQW1vdW50ID0gcHJldmlvdXNCYWxhbmNlRnJvbSAqIHNlY29uZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBsYXN0QmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIHRoaXJkUmV3YXJkUGVyaW9kUGVyY2VudCAqICh0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiB0aGlyZFJld2FyZFBlcmlvZFBlcmNlbnQgKiBibG9ja3NGcm9tTGFzdEJsb2NrOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYmxvY2subnVtYmVyIDw9IGZpbmFsUmV3YXJkUGVyaW9kRW5kQmxvY2spIHsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RCbG9jayA8IGZpcnN0UmV3YXJkUGVyaW9kRW5kQmxvY2spIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXdhcmRBbW91bnQgPSBwcmV2aW91c0JhbGFuY2VGcm9tICogZmlyc3RSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpcnN0UmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBsYXN0QmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIHNlY29uZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAodGhpcmRSZXdhcmRQZXJpb2RFbmRCbG9jayAtIHNlY29uZFJld2FyZFBlcmlvZEVuZEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiB0aGlyZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jayAtIHRoaXJkUmV3YXJkUGVyaW9kRW5kQmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIGZpbmFsUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxhc3RCbG9jayA8IHNlY29uZFJld2FyZFBlcmlvZEVuZEJsb2NrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkQW1vdW50ID0gcHJldmlvdXNCYWxhbmNlRnJvbSAqIHNlY29uZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBsYXN0QmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIHRoaXJkUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gdGhpcmRSZXdhcmRQZXJpb2RFbmRCbG9jaykgKyBwcmV2aW91c0JhbGFuY2VGcm9tICogZmluYWxSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpbmFsUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBibG9jay5udW1iZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobGFzdEJsb2NrIDwgc2Vjb25kUmV3YXJkUGVyaW9kRW5kQmxvY2spIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXdhcmRBbW91bnQgPSBwcmV2aW91c0JhbGFuY2VGcm9tICogdGhpcmRSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpbmFsUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBsYXN0QmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIGZpbmFsUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaW5hbFJld2FyZFBlcmlvZFBlcmNlbnQgKiBibG9ja3NGcm9tTGFzdEJsb2NrOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0QmxvY2sgPCBmaXJzdFJld2FyZFBlcmlvZEVuZEJsb2NrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkQW1vdW50ID0gcHJldmlvdXNCYWxhbmNlRnJvbSAqIGZpcnN0UmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaXJzdFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gbGFzdEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiBzZWNvbmRSZXdhcmRQZXJpb2RQZXJjZW50ICogKHRoaXJkUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSBzZWNvbmRSZXdhcmRQZXJpb2RFbmRCbG9jaykgKyBwcmV2aW91c0JhbGFuY2VGcm9tICogdGhpcmRSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpbmFsUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSB0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaW5hbFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGJsb2NrLm51bWJlcik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChsYXN0QmxvY2sgPCBzZWNvbmRSZXdhcmRQZXJpb2RFbmRCbG9jaykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZEFtb3VudCA9IHByZXZpb3VzQmFsYW5jZUZyb20gKiBzZWNvbmRSZXdhcmRQZXJpb2RQZXJjZW50ICogKHNlY29uZFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gbGFzdEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiB0aGlyZFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jayAtIHRoaXJkUmV3YXJkUGVyaW9kRW5kQmxvY2spICsgcHJldmlvdXNCYWxhbmNlRnJvbSAqIGZpbmFsUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxhc3RCbG9jayA8IHNlY29uZFJld2FyZFBlcmlvZEVuZEJsb2NrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkQW1vdW50ID0gcHJldmlvdXNCYWxhbmNlRnJvbSAqIHRoaXJkUmV3YXJkUGVyaW9kUGVyY2VudCAqIChmaW5hbFJld2FyZFBlcmlvZEVuZEJsb2NrIC0gbGFzdEJsb2NrKSArIHByZXZpb3VzQmFsYW5jZUZyb20gKiBmaW5hbFJld2FyZFBlcmlvZFBlcmNlbnQgKiAoZmluYWxSZXdhcmRQZXJpb2RFbmRCbG9jayAtIGJsb2NrLm51bWJlcik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXdhcmRBbW91bnQgPSBwcmV2aW91c0JhbGFuY2VGcm9tICogZmluYWxSZXdhcmRQZXJpb2RQZXJjZW50ICogKGZpbmFsUmV3YXJkUGVyaW9kRW5kQmxvY2sgLSB0aGlyZFJld2FyZFBlcmlvZEVuZEJsb2NrKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0NCg0KICAgICAgICByZXdhcmRBbW91bnQgPSByZXdhcmRBbW91bnQgLyAxMDAwMDsNCiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfdG9dLCBwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQgKyByZXdhcmRBbW91bnQpOw0KDQogICAgICAgIC8vIFVQREFURSBUT1RBTA0KICAgICAgICBpZiAocmV3YXJkQW1vdW50ID4gMCkgew0KICAgICAgICAgICAgY3VyVG90YWxTdXBwbHkgPSBnZXRWYWx1ZUF0KHRvdGFsU3VwcGx5SGlzdG9yeSwgYmxvY2subnVtYmVyKTsNCiAgICAgICAgICAgIGlmIChjdXJUb3RhbFN1cHBseSArIHJld2FyZEFtb3VudCA8IGN1clRvdGFsU3VwcGx5KSB0aHJvdzsNCiAgICAgICAgICAgIC8vIENoZWNrIGZvciBvdmVyZmxvdw0KICAgICAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFN1cHBseUhpc3RvcnksIGN1clRvdGFsU3VwcGx5ICsgcmV3YXJkQW1vdW50KTsNCiAgICAgICAgfQ0KDQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7DQogICAgICAgIHJldHVybiBiYWxhbmNlT2ZBdChfb3duZXIsIGJsb2NrLm51bWJlcik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBpZiAoIXRyYW5zZmVyc0VuYWJsZWQpIHRocm93Ow0KDQogICAgICAgIGlmICgoX2Ftb3VudCAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHRocm93Ow0KDQogICAgICAgIGlmIChpc0NvbnRyYWN0KGNvbnRyb2xsZXIpKSB7DQogICAgICAgICAgICBpZiAoIVRva2VuQ29udHJvbGxlcihjb250cm9sbGVyKS5vbkFwcHJvdmUobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpKQ0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCg0KICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyDQogICAgKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgew0KICAgICAgICByZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhcHByb3ZlQW5kQ2FsbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQsIGJ5dGVzIF9leHRyYURhdGENCiAgICApIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBpZiAoIWFwcHJvdmUoX3NwZW5kZXIsIF9hbW91bnQpKSB0aHJvdzsNCg0KICAgICAgICBBcHByb3ZlQW5kQ2FsbEZhbGxCYWNrKF9zcGVuZGVyKS5yZWNlaXZlQXBwcm92YWwoDQogICAgICAgIG1zZy5zZW5kZXIsDQogICAgICAgIF9hbW91bnQsDQogICAgICAgIHRoaXMsDQogICAgICAgIF9leHRyYURhdGENCiAgICAgICAgKTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5QXQoYmxvY2subnVtYmVyKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRCYWxhbmNlc09mQWRkcmVzcyhhZGRyZXNzIF9vd25lcikgb25seUNvbnRyb2xsZXIgcmV0dXJucyAodWludDEyOCwgdWludDEyOCkgew0KICAgICAgICBDaGVja3BvaW50W10gY2hlY2twb2ludHMgPSBiYWxhbmNlc1tfb3duZXJdOw0KICAgICAgICByZXR1cm4gKGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtIDFdLnZhbHVlLCBjaGVja3BvaW50c1tjaGVja3BvaW50cy5sZW5ndGggLSAxXS5mcm9tQmxvY2spOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZkF0KGFkZHJlc3MgX293bmVyLCB1aW50IF9ibG9ja051bWJlcikgY29uc3RhbnQNCiAgICByZXR1cm5zICh1aW50KSB7DQoNCiAgICAgICAgaWYgKChiYWxhbmNlc1tfb3duZXJdLmxlbmd0aCA9PSAwKQ0KICAgICAgICB8fCAoYmFsYW5jZXNbX293bmVyXVswXS5mcm9tQmxvY2sgPiBfYmxvY2tOdW1iZXIpKSB7DQogICAgICAgICAgICBpZiAoYWRkcmVzcyhwYXJlbnRUb2tlbikgIT0gMCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRUb2tlbi5iYWxhbmNlT2ZBdChfb3duZXIsIG1pbihfYmxvY2tOdW1iZXIsIHBhcmVudFNuYXBTaG90QmxvY2spKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGdldFZhbHVlQXQoYmFsYW5jZXNbX293bmVyXSwgX2Jsb2NrTnVtYmVyKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5QXQodWludCBfYmxvY2tOdW1iZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgaWYgKCh0b3RhbFN1cHBseUhpc3RvcnkubGVuZ3RoID09IDApDQogICAgICAgIHx8ICh0b3RhbFN1cHBseUhpc3RvcnlbMF0uZnJvbUJsb2NrID4gX2Jsb2NrTnVtYmVyKSkgew0KICAgICAgICAgICAgaWYgKGFkZHJlc3MocGFyZW50VG9rZW4pICE9IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50VG9rZW4udG90YWxTdXBwbHlBdChtaW4oX2Jsb2NrTnVtYmVyLCBwYXJlbnRTbmFwU2hvdEJsb2NrKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiBnZXRWYWx1ZUF0KHRvdGFsU3VwcGx5SGlzdG9yeSwgX2Jsb2NrTnVtYmVyKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gY3JlYXRlQ2xvbmVUb2tlbigNCiAgICAgICAgc3RyaW5nIF9jbG9uZVRva2VuTmFtZSwNCiAgICAgICAgdWludDggX2Nsb25lRGVjaW1hbFVuaXRzLA0KICAgICAgICBzdHJpbmcgX2Nsb25lVG9rZW5TeW1ib2wsDQogICAgICAgIHVpbnQgX3NuYXBzaG90QmxvY2ssDQogICAgICAgIGJvb2wgX3RyYW5zZmVyc0VuYWJsZWQNCiAgICApIHJldHVybnMgKGFkZHJlc3MpIHsNCiAgICAgICAgaWYgKF9zbmFwc2hvdEJsb2NrID09IDApIF9zbmFwc2hvdEJsb2NrID0gYmxvY2subnVtYmVyOw0KICAgICAgICBTaGluZUNvaW5Ub2tlbiBjbG9uZVRva2VuID0gdG9rZW5GYWN0b3J5LmNyZWF0ZUNsb25lVG9rZW4oDQogICAgICAgIHRoaXMsDQogICAgICAgIF9zbmFwc2hvdEJsb2NrLA0KICAgICAgICBfY2xvbmVUb2tlbk5hbWUsDQogICAgICAgIF9jbG9uZURlY2ltYWxVbml0cywNCiAgICAgICAgX2Nsb25lVG9rZW5TeW1ib2wsDQogICAgICAgIF90cmFuc2ZlcnNFbmFibGVkDQogICAgICAgICk7DQoNCiAgICAgICAgY2xvbmVUb2tlbi5jaGFuZ2VDb250cm9sbGVyKG1zZy5zZW5kZXIpOw0KDQogICAgICAgIE5ld0Nsb25lVG9rZW4oYWRkcmVzcyhjbG9uZVRva2VuKSwgX3NuYXBzaG90QmxvY2spOw0KICAgICAgICByZXR1cm4gYWRkcmVzcyhjbG9uZVRva2VuKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZW5lcmF0ZVRva2VucyhhZGRyZXNzIF9vd25lciwgdWludCBfYW1vdW50DQogICAgKSBvbmx5Q29udHJvbGxlciByZXR1cm5zIChib29sKSB7DQogICAgICAgIHVpbnQgY3VyVG90YWxTdXBwbHkgPSBnZXRWYWx1ZUF0KHRvdGFsU3VwcGx5SGlzdG9yeSwgYmxvY2subnVtYmVyKTsNCiAgICAgICAgaWYgKGN1clRvdGFsU3VwcGx5ICsgX2Ftb3VudCA8IGN1clRvdGFsU3VwcGx5KSB0aHJvdzsNCg0KICAgICAgICB1cGRhdGVWYWx1ZUF0Tm93KHRvdGFsU3VwcGx5SGlzdG9yeSwgY3VyVG90YWxTdXBwbHkgKyBfYW1vdW50KTsNCiAgICAgICAgdmFyIHByZXZpb3VzQmFsYW5jZVRvID0gYmFsYW5jZU9mKF9vd25lcik7DQogICAgICAgIGlmIChwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQgPCBwcmV2aW91c0JhbGFuY2VUbykgdGhyb3c7DQoNCiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyhiYWxhbmNlc1tfb3duZXJdLCBwcmV2aW91c0JhbGFuY2VUbyArIF9hbW91bnQpOw0KICAgICAgICBUcmFuc2ZlcigwLCBfb3duZXIsIF9hbW91bnQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBkZXN0cm95VG9rZW5zKGFkZHJlc3MgX293bmVyLCB1aW50IF9hbW91bnQNCiAgICApIG9ubHlDb250cm9sbGVyIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgdWludCBjdXJUb3RhbFN1cHBseSA9IGdldFZhbHVlQXQodG90YWxTdXBwbHlIaXN0b3J5LCBibG9jay5udW1iZXIpOw0KICAgICAgICBpZiAoY3VyVG90YWxTdXBwbHkgPCBfYW1vdW50KSB0aHJvdzsNCiAgICAgICAgdXBkYXRlVmFsdWVBdE5vdyh0b3RhbFN1cHBseUhpc3RvcnksIGN1clRvdGFsU3VwcGx5IC0gX2Ftb3VudCk7DQogICAgICAgIHZhciBwcmV2aW91c0JhbGFuY2VGcm9tID0gYmFsYW5jZU9mKF9vd25lcik7DQogICAgICAgIGlmIChwcmV2aW91c0JhbGFuY2VGcm9tIDwgX2Ftb3VudCkgdGhyb3c7DQogICAgICAgIHVwZGF0ZVZhbHVlQXROb3coYmFsYW5jZXNbX293bmVyXSwgcHJldmlvdXNCYWxhbmNlRnJvbSAtIF9hbW91bnQpOw0KICAgICAgICBUcmFuc2Zlcihfb3duZXIsIDAsIF9hbW91bnQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBlbmFibGVUcmFuc2ZlcnMoYm9vbCBfdHJhbnNmZXJzRW5hYmxlZCkgb25seUNvbnRyb2xsZXIgew0KICAgICAgICB0cmFuc2ZlcnNFbmFibGVkID0gX3RyYW5zZmVyc0VuYWJsZWQ7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0VmFsdWVBdChDaGVja3BvaW50W10gc3RvcmFnZSBjaGVja3BvaW50cywgdWludCBfYmxvY2sNCiAgICApIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgaWYgKGNoZWNrcG9pbnRzLmxlbmd0aCA9PSAwKSByZXR1cm4gMDsNCg0KICAgICAgICBpZiAoX2Jsb2NrID49IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtIDFdLmZyb21CbG9jaykNCiAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtIDFdLnZhbHVlOw0KICAgICAgICBpZiAoX2Jsb2NrIDwgY2hlY2twb2ludHNbMF0uZnJvbUJsb2NrKSByZXR1cm4gMDsNCg0KICAgICAgICB1aW50IG1pbiA9IDA7DQogICAgICAgIHVpbnQgbWF4ID0gY2hlY2twb2ludHMubGVuZ3RoIC0gMTsNCiAgICAgICAgd2hpbGUgKG1heCA+IG1pbikgew0KICAgICAgICAgICAgdWludCBtaWQgPSAobWF4ICsgbWluICsgMSkgLyAyOw0KICAgICAgICAgICAgaWYgKGNoZWNrcG9pbnRzW21pZF0uZnJvbUJsb2NrIDw9IF9ibG9jaykgew0KICAgICAgICAgICAgICAgIG1pbiA9IG1pZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIG1heCA9IG1pZCAtIDE7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnRzW21pbl0udmFsdWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdXBkYXRlVmFsdWVBdE5vdyhDaGVja3BvaW50W10gc3RvcmFnZSBjaGVja3BvaW50cywgdWludCBfdmFsdWUNCiAgICApIGludGVybmFsIHsNCiAgICAgICAgaWYgKChjaGVja3BvaW50cy5sZW5ndGggPT0gMCkNCiAgICAgICAgfHwgKGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtIDFdLmZyb21CbG9jayA8IGJsb2NrLm51bWJlcikpIHsNCiAgICAgICAgICAgIENoZWNrcG9pbnQgbmV3Q2hlY2tQb2ludCA9IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCsrXTsNCiAgICAgICAgICAgIG5ld0NoZWNrUG9pbnQuZnJvbUJsb2NrID0gdWludDEyOChibG9jay5udW1iZXIpOw0KICAgICAgICAgICAgbmV3Q2hlY2tQb2ludC52YWx1ZSA9IHVpbnQxMjgoX3ZhbHVlKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIENoZWNrcG9pbnQgb2xkQ2hlY2tQb2ludCA9IGNoZWNrcG9pbnRzW2NoZWNrcG9pbnRzLmxlbmd0aCAtIDFdOw0KICAgICAgICAgICAgb2xkQ2hlY2tQb2ludC52YWx1ZSA9IHVpbnQxMjgoX3ZhbHVlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGlzQ29udHJhY3QoYWRkcmVzcyBfYWRkcikgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICB1aW50IHNpemU7DQogICAgICAgIGlmIChfYWRkciA9PSAwKSByZXR1cm4gZmFsc2U7DQogICAgICAgIGFzc2VtYmx5IHsNCiAgICAgICAgc2l6ZSA6PSBleHRjb2Rlc2l6ZShfYWRkcikNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gc2l6ZSA+IDA7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbWluKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7DQogICAgICAgIGlmIChpc0NvbnRyYWN0KGNvbnRyb2xsZXIpKSB7DQogICAgICAgICAgICBpZiAoIVRva2VuQ29udHJvbGxlcihjb250cm9sbGVyKS5wcm94eVBheW1lbnQudmFsdWUobXNnLnZhbHVlKShtc2cuc2VuZGVyKSkNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX2Ftb3VudCk7DQoNCiAgICBldmVudCBOZXdDbG9uZVRva2VuKGFkZHJlc3MgaW5kZXhlZCBfY2xvbmVUb2tlbiwgdWludCBfc25hcHNob3RCbG9jayk7DQoNCiAgICBldmVudCBBcHByb3ZhbCgNCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9vd25lciwNCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLA0KICAgICAgICB1aW50MjU2IF9hbW91bnQNCiAgICApOw0KDQp9DQoNCmNvbnRyYWN0IFNoaW5lQ29pblRva2VuRmFjdG9yeSB7DQogICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUNsb25lVG9rZW4oDQogICAgICAgIGFkZHJlc3MgX3BhcmVudFRva2VuLA0KICAgICAgICB1aW50IF9zbmFwc2hvdEJsb2NrLA0KICAgICAgICBzdHJpbmcgX3Rva2VuTmFtZSwNCiAgICAgICAgdWludDggX2RlY2ltYWxVbml0cywNCiAgICAgICAgc3RyaW5nIF90b2tlblN5bWJvbCwNCiAgICAgICAgYm9vbCBfdHJhbnNmZXJzRW5hYmxlZA0KICAgICkgcmV0dXJucyAoU2hpbmVDb2luVG9rZW4pIHsNCiAgICAgICAgU2hpbmVDb2luVG9rZW4gbmV3VG9rZW4gPSBuZXcgU2hpbmVDb2luVG9rZW4oDQogICAgICAgIHRoaXMsDQogICAgICAgIF9wYXJlbnRUb2tlbiwNCiAgICAgICAgX3NuYXBzaG90QmxvY2ssDQogICAgICAgIF90b2tlbk5hbWUsDQogICAgICAgIF9kZWNpbWFsVW5pdHMsDQogICAgICAgIF90b2tlblN5bWJvbCwNCiAgICAgICAgX3RyYW5zZmVyc0VuYWJsZWQNCiAgICAgICAgKTsNCiAgICAgICAgbmV3VG9rZW4uY2hhbmdlQ29udHJvbGxlcihtc2cuc2VuZGVyKTsNCiAgICAgICAgcmV0dXJuIG5ld1Rva2VuOw0KICAgIH0NCn0NCg0KDQpjb250cmFjdCBTaGluZUNyb3dkRnVuZGVyIGlzIENvbnRyb2xsZWQsIFNhZmVNYXRoIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBjcmVhdG9yOw0KDQogICAgYWRkcmVzcyBwdWJsaWMgZnVuZFJlY2lwaWVudDsNCg0KICAgIGFkZHJlc3MgcHVibGljIHJlc2VydmVUZWFtUmVjaXBpZW50Ow0KDQogICAgYWRkcmVzcyBwdWJsaWMgcmVzZXJ2ZUJvdW50eVJlY2lwaWVudDsNCg0KICAgIGJvb2wgcHVibGljIGlzUmVzZXJ2ZUdlbmVyYXRlZDsNCg0KICAgIFN0YXRlIHB1YmxpYyBzdGF0ZSA9IFN0YXRlLkZ1bmRyYWlzaW5nOw0KDQogICAgdWludCBwdWJsaWMgbWluRnVuZGluZ0dvYWw7DQoNCiAgICB1aW50IHB1YmxpYyBjdXJyZW50QmFsYW5jZTsNCg0KICAgIHVpbnQgcHVibGljIHRva2Vuc0lzc3VlZDsNCg0KICAgIHVpbnQgcHVibGljIGNhcFRva2VuQW1vdW50Ow0KDQogICAgdWludCBwdWJsaWMgc3RhcnRCbG9ja051bWJlcjsNCg0KICAgIHVpbnQgcHVibGljIGVuZEJsb2NrTnVtYmVyOw0KDQogICAgdWludCBwdWJsaWMgdG9rZW5FeGNoYW5nZVJhdGU7DQoNCiAgICBTaGluZUNvaW5Ub2tlbiBwdWJsaWMgZXhjaGFuZ2VUb2tlbjsNCg0KICAgIGV2ZW50IEdvYWxSZWFjaGVkKGFkZHJlc3MgZnVuZFJlY2lwaWVudCwgdWludCBhbW91bnRSYWlzZWQpOw0KDQogICAgZXZlbnQgRnVuZFRyYW5zZmVyKGFkZHJlc3MgYmFja2VyLCB1aW50IGFtb3VudCwgYm9vbCBpc0NvbnRyaWJ1dGlvbik7DQoNCiAgICBldmVudCBGcm96ZW5GdW5kcyhhZGRyZXNzIHRhcmdldCwgYm9vbCBmcm96ZW4pOw0KDQogICAgZXZlbnQgTG9nRnVuZGluZ1JlY2VpdmVkKGFkZHJlc3MgYWRkciwgdWludCBhbW91bnQsIHVpbnQgY3VycmVudFRvdGFsKTsNCg0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHJpdmF0ZSBiYWxhbmNlT2Y7DQoNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHByaXZhdGUgZnJvemVuQWNjb3VudDsNCg0KICAgIGVudW0gU3RhdGUgew0KICAgICAgICBGdW5kcmFpc2luZywNCiAgICAgICAgRXhwaXJlZFJlZnVuZCwNCiAgICAgICAgU3VjY2Vzc2Z1bCwNCiAgICAgICAgQ2xvc2VkDQogICAgfQ0KDQogICAgbW9kaWZpZXIgaW5TdGF0ZShTdGF0ZSBfc3RhdGUpIHsNCiAgICAgICAgaWYgKHN0YXRlICE9IF9zdGF0ZSkgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgbW9kaWZpZXIgYXRFbmRPZkZ1bmRyYWlzaW5nKCkgew0KICAgICAgICBpZiAoISgoc3RhdGUgPT0gU3RhdGUuRXhwaXJlZFJlZnVuZCB8fCBzdGF0ZSA9PSBTdGF0ZS5TdWNjZXNzZnVsKSAmJiBibG9jay5udW1iZXIgPiBlbmRCbG9ja051bWJlcikNCiAgICAgICAgKSB7DQogICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfQ0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIGFjY291bnROb3RGcm96ZW4oKSB7DQogICAgICAgIGlmIChmcm96ZW5BY2NvdW50W21zZy5zZW5kZXJdID09IHRydWUpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG1pbkludmVzdG1lbnQoKSB7DQogICAgICAgIC8vIFVzZXIgaGFzIHRvIHNlbmQgYXQgbGVhc3QgMC4wMSBFdGgNCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPj0gMTAgKiogMTYpOw0KICAgICAgICBfOw0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gU2hpbmVDcm93ZEZ1bmRlcigNCiAgICAgICAgYWRkcmVzcyBfZnVuZFJlY2lwaWVudCwNCiAgICAgICAgYWRkcmVzcyBfcmVzZXJ2ZVRlYW1SZWNpcGllbnQsDQogICAgICAgIGFkZHJlc3MgX3Jlc2VydmVCb3VudHlSZWNpcGllbnQsDQogICAgICAgIFNoaW5lQ29pblRva2VuIF9hZGRyZXNzT2ZFeGNoYW5nZVRva2VuDQogICAgKSB7DQogICAgICAgIGNyZWF0b3IgPSBtc2cuc2VuZGVyOw0KDQogICAgICAgIGZ1bmRSZWNpcGllbnQgPSBfZnVuZFJlY2lwaWVudDsNCiAgICAgICAgcmVzZXJ2ZVRlYW1SZWNpcGllbnQgPSBfcmVzZXJ2ZVRlYW1SZWNpcGllbnQ7DQogICAgICAgIHJlc2VydmVCb3VudHlSZWNpcGllbnQgPSBfcmVzZXJ2ZUJvdW50eVJlY2lwaWVudDsNCg0KICAgICAgICBpc1Jlc2VydmVHZW5lcmF0ZWQgPSBmYWxzZTsNCg0KICAgICAgICBtaW5GdW5kaW5nR29hbCA9IDEyNTAgKiAxIGV0aGVyOw0KICAgICAgICBjYXBUb2tlbkFtb3VudCA9IDEwMDAwMDAwICogMTAgKiogOTsNCg0KICAgICAgICBzdGF0ZSA9IFN0YXRlLkZ1bmRyYWlzaW5nOw0KDQogICAgICAgIGN1cnJlbnRCYWxhbmNlID0gMDsNCiAgICAgICAgdG9rZW5zSXNzdWVkID0gMDsNCg0KICAgICAgICBzdGFydEJsb2NrTnVtYmVyID0gYmxvY2subnVtYmVyOw0KICAgICAgICBlbmRCbG9ja051bWJlciA9IHN0YXJ0QmxvY2tOdW1iZXIgKyAoKDMxICogMjQgKiAzNjAwKSAvIDE4KTsgLy8gMzEgZGF5cw0KDQogICAgICAgIHRva2VuRXhjaGFuZ2VSYXRlID0gNDAwICogMTAgKiogOTsNCg0KICAgICAgICBleGNoYW5nZVRva2VuID0gU2hpbmVDb2luVG9rZW4oX2FkZHJlc3NPZkV4Y2hhbmdlVG9rZW4pOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoYW5nZVJlc2VydmVUZWFtUmVjaXBpZW50KGFkZHJlc3MgX3Jlc2VydmVUZWFtUmVjaXBpZW50KSBvbmx5Q29udHJvbGxlciB7DQogICAgICAgIHJlc2VydmVUZWFtUmVjaXBpZW50ID0gX3Jlc2VydmVUZWFtUmVjaXBpZW50Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoYW5nZVJlc2VydmVCb3VudHlSZWNpcGllbnQoYWRkcmVzcyBfcmVzZXJ2ZUJvdW50eVJlY2lwaWVudCkgb25seUNvbnRyb2xsZXIgew0KICAgICAgICByZXNlcnZlQm91bnR5UmVjaXBpZW50ID0gX3Jlc2VydmVCb3VudHlSZWNpcGllbnQ7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZnJlZXplQWNjb3VudChhZGRyZXNzIHRhcmdldCwgYm9vbCBmcmVlemUpIG9ubHlDb250cm9sbGVyIHsNCiAgICAgICAgZnJvemVuQWNjb3VudFt0YXJnZXRdID0gZnJlZXplOw0KICAgICAgICBGcm96ZW5GdW5kcyh0YXJnZXQsIGZyZWV6ZSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0RXhjaGFuZ2VSYXRlKHVpbnQgYW1vdW50KSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludCkgew0KICAgICAgICByZXR1cm4gdG9rZW5FeGNoYW5nZVJhdGUgKiBhbW91bnQgLyAxIGV0aGVyOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGludmVzdG1lbnQoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5GdW5kcmFpc2luZykgYWNjb3VudE5vdEZyb3plbiBtaW5JbnZlc3RtZW50IHBheWFibGUgcmV0dXJucyAodWludCkgIHsNCiAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7DQogICAgICAgIGlmIChhbW91bnQgPT0gMCkgdGhyb3c7DQoNCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdICs9IGFtb3VudDsNCiAgICAgICAgY3VycmVudEJhbGFuY2UgKz0gYW1vdW50Ow0KDQogICAgICAgIHVpbnQgdG9rZW5BbW91bnQgPSBnZXRFeGNoYW5nZVJhdGUoYW1vdW50KTsNCiAgICAgICAgZXhjaGFuZ2VUb2tlbi5nZW5lcmF0ZVRva2Vucyhtc2cuc2VuZGVyLCB0b2tlbkFtb3VudCk7DQogICAgICAgIHRva2Vuc0lzc3VlZCArPSB0b2tlbkFtb3VudDsNCg0KICAgICAgICBGdW5kVHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50LCB0cnVlKTsNCiAgICAgICAgTG9nRnVuZGluZ1JlY2VpdmVkKG1zZy5zZW5kZXIsIHRva2VuQW1vdW50LCB0b2tlbnNJc3N1ZWQpOw0KDQogICAgICAgIGNoZWNrSWZGdW5kaW5nQ29tcGxldGVPckV4cGlyZWQoKTsNCg0KICAgICAgICByZXR1cm4gYmFsYW5jZU9mW21zZy5zZW5kZXJdOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoZWNrSWZGdW5kaW5nQ29tcGxldGVPckV4cGlyZWQoKSB7DQogICAgICAgIGlmIChibG9jay5udW1iZXIgPiBlbmRCbG9ja051bWJlciB8fCB0b2tlbnNJc3N1ZWQgPj0gY2FwVG9rZW5BbW91bnQpIHsNCiAgICAgICAgICAgIGlmIChjdXJyZW50QmFsYW5jZSA+PSBtaW5GdW5kaW5nR29hbCkgew0KICAgICAgICAgICAgICAgIHN0YXRlID0gU3RhdGUuU3VjY2Vzc2Z1bDsNCiAgICAgICAgICAgICAgICBwYXlPdXQoKTsNCg0KICAgICAgICAgICAgICAgIEdvYWxSZWFjaGVkKGZ1bmRSZWNpcGllbnQsIGN1cnJlbnRCYWxhbmNlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIHN0YXRlID0gU3RhdGUuRXhwaXJlZFJlZnVuZDsgLy8gYmFja2VycyBjYW4gbm93IGNvbGxlY3QgcmVmdW5kcyBieSBjYWxsaW5nIGdldFJlZnVuZCgpDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwYXlPdXQoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5TdWNjZXNzZnVsKSBvbmx5Q29udHJvbGxlcigpIHsNCiAgICAgICAgdmFyIGFtb3VudCA9IGN1cnJlbnRCYWxhbmNlOw0KICAgICAgICBjdXJyZW50QmFsYW5jZSA9IDA7DQogICAgICAgIHN0YXRlID0gU3RhdGUuQ2xvc2VkOw0KDQogICAgICAgIGZ1bmRSZWNpcGllbnQudHJhbnNmZXIoYW1vdW50KTsNCg0KICAgICAgICBnZW5lcmF0ZVJlc2VydmUoKTsNCg0KICAgICAgICBleGNoYW5nZVRva2VuLmVuYWJsZVRyYW5zZmVycyh0cnVlKTsNCiAgICAgICAgZXhjaGFuZ2VUb2tlbi5jaGFuZ2VSZXNlcnZlVGVhbVJlY2VwaWVudChyZXNlcnZlVGVhbVJlY2lwaWVudCk7DQogICAgICAgIGV4Y2hhbmdlVG9rZW4uY2hhbmdlQ29udHJvbGxlcihjb250cm9sbGVyKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRSZWZ1bmQoKSBwdWJsaWMgaW5TdGF0ZShTdGF0ZS5FeHBpcmVkUmVmdW5kKSB7DQogICAgICAgIHVpbnQgYW1vdW50VG9SZWZ1bmQgPSBiYWxhbmNlT2ZbbXNnLnNlbmRlcl07DQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSA9IDA7DQoNCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihhbW91bnRUb1JlZnVuZCk7DQogICAgICAgIGN1cnJlbnRCYWxhbmNlIC09IGFtb3VudFRvUmVmdW5kOw0KDQogICAgICAgIEZ1bmRUcmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnRUb1JlZnVuZCwgZmFsc2UpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdlbmVyYXRlUmVzZXJ2ZSgpIHsNCiAgICAgICAgaWYgKGlzUmVzZXJ2ZUdlbmVyYXRlZCkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICB1aW50IGlzc3VlZCA9IHRva2Vuc0lzc3VlZDsNCiAgICAgICAgICAgIHVpbnQgcGVyY2VudFRlYW0gPSAxNTsNCiAgICAgICAgICAgIHVpbnQgcGVyY2VudEJvdW50eSA9IDE7DQogICAgICAgICAgICB1aW50IHJlc2VydmVBbW91bnRUZWFtID0gZGl2KG11bChpc3N1ZWQsIHBlcmNlbnRUZWFtKSwgODUpOw0KICAgICAgICAgICAgdWludCByZXNlcnZlQW1vdW50Qm91bnR5ID0gZGl2KG11bChpc3N1ZWQsIHBlcmNlbnRCb3VudHkpLCA5OSk7DQogICAgICAgICAgICBleGNoYW5nZVRva2VuLmdlbmVyYXRlVG9rZW5zKHJlc2VydmVUZWFtUmVjaXBpZW50LCByZXNlcnZlQW1vdW50VGVhbSk7DQogICAgICAgICAgICBleGNoYW5nZVRva2VuLmdlbmVyYXRlVG9rZW5zKHJlc2VydmVCb3VudHlSZWNpcGllbnQsIHJlc2VydmVBbW91bnRCb3VudHkpOw0KICAgICAgICAgICAgaXNSZXNlcnZlR2VuZXJhdGVkID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbW92ZUNvbnRyYWN0KCkgcHVibGljIGF0RW5kT2ZGdW5kcmFpc2luZyBvbmx5Q29udHJvbGxlcigpIHsNCiAgICAgICAgaWYgKHN0YXRlICE9IFN0YXRlLkNsb3NlZCkgew0KICAgICAgICAgICAgZXhjaGFuZ2VUb2tlbi5jaGFuZ2VDb250cm9sbGVyKGNvbnRyb2xsZXIpOw0KICAgICAgICB9DQogICAgICAgIHNlbGZkZXN0cnVjdChtc2cuc2VuZGVyKTsNCiAgICB9DQoNCiAgICAvKiBkZWZhdWx0ICovDQogICAgZnVuY3Rpb24oKSBpblN0YXRlKFN0YXRlLkZ1bmRyYWlzaW5nKSBhY2NvdW50Tm90RnJvemVuIHBheWFibGUgew0KICAgICAgICBpbnZlc3RtZW50KCk7DQogICAgfQ0KDQp9'