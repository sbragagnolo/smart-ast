base 64 content
base64slot1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4wOw0KDQpjb250cmFjdCBPcmFjbGl6ZUkgew0KICAgIGFkZHJlc3MgcHVibGljIGNiQWRkcmVzczsNCiAgICBmdW5jdGlvbiBxdWVyeSh1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgc3RyaW5nIF9hcmcpIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOw0KICAgIGZ1bmN0aW9uIHF1ZXJ5X3dpdGhHYXNMaW1pdCh1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgc3RyaW5nIF9hcmcsIHVpbnQgX2dhc2xpbWl0KSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsNCiAgICBmdW5jdGlvbiBxdWVyeTIodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnMSwgc3RyaW5nIF9hcmcyKSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsNCiAgICBmdW5jdGlvbiBxdWVyeTJfd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZzEsIHN0cmluZyBfYXJnMiwgdWludCBfZ2FzbGltaXQpIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOw0KICAgIGZ1bmN0aW9uIGdldFByaWNlKHN0cmluZyBfZGF0YXNvdXJjZSkgcmV0dXJucyAodWludCBfZHNwcmljZSk7DQogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSByZXR1cm5zICh1aW50IF9kc3ByaWNlKTsNCiAgICBmdW5jdGlvbiB1c2VDb3Vwb24oc3RyaW5nIF9jb3Vwb24pOw0KICAgIGZ1bmN0aW9uIHNldFByb29mVHlwZShieXRlIF9wcm9vZlR5cGUpOw0KICAgIGZ1bmN0aW9uIHNldEN1c3RvbUdhc1ByaWNlKHVpbnQgX2dhc1ByaWNlKTsNCn0NCmNvbnRyYWN0IE9yYWNsaXplQWRkclJlc29sdmVySSB7DQogICAgZnVuY3Rpb24gZ2V0QWRkcmVzcygpIHJldHVybnMgKGFkZHJlc3MgX2FkZHIpOw0KfQ0KY29udHJhY3QgdXNpbmdPcmFjbGl6ZSB7DQogICAgdWludCBjb25zdGFudCBkYXkgPSA2MCo2MCoyNDsNCiAgICB1aW50IGNvbnN0YW50IHdlZWsgPSA2MCo2MCoyNCo3Ow0KICAgIHVpbnQgY29uc3RhbnQgbW9udGggPSA2MCo2MCoyNCozMDsNCiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9OT05FID0gMHgwMDsNCiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9UTFNOb3RhcnkgPSAweDEwOw0KICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZTdG9yYWdlX0lQRlMgPSAweDAxOw0KICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9hdXRvID0gMDsNCiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfbWFpbm5ldCA9IDE7DQogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX3Rlc3RuZXQgPSAyOw0KICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9tb3JkZW4gPSAyOw0KICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9jb25zZW5zeXMgPSAxNjE7DQoNCiAgICBPcmFjbGl6ZUFkZHJSZXNvbHZlckkgT0FSOw0KICAgIA0KICAgIE9yYWNsaXplSSBvcmFjbGl6ZTsNCiAgICBtb2RpZmllciBvcmFjbGl6ZUFQSSB7DQogICAgICAgIGlmKGFkZHJlc3MoT0FSKT09MCkgb3JhY2xpemVfc2V0TmV0d29yayhuZXR3b3JrSURfYXV0byk7DQogICAgICAgIG9yYWNsaXplID0gT3JhY2xpemVJKE9BUi5nZXRBZGRyZXNzKCkpOw0KICAgICAgICBfOw0KICAgIH0NCiAgICBtb2RpZmllciBjb3Vwb24oc3RyaW5nIGNvZGUpew0KICAgICAgICBvcmFjbGl6ZSA9IE9yYWNsaXplSShPQVIuZ2V0QWRkcmVzcygpKTsNCiAgICAgICAgb3JhY2xpemUudXNlQ291cG9uKGNvZGUpOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmsodWludDggbmV0d29ya0lEKSBpbnRlcm5hbCByZXR1cm5zKGJvb2wpew0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgxZDNiMjYzOGE3Y2M5ZjJjYjNkMjk4YTNkYTdhOTBiNjdlNTUwNmVkKT4wKXsNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDFkM2IyNjM4YTdjYzlmMmNiM2QyOThhM2RhN2E5MGI2N2U1NTA2ZWQpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4OWVmYmVhNjM1OGJlZDkyNmIyOTNkMmNlNjNhNzMwZDZkOThkNDNkZCk+MCl7DQogICAgICAgICAgICBPQVIgPSBPcmFjbGl6ZUFkZHJSZXNvbHZlckkoMHg5ZWZiZWE2MzU4YmVkOTI2YjI5M2QyY2U2M2E3MzBkNmQ5OGQ0M2RkKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDIwZTEyYTFmODU5YjNmZWFlNWZiMmEwYTMyYzE4ZjVhNjU1NTViYmYpPjApew0KICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4MjBlMTJhMWY4NTliM2ZlYWU1ZmIyYTBhMzJjMThmNWE2NTU1NWJiZik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHg5YTFkNmU1YzZjOGQwODFhYzQ1YzZhZjk4Yjc0YTQyNDQyYWZiYTYwKT4wKXsNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDlhMWQ2ZTVjNmM4ZDA4MWFjNDVjNmFmOThiNzRhNDI0NDJhZmJhNjApOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeS52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeV93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJnLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5X3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyLnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeTJfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZzEsIGFyZzIsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcxLCBzdHJpbmcgYXJnMiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeTJfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX2NiQWRkcmVzcygpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGFkZHJlc3Mpew0KICAgICAgICByZXR1cm4gb3JhY2xpemUuY2JBZGRyZXNzKCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldFByb29mKGJ5dGUgcHJvb2ZQKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCB7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5zZXRQcm9vZlR5cGUocHJvb2ZQKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0Q3VzdG9tR2FzUHJpY2UodWludCBnYXNQcmljZSkgb3JhY2xpemVBUEkgaW50ZXJuYWwgew0KICAgICAgICByZXR1cm4gb3JhY2xpemUuc2V0Q3VzdG9tR2FzUHJpY2UoZ2FzUHJpY2UpOw0KICAgIH0gICAgDQoNCiAgICBmdW5jdGlvbiBnZXRDb2RlU2l6ZShhZGRyZXNzIF9hZGRyKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zKHVpbnQgX3NpemUpIHsNCiAgICAgICAgYXNzZW1ibHkgew0KICAgICAgICAgICAgX3NpemUgOj0gZXh0Y29kZXNpemUoX2FkZHIpDQogICAgICAgIH0NCiAgICB9DQoNCg0KICAgIGZ1bmN0aW9uIHBhcnNlQWRkcihzdHJpbmcgX2EpIGludGVybmFsIHJldHVybnMgKGFkZHJlc3Mpew0KICAgICAgICBieXRlcyBtZW1vcnkgdG1wID0gYnl0ZXMoX2EpOw0KICAgICAgICB1aW50MTYwIGlhZGRyID0gMDsNCiAgICAgICAgdWludDE2MCBiMTsNCiAgICAgICAgdWludDE2MCBiMjsNCiAgICAgICAgZm9yICh1aW50IGk9MjsgaTwyKzIqMjA7IGkrPTIpew0KICAgICAgICAgICAgaWFkZHIgKj0gMjU2Ow0KICAgICAgICAgICAgYjEgPSB1aW50MTYwKHRtcFtpXSk7DQogICAgICAgICAgICBiMiA9IHVpbnQxNjAodG1wW2krMV0pOw0KICAgICAgICAgICAgaWYgKChiMSA+PSA5NykmJihiMSA8PSAxMDIpKSBiMSAtPSA4NzsNCiAgICAgICAgICAgIGVsc2UgaWYgKChiMSA+PSA0OCkmJihiMSA8PSA1NykpIGIxIC09IDQ4Ow0KICAgICAgICAgICAgaWYgKChiMiA+PSA5NykmJihiMiA8PSAxMDIpKSBiMiAtPSA4NzsNCiAgICAgICAgICAgIGVsc2UgaWYgKChiMiA+PSA0OCkmJihiMiA8PSA1NykpIGIyIC09IDQ4Ow0KICAgICAgICAgICAgaWFkZHIgKz0gKGIxKjE2K2IyKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gYWRkcmVzcyhpYWRkcik7DQogICAgfQ0KDQoNCiAgICBmdW5jdGlvbiBzdHJDb21wYXJlKHN0cmluZyBfYSwgc3RyaW5nIF9iKSBpbnRlcm5hbCByZXR1cm5zIChpbnQpIHsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGEgPSBieXRlcyhfYSk7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBiID0gYnl0ZXMoX2IpOw0KICAgICAgICB1aW50IG1pbkxlbmd0aCA9IGEubGVuZ3RoOw0KICAgICAgICBpZiAoYi5sZW5ndGggPCBtaW5MZW5ndGgpIG1pbkxlbmd0aCA9IGIubGVuZ3RoOw0KICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBtaW5MZW5ndGg7IGkgKyspDQogICAgICAgICAgICBpZiAoYVtpXSA8IGJbaV0pDQogICAgICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICAgICAgZWxzZSBpZiAoYVtpXSA+IGJbaV0pDQogICAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgIGlmIChhLmxlbmd0aCA8IGIubGVuZ3RoKQ0KICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICBlbHNlIGlmIChhLmxlbmd0aCA+IGIubGVuZ3RoKQ0KICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgfSANCg0KICAgIGZ1bmN0aW9uIGluZGV4T2Yoc3RyaW5nIF9oYXlzdGFjaywgc3RyaW5nIF9uZWVkbGUpIGludGVybmFsIHJldHVybnMgKGludCkNCiAgICB7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBoID0gYnl0ZXMoX2hheXN0YWNrKTsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IG4gPSBieXRlcyhfbmVlZGxlKTsNCiAgICAgICAgaWYoaC5sZW5ndGggPCAxIHx8IG4ubGVuZ3RoIDwgMSB8fCAobi5sZW5ndGggPiBoLmxlbmd0aCkpIA0KICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICBlbHNlIGlmKGgubGVuZ3RoID4gKDIqKjEyOCAtMSkpDQogICAgICAgICAgICByZXR1cm4gLTE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICBlbHNlDQogICAgICAgIHsNCiAgICAgICAgICAgIHVpbnQgc3ViaW5kZXggPSAwOw0KICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgaC5sZW5ndGg7IGkgKyspDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGhbaV0gPT0gblswXSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHN1YmluZGV4ID0gMTsNCiAgICAgICAgICAgICAgICAgICAgd2hpbGUoc3ViaW5kZXggPCBuLmxlbmd0aCAmJiAoaSArIHN1YmluZGV4KSA8IGgubGVuZ3RoICYmIGhbaSArIHN1YmluZGV4XSA9PSBuW3N1YmluZGV4XSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgc3ViaW5kZXgrKzsNCiAgICAgICAgICAgICAgICAgICAgfSAgIA0KICAgICAgICAgICAgICAgICAgICBpZihzdWJpbmRleCA9PSBuLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnQoaSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICB9ICAgDQogICAgfQ0KDQogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MsIHN0cmluZyBfZCwgc3RyaW5nIF9lKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpew0KICAgICAgICBieXRlcyBtZW1vcnkgX2JhID0gYnl0ZXMoX2EpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JiID0gYnl0ZXMoX2IpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JjID0gYnl0ZXMoX2MpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JkID0gYnl0ZXMoX2QpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JlID0gYnl0ZXMoX2UpOw0KICAgICAgICBzdHJpbmcgbWVtb3J5IGFiY2RlID0gbmV3IHN0cmluZyhfYmEubGVuZ3RoICsgX2JiLmxlbmd0aCArIF9iYy5sZW5ndGggKyBfYmQubGVuZ3RoICsgX2JlLmxlbmd0aCk7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBiYWJjZGUgPSBieXRlcyhhYmNkZSk7DQogICAgICAgIHVpbnQgayA9IDA7DQogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF9iYS5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmFbaV07DQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmIubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JiW2ldOw0KICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JjLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iY1tpXTsNCiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iZC5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmRbaV07DQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmUubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JlW2ldOw0KICAgICAgICByZXR1cm4gc3RyaW5nKGJhYmNkZSk7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIHN0ckNvbmNhdChzdHJpbmcgX2EsIHN0cmluZyBfYiwgc3RyaW5nIF9jLCBzdHJpbmcgX2QpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgew0KICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgX2MsIF9kLCAiIik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgew0KICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgX2MsICIiLCAiIik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iKSBpbnRlcm5hbCByZXR1cm5zIChzdHJpbmcpIHsNCiAgICAgICAgcmV0dXJuIHN0ckNvbmNhdChfYSwgX2IsICIiLCAiIiwgIiIpOw0KICAgIH0NCg0KICAgIC8vIHBhcnNlSW50DQogICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nIF9hKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgICAgIHJldHVybiBwYXJzZUludChfYSwgMCk7DQogICAgfQ0KDQogICAgLy8gcGFyc2VJbnQocGFyc2VGbG9hdCoxMF5fYikNCiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcgX2EsIHVpbnQgX2IpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGJyZXN1bHQgPSBieXRlcyhfYSk7DQogICAgICAgIHVpbnQgbWludCA9IDA7DQogICAgICAgIGJvb2wgZGVjaW1hbHMgPSBmYWxzZTsNCiAgICAgICAgZm9yICh1aW50IGk9MDsgaTxicmVzdWx0Lmxlbmd0aDsgaSsrKXsNCiAgICAgICAgICAgIGlmICgoYnJlc3VsdFtpXSA+PSA0OCkmJihicmVzdWx0W2ldIDw9IDU3KSl7DQogICAgICAgICAgICAgICAgaWYgKGRlY2ltYWxzKXsNCiAgICAgICAgICAgICAgICAgICBpZiAoX2IgPT0gMCkgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGVsc2UgX2ItLTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgbWludCAqPSAxMDsNCiAgICAgICAgICAgICAgICBtaW50ICs9IHVpbnQoYnJlc3VsdFtpXSkgLSA0ODsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAoYnJlc3VsdFtpXSA9PSA0NikgZGVjaW1hbHMgPSB0cnVlOw0KICAgICAgICB9DQogICAgICAgIGlmIChfYiA+IDApIG1pbnQgKj0gMTAqKl9iOw0KICAgICAgICByZXR1cm4gbWludDsNCiAgICB9DQogICAgDQoNCn0NCi8vIDwvT1JBQ0xJWkVfQVBJPg0KDQoNCg0KDQoNCg0KY29udHJhY3QgbW9ydGFsIHsNCiAgICBhZGRyZXNzIG93bmVyOw0KDQogICAgZnVuY3Rpb24gbW9ydGFsKCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24ga2lsbCgpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIpIHN1aWNpZGUob3duZXIpOw0KICAgIH0NCn0NCg0KDQpjb250cmFjdCBzbG90IGlzIG1vcnRhbCwgdXNpbmdPcmFjbGl6ZSB7DQogICAgLyoqIHdoaWNoIG9yYWNsaXplIElEIGJlbG9uZyB0byB3aGljaCBwbGF5ZXIgYWRkcmVzcz8qKi8NCiAgICBtYXBwaW5nIChieXRlczMyID0+IGFkZHJlc3MpIHBsYXllcnM7IA0KICAgIC8qKiB0aGUgYW1vdW50IG9mIGdhcyB0byBiZSBzZW50IHRvIG9yYWNsaXplKiovDQogICAgdWludDMyIHB1YmxpYyBvcmFjbGl6ZUdhczsNCiAgICAvKiogcHJvYmFiaWxpdGllcyBvZiB0aGUgZGlmZmVyZW50IHJlc3VsdHMgKGFic29sdXRlIGZyZXF1ZW5jeSBvdXQgb2YgMS4wMDAuMDAwIHNwaW5zKSoqLw0KICAgIHVpbnQzMltdIHB1YmxpYyBwcm9iYWJpbGl0aWVzOw0KICAgIC8qKiB0aGUgcHJpemUgcGVyIHByb2JhYmlsaXR5IChzaGlmdGVkIGJ5IHR3byBkaWdpdHMgLT4gMzc1IGlzIGFjdXR1YWxseSAzLjc1KSovDQogICAgdWludDMyW10gcHVibGljIHByaXplczsNCiAgICAvKiogdGhlIGFtb3VudCBvZiBldGhlciBwZXIgYmV0ICoqLw0KICAgIG1hcHBpbmcgKGJ5dGVzMzIgPT4gdWludCkgYmV0czsNCiAgICAvKiogdGVsbCB0aGUgbGlzdGVuZXJzIHRoZSByZXN1bHQNCiAgICBmaXJzdCB2YWx1ZTogdHlwZSwgc2Vjb25kIHZhbHVlOiBwbGF5ZXIgYWRkcmVzcywgdGhpcmQgdmFsdWU6IG9yYWNsaXplIElEKiovDQogICAgZXZlbnQgZ2FtZVJlc3VsdCh1aW50LCBhZGRyZXNzKTsvLyAwLT4gJTU7IDEgLT4gODAlOyAyIC0+IGxvc3MsIDMtPmVycm9yIGluIGNhbGxiYWNrOw0KDQogICAgDQogICAgLyoqICoqLw0KICAgIGZ1bmN0aW9uIHNsb3QoKSBwYXlhYmxlew0KICAgICAgICBwcm9iYWJpbGl0aWVzLnB1c2goNCk7DQogICAgICAgIHByb2JhYmlsaXRpZXMucHVzaCg1MCk7DQogICAgICAgIHByb2JhYmlsaXRpZXMucHVzaCgyMDApOw0KICAgICAgICBwcm9iYWJpbGl0aWVzLnB1c2goNjAwKTsNCiAgICAgICAgcHJvYmFiaWxpdGllcy5wdXNoKDEwMDApOw0KICAgICAgICBwcm9iYWJpbGl0aWVzLnB1c2goMjAwMCk7DQogICAgICAgIHByb2JhYmlsaXRpZXMucHVzaCg0MDAwKTsNCiAgICAgICAgcHJvYmFiaWxpdGllcy5wdXNoKDMwMDAwKTsNCiAgICAgICAgcHJvYmFiaWxpdGllcy5wdXNoKDkwMDAwKTsNCiAgICAgICAgcHJpemVzLnB1c2goNTAwMCk7DQogICAgICAgIHByaXplcy5wdXNoKDI1MDApOw0KICAgICAgICBwcml6ZXMucHVzaCgyMDAwKTsNCiAgICAgICAgcHJpemVzLnB1c2goMTkwMCk7DQogICAgICAgIHByaXplcy5wdXNoKDE4MDApOw0KICAgICAgICBwcml6ZXMucHVzaCgxNzAwKTsNCiAgICAgICAgcHJpemVzLnB1c2goMTYwMCk7DQogICAgICAgIHByaXplcy5wdXNoKDE1MDApOw0KICAgICAgICBwcml6ZXMucHVzaCgzNzUpOw0KICAgICAgICBvcmFjbGl6ZUdhcyA9IDEwMDAwMDsNCiAgICB9DQogICAgDQogICAgLyoqDQogICAgICogSWYgbW9yZSB0aGFuIDAuMSBldGhlciBhbmQgbGVzcyB0aGFuIDEgZXRoZXIgaXMgc2VudCBhbmQgdGhlIGNvbnRyYWN0cyBob2xkcyBlbm91Z2ggdG8gcGF5IG91dCB0aGUgcGxheWVyIGluIGNhc2Ugb2YgYSB3aW4sIGEgcmFuZG9tIG51bWJlciBpcyBhc2tlZCBmcm9tIG9yYWNsaXplLg0KICAgICAqICovDQoNCiAgICBmdW5jdGlvbigpIHBheWFibGUgew0KICAgICAgICBpZihtc2cuc2VuZGVyIT1vd25lcil7Ly9vd25lciBzaG91bGQgYmUgYWJsZSB0byBzZW5kIGZ1bmRzIHRvIHRoZSBjb250cmFjdCBhbnl0aW1lDQogICAgICAgICAgICBpZihtc2cudmFsdWU8MTAwMDAwMDAwMDAwMDAwMDAwfHxtc2cudmFsdWU+MTAwMDAwMDAwMDAwMDAwMDAwMCkgdGhyb3c7Ly9iZXQgaGFzIHRvIGxpZSBiZXR3ZWVuIDAuMSBhbmQgMSBFVEgNCiAgICAgICAgICAgIGlmKGFkZHJlc3ModGhpcykuYmFsYW5jZSA8IG1zZy52YWx1ZS8xMDAqcHJpemVzWzBdKSB0aHJvdzsgLy9tYWtlIHN1cmUgdGhlIGNvbnRyYWN0IGlzIGFibGUgdG8gcGF5IG91dCB0aGUgcGxheWVyIGluIGNhc2UgaGUgd2lucw0KICAgICAgICAgICAgYnl0ZXMzMiBvaWQgPSBvcmFjbGl6ZV9xdWVyeSgiVVJMIiwiaHR0cHM6Ly93d3cucmFuZG9tLm9yZy9pbnRlZ2Vycy8/bnVtPTEmbWluPTEmbWF4PTEwMDAwMDAmY29sPTEmYmFzZT0xMCZmb3JtYXQ9cGxhaW4mcm5kPW5ldyIsIG9yYWNsaXplR2FzKTsNCiAgICAgICAgICAgIGJldHNbb2lkXSA9IG1zZy52YWx1ZTsNCiAgICAgICAgICAgIHBsYXllcnNbb2lkXSA9IG1zZy5zZW5kZXI7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBUaGUgcmFuZG9tIG51bWJlciBmcm9tIE9yYWNsaXplcyBkZWNpZGVzIHRoZSBnYW1lIHJlc3VsdC4NCiAgICAgKiBJZiBPcmFjbGl6ZSBzZW5kcyBhIG1lc3NhZ2UgaW5zdGVhZCBvZiB0aGUgcmVxdWVzdGVkIG51bWJlciwgdGhlIGJldCBpcyByZXR1cm5lZCB0byB0aGUgcGxheWVyLg0KICAgICAqICovDQogICAgZnVuY3Rpb24gX19jYWxsYmFjayhieXRlczMyIG15aWQsIHN0cmluZyByZXN1bHQpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3JhY2xpemVfY2JBZGRyZXNzKCkpIHRocm93Ow0KICAgICAgICBpZiAocGxheWVyc1tteWlkXT09MHgwKSB0aHJvdzsNCiAgICAgICAgdWludCByYW5kb20gPSBjb252ZXJ0VG9JbnQocmVzdWx0KTsNCiAgICAgICAgaWYocmFuZG9tPT0wKXsvL3Jlc3VsdCBub3QgYSBudW1iZXIsIHJldHVybiBiZXQNCiAgICAgICAgICAgIGlmKCFwbGF5ZXJzW215aWRdLnNlbmQoYmV0c1tteWlkXSkpIHRocm93Ow0KICAgICAgICAgICAgZ2FtZVJlc3VsdCgxMDEscGxheWVyc1tteWlkXSk7DQogICAgICAgICAgICBkZWxldGUgcGxheWVyc1tteWlkXTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICB1aW50IHJhbmdlID0gMDsNCiAgICAgICAgZm9yKHVpbnQgaSA9IDA7IGk8cHJvYmFiaWxpdGllcy5sZW5ndGg7IGkrKyl7DQogICAgICAgICAgICByYW5nZSs9cHJvYmFiaWxpdGllc1tpXTsNCiAgICAgICAgICAgIGlmKHJhbmRvbTw9cmFuZ2Upew0KICAgICAgICAgICAgICAgIGlmKCFwbGF5ZXJzW215aWRdLnNlbmQoYmV0c1tteWlkXS8xMDAqcHJpemVzW2ldKSl7DQogICAgICAgICAgICAgICAgICAgIGdhbWVSZXN1bHQoMTAwLHBsYXllcnNbbXlpZF0pOy8vMTAwIC0+IGVycm9yDQogICAgICAgICAgICAgICAgICAgIHRocm93Ow0KICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgZ2FtZVJlc3VsdChpLCBwbGF5ZXJzW215aWRdKTsNCiAgICAgICAgICAgICAgICBkZWxldGUgcGxheWVyc1tteWlkXTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvL2Vsc2UgcGxheWVyIGxvc2VzIGV2ZXJ5dGhpbmcNCiAgICAgICAgZ2FtZVJlc3VsdChwcm9iYWJpbGl0aWVzLmxlbmd0aCwgcGxheWVyc1tteWlkXSk7DQogICAgICAgIA0KICAgICAgICBkZWxldGUgcGxheWVyc1tteWlkXTsNCiAgICAgICAgDQogICAgfQ0KICAgIA0KICAgIC8qKg0KICAgICAqIHNldHMgdGhlIGFtb3VudCBvZiBnYXMgdG8gYmUgc2VudCB0byBvcmFjbGl6ZQ0KICAgICAqICovDQogICAgZnVuY3Rpb24gc2V0T3JhY2xpemVHYXModWludDMyIG5ld0dhcyl7DQogICAgICAgIGlmKCEobXNnLnNlbmRlcj09b3duZXIpKSB0aHJvdzsNCiAgICAJb3JhY2xpemVHYXMgPSBuZXdHYXM7DQogICAgfQ0KICAgIA0KICAgIC8qKiBzZXQgdGhlIHByb2JhYmlsaXRpZXMgb2YgdGhlIHJlc3VsdHMgKGFic29sdXRlIGZyZXF1ZW5jaWVzIG91dCBvZiAxLjAwMC4wMDAgc3BpbnMpICoqLw0KICAgIGZ1bmN0aW9uIHNldFByb2JhYmlsaXRpZXModWludDMyW10gcHJvYnMpew0KICAgICAgICBpZighKG1zZy5zZW5kZXI9PW93bmVyKSkgdGhyb3c7DQogICAgICAgIHByb2JhYmlsaXRpZXM9cHJvYnM7DQogICAgfQ0KICAgIA0KICAgIC8qKiBzZXQgdGhlIHByaXplcyBvZiB0aGUgcmVzdWx0cyAoc2hpZnRlZCBieSAyIGRpZ2l0cyAtPiAzNzUgbWVhbnMgMy43NSkqKi8NCiAgICBmdW5jdGlvbiBzZXRQcml6ZXModWludDMyW10gcHJpeil7DQogICAgICAgIGlmKCEobXNnLnNlbmRlcj09b3duZXIpKSB0aHJvdzsNCiAgICAgICAgcHJpemVzPXByaXo7DQogICAgfQ0KICAgIA0KICAgIC8qKg0KICAgICAqIGFsbG93cyB0aGUgb3duZXIgdG8gY29sbGVjdCB0aGUgYWNjdW11bGF0ZWQgbG9zc2VzDQogICAgICogKi8NCiAgICBmdW5jdGlvbiBjb2xsZWN0RmVlcyh1aW50IGFtb3VudCl7DQogICAgICAgIGlmKCEobXNnLnNlbmRlcj09b3duZXIpKSB0aHJvdzsNCiAgICAgICAgaWYoIGFkZHJlc3ModGhpcykuYmFsYW5jZSA8IGFtb3VudCkgdGhyb3c7DQogICAgICAgIGlmKCFvd25lci5zZW5kKGFtb3VudCkpIHRocm93Ow0KICAgIH0NCiAgICANCiAgICAvKioNCiAgICAgKiBjb252ZXJ0cyBhIHN0cmluZyB0byBhbiBpbnRlZ2VyICh0aGVyZSBtYXkgb25seSBiZSBkaWdpdHMpDQogICAgICogKi8NCiAgICBmdW5jdGlvbiBjb252ZXJ0VG9JbnQoc3RyaW5nIF9hKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBicmVzdWx0ID0gYnl0ZXMoX2EpOw0KICAgICAgICB1aW50IG1pbnQgPSAwOw0KICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPGJyZXN1bHQubGVuZ3RoOyBpKyspew0KICAgICAgICAgICAgaWYgKChicmVzdWx0W2ldID49IDQ4KSYmKGJyZXN1bHRbaV0gPD0gNTcpKXsNCiAgICAgICAgICAgICAgICBtaW50ICo9IDEwOw0KICAgICAgICAgICAgICAgIG1pbnQgKz0gdWludChicmVzdWx0W2ldKSAtIDQ4Ow0KICAgICAgICAgICAgfSBlbHNlIGlmKChicmVzdWx0W2ldID49IDU4KSYmKGJyZXN1bHRbaV0gPD0gMTI2KSkgcmV0dXJuIDA7Ly9pdHMgYSBtZXNzYWdlLCBubyBwdXJlIGludA0KICAgICAgICB9DQogICAgICAgIHJldHVybiBtaW50Ow0KICAgIH0NCn0='