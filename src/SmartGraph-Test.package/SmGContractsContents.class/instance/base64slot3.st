base 64 content
base64slot3
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLy8gPE9SQUNMSVpFX0FQST4NCi8qDQpDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNiBPcmFjbGl6ZSBTUkwNCkNvcHlyaWdodCAoYykgMjAxNiBPcmFjbGl6ZSBMVEQNCg0KDQoNClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQppbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQpjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQoNCg0KDQpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbg0KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuDQoNCg0KDQpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUg0KSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksDQpGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFDQpBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSDQpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLA0KT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTg0KVEhFIFNPRlRXQVJFLg0KKi8NCg0KcHJhZ21hIHNvbGlkaXR5IF4wLjQuMDsvL3BsZWFzZSBpbXBvcnQgb3JhY2xpemVBUElfcHJlMC40LnNvbCB3aGVuIHNvbGlkaXR5IDwgMC40LjANCg0KY29udHJhY3QgT3JhY2xpemVJIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBjYkFkZHJlc3M7DQogICAgZnVuY3Rpb24gcXVlcnkodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnKSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsNCiAgICBmdW5jdGlvbiBxdWVyeV93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnLCB1aW50IF9nYXNsaW1pdCkgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7DQogICAgZnVuY3Rpb24gcXVlcnkyKHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZzEsIHN0cmluZyBfYXJnMikgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7DQogICAgZnVuY3Rpb24gcXVlcnkyX3dpdGhHYXNMaW1pdCh1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgc3RyaW5nIF9hcmcxLCBzdHJpbmcgX2FyZzIsIHVpbnQgX2dhc2xpbWl0KSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsNCiAgICBmdW5jdGlvbiBxdWVyeU4odWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIGJ5dGVzIF9hcmdOKSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsNCiAgICBmdW5jdGlvbiBxdWVyeU5fd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBieXRlcyBfYXJnTiwgdWludCBfZ2FzbGltaXQpIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOw0KICAgIGZ1bmN0aW9uIGdldFByaWNlKHN0cmluZyBfZGF0YXNvdXJjZSkgcmV0dXJucyAodWludCBfZHNwcmljZSk7DQogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSByZXR1cm5zICh1aW50IF9kc3ByaWNlKTsNCiAgICBmdW5jdGlvbiB1c2VDb3Vwb24oc3RyaW5nIF9jb3Vwb24pOw0KICAgIGZ1bmN0aW9uIHNldFByb29mVHlwZShieXRlIF9wcm9vZlR5cGUpOw0KICAgIGZ1bmN0aW9uIHNldENvbmZpZyhieXRlczMyIF9jb25maWcpOw0KICAgIGZ1bmN0aW9uIHNldEN1c3RvbUdhc1ByaWNlKHVpbnQgX2dhc1ByaWNlKTsNCiAgICBmdW5jdGlvbiByYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpIHJldHVybnMoYnl0ZXMzMik7DQp9DQpjb250cmFjdCBPcmFjbGl6ZUFkZHJSZXNvbHZlckkgew0KICAgIGZ1bmN0aW9uIGdldEFkZHJlc3MoKSByZXR1cm5zIChhZGRyZXNzIF9hZGRyKTsNCn0NCmNvbnRyYWN0IHVzaW5nT3JhY2xpemUgew0KICAgIHVpbnQgY29uc3RhbnQgZGF5ID0gNjAqNjAqMjQ7DQogICAgdWludCBjb25zdGFudCB3ZWVrID0gNjAqNjAqMjQqNzsNCiAgICB1aW50IGNvbnN0YW50IG1vbnRoID0gNjAqNjAqMjQqMzA7DQogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfTk9ORSA9IDB4MDA7DQogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfVExTTm90YXJ5ID0gMHgxMDsNCiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9BbmRyb2lkID0gMHgyMDsNCiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9MZWRnZXIgPSAweDMwOw0KICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX05hdGl2ZSA9IDB4RjA7DQogICAgYnl0ZSBjb25zdGFudCBwcm9vZlN0b3JhZ2VfSVBGUyA9IDB4MDE7DQogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX2F1dG8gPSAwOw0KICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9tYWlubmV0ID0gMTsNCiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfdGVzdG5ldCA9IDI7DQogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX21vcmRlbiA9IDI7DQogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX2NvbnNlbnN5cyA9IDE2MTsNCg0KICAgIE9yYWNsaXplQWRkclJlc29sdmVySSBPQVI7DQoNCiAgICBPcmFjbGl6ZUkgb3JhY2xpemU7DQogICAgbW9kaWZpZXIgb3JhY2xpemVBUEkgew0KICAgICAgICBpZigoYWRkcmVzcyhPQVIpPT0wKXx8KGdldENvZGVTaXplKGFkZHJlc3MoT0FSKSk9PTApKSBvcmFjbGl6ZV9zZXROZXR3b3JrKG5ldHdvcmtJRF9hdXRvKTsNCiAgICAgICAgb3JhY2xpemUgPSBPcmFjbGl6ZUkoT0FSLmdldEFkZHJlc3MoKSk7DQogICAgICAgIF87DQogICAgfQ0KICAgIG1vZGlmaWVyIGNvdXBvbihzdHJpbmcgY29kZSl7DQogICAgICAgIG9yYWNsaXplID0gT3JhY2xpemVJKE9BUi5nZXRBZGRyZXNzKCkpOw0KICAgICAgICBvcmFjbGl6ZS51c2VDb3Vwb24oY29kZSk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0TmV0d29yayh1aW50OCBuZXR3b3JrSUQpIGludGVybmFsIHJldHVybnMoYm9vbCl7DQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDFkM0IyNjM4YTdjQzlmMkNCM0QyOThBM0RBN2E5MEI2N0U1NTA2ZWQpPjApeyAvL21haW5uZXQNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDFkM0IyNjM4YTdjQzlmMkNCM0QyOThBM0RBN2E5MEI2N0U1NTA2ZWQpOw0KICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9tYWlubmV0Iik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHhjMDNBMjYxNUQ1ZWZhZjVGNDlGNjBCN0JCNjU4M2VhZWMyMTJmZGYxKT4wKXsgLy9yb3BzdGVuIHRlc3RuZXQNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweGMwM0EyNjE1RDVlZmFmNUY0OUY2MEI3QkI2NTgzZWFlYzIxMmZkZjEpOw0KICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9yb3BzdGVuMyIpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4QjdBMDdCY0YyQmEyZjI3MDNiMjRDMDY5MWI1Mjc4OTk5QzU5QUM3ZSk+MCl7IC8va292YW4gdGVzdG5ldA0KICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4QjdBMDdCY0YyQmEyZjI3MDNiMjRDMDY5MWI1Mjc4OTk5QzU5QUM3ZSk7DQogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZSgiZXRoX2tvdmFuIik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgxNDY1MDBjZmQzNUIyMkU0QTM5MkZlMGFEYzA2RGUxYTEzNjhFZDQ4KT4wKXsgLy9yaW5rZWJ5IHRlc3RuZXQNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDE0NjUwMGNmZDM1QjIyRTRBMzkyRmUwYURjMDZEZTFhMTM2OEVkNDgpOw0KICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9yaW5rZWJ5Iik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHg2ZjQ4NUM4QkY2ZmM0M2VBMjEyRTkzQkJGOGNlMDQ2QzdmMWNiNDc1KT4wKXsgLy9ldGhlcmV1bS1icmlkZ2UNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDZmNDg1QzhCRjZmYzQzZUEyMTJFOTNCQkY4Y2UwNDZDN2YxY2I0NzUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4MjBlMTJBMUY4NTlCM0ZlYUU1RmIyQTBBMzJDMThGNWE2NTU1NWJCRik+MCl7IC8vZXRoZXIuY2FtcCBpZGUNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDIwZTEyQTFGODU5QjNGZWFFNUZiMkEwQTMyQzE4RjVhNjU1NTViQkYpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4NTFlZmFGNGM4QjNDOUFmQkQ1YUI5RjRiYkM4Mjc4NEFiNmVmOGZBQSk+MCl7IC8vYnJvd3Nlci1zb2xpZGl0eQ0KICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4NTFlZmFGNGM4QjNDOUFmQkQ1YUI5RjRiYkM4Mjc4NEFiNmVmOGZBQSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gX19jYWxsYmFjayhieXRlczMyIG15aWQsIHN0cmluZyByZXN1bHQpIHsNCiAgICAgICAgX19jYWxsYmFjayhteWlkLCByZXN1bHQsIG5ldyBieXRlcygwKSk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBteWlkLCBzdHJpbmcgcmVzdWx0LCBieXRlcyBwcm9vZikgew0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV91c2VDb3Vwb24oc3RyaW5nIGNvZGUpIG9yYWNsaXplQVBJIGludGVybmFsIHsNCiAgICAgICAgb3JhY2xpemUudXNlQ291cG9uKGNvZGUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldFByaWNlKHN0cmluZyBkYXRhc291cmNlKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zICh1aW50KXsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldFByaWNlKHN0cmluZyBkYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zICh1aW50KXsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeS52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeV93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Mi52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMik7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Mi52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMiwgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOw0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOw0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgxKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgxKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDEpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOyAgICAgICANCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDIpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMyk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMyk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDMpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNF0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDQpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsNCiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOw0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04pIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOw0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDEpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMSk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOyAgICAgICANCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzJdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDIpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgzKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbM10gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNCk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNCk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg0KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzRdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDUpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsNCiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX2NiQWRkcmVzcygpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGFkZHJlc3Mpew0KICAgICAgICByZXR1cm4gb3JhY2xpemUuY2JBZGRyZXNzKCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldFByb29mKGJ5dGUgcHJvb2ZQKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCB7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5zZXRQcm9vZlR5cGUocHJvb2ZQKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0Q3VzdG9tR2FzUHJpY2UodWludCBnYXNQcmljZSkgb3JhY2xpemVBUEkgaW50ZXJuYWwgew0KICAgICAgICByZXR1cm4gb3JhY2xpemUuc2V0Q3VzdG9tR2FzUHJpY2UoZ2FzUHJpY2UpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXRDb25maWcoYnl0ZXMzMiBjb25maWcpIG9yYWNsaXplQVBJIGludGVybmFsIHsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnNldENvbmZpZyhjb25maWcpOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIpew0KICAgICAgICByZXR1cm4gb3JhY2xpemUucmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRDb2RlU2l6ZShhZGRyZXNzIF9hZGRyKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zKHVpbnQgX3NpemUpIHsNCiAgICAgICAgYXNzZW1ibHkgew0KICAgICAgICAgICAgX3NpemUgOj0gZXh0Y29kZXNpemUoX2FkZHIpDQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwYXJzZUFkZHIoc3RyaW5nIF9hKSBpbnRlcm5hbCByZXR1cm5zIChhZGRyZXNzKXsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IHRtcCA9IGJ5dGVzKF9hKTsNCiAgICAgICAgdWludDE2MCBpYWRkciA9IDA7DQogICAgICAgIHVpbnQxNjAgYjE7DQogICAgICAgIHVpbnQxNjAgYjI7DQogICAgICAgIGZvciAodWludCBpPTI7IGk8MisyKjIwOyBpKz0yKXsNCiAgICAgICAgICAgIGlhZGRyICo9IDI1NjsNCiAgICAgICAgICAgIGIxID0gdWludDE2MCh0bXBbaV0pOw0KICAgICAgICAgICAgYjIgPSB1aW50MTYwKHRtcFtpKzFdKTsNCiAgICAgICAgICAgIGlmICgoYjEgPj0gOTcpJiYoYjEgPD0gMTAyKSkgYjEgLT0gODc7DQogICAgICAgICAgICBlbHNlIGlmICgoYjEgPj0gNjUpJiYoYjEgPD0gNzApKSBiMSAtPSA1NTsNCiAgICAgICAgICAgIGVsc2UgaWYgKChiMSA+PSA0OCkmJihiMSA8PSA1NykpIGIxIC09IDQ4Ow0KICAgICAgICAgICAgaWYgKChiMiA+PSA5NykmJihiMiA8PSAxMDIpKSBiMiAtPSA4NzsNCiAgICAgICAgICAgIGVsc2UgaWYgKChiMiA+PSA2NSkmJihiMiA8PSA3MCkpIGIyIC09IDU1Ow0KICAgICAgICAgICAgZWxzZSBpZiAoKGIyID49IDQ4KSYmKGIyIDw9IDU3KSkgYjIgLT0gNDg7DQogICAgICAgICAgICBpYWRkciArPSAoYjEqMTYrYjIpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBhZGRyZXNzKGlhZGRyKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdHJDb21wYXJlKHN0cmluZyBfYSwgc3RyaW5nIF9iKSBpbnRlcm5hbCByZXR1cm5zIChpbnQpIHsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGEgPSBieXRlcyhfYSk7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBiID0gYnl0ZXMoX2IpOw0KICAgICAgICB1aW50IG1pbkxlbmd0aCA9IGEubGVuZ3RoOw0KICAgICAgICBpZiAoYi5sZW5ndGggPCBtaW5MZW5ndGgpIG1pbkxlbmd0aCA9IGIubGVuZ3RoOw0KICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBtaW5MZW5ndGg7IGkgKyspDQogICAgICAgICAgICBpZiAoYVtpXSA8IGJbaV0pDQogICAgICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICAgICAgZWxzZSBpZiAoYVtpXSA+IGJbaV0pDQogICAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgIGlmIChhLmxlbmd0aCA8IGIubGVuZ3RoKQ0KICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICBlbHNlIGlmIChhLmxlbmd0aCA+IGIubGVuZ3RoKQ0KICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGluZGV4T2Yoc3RyaW5nIF9oYXlzdGFjaywgc3RyaW5nIF9uZWVkbGUpIGludGVybmFsIHJldHVybnMgKGludCkgew0KICAgICAgICBieXRlcyBtZW1vcnkgaCA9IGJ5dGVzKF9oYXlzdGFjayk7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBuID0gYnl0ZXMoX25lZWRsZSk7DQogICAgICAgIGlmKGgubGVuZ3RoIDwgMSB8fCBuLmxlbmd0aCA8IDEgfHwgKG4ubGVuZ3RoID4gaC5sZW5ndGgpKQ0KICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICBlbHNlIGlmKGgubGVuZ3RoID4gKDIqKjEyOCAtMSkpDQogICAgICAgICAgICByZXR1cm4gLTE7DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgICAgdWludCBzdWJpbmRleCA9IDA7DQogICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBoLmxlbmd0aDsgaSArKykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoaFtpXSA9PSBuWzBdKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgc3ViaW5kZXggPSAxOw0KICAgICAgICAgICAgICAgICAgICB3aGlsZShzdWJpbmRleCA8IG4ubGVuZ3RoICYmIChpICsgc3ViaW5kZXgpIDwgaC5sZW5ndGggJiYgaFtpICsgc3ViaW5kZXhdID09IG5bc3ViaW5kZXhdKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBzdWJpbmRleCsrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmKHN1YmluZGV4ID09IG4ubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludChpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gLTE7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IsIHN0cmluZyBfYywgc3RyaW5nIF9kLCBzdHJpbmcgX2UpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgew0KICAgICAgICBieXRlcyBtZW1vcnkgX2JhID0gYnl0ZXMoX2EpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JiID0gYnl0ZXMoX2IpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JjID0gYnl0ZXMoX2MpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JkID0gYnl0ZXMoX2QpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JlID0gYnl0ZXMoX2UpOw0KICAgICAgICBzdHJpbmcgbWVtb3J5IGFiY2RlID0gbmV3IHN0cmluZyhfYmEubGVuZ3RoICsgX2JiLmxlbmd0aCArIF9iYy5sZW5ndGggKyBfYmQubGVuZ3RoICsgX2JlLmxlbmd0aCk7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBiYWJjZGUgPSBieXRlcyhhYmNkZSk7DQogICAgICAgIHVpbnQgayA9IDA7DQogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF9iYS5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmFbaV07DQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmIubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JiW2ldOw0KICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JjLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iY1tpXTsNCiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iZC5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmRbaV07DQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmUubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JlW2ldOw0KICAgICAgICByZXR1cm4gc3RyaW5nKGJhYmNkZSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MsIHN0cmluZyBfZCkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBzdHJDb25jYXQoX2EsIF9iLCBfYywgX2QsICIiKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IsIHN0cmluZyBfYykgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBzdHJDb25jYXQoX2EsIF9iLCBfYywgIiIsICIiKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgew0KICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgIiIsICIiLCAiIik7DQogICAgfQ0KDQogICAgLy8gcGFyc2VJbnQNCiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcgX2EpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIHBhcnNlSW50KF9hLCAwKTsNCiAgICB9DQoNCiAgICAvLyBwYXJzZUludChwYXJzZUZsb2F0KjEwXl9iKQ0KICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZyBfYSwgdWludCBfYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgICAgICBieXRlcyBtZW1vcnkgYnJlc3VsdCA9IGJ5dGVzKF9hKTsNCiAgICAgICAgdWludCBtaW50ID0gMDsNCiAgICAgICAgYm9vbCBkZWNpbWFscyA9IGZhbHNlOw0KICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPGJyZXN1bHQubGVuZ3RoOyBpKyspew0KICAgICAgICAgICAgaWYgKChicmVzdWx0W2ldID49IDQ4KSYmKGJyZXN1bHRbaV0gPD0gNTcpKXsNCiAgICAgICAgICAgICAgICBpZiAoZGVjaW1hbHMpew0KICAgICAgICAgICAgICAgICAgIGlmIChfYiA9PSAwKSBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgZWxzZSBfYi0tOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBtaW50ICo9IDEwOw0KICAgICAgICAgICAgICAgIG1pbnQgKz0gdWludChicmVzdWx0W2ldKSAtIDQ4Ow0KICAgICAgICAgICAgfSBlbHNlIGlmIChicmVzdWx0W2ldID09IDQ2KSBkZWNpbWFscyA9IHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKF9iID4gMCkgbWludCAqPSAxMCoqX2I7DQogICAgICAgIHJldHVybiBtaW50Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVpbnQyc3RyKHVpbnQgaSkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKXsNCiAgICAgICAgaWYgKGkgPT0gMCkgcmV0dXJuICIwIjsNCiAgICAgICAgdWludCBqID0gaTsNCiAgICAgICAgdWludCBsZW47DQogICAgICAgIHdoaWxlIChqICE9IDApew0KICAgICAgICAgICAgbGVuKys7DQogICAgICAgICAgICBqIC89IDEwOw0KICAgICAgICB9DQogICAgICAgIGJ5dGVzIG1lbW9yeSBic3RyID0gbmV3IGJ5dGVzKGxlbik7DQogICAgICAgIHVpbnQgayA9IGxlbiAtIDE7DQogICAgICAgIHdoaWxlIChpICE9IDApew0KICAgICAgICAgICAgYnN0cltrLS1dID0gYnl0ZSg0OCArIGkgJSAxMCk7DQogICAgICAgICAgICBpIC89IDEwOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBzdHJpbmcoYnN0cik7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIHN0cmEyY2JvcihzdHJpbmdbXSBhcnIpIGludGVybmFsIHJldHVybnMgKGJ5dGVzKSB7DQogICAgICAgICAgICB1aW50IGFycmxlbiA9IGFyci5sZW5ndGg7DQoNCiAgICAgICAgICAgIC8vIGdldCBjb3JyZWN0IGNib3Igb3V0cHV0IGxlbmd0aA0KICAgICAgICAgICAgdWludCBvdXRwdXRsZW4gPSAwOw0KICAgICAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZWxlbUFycmF5ID0gbmV3IGJ5dGVzW10oYXJybGVuKTsNCiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7DQogICAgICAgICAgICAgICAgZWxlbUFycmF5W2ldID0gKGJ5dGVzKGFycltpXSkpOw0KICAgICAgICAgICAgICAgIG91dHB1dGxlbiArPSBlbGVtQXJyYXlbaV0ubGVuZ3RoICsgKGVsZW1BcnJheVtpXS5sZW5ndGggLSAxKS8yMyArIDM7IC8vKzMgYWNjb3VudHMgZm9yIHBhaXJlZCBpZGVudGlmaWVyIHR5cGVzDQogICAgICAgICAgICB9DQogICAgICAgICAgICB1aW50IGN0ciA9IDA7DQogICAgICAgICAgICB1aW50IGNib3JsZW4gPSBhcnJsZW4gKyAweDgwOw0KICAgICAgICAgICAgb3V0cHV0bGVuICs9IGJ5dGUoY2JvcmxlbikubGVuZ3RoOw0KICAgICAgICAgICAgYnl0ZXMgbWVtb3J5IHJlcyA9IG5ldyBieXRlcyhvdXRwdXRsZW4pOw0KDQogICAgICAgICAgICB3aGlsZSAoYnl0ZShjYm9ybGVuKS5sZW5ndGggPiBjdHIpIHsNCiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoY2JvcmxlbilbY3RyXTsNCiAgICAgICAgICAgICAgICBjdHIrKzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJsZW47IGkrKykgew0KICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gMHg1RjsNCiAgICAgICAgICAgICAgICBjdHIrKzsNCiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgeCA9IDA7IHggPCBlbGVtQXJyYXlbaV0ubGVuZ3RoOyB4KyspIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIGJ1ZyB3aXRoIGxhcmdlciBzdHJpbmdzLCB0aGlzIG1heSBiZSB0aGUgY3VscHJpdA0KICAgICAgICAgICAgICAgICAgICBpZiAoeCAlIDIzID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgZWxlbWNib3JsZW4gPSBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geCA+PSAyNCA/IDIzIDogZWxlbUFycmF5W2ldLmxlbmd0aCAtIHg7DQogICAgICAgICAgICAgICAgICAgICAgICBlbGVtY2JvcmxlbiArPSAweDQwOw0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBsY3RyID0gY3RyOw0KICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ5dGUoZWxlbWNib3JsZW4pLmxlbmd0aCA+IGN0ciAtIGxjdHIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoZWxlbWNib3JsZW4pW2N0ciAtIGxjdHJdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gZWxlbUFycmF5W2ldW3hdOw0KICAgICAgICAgICAgICAgICAgICBjdHIrKzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweEZGOw0KICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHJlczsNCiAgICAgICAgfQ0KDQogICAgZnVuY3Rpb24gYmEyY2JvcihieXRlc1tdIGFycikgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMpIHsNCiAgICAgICAgICAgIHVpbnQgYXJybGVuID0gYXJyLmxlbmd0aDsNCg0KICAgICAgICAgICAgLy8gZ2V0IGNvcnJlY3QgY2JvciBvdXRwdXQgbGVuZ3RoDQogICAgICAgICAgICB1aW50IG91dHB1dGxlbiA9IDA7DQogICAgICAgICAgICBieXRlc1tdIG1lbW9yeSBlbGVtQXJyYXkgPSBuZXcgYnl0ZXNbXShhcnJsZW4pOw0KICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsNCiAgICAgICAgICAgICAgICBlbGVtQXJyYXlbaV0gPSAoYnl0ZXMoYXJyW2ldKSk7DQogICAgICAgICAgICAgICAgb3V0cHV0bGVuICs9IGVsZW1BcnJheVtpXS5sZW5ndGggKyAoZWxlbUFycmF5W2ldLmxlbmd0aCAtIDEpLzIzICsgMzsgLy8rMyBhY2NvdW50cyBmb3IgcGFpcmVkIGlkZW50aWZpZXIgdHlwZXMNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHVpbnQgY3RyID0gMDsNCiAgICAgICAgICAgIHVpbnQgY2JvcmxlbiA9IGFycmxlbiArIDB4ODA7DQogICAgICAgICAgICBvdXRwdXRsZW4gKz0gYnl0ZShjYm9ybGVuKS5sZW5ndGg7DQogICAgICAgICAgICBieXRlcyBtZW1vcnkgcmVzID0gbmV3IGJ5dGVzKG91dHB1dGxlbik7DQoNCiAgICAgICAgICAgIHdoaWxlIChieXRlKGNib3JsZW4pLmxlbmd0aCA+IGN0cikgew0KICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShjYm9ybGVuKVtjdHJdOw0KICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7DQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweDVGOw0KICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgICAgIGZvciAodWludCB4ID0gMDsgeCA8IGVsZW1BcnJheVtpXS5sZW5ndGg7IHgrKykgew0KICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSdzIGEgYnVnIHdpdGggbGFyZ2VyIHN0cmluZ3MsIHRoaXMgbWF5IGJlIHRoZSBjdWxwcml0DQogICAgICAgICAgICAgICAgICAgIGlmICh4ICUgMjMgPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBlbGVtY2JvcmxlbiA9IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4ID49IDI0ID8gMjMgOiBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1jYm9ybGVuICs9IDB4NDA7DQogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGxjdHIgPSBjdHI7DQogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnl0ZShlbGVtY2JvcmxlbikubGVuZ3RoID4gY3RyIC0gbGN0cikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShlbGVtY2JvcmxlbilbY3RyIC0gbGN0cl07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RyKys7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBlbGVtQXJyYXlbaV1beF07DQogICAgICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4RkY7DQogICAgICAgICAgICAgICAgY3RyKys7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gcmVzOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICANCiAgICBzdHJpbmcgb3JhY2xpemVfbmV0d29ya19uYW1lOw0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKHN0cmluZyBfbmV0d29ya19uYW1lKSBpbnRlcm5hbCB7DQogICAgICAgIG9yYWNsaXplX25ldHdvcmtfbmFtZSA9IF9uZXR3b3JrX25hbWU7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKCkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9uZXR3b3JrX25hbWU7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX25ld1JhbmRvbURTUXVlcnkodWludCBfZGVsYXksIHVpbnQgX25ieXRlcywgdWludCBfY3VzdG9tR2FzTGltaXQpIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIpew0KICAgICAgICBpZiAoKF9uYnl0ZXMgPT0gMCl8fChfbmJ5dGVzID4gMzIpKSB0aHJvdzsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IG5ieXRlcyA9IG5ldyBieXRlcygxKTsNCiAgICAgICAgbmJ5dGVzWzBdID0gYnl0ZShfbmJ5dGVzKTsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IHVub25jZTsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNlc3Npb25LZXlIYXNoOw0KICAgICAgICBieXRlczMyIHNlc3Npb25LZXlIYXNoX2J5dGVzMzIgPSBvcmFjbGl6ZV9yYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpOw0KICAgICAgICBhc3NlbWJseSB7DQogICAgICAgICAgICBtc3RvcmUodW5vbmNlLCAweDIwKQ0KICAgICAgICAgICAgbXN0b3JlKGFkZCh1bm9uY2UsIDB4MjApLCB4b3IoYmxvY2toYXNoKHN1YihudW1iZXIsIDEpKSwgeG9yKGNvaW5iYXNlLCB0aW1lc3RhbXApKSkNCiAgICAgICAgICAgIG1zdG9yZShzZXNzaW9uS2V5SGFzaCwgMHgyMCkNCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2Vzc2lvbktleUhhc2gsIDB4MjApLCBzZXNzaW9uS2V5SGFzaF9ieXRlczMyKQ0KICAgICAgICB9DQogICAgICAgIGJ5dGVzWzNdIG1lbW9yeSBhcmdzID0gW3Vub25jZSwgbmJ5dGVzLCBzZXNzaW9uS2V5SGFzaF07IA0KICAgICAgICBieXRlczMyIHF1ZXJ5SWQgPSBvcmFjbGl6ZV9xdWVyeShfZGVsYXksICJyYW5kb20iLCBhcmdzLCBfY3VzdG9tR2FzTGltaXQpOw0KICAgICAgICBvcmFjbGl6ZV9yYW5kb21EU19zZXRDb21taXRtZW50KHF1ZXJ5SWQsIHNoYTMoYnl0ZXM4KF9kZWxheSksIGFyZ3NbMV0sIHNoYTI1NihhcmdzWzBdKSwgYXJnc1syXSkpOw0KICAgICAgICByZXR1cm4gcXVlcnlJZDsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfc2V0Q29tbWl0bWVudChieXRlczMyIHF1ZXJ5SWQsIGJ5dGVzMzIgY29tbWl0bWVudCkgaW50ZXJuYWwgew0KICAgICAgICBvcmFjbGl6ZV9yYW5kb21EU19hcmdzW3F1ZXJ5SWRdID0gY29tbWl0bWVudDsNCiAgICB9DQogICAgDQogICAgbWFwcGluZyhieXRlczMyPT5ieXRlczMyKSBvcmFjbGl6ZV9yYW5kb21EU19hcmdzOw0KICAgIG1hcHBpbmcoYnl0ZXMzMj0+Ym9vbCkgb3JhY2xpemVfcmFuZG9tRFNfc2Vzc2lvbktleXNIYXNoVmVyaWZpZWQ7DQoNCiAgICBmdW5jdGlvbiB2ZXJpZnlTaWcoYnl0ZXMzMiB0b3NpZ25oLCBieXRlcyBkZXJzaWcsIGJ5dGVzIHB1YmtleSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCl7DQogICAgICAgIGJvb2wgc2lnb2s7DQogICAgICAgIGFkZHJlc3Mgc2lnbmVyOw0KICAgICAgICANCiAgICAgICAgYnl0ZXMzMiBzaWdyOw0KICAgICAgICBieXRlczMyIHNpZ3M7DQogICAgICAgIA0KICAgICAgICBieXRlcyBtZW1vcnkgc2lncl8gPSBuZXcgYnl0ZXMoMzIpOw0KICAgICAgICB1aW50IG9mZnNldCA9IDQrKHVpbnQoZGVyc2lnWzNdKSAtIDB4MjApOw0KICAgICAgICBzaWdyXyA9IGNvcHlCeXRlcyhkZXJzaWcsIG9mZnNldCwgMzIsIHNpZ3JfLCAwKTsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZ3NfID0gbmV3IGJ5dGVzKDMyKTsNCiAgICAgICAgb2Zmc2V0ICs9IDMyICsgMjsNCiAgICAgICAgc2lnc18gPSBjb3B5Qnl0ZXMoZGVyc2lnLCBvZmZzZXQrKHVpbnQoZGVyc2lnW29mZnNldC0xXSkgLSAweDIwKSwgMzIsIHNpZ3NfLCAwKTsNCg0KICAgICAgICBhc3NlbWJseSB7DQogICAgICAgICAgICBzaWdyIDo9IG1sb2FkKGFkZChzaWdyXywgMzIpKQ0KICAgICAgICAgICAgc2lncyA6PSBtbG9hZChhZGQoc2lnc18sIDMyKSkNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgDQogICAgICAgIChzaWdvaywgc2lnbmVyKSA9IHNhZmVyX2VjcmVjb3Zlcih0b3NpZ25oLCAyNywgc2lnciwgc2lncyk7DQogICAgICAgIGlmIChhZGRyZXNzKHNoYTMocHVia2V5KSkgPT0gc2lnbmVyKSByZXR1cm4gdHJ1ZTsNCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAoc2lnb2ssIHNpZ25lcikgPSBzYWZlcl9lY3JlY292ZXIodG9zaWduaCwgMjgsIHNpZ3IsIHNpZ3MpOw0KICAgICAgICAgICAgcmV0dXJuIChhZGRyZXNzKHNoYTMocHVia2V5KSkgPT0gc2lnbmVyKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19zZXNzaW9uS2V5VmFsaWRpdHkoYnl0ZXMgcHJvb2YsIHVpbnQgc2lnMm9mZnNldCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICBib29sIHNpZ29rOw0KICAgICAgICANCiAgICAgICAgLy8gU3RlcCA2OiB2ZXJpZnkgdGhlIGF0dGVzdGF0aW9uIHNpZ25hdHVyZSwgQVBQS0VZMSBtdXN0IHNpZ24gdGhlIHNlc3Npb25LZXkgZnJvbSB0aGUgY29ycmVjdCBsZWRnZXIgYXBwIChDT0RFSEFTSCkNCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzIgPSBuZXcgYnl0ZXModWludChwcm9vZltzaWcyb2Zmc2V0KzFdKSsyKTsNCiAgICAgICAgY29weUJ5dGVzKHByb29mLCBzaWcyb2Zmc2V0LCBzaWcyLmxlbmd0aCwgc2lnMiwgMCk7DQogICAgICAgIA0KICAgICAgICBieXRlcyBtZW1vcnkgYXBwa2V5MV9wdWJrZXkgPSBuZXcgYnl0ZXMoNjQpOw0KICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIDMrMSwgNjQsIGFwcGtleTFfcHVia2V5LCAwKTsNCiAgICAgICAgDQogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24yID0gbmV3IGJ5dGVzKDErNjUrMzIpOw0KICAgICAgICB0b3NpZ24yWzBdID0gMTsgLy9yb2xlDQogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgc2lnMm9mZnNldC02NSwgNjUsIHRvc2lnbjIsIDEpOw0KICAgICAgICBieXRlcyBtZW1vcnkgQ09ERUhBU0ggPSBoZXgiZmQ5NGZhNzFiYzBiYTEwZDM5ZDQ2NGQwZDhmNDY1ZWZlZWYwYTI3NjRlMzg4N2ZjYzlkZjQxZGVkMjBmNTA1YyI7DQogICAgICAgIGNvcHlCeXRlcyhDT0RFSEFTSCwgMCwgMzIsIHRvc2lnbjIsIDErNjUpOw0KICAgICAgICBzaWdvayA9IHZlcmlmeVNpZyhzaGEyNTYodG9zaWduMiksIHNpZzIsIGFwcGtleTFfcHVia2V5KTsNCiAgICAgICAgDQogICAgICAgIGlmIChzaWdvayA9PSBmYWxzZSkgcmV0dXJuIGZhbHNlOw0KICAgICAgICANCiAgICAgICAgDQogICAgICAgIC8vIFN0ZXAgNzogdmVyaWZ5IHRoZSBBUFBLRVkxIHByb3ZlbmFuY2UgKG11c3QgYmUgc2lnbmVkIGJ5IExlZGdlcikNCiAgICAgICAgYnl0ZXMgbWVtb3J5IExFREdFUktFWSA9IGhleCI3ZmI5NTY0NjljNWM5Yjg5ODQwZDU1YjQzNTM3ZTY2YTk4ZGQ0ODExZWEwYTI3MjI0MjcyYzJlNTYyMjkxMWU4NTM3YTJmOGU4NmE0NmJhZWM4Mjg2NGU5OGRkMDFlOWNjYzJmOGJjNWRmYzljYmU1YTkxYTI5MDQ5OGRkOTZlNCI7DQogICAgICAgIA0KICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMyA9IG5ldyBieXRlcygxKzY1KTsNCiAgICAgICAgdG9zaWduM1swXSA9IDB4RkU7DQogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMywgNjUsIHRvc2lnbjMsIDEpOw0KICAgICAgICANCiAgICAgICAgYnl0ZXMgbWVtb3J5IHNpZzMgPSBuZXcgYnl0ZXModWludChwcm9vZlszKzY1KzFdKSsyKTsNCiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzKzY1LCBzaWczLmxlbmd0aCwgc2lnMywgMCk7DQogICAgICAgIA0KICAgICAgICBzaWdvayA9IHZlcmlmeVNpZyhzaGEyNTYodG9zaWduMyksIHNpZzMsIExFREdFUktFWSk7DQogICAgICAgIA0KICAgICAgICByZXR1cm4gc2lnb2s7DQogICAgfQ0KICAgIA0KICAgIG1vZGlmaWVyIG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5KGJ5dGVzMzIgX3F1ZXJ5SWQsIHN0cmluZyBfcmVzdWx0LCBieXRlcyBfcHJvb2YpIHsNCiAgICAgICAgLy8gU3RlcCAxOiB0aGUgcHJlZml4IGhhcyB0byBtYXRjaCAnTFBceDAxJyAoTGVkZ2VyIFByb29mIHZlcnNpb24gMSkNCiAgICAgICAgaWYgKChfcHJvb2ZbMF0gIT0gIkwiKXx8KF9wcm9vZlsxXSAhPSAiUCIpfHwoX3Byb29mWzJdICE9IDEpKSB0aHJvdzsNCiAgICAgICAgDQogICAgICAgIGJvb2wgcHJvb2ZWZXJpZmllZCA9IG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19tYWluKF9wcm9vZiwgX3F1ZXJ5SWQsIGJ5dGVzKF9yZXN1bHQpLCBvcmFjbGl6ZV9nZXROZXR3b3JrTmFtZSgpKTsNCiAgICAgICAgaWYgKHByb29mVmVyaWZpZWQgPT0gZmFsc2UpIHRocm93Ow0KICAgICAgICANCiAgICAgICAgXzsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gbWF0Y2hCeXRlczMyUHJlZml4KGJ5dGVzMzIgY29udGVudCwgYnl0ZXMgcHJlZml4KSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsNCiAgICAgICAgYm9vbCBtYXRjaF8gPSB0cnVlOw0KICAgICAgICANCiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHByZWZpeC5sZW5ndGg7IGkrKyl7DQogICAgICAgICAgICBpZiAoY29udGVudFtpXSAhPSBwcmVmaXhbaV0pIG1hdGNoXyA9IGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICByZXR1cm4gbWF0Y2hfOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19tYWluKGJ5dGVzIHByb29mLCBieXRlczMyIHF1ZXJ5SWQsIGJ5dGVzIHJlc3VsdCwgc3RyaW5nIGNvbnRleHRfbmFtZSkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCl7DQogICAgICAgIGJvb2wgY2hlY2tvazsNCiAgICAgICAgDQogICAgICAgIA0KICAgICAgICAvLyBTdGVwIDI6IHRoZSB1bmlxdWUga2V5aGFzaCBoYXMgdG8gbWF0Y2ggd2l0aCB0aGUgc2hhMjU2IG9mIChjb250ZXh0IG5hbWUgKyBxdWVyeUlkKQ0KICAgICAgICB1aW50IGxlZGdlclByb29mTGVuZ3RoID0gMys2NSsodWludChwcm9vZlszKzY1KzFdKSsyKSszMjsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGtleWhhc2ggPSBuZXcgYnl0ZXMoMzIpOw0KICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoLCAzMiwga2V5aGFzaCwgMCk7DQogICAgICAgIGNoZWNrb2sgPSAoc2hhMyhrZXloYXNoKSA9PSBzaGEzKHNoYTI1Nihjb250ZXh0X25hbWUsIHF1ZXJ5SWQpKSk7DQogICAgICAgIGlmIChjaGVja29rID09IGZhbHNlKSByZXR1cm4gZmFsc2U7DQogICAgICAgIA0KICAgICAgICBieXRlcyBtZW1vcnkgc2lnMSA9IG5ldyBieXRlcyh1aW50KHByb29mW2xlZGdlclByb29mTGVuZ3RoKygzMis4KzErMzIpKzFdKSsyKTsNCiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCsoMzIrOCsxKzMyKSwgc2lnMS5sZW5ndGgsIHNpZzEsIDApOw0KICAgICAgICANCiAgICAgICAgDQogICAgICAgIC8vIFN0ZXAgMzogd2UgYXNzdW1lIHNpZzEgaXMgdmFsaWQgKGl0IHdpbGwgYmUgdmVyaWZpZWQgZHVyaW5nIHN0ZXAgNSkgYW5kIHdlIHZlcmlmeSBpZiAncmVzdWx0JyBpcyB0aGUgcHJlZml4IG9mIHNoYTI1NihzaWcxKQ0KICAgICAgICBjaGVja29rID0gbWF0Y2hCeXRlczMyUHJlZml4KHNoYTI1NihzaWcxKSwgcmVzdWx0KTsNCiAgICAgICAgaWYgKGNoZWNrb2sgPT0gZmFsc2UpIHJldHVybiBmYWxzZTsNCiAgICAgICAgDQogICAgICAgIA0KICAgICAgICAvLyBTdGVwIDQ6IGNvbW1pdG1lbnQgbWF0Y2ggdmVyaWZpY2F0aW9uLCBzaGEzKGRlbGF5LCBuYnl0ZXMsIHVub25jZSwgc2Vzc2lvbktleUhhc2gpID09IGNvbW1pdG1lbnQgaW4gc3RvcmFnZS4NCiAgICAgICAgLy8gVGhpcyBpcyB0byB2ZXJpZnkgdGhhdCB0aGUgY29tcHV0ZWQgYXJncyBtYXRjaCB3aXRoIHRoZSBvbmVzIHNwZWNpZmllZCBpbiB0aGUgcXVlcnkuDQogICAgICAgIGJ5dGVzIG1lbW9yeSBjb21taXRtZW50U2xpY2UxID0gbmV3IGJ5dGVzKDgrMSszMik7DQogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgrMzIsIDgrMSszMiwgY29tbWl0bWVudFNsaWNlMSwgMCk7DQogICAgICAgIA0KICAgICAgICBieXRlcyBtZW1vcnkgc2Vzc2lvblB1YmtleSA9IG5ldyBieXRlcyg2NCk7DQogICAgICAgIHVpbnQgc2lnMm9mZnNldCA9IGxlZGdlclByb29mTGVuZ3RoKzMyKyg4KzErMzIpK3NpZzEubGVuZ3RoKzY1Ow0KICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQtNjQsIDY0LCBzZXNzaW9uUHVia2V5LCAwKTsNCiAgICAgICAgDQogICAgICAgIGJ5dGVzMzIgc2Vzc2lvblB1YmtleUhhc2ggPSBzaGEyNTYoc2Vzc2lvblB1YmtleSk7DQogICAgICAgIGlmIChvcmFjbGl6ZV9yYW5kb21EU19hcmdzW3F1ZXJ5SWRdID09IHNoYTMoY29tbWl0bWVudFNsaWNlMSwgc2Vzc2lvblB1YmtleUhhc2gpKXsgLy91bm9uY2UsIG5ieXRlcyBhbmQgc2Vzc2lvbktleUhhc2ggbWF0Y2gNCiAgICAgICAgICAgIGRlbGV0ZSBvcmFjbGl6ZV9yYW5kb21EU19hcmdzW3F1ZXJ5SWRdOw0KICAgICAgICB9IGVsc2UgcmV0dXJuIGZhbHNlOw0KICAgICAgICANCiAgICAgICAgDQogICAgICAgIC8vIFN0ZXAgNTogdmFsaWRpdHkgdmVyaWZpY2F0aW9uIGZvciBzaWcxIChrZXloYXNoIGFuZCBhcmdzIHNpZ25lZCB3aXRoIHRoZSBzZXNzaW9uS2V5KQ0KICAgICAgICBieXRlcyBtZW1vcnkgdG9zaWduMSA9IG5ldyBieXRlcygzMis4KzErMzIpOw0KICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoLCAzMis4KzErMzIsIHRvc2lnbjEsIDApOw0KICAgICAgICBjaGVja29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24xKSwgc2lnMSwgc2Vzc2lvblB1YmtleSk7DQogICAgICAgIGlmIChjaGVja29rID09IGZhbHNlKSByZXR1cm4gZmFsc2U7DQogICAgICAgIA0KICAgICAgICAvLyB2ZXJpZnkgaWYgc2Vzc2lvblB1YmtleUhhc2ggd2FzIHZlcmlmaWVkIGFscmVhZHksIGlmIG5vdC4uIGxldCdzIGRvIGl0IQ0KICAgICAgICBpZiAob3JhY2xpemVfcmFuZG9tRFNfc2Vzc2lvbktleXNIYXNoVmVyaWZpZWRbc2Vzc2lvblB1YmtleUhhc2hdID09IGZhbHNlKXsNCiAgICAgICAgICAgIG9yYWNsaXplX3JhbmRvbURTX3Nlc3Npb25LZXlzSGFzaFZlcmlmaWVkW3Nlc3Npb25QdWJrZXlIYXNoXSA9IG9yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5X19zZXNzaW9uS2V5VmFsaWRpdHkocHJvb2YsIHNpZzJvZmZzZXQpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcmFuZG9tRFNfc2Vzc2lvbktleXNIYXNoVmVyaWZpZWRbc2Vzc2lvblB1YmtleUhhc2hdOw0KICAgIH0NCg0KICAgIA0KICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaGFzIGJlZW4gd3JpdHRlbiBieSBBbGV4IEJlcmVnc3phc3ppIChAYXhpYyksIHVzZSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlDQogICAgZnVuY3Rpb24gY29weUJ5dGVzKGJ5dGVzIGZyb20sIHVpbnQgZnJvbU9mZnNldCwgdWludCBsZW5ndGgsIGJ5dGVzIHRvLCB1aW50IHRvT2Zmc2V0KSBpbnRlcm5hbCByZXR1cm5zIChieXRlcykgew0KICAgICAgICB1aW50IG1pbkxlbmd0aCA9IGxlbmd0aCArIHRvT2Zmc2V0Ow0KDQogICAgICAgIGlmICh0by5sZW5ndGggPCBtaW5MZW5ndGgpIHsNCiAgICAgICAgICAgIC8vIEJ1ZmZlciB0b28gc21hbGwNCiAgICAgICAgICAgIHRocm93OyAvLyBTaG91bGQgYmUgYSBiZXR0ZXIgd2F5Pw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gTk9URTogdGhlIG9mZnNldCAzMiBpcyBhZGRlZCB0byBza2lwIHRoZSBgc2l6ZWAgZmllbGQgb2YgYm90aCBieXRlcyB2YXJpYWJsZXMNCiAgICAgICAgdWludCBpID0gMzIgKyBmcm9tT2Zmc2V0Ow0KICAgICAgICB1aW50IGogPSAzMiArIHRvT2Zmc2V0Ow0KDQogICAgICAgIHdoaWxlIChpIDwgKDMyICsgZnJvbU9mZnNldCArIGxlbmd0aCkpIHsNCiAgICAgICAgICAgIGFzc2VtYmx5IHsNCiAgICAgICAgICAgICAgICBsZXQgdG1wIDo9IG1sb2FkKGFkZChmcm9tLCBpKSkNCiAgICAgICAgICAgICAgICBtc3RvcmUoYWRkKHRvLCBqKSwgdG1wKQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaSArPSAzMjsNCiAgICAgICAgICAgIGogKz0gMzI7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdG87DQogICAgfQ0KICAgIA0KICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gaGFzIGJlZW4gd3JpdHRlbiBieSBBbGV4IEJlcmVnc3phc3ppIChAYXhpYyksIHVzZSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlDQogICAgLy8gRHVwbGljYXRlIFNvbGlkaXR5J3MgZWNyZWNvdmVyLCBidXQgY2F0Y2hpbmcgdGhlIENBTEwgcmV0dXJuIHZhbHVlDQogICAgZnVuY3Rpb24gc2FmZXJfZWNyZWNvdmVyKGJ5dGVzMzIgaGFzaCwgdWludDggdiwgYnl0ZXMzMiByLCBieXRlczMyIHMpIGludGVybmFsIHJldHVybnMgKGJvb2wsIGFkZHJlc3MpIHsNCiAgICAgICAgLy8gV2UgZG8gb3VyIG93biBtZW1vcnkgbWFuYWdlbWVudCBoZXJlLiBTb2xpZGl0eSB1c2VzIG1lbW9yeSBvZmZzZXQNCiAgICAgICAgLy8gMHg0MCB0byBzdG9yZSB0aGUgY3VycmVudCBlbmQgb2YgbWVtb3J5LiBXZSB3cml0ZSBwYXN0IGl0IChhcw0KICAgICAgICAvLyB3cml0ZXMgYXJlIG1lbW9yeSBleHRlbnNpb25zKSwgYnV0IGRvbid0IHVwZGF0ZSB0aGUgb2Zmc2V0IHNvDQogICAgICAgIC8vIFNvbGlkaXR5IHdpbGwgcmV1c2UgaXQuIFRoZSBtZW1vcnkgdXNlZCBoZXJlIGlzIG9ubHkgbmVlZGVkIGZvcg0KICAgICAgICAvLyB0aGlzIGNvbnRleHQuDQoNCiAgICAgICAgLy8gRklYTUU6IGlubGluZSBhc3NlbWJseSBjYW4ndCBhY2Nlc3MgcmV0dXJuIHZhbHVlcw0KICAgICAgICBib29sIHJldDsNCiAgICAgICAgYWRkcmVzcyBhZGRyOw0KDQogICAgICAgIGFzc2VtYmx5IHsNCiAgICAgICAgICAgIGxldCBzaXplIDo9IG1sb2FkKDB4NDApDQogICAgICAgICAgICBtc3RvcmUoc2l6ZSwgaGFzaCkNCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgMzIpLCB2KQ0KICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCA2NCksIHIpDQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDk2KSwgcykNCg0KICAgICAgICAgICAgLy8gTk9URTogd2UgY2FuIHJldXNlIHRoZSByZXF1ZXN0IG1lbW9yeSBiZWNhdXNlIHdlIGRlYWwgd2l0aA0KICAgICAgICAgICAgLy8gICAgICAgdGhlIHJldHVybiBjb2RlDQogICAgICAgICAgICByZXQgOj0gY2FsbCgzMDAwLCAxLCAwLCBzaXplLCAxMjgsIHNpemUsIDMyKQ0KICAgICAgICAgICAgYWRkciA6PSBtbG9hZChzaXplKQ0KICAgICAgICB9DQogIA0KICAgICAgICByZXR1cm4gKHJldCwgYWRkcik7DQogICAgfQ0KDQogICAgLy8gdGhlIGZvbGxvd2luZyBmdW5jdGlvbiBoYXMgYmVlbiB3cml0dGVuIGJ5IEFsZXggQmVyZWdzemFzemkgKEBheGljKSwgdXNlIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UNCiAgICBmdW5jdGlvbiBlY3JlY292ZXJ5KGJ5dGVzMzIgaGFzaCwgYnl0ZXMgc2lnKSBpbnRlcm5hbCByZXR1cm5zIChib29sLCBhZGRyZXNzKSB7DQogICAgICAgIGJ5dGVzMzIgcjsNCiAgICAgICAgYnl0ZXMzMiBzOw0KICAgICAgICB1aW50OCB2Ow0KDQogICAgICAgIGlmIChzaWcubGVuZ3RoICE9IDY1KQ0KICAgICAgICAgIHJldHVybiAoZmFsc2UsIDApOw0KDQogICAgICAgIC8vIFRoZSBzaWduYXR1cmUgZm9ybWF0IGlzIGEgY29tcGFjdCBmb3JtIG9mOg0KICAgICAgICAvLyAgIHtieXRlczMyIHJ9e2J5dGVzMzIgc317dWludDggdn0NCiAgICAgICAgLy8gQ29tcGFjdCBtZWFucywgdWludDggaXMgbm90IHBhZGRlZCB0byAzMiBieXRlcy4NCiAgICAgICAgYXNzZW1ibHkgew0KICAgICAgICAgICAgciA6PSBtbG9hZChhZGQoc2lnLCAzMikpDQogICAgICAgICAgICBzIDo9IG1sb2FkKGFkZChzaWcsIDY0KSkNCg0KICAgICAgICAgICAgLy8gSGVyZSB3ZSBhcmUgbG9hZGluZyB0aGUgbGFzdCAzMiBieXRlcy4gV2UgZXhwbG9pdCB0aGUgZmFjdCB0aGF0DQogICAgICAgICAgICAvLyAnbWxvYWQnIHdpbGwgcGFkIHdpdGggemVyb2VzIGlmIHdlIG92ZXJyZWFkLg0KICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gJ21sb2FkOCcgdG8gZG8gdGhpcywgYnV0IHRoYXQgd291bGQgYmUgbmljZXIuDQogICAgICAgICAgICB2IDo9IGJ5dGUoMCwgbWxvYWQoYWRkKHNpZywgOTYpKSkNCg0KICAgICAgICAgICAgLy8gQWx0ZXJuYXRpdmUgc29sdXRpb246DQogICAgICAgICAgICAvLyAnYnl0ZScgaXMgbm90IHdvcmtpbmcgZHVlIHRvIHRoZSBTb2xpZGl0eSBwYXJzZXIsIHNvIGxldHMNCiAgICAgICAgICAgIC8vIHVzZSB0aGUgc2Vjb25kIGJlc3Qgb3B0aW9uLCAnYW5kJw0KICAgICAgICAgICAgLy8gdiA6PSBhbmQobWxvYWQoYWRkKHNpZywgNjUpKSwgMjU1KQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8gYWxiZWl0IG5vbi10cmFuc2FjdGlvbmFsIHNpZ25hdHVyZXMgYXJlIG5vdCBzcGVjaWZpZWQgYnkgdGhlIFlQLCBvbmUgd291bGQgZXhwZWN0IGl0DQogICAgICAgIC8vIHRvIG1hdGNoIHRoZSBZUCByYW5nZSBvZiBbMjcsIDI4XQ0KICAgICAgICAvLw0KICAgICAgICAvLyBnZXRoIHVzZXMgWzAsIDFdIGFuZCBzb21lIGNsaWVudHMgaGF2ZSBmb2xsb3dlZC4gVGhpcyBtaWdodCBjaGFuZ2UsIHNlZToNCiAgICAgICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9pc3N1ZXMvMjA1Mw0KICAgICAgICBpZiAodiA8IDI3KQ0KICAgICAgICAgIHYgKz0gMjc7DQoNCiAgICAgICAgaWYgKHYgIT0gMjcgJiYgdiAhPSAyOCkNCiAgICAgICAgICAgIHJldHVybiAoZmFsc2UsIDApOw0KDQogICAgICAgIHJldHVybiBzYWZlcl9lY3JlY292ZXIoaGFzaCwgdiwgciwgcyk7DQogICAgfQ0KICAgICAgICANCn0NCi8vIDwvT1JBQ0xJWkVfQVBJPg0KDQovLy8gbWF0aC5zb2wgLS0gbWl4aW4gZm9yIGlubGluZSBudW1lcmljYWwgd2l6YXJkcnkNCg0KLy8gQ29weXJpZ2h0IChDKSAyMDE1LCAyMDE2LCAyMDE3ICBEYXBwSHViLCBMTEMNCg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIikuDQovLyBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoNCi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCAoZXhwcmVzcyBvciBpbXBsaWVkKS4NCg0KcHJhZ21hIHNvbGlkaXR5IF4wLjQuMTA7DQoNCmNvbnRyYWN0IERTTWF0aCB7DQogICAgDQogICAgLyoNCiAgICBzdGFuZGFyZCB1aW50MjU2IGZ1bmN0aW9ucw0KICAgICAqLw0KDQogICAgZnVuY3Rpb24gYWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsNCiAgICAgICAgYXNzZXJ0KCh6ID0geCArIHkpID49IHgpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHN1Yih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7DQogICAgICAgIGFzc2VydCgoeiA9IHggLSB5KSA8PSB4KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtdWwodWludDI1NiB4LCB1aW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQyNTYgeikgew0KICAgICAgICBhc3NlcnQoKHogPSB4ICogeSkgPj0geCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZGl2KHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsNCiAgICAgICAgeiA9IHggLyB5Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG1pbih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7DQogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsNCiAgICB9DQogICAgZnVuY3Rpb24gbWF4KHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsNCiAgICAgICAgcmV0dXJuIHggPj0geSA/IHggOiB5Ow0KICAgIH0NCg0KICAgIC8qDQogICAgdWludDEyOCBmdW5jdGlvbnMgKGggaXMgZm9yIGhhbGYpDQogICAgICovDQoNCg0KICAgIGZ1bmN0aW9uIGhhZGQodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgew0KICAgICAgICBhc3NlcnQoKHogPSB4ICsgeSkgPj0geCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaHN1Yih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIGFzc2VydCgoeiA9IHggLSB5KSA8PSB4KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBobXVsKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsNCiAgICAgICAgYXNzZXJ0KCh6ID0geCAqIHkpID49IHgpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGhkaXYodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgew0KICAgICAgICB6ID0geCAvIHk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaG1pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsNCiAgICB9DQogICAgZnVuY3Rpb24gaG1heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsNCiAgICB9DQoNCg0KICAgIC8qDQogICAgaW50MjU2IGZ1bmN0aW9ucw0KICAgICAqLw0KDQogICAgZnVuY3Rpb24gaW1pbihpbnQyNTYgeCwgaW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKGludDI1NiB6KSB7DQogICAgICAgIHJldHVybiB4IDw9IHkgPyB4IDogeTsNCiAgICB9DQogICAgZnVuY3Rpb24gaW1heChpbnQyNTYgeCwgaW50MjU2IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKGludDI1NiB6KSB7DQogICAgICAgIHJldHVybiB4ID49IHkgPyB4IDogeTsNCiAgICB9DQoNCiAgICAvKg0KICAgIFdBRCBtYXRoDQogICAgICovDQoNCiAgICB1aW50MTI4IGNvbnN0YW50IFdBRCA9IDEwICoqIDE4Ow0KDQogICAgZnVuY3Rpb24gd2FkZCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaGFkZCh4LCB5KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB3c3ViKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7DQogICAgICAgIHJldHVybiBoc3ViKHgsIHkpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHdtdWwodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgew0KICAgICAgICB6ID0gY2FzdCgodWludDI1Nih4KSAqIHkgKyBXQUQgLyAyKSAvIFdBRCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gd2Rpdih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogV0FEICsgeSAvIDIpIC8geSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gd21pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaG1pbih4LCB5KTsNCiAgICB9DQogICAgZnVuY3Rpb24gd21heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaG1heCh4LCB5KTsNCiAgICB9DQoNCiAgICAvKg0KICAgIFJBWSBtYXRoDQogICAgICovDQoNCiAgICB1aW50MTI4IGNvbnN0YW50IFJBWSA9IDEwICoqIDI3Ow0KDQogICAgZnVuY3Rpb24gcmFkZCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaGFkZCh4LCB5KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByc3ViKHVpbnQxMjggeCwgdWludDEyOCB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4KSB7DQogICAgICAgIHJldHVybiBoc3ViKHgsIHkpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJtdWwodWludDEyOCB4LCB1aW50MTI4IHkpIGNvbnN0YW50IGludGVybmFsIHJldHVybnMgKHVpbnQxMjggeikgew0KICAgICAgICB6ID0gY2FzdCgodWludDI1Nih4KSAqIHkgKyBSQVkgLyAyKSAvIFJBWSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmRpdih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIHogPSBjYXN0KCh1aW50MjU2KHgpICogUkFZICsgeSAvIDIpIC8geSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcnBvdyh1aW50MTI4IHgsIHVpbnQ2NCBuKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MTI4IHopIHsNCiAgICAgICAgLy8gVGhpcyBmYW1vdXMgYWxnb3JpdGhtIGlzIGNhbGxlZCAiZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmciDQogICAgICAgIC8vIGFuZCBjYWxjdWxhdGVzIHhebiB3aXRoIHggYXMgZml4ZWQtcG9pbnQgYW5kIG4gYXMgcmVndWxhciB1bnNpZ25lZC4NCiAgICAgICAgLy8NCiAgICAgICAgLy8gSXQncyBPKGxvZyBuKSwgaW5zdGVhZCBvZiBPKG4pIGZvciBuYWl2ZSByZXBlYXRlZCBtdWx0aXBsaWNhdGlvbi4NCiAgICAgICAgLy8NCiAgICAgICAgLy8gVGhlc2UgZmFjdHMgYXJlIHdoeSBpdCB3b3JrczoNCiAgICAgICAgLy8NCiAgICAgICAgLy8gIElmIG4gaXMgZXZlbiwgdGhlbiB4Xm4gPSAoeF4yKV4obi8yKS4NCiAgICAgICAgLy8gIElmIG4gaXMgb2RkLCAgdGhlbiB4Xm4gPSB4ICogeF4obi0xKSwNCiAgICAgICAgLy8gICBhbmQgYXBwbHlpbmcgdGhlIGVxdWF0aW9uIGZvciBldmVuIHggZ2l2ZXMNCiAgICAgICAgLy8gICAgeF5uID0geCAqICh4XjIpXigobi0xKSAvIDIpLg0KICAgICAgICAvLw0KICAgICAgICAvLyAgQWxzbywgRVZNIGRpdmlzaW9uIGlzIGZsb29yaW5nIGFuZA0KICAgICAgICAvLyAgICBmbG9vclsobi0xKSAvIDJdID0gZmxvb3JbbiAvIDJdLg0KDQogICAgICAgIHogPSBuICUgMiAhPSAwID8geCA6IFJBWTsNCg0KICAgICAgICBmb3IgKG4gLz0gMjsgbiAhPSAwOyBuIC89IDIpIHsNCiAgICAgICAgICAgIHggPSBybXVsKHgsIHgpOw0KDQogICAgICAgICAgICBpZiAobiAlIDIgIT0gMCkgew0KICAgICAgICAgICAgICAgIHogPSBybXVsKHosIHgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcm1pbih1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaG1pbih4LCB5KTsNCiAgICB9DQogICAgZnVuY3Rpb24gcm1heCh1aW50MTI4IHgsIHVpbnQxMjggeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCkgew0KICAgICAgICByZXR1cm4gaG1heCh4LCB5KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjYXN0KHVpbnQyNTYgeCkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDEyOCB6KSB7DQogICAgICAgIGFzc2VydCgoeiA9IHVpbnQxMjgoeCkpID09IHgpOw0KICAgIH0NCg0KfQ0KDQpjb250cmFjdCBMZWRnZXJQcm9vZlZlcmlmeUkgew0KICAgIGZ1bmN0aW9uIGV4dGVybmFsX29yYWNsaXplX3JhbmRvbURTX3NldENvbW1pdG1lbnQoYnl0ZXMzMiBxdWVyeUlkLCBieXRlczMyIGNvbW1pdG1lbnQpIHB1YmxpYzsNCiAgICBmdW5jdGlvbiBleHRlcm5hbF9vcmFjbGl6ZV9yYW5kb21EU19wcm9vZlZlcmlmeShieXRlcyBwcm9vZiwgYnl0ZXMzMiBxdWVyeUlkLCBieXRlcyByZXN1bHQsIHN0cmluZyBjb250ZXh0X25hbWUpICBwdWJsaWMgcmV0dXJucyAoYm9vbCk7DQp9DQoNCmNvbnRyYWN0IE93bmVkIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCiAgICANCiAgICBtb2RpZmllciBvbmx5T3duZXIgew0KICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBvd25lcik7DQogICAgICAgIF87DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIE93bmVkKCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBvcmFjbGl6ZVNldHRpbmdzIGlzIE93bmVkIHsNCgl1aW50IGNvbnN0YW50IE9SQUNMSVpFX1BFUl9TUElOX0dBU19MSU1JVCA9IDYxMDA7DQoJdWludCBjb25zdGFudCBPUkFDTElaRV9CQVNFX0dBU19MSU1JVCA9IDIwMDAwMDsNCgl1aW50IHNhZmVHYXMgPSA5MDAwOw0KCQ0KCWV2ZW50IG5ld0dhc0xpbWl0KHVpbnQgX2dhc0xpbWl0KTsNCg0KCWZ1bmN0aW9uIHNldFNhZmVHYXModWludCBfZ2FzKSANCgkJb25seU93bmVyIA0KCXsNCgkgICAgYXNzZXJ0KE9SQUNMSVpFX0JBU0VfR0FTX0xJTUlUICsgc2FmZUdhcyA+PSBPUkFDTElaRV9CQVNFX0dBU19MSU1JVCk7DQoJICAgIGFzc2VydChzYWZlR2FzIDw9IDI1MDAwKTsNCgkJc2FmZUdhcyA9IF9nYXM7DQoJCW5ld0dhc0xpbWl0KF9nYXMpOw0KCX0JDQp9DQoNCmNvbnRyYWN0IEhvdXNlTWFuYWdlZCBpcyBPd25lZCB7DQogICAgDQogICAgYWRkcmVzcyBwdWJsaWMgaG91c2VBZGRyZXNzOw0KICAgIGJvb2wgcHVibGljIGlzU3RvcHBlZDsNCg0KICAgIGV2ZW50IExPR19Db250cmFjdFN0b3BwZWQoKTsNCiAgICBldmVudCBMT0dfQ29udHJhY3RSZXN1bWVkKCk7DQogICAgZXZlbnQgTE9HX093bmVyQWRkcmVzc0NoYW5nZWQoYWRkcmVzcyBvbGRBZGRyLCBhZGRyZXNzIG5ld093bmVyQWRkcmVzcyk7DQogICAgZXZlbnQgTE9HX0hvdXNlQWRkcmVzc0NoYW5nZWQoYWRkcmVzcyBvbGRBZGRyLCBhZGRyZXNzIG5ld0hvdXNlQWRkcmVzcyk7DQogICAgDQogICAgbW9kaWZpZXIgb25seUlmTm90U3RvcHBlZCB7DQogICAgICAgIGFzc2VydCghaXNTdG9wcGVkKTsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5SWZTdG9wcGVkIHsNCiAgICAgICAgYXNzZXJ0KGlzU3RvcHBlZCk7DQogICAgICAgIF87DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIEhvdXNlTWFuYWdlZCgpIHsNCiAgICAgICAgaG91c2VBZGRyZXNzID0gbXNnLnNlbmRlcjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdG9wX29yX3Jlc3VtZV9Db250cmFjdChib29sIF9pc1N0b3BwZWQpDQogICAgICAgIG9ubHlPd25lciB7DQoNCiAgICAgICAgaXNTdG9wcGVkID0gX2lzU3RvcHBlZDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjaGFuZ2VIb3VzZV9hbmRfT3duZXJfQWRkcmVzc2VzKGFkZHJlc3MgbmV3SG91c2UsIGFkZHJlc3MgbmV3T3duZXIpDQogICAgICAgIG9ubHlPd25lciB7DQoNCiAgICAgICAgYXNzZXJ0KG5ld0hvdXNlICE9IGFkZHJlc3MoMHgwKSk7DQogICAgICAgIGFzc2VydChuZXdPd25lciAhPSBhZGRyZXNzKDB4MCkpOw0KICAgICAgICANCiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsNCiAgICAgICAgTE9HX093bmVyQWRkcmVzc0NoYW5nZWQob3duZXIsIG5ld093bmVyKTsNCiAgICAgICAgDQogICAgICAgIGhvdXNlQWRkcmVzcyA9IG5ld0hvdXNlOw0KICAgICAgICBMT0dfSG91c2VBZGRyZXNzQ2hhbmdlZChob3VzZUFkZHJlc3MsIG5ld0hvdXNlKTsNCiAgICB9DQoNCn0NCg0KY29udHJhY3QgdXNpbmdJbnZlc3RvcnNNb2R1bGUgaXMgSG91c2VNYW5hZ2VkLCBvcmFjbGl6ZVNldHRpbmdzIHsNCiAgICANCiAgICB1aW50IGNvbnN0YW50IE1BWF9JTlZFU1RPUlMgPSA1OyAvL21heGltdW0gbnVtYmVyIG9mIGludmVzdG9ycw0KICAgIHVpbnQgY29uc3RhbnQgZGl2ZXN0RmVlID0gNTA7IC8vZGl2ZXN0IGZlZSBwZXJjZW50YWdlICgxMDAwMCA9IDEwMCUpDQoNCiAgICAgc3RydWN0IEludmVzdG9yIHsNCiAgICAgICAgYWRkcmVzcyBpbnZlc3RvckFkZHJlc3M7DQogICAgICAgIHVpbnQgYW1vdW50SW52ZXN0ZWQ7DQogICAgICAgIGJvb2wgdm90ZWRGb3JFbWVyZ2VuY3lXaXRoZHJhd2FsOw0KICAgIH0NCiAgICANCiAgICAvL1N0YXJ0aW5nIGF0IDENCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGludmVzdG9ySURzOw0KICAgIG1hcHBpbmcodWludCA9PiBJbnZlc3RvcikgcHVibGljIGludmVzdG9yczsNCiAgICB1aW50IHB1YmxpYyBudW1JbnZlc3RvcnMgPSAwOw0KDQogICAgdWludCBwdWJsaWMgaW52ZXN0ZWQgPSAwOw0KICAgIA0KICAgIHVpbnQgcHVibGljIGludmVzdG9yc1Byb2ZpdCA9IDA7DQogICAgdWludCBwdWJsaWMgaW52ZXN0b3JzTG9zc2VzID0gMDsNCiAgICBib29sIHByb2ZpdERpc3RyaWJ1dGVkOw0KICAgIA0KICAgIGV2ZW50IExPR19JbnZlc3RvckVudHJhbmNlKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQgYW1vdW50KTsNCiAgICBldmVudCBMT0dfSW52ZXN0b3JDYXBpdGFsVXBkYXRlKGFkZHJlc3MgaW52ZXN0b3IsIGludCBhbW91bnQpOw0KICAgIGV2ZW50IExPR19JbnZlc3RvckV4aXQoYWRkcmVzcyBpbnZlc3RvciwgdWludCBhbW91bnQpOw0KICAgIGV2ZW50IExPR19FbWVyZ2VuY3lBdXRvU3RvcCgpOw0KICAgIA0KICAgIGV2ZW50IExPR19aZXJvU2VuZCgpOw0KICAgIGV2ZW50IExPR19WYWx1ZUlzVG9vQmlnKCk7DQogICAgZXZlbnQgTE9HX0ZhaWxlZFNlbmQoYWRkcmVzcyBhZGRyLCB1aW50IHZhbHVlKTsNCiAgICBldmVudCBMT0dfU3VjY2Vzc2Z1bFNlbmQoYWRkcmVzcyBhZGRyLCB1aW50IHZhbHVlKTsNCiAgICANCg0KDQogICAgbW9kaWZpZXIgb25seU1vcmVUaGFuTWluSW52ZXN0bWVudCB7DQogICAgICAgIGFzc2VydChtc2cudmFsdWUgPiBnZXRNaW5JbnZlc3RtZW50KCkpOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlNb3JlVGhhblplcm8gew0KICAgICAgICBhc3NlcnQobXNnLnZhbHVlICE9IDApOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIA0KICAgIG1vZGlmaWVyIG9ubHlJbnZlc3RvcnMgew0KICAgICAgICBhc3NlcnQoaW52ZXN0b3JJRHNbbXNnLnNlbmRlcl0gIT0gMCk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgbW9kaWZpZXIgb25seU5vdEludmVzdG9ycyB7DQogICAgICAgIGFzc2VydChpbnZlc3RvcklEc1ttc2cuc2VuZGVyXSA9PSAwKTsNCiAgICAgICAgXzsNCiAgICB9DQogICAgDQogICAgbW9kaWZpZXIgaW52ZXN0b3JzSW52YXJpYW50IHsNCiAgICAgICAgXzsNCiAgICAgICAgYXNzZXJ0KG51bUludmVzdG9ycyA8PSBNQVhfSU5WRVNUT1JTKTsNCiAgICB9DQogICAgDQogICAgbW9kaWZpZXIgb25seUlmUHJvZml0Tm90RGlzdHJpYnV0ZWQgew0KICAgICAgICBpZiAoIXByb2ZpdERpc3RyaWJ1dGVkKSB7DQogICAgICAgICAgICBfOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIGdldEJhbmtyb2xsKCkNCiAgICAgICAgY29uc3RhbnQNCiAgICAgICAgcmV0dXJucyh1aW50KSB7DQoNCiAgICAgICAgaWYgKChpbnZlc3RlZCA8IGludmVzdG9yc1Byb2ZpdCkgfHwNCiAgICAgICAgICAgIChpbnZlc3RlZCArIGludmVzdG9yc1Byb2ZpdCA8IGludmVzdGVkKSB8fA0KICAgICAgICAgICAgKGludmVzdGVkICsgaW52ZXN0b3JzUHJvZml0IDwgaW52ZXN0b3JzTG9zc2VzKSkgew0KICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gaW52ZXN0ZWQgKyBpbnZlc3RvcnNQcm9maXQgLSBpbnZlc3RvcnNMb3NzZXM7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRNaW5JbnZlc3RtZW50KCkNCiAgICAgICAgY29uc3RhbnQNCiAgICAgICAgcmV0dXJucyh1aW50KSB7DQoNCiAgICAgICAgaWYgKG51bUludmVzdG9ycyA9PSBNQVhfSU5WRVNUT1JTKSB7DQogICAgICAgICAgICB1aW50IGludmVzdG9ySUQgPSBzZWFyY2hTbWFsbGVzdEludmVzdG9yKCk7DQogICAgICAgICAgICByZXR1cm4gZ2V0QmFsYW5jZShpbnZlc3RvcnNbaW52ZXN0b3JJRF0uaW52ZXN0b3JBZGRyZXNzKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0TG9zc2VzU2hhcmUoYWRkcmVzcyBjdXJyZW50SW52ZXN0b3IpDQogICAgICAgIGNvbnN0YW50DQogICAgICAgIHJldHVybnMgKHVpbnQpIHsNCg0KICAgICAgICByZXR1cm4gaW52ZXN0b3JzW2ludmVzdG9ySURzW2N1cnJlbnRJbnZlc3Rvcl1dLmFtb3VudEludmVzdGVkICogKGludmVzdG9yc0xvc3NlcykgLyBpbnZlc3RlZDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRQcm9maXRTaGFyZShhZGRyZXNzIGN1cnJlbnRJbnZlc3RvcikNCiAgICAgICAgY29uc3RhbnQNCiAgICAgICAgcmV0dXJucyAodWludCkgew0KDQogICAgICAgIHJldHVybiBpbnZlc3RvcnNbaW52ZXN0b3JJRHNbY3VycmVudEludmVzdG9yXV0uYW1vdW50SW52ZXN0ZWQgKiAoaW52ZXN0b3JzUHJvZml0KSAvIGludmVzdGVkOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldEJhbGFuY2UoYWRkcmVzcyBjdXJyZW50SW52ZXN0b3IpDQogICAgICAgIGNvbnN0YW50DQogICAgICAgIHJldHVybnMgKHVpbnQpIHsNCg0KICAgICAgICB1aW50IGludmVzdGVkID0gaW52ZXN0b3JzW2ludmVzdG9ySURzW2N1cnJlbnRJbnZlc3Rvcl1dLmFtb3VudEludmVzdGVkOw0KICAgICAgICB1aW50IHByb2ZpdCA9IGdldFByb2ZpdFNoYXJlKGN1cnJlbnRJbnZlc3Rvcik7DQogICAgICAgIHVpbnQgbG9zc2VzID0gZ2V0TG9zc2VzU2hhcmUoY3VycmVudEludmVzdG9yKTsNCg0KICAgICAgICBpZiAoKGludmVzdGVkICsgcHJvZml0IDwgcHJvZml0KSB8fA0KICAgICAgICAgICAgKGludmVzdGVkICsgcHJvZml0IDwgaW52ZXN0ZWQpIHx8DQogICAgICAgICAgICAoaW52ZXN0ZWQgKyBwcm9maXQgPCBsb3NzZXMpKQ0KICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIHJldHVybiBpbnZlc3RlZCArIHByb2ZpdCAtIGxvc3NlczsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzZWFyY2hTbWFsbGVzdEludmVzdG9yKCkNCiAgICAgICAgY29uc3RhbnQNCiAgICAgICAgcmV0dXJucyh1aW50KSB7DQoNCiAgICAgICAgdWludCBpbnZlc3RvcklEID0gMTsNCiAgICAgICAgZm9yICh1aW50IGkgPSAxOyBpIDw9IG51bUludmVzdG9yczsgaSsrKSB7DQogICAgICAgICAgICBpZiAoZ2V0QmFsYW5jZShpbnZlc3RvcnNbaV0uaW52ZXN0b3JBZGRyZXNzKSA8IGdldEJhbGFuY2UoaW52ZXN0b3JzW2ludmVzdG9ySURdLmludmVzdG9yQWRkcmVzcykpIHsNCiAgICAgICAgICAgICAgICBpbnZlc3RvcklEID0gaTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBpbnZlc3RvcklEOw0KICAgIH0NCg0KICAgIA0KICAgIGZ1bmN0aW9uIGFkZEludmVzdG9yQXRJRCh1aW50IGlkKQ0KICAgICAgICBwcml2YXRlIHsNCg0KICAgICAgICBpbnZlc3RvcklEc1ttc2cuc2VuZGVyXSA9IGlkOw0KICAgICAgICBpbnZlc3RvcnNbaWRdLmludmVzdG9yQWRkcmVzcyA9IG1zZy5zZW5kZXI7DQogICAgICAgIGludmVzdG9yc1tpZF0uYW1vdW50SW52ZXN0ZWQgPSBtc2cudmFsdWU7DQogICAgICAgIGludmVzdGVkICs9IG1zZy52YWx1ZTsNCg0KICAgICAgICBMT0dfSW52ZXN0b3JFbnRyYW5jZShtc2cuc2VuZGVyLCBtc2cudmFsdWUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHByb2ZpdERpc3RyaWJ1dGlvbigpDQogICAgICAgIHByaXZhdGUNCiAgICAgICAgb25seUlmUHJvZml0Tm90RGlzdHJpYnV0ZWQgew0KDQogICAgICAgIHVpbnQgY29weUludmVzdGVkOw0KDQogICAgICAgIGZvciAodWludCBpID0gMTsgaSA8PSBudW1JbnZlc3RvcnM7IGkrKykgew0KICAgICAgICAgICAgYWRkcmVzcyBjdXJyZW50SW52ZXN0b3IgPSBpbnZlc3RvcnNbaV0uaW52ZXN0b3JBZGRyZXNzOw0KICAgICAgICAgICAgdWludCBwcm9maXRPZkludmVzdG9yID0gZ2V0UHJvZml0U2hhcmUoY3VycmVudEludmVzdG9yKTsNCiAgICAgICAgICAgIHVpbnQgbG9zc2VzT2ZJbnZlc3RvciA9IGdldExvc3Nlc1NoYXJlKGN1cnJlbnRJbnZlc3Rvcik7DQogICAgICAgICAgICAvL0NoZWNrIGZvciBvdmVyZmxvdyBhbmQgdW5kZXJmbG93DQogICAgICAgICAgICBpZiAoKGludmVzdG9yc1tpXS5hbW91bnRJbnZlc3RlZCArIHByb2ZpdE9mSW52ZXN0b3IgPj0gaW52ZXN0b3JzW2ldLmFtb3VudEludmVzdGVkKSAmJg0KICAgICAgICAgICAgICAgIChpbnZlc3RvcnNbaV0uYW1vdW50SW52ZXN0ZWQgKyBwcm9maXRPZkludmVzdG9yID49IGxvc3Nlc09mSW52ZXN0b3IpKSAgew0KICAgICAgICAgICAgICAgIGludmVzdG9yc1tpXS5hbW91bnRJbnZlc3RlZCArPSBwcm9maXRPZkludmVzdG9yIC0gbG9zc2VzT2ZJbnZlc3RvcjsNCiAgICAgICAgICAgICAgICBMT0dfSW52ZXN0b3JDYXBpdGFsVXBkYXRlKGN1cnJlbnRJbnZlc3RvciwgKGludCkgKHByb2ZpdE9mSW52ZXN0b3IgLSBsb3NzZXNPZkludmVzdG9yKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICBpc1N0b3BwZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIExPR19FbWVyZ2VuY3lBdXRvU3RvcCgpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoY29weUludmVzdGVkICsgaW52ZXN0b3JzW2ldLmFtb3VudEludmVzdGVkID49IGNvcHlJbnZlc3RlZCkNCiAgICAgICAgICAgICAgICBjb3B5SW52ZXN0ZWQgKz0gaW52ZXN0b3JzW2ldLmFtb3VudEludmVzdGVkOw0KICAgICAgICB9DQoNCiAgICAgICAgZGVsZXRlIGludmVzdG9yc1Byb2ZpdDsNCiAgICAgICAgZGVsZXRlIGludmVzdG9yc0xvc3NlczsNCiAgICAgICAgaW52ZXN0ZWQgPSBjb3B5SW52ZXN0ZWQ7DQoNCiAgICAgICAgcHJvZml0RGlzdHJpYnV0ZWQgPSB0cnVlOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBpbmNyZWFzZUludmVzdG1lbnQoKQ0KICAgICAgICBwYXlhYmxlDQogICAgICAgIG9ubHlJZk5vdFN0b3BwZWQNCiAgICAgICAgb25seU1vcmVUaGFuWmVybw0KICAgICAgICBvbmx5SW52ZXN0b3JzICB7DQoNCiAgICAgICAgcHJvZml0RGlzdHJpYnV0aW9uKCk7DQogICAgICAgIGludmVzdG9yc1tpbnZlc3RvcklEc1ttc2cuc2VuZGVyXV0uYW1vdW50SW52ZXN0ZWQgKz0gbXNnLnZhbHVlOw0KICAgICAgICBpbnZlc3RlZCArPSBtc2cudmFsdWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbmV3SW52ZXN0b3IoKQ0KICAgICAgICBwYXlhYmxlDQogICAgICAgIG9ubHlJZk5vdFN0b3BwZWQNCiAgICAgICAgb25seU1vcmVUaGFuWmVybw0KICAgICAgICBvbmx5Tm90SW52ZXN0b3JzDQogICAgICAgIG9ubHlNb3JlVGhhbk1pbkludmVzdG1lbnQNCiAgICAgICAgaW52ZXN0b3JzSW52YXJpYW50IHsNCg0KICAgICAgICBwcm9maXREaXN0cmlidXRpb24oKTsNCg0KICAgICAgICBpZiAobnVtSW52ZXN0b3JzID09IE1BWF9JTlZFU1RPUlMpIHsNCiAgICAgICAgICAgIHVpbnQgc21hbGxlc3RJbnZlc3RvcklEID0gc2VhcmNoU21hbGxlc3RJbnZlc3RvcigpOw0KICAgICAgICAgICAgZGl2ZXN0KGludmVzdG9yc1tzbWFsbGVzdEludmVzdG9ySURdLmludmVzdG9yQWRkcmVzcyk7DQogICAgICAgIH0NCg0KICAgICAgICBudW1JbnZlc3RvcnMrKzsNCiAgICAgICAgYWRkSW52ZXN0b3JBdElEKG51bUludmVzdG9ycyk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZGl2ZXN0KCkNCiAgICAgICAgb25seUludmVzdG9ycyB7DQoNCiAgICAgICAgZGl2ZXN0KG1zZy5zZW5kZXIpOw0KICAgIH0NCg0KDQogICAgZnVuY3Rpb24gZGl2ZXN0KGFkZHJlc3MgY3VycmVudEludmVzdG9yKQ0KICAgICAgICBpbnRlcm5hbA0KICAgICAgICBpbnZlc3RvcnNJbnZhcmlhbnQgew0KDQogICAgICAgIHByb2ZpdERpc3RyaWJ1dGlvbigpOw0KICAgICAgICB1aW50IGN1cnJlbnRJRCA9IGludmVzdG9ySURzW2N1cnJlbnRJbnZlc3Rvcl07DQogICAgICAgIHVpbnQgYW1vdW50VG9SZXR1cm4gPSBnZXRCYWxhbmNlKGN1cnJlbnRJbnZlc3Rvcik7DQoNCiAgICAgICAgaWYgKChpbnZlc3RlZCA+PSBpbnZlc3RvcnNbY3VycmVudElEXS5hbW91bnRJbnZlc3RlZCkpIHsNCiAgICAgICAgICAgIGludmVzdGVkIC09IGludmVzdG9yc1tjdXJyZW50SURdLmFtb3VudEludmVzdGVkOw0KICAgICAgICAgICAgdWludCBkaXZlc3RGZWVBbW91bnQgPSAgKGFtb3VudFRvUmV0dXJuKmRpdmVzdEZlZSkvMTAwMDA7DQogICAgICAgICAgICBhbW91bnRUb1JldHVybiAtPSBkaXZlc3RGZWVBbW91bnQ7DQoNCiAgICAgICAgICAgIGRlbGV0ZSBpbnZlc3RvcnNbY3VycmVudElEXTsNCiAgICAgICAgICAgIGRlbGV0ZSBpbnZlc3RvcklEc1tjdXJyZW50SW52ZXN0b3JdOw0KDQogICAgICAgICAgICAvL1Jlb3JkZXIgaW52ZXN0b3JzDQogICAgICAgICAgICBpZiAoY3VycmVudElEICE9IG51bUludmVzdG9ycykgew0KICAgICAgICAgICAgICAgIC8vIEdldCBsYXN0IGludmVzdG9yDQogICAgICAgICAgICAgICAgSW52ZXN0b3IgbGFzdEludmVzdG9yID0gaW52ZXN0b3JzW251bUludmVzdG9yc107DQogICAgICAgICAgICAgICAgLy9TZXQgbGFzdCBpbnZlc3RvciBJRCB0byBpbnZlc3RvcklEIG9mIGRpdmVzdGluZyBhY2NvdW50DQogICAgICAgICAgICAgICAgaW52ZXN0b3JJRHNbbGFzdEludmVzdG9yLmludmVzdG9yQWRkcmVzc10gPSBjdXJyZW50SUQ7DQogICAgICAgICAgICAgICAgLy9Db3B5IGludmVzdG9yIGF0IHRoZSBuZXcgcG9zaXRpb24gaW4gdGhlIG1hcHBpbmcNCiAgICAgICAgICAgICAgICBpbnZlc3RvcnNbY3VycmVudElEXSA9IGxhc3RJbnZlc3RvcjsNCiAgICAgICAgICAgICAgICAvL0RlbGV0ZSBvbGQgcG9zaXRpb24gaW4gdGhlIG1hcHBwaW5nDQogICAgICAgICAgICAgICAgZGVsZXRlIGludmVzdG9yc1tudW1JbnZlc3RvcnNdOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBudW1JbnZlc3RvcnMtLTsNCiAgICAgICAgICAgIHNhZmVTZW5kKGN1cnJlbnRJbnZlc3RvciwgYW1vdW50VG9SZXR1cm4pOw0KICAgICAgICAgICAgc2FmZVNlbmQoaG91c2VBZGRyZXNzLCBkaXZlc3RGZWVBbW91bnQpOw0KICAgICAgICAgICAgTE9HX0ludmVzdG9yRXhpdChjdXJyZW50SW52ZXN0b3IsIGFtb3VudFRvUmV0dXJuKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGlzU3RvcHBlZCA9IHRydWU7DQogICAgICAgICAgICBMT0dfRW1lcmdlbmN5QXV0b1N0b3AoKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBmb3JjZURpdmVzdE9mQWxsSW52ZXN0b3JzKCkNCiAgICAgICAgb25seU93bmVyIHsNCiAgICAgICAgICAgIA0KICAgICAgICB1aW50IGNvcHlOdW1JbnZlc3RvcnMgPSBudW1JbnZlc3RvcnM7DQogICAgICAgIGZvciAodWludCBpID0gMTsgaSA8PSBjb3B5TnVtSW52ZXN0b3JzOyBpKyspIHsNCiAgICAgICAgICAgIGRpdmVzdChpbnZlc3RvcnNbMV0uaW52ZXN0b3JBZGRyZXNzKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBzYWZlU2VuZChhZGRyZXNzIGFkZHIsIHVpbnQgdmFsdWUpDQogICAgICAgIGludGVybmFsIHsNCg0KICAgICAgICBpZiAodmFsdWUgPT0gMCkgew0KICAgICAgICAgICAgTE9HX1plcm9TZW5kKCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAodGhpcy5iYWxhbmNlIDwgdmFsdWUpIHsNCiAgICAgICAgICAgIExPR19WYWx1ZUlzVG9vQmlnKCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIShhZGRyLmNhbGwuZ2FzKHNhZmVHYXMpLnZhbHVlKHZhbHVlKSgpKSkgew0KICAgICAgICAgICAgTE9HX0ZhaWxlZFNlbmQoYWRkciwgdmFsdWUpOw0KICAgICAgICAgICAgaWYgKGFkZHIgIT0gaG91c2VBZGRyZXNzKSB7DQogICAgICAgICAgICAgICAgLy9Gb3J3YXJkIHRvIGhvdXNlIGFkZHJlc3MgYWxsIGNoYW5nZQ0KICAgICAgICAgICAgICAgIGlmICghKGhvdXNlQWRkcmVzcy5jYWxsLmdhcyhzYWZlR2FzKS52YWx1ZSh2YWx1ZSkoKSkpIExPR19GYWlsZWRTZW5kKGhvdXNlQWRkcmVzcywgdmFsdWUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgTE9HX1N1Y2Nlc3NmdWxTZW5kKGFkZHIsdmFsdWUpOw0KICAgIH0NCn0NCg0KY29udHJhY3QgRW1lcmdlbmN5V2l0aGRyYXdhbE1vZHVsZSBpcyB1c2luZ0ludmVzdG9yc01vZHVsZSB7DQogICAgdWludCBjb25zdGFudCBFTUVSR0VOQ1lfV0lUSERSQVdBTF9SQVRJTyA9IDgwOyAvL3JhdGlvIHBlcmNlbnRhZ2UgKDEwMCA9IDEwMCUpDQogICAgdWludCBjb25zdGFudCBFTUVSR0VOQ1lfVElNRU9VVCA9IDMgZGF5czsNCiAgICANCiAgICBzdHJ1Y3QgV2l0aGRyYXdhbFByb3Bvc2FsIHsNCiAgICAgICAgYWRkcmVzcyB0b0FkZHJlc3M7DQogICAgICAgIHVpbnQgYXRUaW1lOw0KICAgIH0NCiAgICANCiAgICBXaXRoZHJhd2FsUHJvcG9zYWwgcHVibGljIHByb3Bvc2VkV2l0aGRyYXdhbDsNCiAgICANCiAgICBldmVudCBMT0dfRW1lcmdlbmN5V2l0aGRyYXdhbFByb3Bvc2VkKCk7DQogICAgZXZlbnQgTE9HX0VtZXJnZW5jeVdpdGhkcmF3YWxGYWlsZWQoYWRkcmVzcyB3aXRoZHJhd2FsQWRkcmVzcyk7DQogICAgZXZlbnQgTE9HX0VtZXJnZW5jeVdpdGhkcmF3YWxTdWNjZWVkZWQoYWRkcmVzcyB3aXRoZHJhd2FsQWRkcmVzcywgdWludCBhbW91bnRXaXRoZHJhd24pOw0KICAgIGV2ZW50IExPR19FbWVyZ2VuY3lXaXRoZHJhd2FsVm90ZShhZGRyZXNzIGludmVzdG9yLCBib29sIHZvdGUpOw0KICAgIA0KICAgIG1vZGlmaWVyIG9ubHlBZnRlclByb3Bvc2VkIHsNCiAgICAgICAgYXNzZXJ0KHByb3Bvc2VkV2l0aGRyYXdhbC50b0FkZHJlc3MgIT0gMCk7DQogICAgICAgIF87DQogICAgfQ0KICAgIA0KICAgIG1vZGlmaWVyIG9ubHlJZkVtZXJnZW5jeVRpbWVPdXRIYXNQYXNzZWQgew0KICAgICAgICBhc3NlcnQocHJvcG9zZWRXaXRoZHJhd2FsLmF0VGltZSArIEVNRVJHRU5DWV9USU1FT1VUIDw9IG5vdyk7DQogICAgICAgIF87DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIHZvdGVFbWVyZ2VuY3lXaXRoZHJhd2FsKGJvb2wgdm90ZSkNCiAgICAgICAgb25seUludmVzdG9ycw0KICAgICAgICBvbmx5QWZ0ZXJQcm9wb3NlZA0KICAgICAgICBvbmx5SWZTdG9wcGVkIHsNCg0KICAgICAgICBpbnZlc3RvcnNbaW52ZXN0b3JJRHNbbXNnLnNlbmRlcl1dLnZvdGVkRm9yRW1lcmdlbmN5V2l0aGRyYXdhbCA9IHZvdGU7DQogICAgICAgIExPR19FbWVyZ2VuY3lXaXRoZHJhd2FsVm90ZShtc2cuc2VuZGVyLCB2b3RlKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwcm9wb3NlRW1lcmdlbmN5V2l0aGRyYXdhbChhZGRyZXNzIHdpdGhkcmF3YWxBZGRyZXNzKQ0KICAgICAgICBvbmx5SWZTdG9wcGVkDQogICAgICAgIG9ubHlPd25lciB7DQoNCiAgICAgICAgLy9SZXNldHMgcHJldmlvdXMgdm90ZXMNCiAgICAgICAgZm9yICh1aW50IGkgPSAxOyBpIDw9IG51bUludmVzdG9yczsgaSsrKSB7DQogICAgICAgICAgICBkZWxldGUgaW52ZXN0b3JzW2ldLnZvdGVkRm9yRW1lcmdlbmN5V2l0aGRyYXdhbDsNCiAgICAgICAgfQ0KDQogICAgICAgIHByb3Bvc2VkV2l0aGRyYXdhbCA9IFdpdGhkcmF3YWxQcm9wb3NhbCh3aXRoZHJhd2FsQWRkcmVzcywgbm93KTsNCiAgICAgICAgTE9HX0VtZXJnZW5jeVdpdGhkcmF3YWxQcm9wb3NlZCgpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGV4ZWN1dGVFbWVyZ2VuY3lXaXRoZHJhd2FsKCkNCiAgICAgICAgb25seU93bmVyDQogICAgICAgIG9ubHlBZnRlclByb3Bvc2VkDQogICAgICAgIG9ubHlJZlN0b3BwZWQNCiAgICAgICAgb25seUlmRW1lcmdlbmN5VGltZU91dEhhc1Bhc3NlZCB7DQoNCiAgICAgICAgdWludCBudW1PZlZvdGVzSW5GYXZvdXI7DQogICAgICAgIHVpbnQgYW1vdW50VG9XaXRoZHJhdyA9IHRoaXMuYmFsYW5jZTsNCg0KICAgICAgICBmb3IgKHVpbnQgaSA9IDE7IGkgPD0gbnVtSW52ZXN0b3JzOyBpKyspIHsNCiAgICAgICAgICAgIGlmIChpbnZlc3RvcnNbaV0udm90ZWRGb3JFbWVyZ2VuY3lXaXRoZHJhd2FsID09IHRydWUpIHsNCiAgICAgICAgICAgICAgICBudW1PZlZvdGVzSW5GYXZvdXIrKzsNCiAgICAgICAgICAgICAgICBkZWxldGUgaW52ZXN0b3JzW2ldLnZvdGVkRm9yRW1lcmdlbmN5V2l0aGRyYXdhbDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChudW1PZlZvdGVzSW5GYXZvdXIgPj0gRU1FUkdFTkNZX1dJVEhEUkFXQUxfUkFUSU8gKiBudW1JbnZlc3RvcnMgLyAxMDApIHsNCiAgICAgICAgICAgIGlmICghcHJvcG9zZWRXaXRoZHJhd2FsLnRvQWRkcmVzcy5zZW5kKGFtb3VudFRvV2l0aGRyYXcpKSB7DQogICAgICAgICAgICAgICAgTE9HX0VtZXJnZW5jeVdpdGhkcmF3YWxGYWlsZWQocHJvcG9zZWRXaXRoZHJhd2FsLnRvQWRkcmVzcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICBMT0dfRW1lcmdlbmN5V2l0aGRyYXdhbFN1Y2NlZWRlZChwcm9wb3NlZFdpdGhkcmF3YWwudG9BZGRyZXNzLCBhbW91bnRUb1dpdGhkcmF3KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIHJldmVydCgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgICAgICAvKg0KICAgIFRoZSBvd25lciBjYW4gdXNlIHRoaXMgZnVuY3Rpb24gdG8gZm9yY2UgdGhlIGV4aXQgb2YgYW4gaW52ZXN0b3IgZnJvbSB0aGUNCiAgICBjb250cmFjdCBkdXJpbmcgYW4gZW1lcmdlbmN5IHdpdGhkcmF3YWwgaW4gdGhlIGZvbGxvd2luZyBzaXR1YXRpb25zOg0KICAgICAgICAtIFVucmVzcG9uc2l2ZSBpbnZlc3Rvcg0KICAgICAgICAtIEludmVzdG9yIGRlbWFuZGluZyB0byBiZSBwYWlkIGluIG90aGVyIHRvIHZvdGUsIHRoZSBmYWN0by1ibGFja21haWxpbmcNCiAgICAgICAgb3RoZXIgaW52ZXN0b3JzDQogICAgKi8NCiAgICBmdW5jdGlvbiBmb3JjZURpdmVzdE9mT25lSW52ZXN0b3IoYWRkcmVzcyBjdXJyZW50SW52ZXN0b3IpDQogICAgICAgIG9ubHlPd25lcg0KICAgICAgICBvbmx5SWZTdG9wcGVkIHsNCg0KICAgICAgICBkaXZlc3QoY3VycmVudEludmVzdG9yKTsNCiAgICAgICAgLy9SZXNldHMgZW1lcmdlbmN5IHdpdGhkcmF3YWwgcHJvcG9zYWwuIEludmVzdG9ycyBtdXN0IHZvdGUgYWdhaW4NCiAgICAgICAgZGVsZXRlIHByb3Bvc2VkV2l0aGRyYXdhbDsNCiAgICB9DQp9DQoNCmNvbnRyYWN0IFNsb3QgaXMgdXNpbmdPcmFjbGl6ZSwgRW1lcmdlbmN5V2l0aGRyYXdhbE1vZHVsZSwgRFNNYXRoIHsNCiAgICANCiAgICB1aW50IGNvbnN0YW50IElOVkVTVE9SU19FREdFID0gMjAwOyANCiAgICB1aW50IGNvbnN0YW50IEhPVVNFX0VER0UgPSA1MDsNCiAgICB1aW50IGNvbnN0YW50IENBUElUQUxfUklTSyA9IDI1MDsNCiAgICB1aW50IGNvbnN0YW50IE1BWF9TUElOUyA9IDE2Ow0KICAgIA0KICAgIHVpbnQgbWluQmV0ID0gMSB3ZWk7DQogDQogICAgc3RydWN0IFNwaW5zQ29udGFpbmVyIHsNCiAgICAgICAgYWRkcmVzcyBwbGF5ZXJBZGRyZXNzOw0KICAgICAgICB1aW50IG5TcGluczsNCiAgICAgICAgdWludCBhbW91bnRXYWdlcmVkOw0KICAgIH0NCiAgICANCiAgICBtYXBwaW5nIChieXRlczMyID0+IFNwaW5zQ29udGFpbmVyKSBzcGluczsNCiAgICANCiAgICAvKiBCb3RoIGFycmF5cyBhcmUgb3JkZXJlZDoNCiAgICAgLSBwcm9iYWJpbGl0aWVzIGFyZSBvcmRlcmVkIGZyb20gc21hbGxlc3QgdG8gaGlnaGVzdA0KICAgICAtIG11bHRpcGxpZXJzIGFyZSBvcmRlcmVkIGZyb20gaGlnaGVzdCB0byBsb3dlc3QNCiAgICAgVGhlIHByb2JhYmlsaXRpZXMgYXJlIGV4cHJlc3NlZCBhcyBpbnRlZ2VyIG51bWJlcnMgb3ZlciBhIHNjYWxlIG9mIDEwMDAwOiBpLmUNCiAgICAgMTAwIGlzIGVxdWl2YWxlbnQgdG8gMSUsIDUwMDAgdG8gNTAlIGFuZCBzbyBvbi4NCiAgICAqLw0KICAgIHVpbnRbXSBwdWJsaWMgcHJvYmFiaWxpdGllczsNCiAgICB1aW50W10gcHVibGljIG11bHRpcGxpZXJzOw0KICAgIA0KICAgIHVpbnQgcHVibGljIHRvdGFsQW1vdW50V2FnZXJlZDsgDQogICAgDQogICAgZXZlbnQgTE9HX25ld1NwaW5zQ29udGFpbmVyKGJ5dGVzMzIgbXlpZCwgYWRkcmVzcyBwbGF5ZXJBZGRyZXNzLCB1aW50IGFtb3VudFdhZ2VyZWQsIHVpbnQgblNwaW5zKTsNCiAgICBldmVudCBMT0dfU3BpbkV4ZWN1dGVkKGJ5dGVzMzIgbXlpZCwgYWRkcmVzcyBwbGF5ZXJBZGRyZXNzLCB1aW50IHNwaW5JbmRleCwgdWludCBudW1iZXJEcmF3bik7DQogICAgZXZlbnQgTE9HX1NwaW5zQ29udGFpbmVySW5mbyhieXRlczMyIG15aWQsIGFkZHJlc3MgcGxheWVyQWRkcmVzcywgdWludCBuZXRQYXlvdXQpOw0KICAgIExlZGdlclByb29mVmVyaWZ5SSBleHRlcm5hbENvbnRyYWN0Ow0KICAgIA0KICAgIGZ1bmN0aW9uIFNsb3QoYWRkcmVzcyBfdmVyaWZpZXJBZGRyKSB7DQogICAgICAgIGV4dGVybmFsQ29udHJhY3QgPSBMZWRnZXJQcm9vZlZlcmlmeUkoX3ZlcmlmaWVyQWRkcik7DQogICAgfQ0KICAgIA0KICAgIC8vU0VDVElPTiBJOiBNT0RJRklFUlMgQU5EIEhFTFBFUiBGVU5DVElPTlMNCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19zZXRDb21taXRtZW50KGJ5dGVzMzIgcXVlcnlJZCwgYnl0ZXMzMiBjb21taXRtZW50KSBpbnRlcm5hbCB7DQogICAgICAgIGV4dGVybmFsQ29udHJhY3QuZXh0ZXJuYWxfb3JhY2xpemVfcmFuZG9tRFNfc2V0Q29tbWl0bWVudChxdWVyeUlkLCBjb21taXRtZW50KTsNCiAgICB9DQogICAgDQogICAgbW9kaWZpZXIgb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnkoYnl0ZXMzMiBfcXVlcnlJZCwgc3RyaW5nIF9yZXN1bHQsIGJ5dGVzIF9wcm9vZikgew0KICAgICAgICAvLyBTdGVwIDE6IHRoZSBwcmVmaXggaGFzIHRvIG1hdGNoICdMUFx4MDEnIChMZWRnZXIgUHJvb2YgdmVyc2lvbiAxKQ0KICAgICAgICAvL2lmICgoX3Byb29mWzBdICE9ICJMIil8fChfcHJvb2ZbMV0gIT0gIlAiKXx8KF9wcm9vZlsyXSAhPSAxKSkgdGhyb3c7DQogICAgICAgIGFzc2VydChleHRlcm5hbENvbnRyYWN0LmV4dGVybmFsX29yYWNsaXplX3JhbmRvbURTX3Byb29mVmVyaWZ5KF9wcm9vZiwgX3F1ZXJ5SWQsIGJ5dGVzKF9yZXN1bHQpLCBvcmFjbGl6ZV9nZXROZXR3b3JrTmFtZSgpKSk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgbW9kaWZpZXIgb25seU9yYWNsaXplIHsNCiAgICAgICAgYXNzZXJ0KG1zZy5zZW5kZXIgPT0gb3JhY2xpemVfY2JBZGRyZXNzKCkpOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlJZlNwaW5zRXhpc3QoYnl0ZXMzMiBteWlkKSB7DQogICAgICAgIGFzc2VydChzcGluc1tteWlkXS5wbGF5ZXJBZGRyZXNzICE9IGFkZHJlc3MoMHgwKSk7DQogICAgICAgIF87DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIGlzVmFsaWRTaXplKHVpbnQgX2Ftb3VudFdhZ2VyZWQpIA0KICAgICAgICBjb25zdGFudCANCiAgICAgICAgcmV0dXJucyhib29sKSB7DQogICAgICAgICAgICANCiAgICAgICAgdWludCBuZXRQb3RlbnRpYWxQYXlvdXQgPSAoX2Ftb3VudFdhZ2VyZWQgKiAoMTAwMDAgLSBJTlZFU1RPUlNfRURHRSkgKiBtdWx0aXBsaWVyc1swXSkvIDEwMDAwOyANCiAgICAgICAgdWludCBtYXhBbGxvd2VkUGF5b3V0ID0gKENBUElUQUxfUklTSyAqIGdldEJhbmtyb2xsKCkpLzEwMDAwOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuICgobmV0UG90ZW50aWFsUGF5b3V0IDw9IG1heEFsbG93ZWRQYXlvdXQpICYmIChfYW1vdW50V2FnZXJlZCA+PSBtaW5CZXQpKTsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5SWZFbm91Z2hGdW5kcyhieXRlczMyIG15aWQpIHsNCiAgICAgICAgaWYgKGlzVmFsaWRTaXplKHNwaW5zW215aWRdLmFtb3VudFdhZ2VyZWQpKSB7DQogICAgICAgICAgICAgXzsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIHNhZmVTZW5kKHNwaW5zW215aWRdLnBsYXllckFkZHJlc3MsIHNwaW5zW215aWRdLmFtb3VudFdhZ2VyZWQpOw0KICAgICAgICAgICAgZGVsZXRlIHNwaW5zW215aWRdOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KCW1vZGlmaWVyIG9ubHlMZXNzVGhhbk1heFNwaW5zICh1aW50IF9uU3BpbnMpIHsNCiAgICAgICAgYXNzZXJ0KF9uU3BpbnMgPD0gTUFYX1NQSU5TKTsNCiAgICAgICAgXzsNCiAgICB9DQogICAgDQogICAgLyoNCiAgICAgICAgRm9yIHRoZSBnYW1lIHRvIGJlIGZhaXIsIHRoZSB0b3RhbCBncm9zcyBwYXlvdXQgb3ZlciBhIGxhcmdlIG51bWJlciBvZiANCiAgICAgICAgaW5kaXZpZHVhbCBzbG90IHNwaW5zIHNob3VsZCBiZSB0aGUgdG90YWwgYW1vdW50IHdhZ2VyZWQgYnkgdGhlIHBsYXllci4gDQogICAgICAgIA0KICAgICAgICBUaGUgZ2FtZSBvd25lciwgY2FsbGVkIGhvdXNlLCBhbmQgdGhlIGludmVzdG9ycyB3aWxsIGdhaW4gYnkgYXBwbHlpbmcgDQogICAgICAgIGEgc21hbGwgZmVlLCBjYWxsZWQgZWRnZSwgdG8gdGhlIGFtb3VudCB3b24gYnkgdGhlIHBsYXllciBpbiB0aGUgY2FzZSBvZg0KICAgICAgICBhIHN1Y2Nlc3NmdWwgc3Bpbi4gDQogICAgICAgIA0KICAgICAgICBUaGUgdG90YWwgZ3Jvc3MgZXhwZWN0ZWQgcGF5b3V0IGlzIGVxdWFsIHRvIHRoZSBzdW0gb2YgYWxsIHBheW91dC4gRWFjaCANCiAgICAgICAgaS10aCBwYXlvdXQgaXMgY2FsY3VsYXRlZDoNCiAgICAgICAgICAgICAgICAgICAgYW1vdW50V2FnZXJlZCAqIG11bHRpcGxpZXJzW2ldICogcHJvYmFiaWxpdGllc1tpXSANCiAgICAgICAgVGhlIHJlc3VsdGluZyBlcXVhdGlvbiBpczoNCiAgICAgICAgICAgICAgICAgICAgc3VtIG9mIGFXICogbVtpXSAqIHBbaV0gPSBhVw0KICAgICAgICBBZnRlciBoYXZpbmcgc2ltcGxpZmllZCB0aGUgZXF1YXRpb246DQogICAgICAgICAgICAgICAgICAgICAgICBzdW0gb2YgbVtpXSAqIHBbaV0gPSAxDQogICAgICAgIFNpbmNlIG91ciBwcm9iYWJpbGl0aWVzIGFyZSBkZWZpbmVkIG92ZXIgMTAwMDAsIHRoZSBzdW0gc2hvdWxkIGJlIDEwMDAwLg0KICAgICAgICANCiAgICAgICAgVGhlIGNvbnRyYWN0IG93bmVyIGNhbiBtb2RpZnkgdGhlIG11bHRpcGxpZXJzIGFuZCBwcm9iYWJpbGl0aWVzIGFycmF5LCANCiAgICAgICAgYnV0IHRoZSAgbW9kaWZpZXIgZW5mb3JjZXMgdGhhdCB0aGUgbnVtYmVyIGNob29zZW4gYWx3YXlzIHJlc3VsdCBpbiBhIA0KICAgICAgICBmYXJlIGdhbWUuDQogICAgKi8NCiAgICBtb2RpZmllciBvbmx5SWZGYWlyKHVpbnRbXSBfcHJvYiwgdWludFtdIF9wYXlvdXRzKSB7DQogICAgICAgIGlmIChfcHJvYi5sZW5ndGggIT0gX3BheW91dHMubGVuZ3RoKSByZXZlcnQoKTsNCiAgICAgICAgdWludCBzdW0gPSAwOw0KICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPF9wcm9iLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICBzdW0gKz0gX3Byb2JbaV0gKiBfcGF5b3V0c1tpXTsgICAgIA0KICAgICAgICB9DQogICAgICAgIGFzc2VydChzdW0gPT0gMTAwMDApOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uKCkNCiAgICAgICAgcGF5YWJsZSB7DQogICAgICAgIGJ1eVNwaW5zKDEpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGJ1eVNwaW5zKHVpbnQgX25TcGlucykgDQogICAgICAgIHBheWFibGUgDQogICAgICAgIG9ubHlMZXNzVGhhbk1heFNwaW5zKF9uU3BpbnMpIA0KCQlvbmx5SWZOb3RTdG9wcGVkIHsNCiAgICAgICAgICAgIA0KICAgICAgICB1aW50IGdhcyA9IF9uU3BpbnMqT1JBQ0xJWkVfUEVSX1NQSU5fR0FTX0xJTUlUICsgT1JBQ0xJWkVfQkFTRV9HQVNfTElNSVQgKyBzYWZlR2FzOw0KICAgICAgICB1aW50IG9yYWNsaXplRmVlID0gT3JhY2xpemVJKE9BUi5nZXRBZGRyZXNzKCkpLmdldFByaWNlKCJyYW5kb20iLCBnYXMpOw0KICAgICAgICANCiAgICAgICAgLy8gRGlzYWxsb3cgYmV0cyB0aGF0IGV2ZW4gd2hlbiBtYXhpbWFsbHkgd2lubmluZyBhcmUgYSBsb3NzIGZvciBwbGF5ZXIgDQogICAgICAgIC8vIGR1ZSB0byBvcmFjbGl6ZUZlZQ0KICAgICAgICBpZiAob3JhY2xpemVGZWUvbXVsdGlwbGllcnNbMF0gKyBvcmFjbGl6ZUZlZSA+PSBtc2cudmFsdWUpIHJldmVydCgpOw0KICAgICAgICANCiAgICAgICAgdWludCBhbW91bnRXYWdlcmVkID0gbXNnLnZhbHVlIC0gb3JhY2xpemVGZWU7DQogICAgICAgIHVpbnQgbWF4TmV0UG90ZW50aWFsUGF5b3V0ID0gKGFtb3VudFdhZ2VyZWQgKiAoMTAwMDAgLSBJTlZFU1RPUlNfRURHRSkgKiBtdWx0aXBsaWVyc1swXSkvMTAwMDA7IA0KICAgICAgICB1aW50IG1heEFsbG93ZWRQYXlvdXQgPSAoQ0FQSVRBTF9SSVNLICogZ2V0QmFua3JvbGwoKSkvMTAwMDA7DQogICAgICAgIA0KICAgICAgICBpZiAoKG1heE5ldFBvdGVudGlhbFBheW91dCA8PSBtYXhBbGxvd2VkUGF5b3V0KSAmJiAoYW1vdW50V2FnZXJlZCA+PSBtaW5CZXQpKSB7DQogICAgICAgICAgICBieXRlczMyIHF1ZXJ5SWQgPSBvcmFjbGl6ZV9uZXdSYW5kb21EU1F1ZXJ5KDAsIDIqX25TcGlucywgZ2FzKTsNCiAgICAgICAgICAgICBzcGluc1txdWVyeUlkXSA9IA0KICAgICAgICAgICAgICAgIFNwaW5zQ29udGFpbmVyKG1zZy5zZW5kZXIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfblNwaW5zLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50V2FnZXJlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBMT0dfbmV3U3BpbnNDb250YWluZXIocXVlcnlJZCwgbXNnLnNlbmRlciwgYW1vdW50V2FnZXJlZCwgX25TcGlucyk7DQogICAgICAgICAgICB0b3RhbEFtb3VudFdhZ2VyZWQgKz0gYW1vdW50V2FnZXJlZDsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldmVydCgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIGV4ZWN1dGVTcGlucyhieXRlczMyIG15aWQsIGJ5dGVzIHJhbmRvbUJ5dGVzKSANCiAgICAgICAgcHJpdmF0ZSANCiAgICAgICAgcmV0dXJucyh1aW50KQ0KICAgIHsNCiAgICAgICAgdWludCBhbW91bnRXb24gPSAwOw0KICAgICAgICB1aW50IG51bWJlckRyYXduID0gMDsNCiAgICAgICAgdWludCByYW5nZVVwcGVyRW5kID0gMDsNCiAgICAgICAgdWludCBuU3BpbnMgPSBzcGluc1tteWlkXS5uU3BpbnM7DQogICAgICAgIA0KICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCAyKm5TcGluczsgaSArPSAyKSB7DQogICAgICAgICAgICAvLyBBIG51bWJlciBiZXR3ZWVuIDAgYW5kIDIqKjE2LCBub3JtYWxpemVkIG92ZXIgMCAtIDEwMDAwDQogICAgICAgICAgICBudW1iZXJEcmF3biA9ICgodWludChyYW5kb21CeXRlc1tpXSkqMjU2ICsgdWludChyYW5kb21CeXRlc1tpKzFdKSkqMTAwMDApLzIqKjE2Ow0KICAgICAgICAgICAgcmFuZ2VVcHBlckVuZCA9IDA7DQogICAgICAgICAgICBMT0dfU3BpbkV4ZWN1dGVkKG15aWQsIHNwaW5zW215aWRdLnBsYXllckFkZHJlc3MsIGkvMiwgbnVtYmVyRHJhd24pOw0KICAgICAgICAgICAgZm9yICh1aW50IGogPSAwOyBqIDwgcHJvYmFiaWxpdGllcy5sZW5ndGg7IGorKykgew0KICAgICAgICAgICAgICAgIHJhbmdlVXBwZXJFbmQgKz0gcHJvYmFiaWxpdGllc1tqXTsNCiAgICAgICAgICAgICAgICBpZiAobnVtYmVyRHJhd24gPCByYW5nZVVwcGVyRW5kKSB7DQogICAgICAgICAgICAgICAgICAgIGFtb3VudFdvbiArPSAoc3BpbnNbbXlpZF0uYW1vdW50V2FnZXJlZCAqIG11bHRpcGxpZXJzW2pdKSAvIG5TcGluczsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBhbW91bnRXb247DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIHNlbmRQYXlvdXQoYnl0ZXMzMiBteWlkLCB1aW50IHBheW91dCkgcHJpdmF0ZSB7DQoNCiAgICAgICAgaWYgKHBheW91dCA+PSBzcGluc1tteWlkXS5hbW91bnRXYWdlcmVkKSB7DQogICAgICAgICAgICBpbnZlc3RvcnNMb3NzZXMgKz0gc3ViKHBheW91dCwgc3BpbnNbbXlpZF0uYW1vdW50V2FnZXJlZCk7DQogICAgICAgICAgICBwYXlvdXQgPSAocGF5b3V0KigxMDAwMCAtIElOVkVTVE9SU19FREdFKSkvMTAwMDA7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICB1aW50IHRlbXBQcm9maXQgPSBhZGQoaW52ZXN0b3JzUHJvZml0LCBzdWIoc3BpbnNbbXlpZF0uYW1vdW50V2FnZXJlZCwgcGF5b3V0KSk7DQogICAgICAgICAgICBpbnZlc3RvcnNQcm9maXQgKz0gKHN1YihzcGluc1tteWlkXS5hbW91bnRXYWdlcmVkLCBwYXlvdXQpKigxMDAwMCAtIEhPVVNFX0VER0UpKS8xMDAwMDsNCiAgICAgICAgICAgIHNhZmVTZW5kKGhvdXNlQWRkcmVzcywgc3ViKHRlbXBQcm9maXQsIGludmVzdG9yc1Byb2ZpdCkpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBMT0dfU3BpbnNDb250YWluZXJJbmZvKG15aWQsIHNwaW5zW215aWRdLnBsYXllckFkZHJlc3MsIHBheW91dCk7DQogICAgICAgIHNhZmVTZW5kKHNwaW5zW215aWRdLnBsYXllckFkZHJlc3MsIHBheW91dCk7DQogICAgfQ0KICAgIA0KICAgICBmdW5jdGlvbiBfX2NhbGxiYWNrKGJ5dGVzMzIgbXlpZCwgc3RyaW5nIHJlc3VsdCwgYnl0ZXMgX3Byb29mKSANCiAgICAgICAgb25seU9yYWNsaXplDQogICAgICAgIG9ubHlJZlNwaW5zRXhpc3QobXlpZCkNCiAgICAgICAgb25seUlmRW5vdWdoRnVuZHMobXlpZCkNCiAgICAgICAgb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnkobXlpZCwgcmVzdWx0LCBfcHJvb2YpDQogICAgew0KCQkNCiAgICAgICAgdWludCBwYXlvdXQgPSBleGVjdXRlU3BpbnMobXlpZCwgYnl0ZXMocmVzdWx0KSk7DQogICAgICAgIA0KICAgICAgICBzZW5kUGF5b3V0KG15aWQsIHBheW91dCk7DQogICAgICAgIA0KICAgICAgICBkZWxldGUgcHJvZml0RGlzdHJpYnV0ZWQ7DQogICAgICAgIGRlbGV0ZSBzcGluc1tteWlkXTsNCiAgICB9DQogICAgDQogICAgLy8gU0VUVEVSUyAtIFNFVFRJTkdTIEFDQ0VTU0lCTEUgQlkgT1dORVINCiAgICANCiAgICAvLyBDaGVjayBvcmRlcmluZyBhcyB3ZWxsLCBzaW5jZSBvcmRlcmluZyBhc3N1bXB0aW9ucyBhcmUgbWFkZSBpbiBfY2FsbGJhY2sgDQogICAgLy8gYW5kIGVsc2V3aGVyZQ0KICAgIGZ1bmN0aW9uIHNldENvbmZpZ3VyYXRpb24odWludFtdIF9wcm9iYWJpbGl0aWVzLCB1aW50W10gX211bHRpcGxpZXJzKSANCiAgICAgICAgb25seU93bmVyIA0KICAgICAgICBvbmx5SWZGYWlyKF9wcm9iYWJpbGl0aWVzLCBfbXVsdGlwbGllcnMpIHsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgb3JhY2xpemVfc2V0UHJvb2YocHJvb2ZUeXBlX0xlZGdlcik7IC8vVGhpcyBpcyBoZXJlIHRvIHJlZHVjZSBnYXMgY29zdCBhcyB0aGlzIGZ1bmN0aW9uIGhhcyB0byBiZSBjYWxsZWQgYW55d2F5IGZvciBpbml0aWFsaXphdGlvbg0KICAgICAgICANCiAgICAgICAgZGVsZXRlIHByb2JhYmlsaXRpZXM7DQogICAgICAgIGRlbGV0ZSBtdWx0aXBsaWVyczsNCiAgICAgICAgDQogICAgICAgIHVpbnQgbGFzdFByb2JhYmlsaXR5ID0gMDsNCiAgICAgICAgdWludCBsYXN0TXVsdGlwbGllciA9IDIqKjI1NiAtIDE7DQogICAgICAgIA0KICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfcHJvYmFiaWxpdGllcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgcHJvYmFiaWxpdGllcy5wdXNoKF9wcm9iYWJpbGl0aWVzW2ldKTsNCiAgICAgICAgICAgIGlmIChsYXN0UHJvYmFiaWxpdHkgPj0gX3Byb2JhYmlsaXRpZXNbaV0pIHJldmVydCgpOw0KICAgICAgICAgICAgbGFzdFByb2JhYmlsaXR5ID0gX3Byb2JhYmlsaXRpZXNbaV07DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfbXVsdGlwbGllcnMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgIG11bHRpcGxpZXJzLnB1c2goX211bHRpcGxpZXJzW2ldKTsNCiAgICAgICAgICAgIGlmIChsYXN0TXVsdGlwbGllciA8PSBfbXVsdGlwbGllcnNbaV0pIHJldmVydCgpOw0KICAgICAgICAgICAgbGFzdE11bHRpcGxpZXIgPSBfbXVsdGlwbGllcnNbaV07DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gc2V0TWluQmV0KHVpbnQgX21pbkJldCkgb25seU93bmVyIHsNCiAgICAgICAgbWluQmV0ID0gX21pbkJldDsNCiAgICB9DQogICAgDQogICAgLy8gR0VUVEVSUyAtIENPTlNUQU5UIE1FVEhPRFMNCiAgICANCiAgICBmdW5jdGlvbiBnZXRTcGluc0NvbnRhaW5lcihieXRlczMyIG15aWQpDQogICAgICAgIGNvbnN0YW50DQogICAgICAgIHJldHVybnMoYWRkcmVzcywgdWludCkgew0KICAgICAgICByZXR1cm4gKHNwaW5zW215aWRdLnBsYXllckFkZHJlc3MsIHNwaW5zW215aWRdLmFtb3VudFdhZ2VyZWQpOyANCiAgICB9DQoNCiAgICAvLyBSZXR1cm5zIG1pbmltYWwgYW1vdW50IHRvIHdhZ2VyIHRvIHJldHVybiBhIHByb2ZpdCBpbiBjYXNlIG9mIG1heCB3aW4NCiAgICBmdW5jdGlvbiBnZXRNaW5BbW91bnRUb1dhZ2VyKHVpbnQgX25TcGlucykNCiAgICAgICAgb25seUxlc3NUaGFuTWF4U3BpbnMoX25TcGlucykNCiAgICAgICAgY29uc3RhbnQNCgkJcmV0dXJucyh1aW50KSB7DQogICAgICAgIHVpbnQgZ2FzID0gX25TcGlucypPUkFDTElaRV9QRVJfU1BJTl9HQVNfTElNSVQgKyBPUkFDTElaRV9CQVNFX0dBU19MSU1JVCArIHNhZmVHYXM7DQogICAgICAgIHVpbnQgb3JhY2xpemVGZWUgPSBPcmFjbGl6ZUkoT0FSLmdldEFkZHJlc3MoKSkuZ2V0UHJpY2UoInJhbmRvbSIsIGdhcyk7DQogICAgICAgIHJldHVybiBtaW5CZXQgKyBvcmFjbGl6ZUZlZS9tdWx0aXBsaWVyc1swXSArIG9yYWNsaXplRmVlOw0KICAgIH0NCiAgIA0KICAgIGZ1bmN0aW9uIGdldE1heEFtb3VudFRvV2FnZXIodWludCBfblNwaW5zKQ0KICAgICAgICBvbmx5TGVzc1RoYW5NYXhTcGlucyhfblNwaW5zKQ0KICAgICAgICBjb25zdGFudA0KICAgICAgICByZXR1cm5zKHVpbnQpIHsNCg0KICAgICAgICB1aW50IG9yYWNsaXplRmVlID0gT3JhY2xpemVJKE9BUi5nZXRBZGRyZXNzKCkpLmdldFByaWNlKCJyYW5kb20iLCBfblNwaW5zKk9SQUNMSVpFX1BFUl9TUElOX0dBU19MSU1JVCArIE9SQUNMSVpFX0JBU0VfR0FTX0xJTUlUICsgc2FmZUdhcyk7DQogICAgICAgIHVpbnQgbWF4V2FnZSA9ICAoQ0FQSVRBTF9SSVNLICogZ2V0QmFua3JvbGwoKSkqMTAwMDAvKCgxMDAwMCAtIElOVkVTVE9SU19FREdFKSoxMDAwMCptdWx0aXBsaWVyc1swXSk7DQogICAgICAgIHJldHVybiBtYXhXYWdlICsgb3JhY2xpemVGZWU7DQogICAgfQ0KICAgIA0KfQ=='