base 64 content
base64smartPoolToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC40Ow0KDQoNCi8qDQogKiBPd25hYmxlDQogKg0KICogQmFzZSBjb250cmFjdCB3aXRoIGFuIG93bmVyLg0KICogUHJvdmlkZXMgb25seU93bmVyIG1vZGlmaWVyLCB3aGljaCBwcmV2ZW50cyBmdW5jdGlvbiBmcm9tIHJ1bm5pbmcgaWYgaXQgaXMgY2FsbGVkIGJ5IGFueW9uZSBvdGhlciB0aGFuIHRoZSBvd25lci4NCiAqLw0KY29udHJhY3QgT3duYWJsZSB7DQogIGFkZHJlc3MgcHVibGljIG93bmVyOw0KDQogIGZ1bmN0aW9uIE93bmFibGUoKSB7DQogICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICB9DQoNCiAgbW9kaWZpZXIgb25seU93bmVyKCkgew0KICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsNCiAgICBfOw0KICB9DQoNCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsNCiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgb3duZXIgPSBuZXdPd25lcjsNCiAgfQ0KDQp9DQoNCmNvbnRyYWN0IFNhZmVNYXRoIHsNCiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKiBiOw0KICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQoNCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKyBiOw0KICAgIGFzc2VydChjPj1hICYmIGM+PWIpOw0KICAgIHJldHVybiBjOw0KICB9DQoNCiAgZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7DQogICAgaWYgKCFhc3NlcnRpb24pIHRocm93Ow0KICB9DQp9DQoNCmNvbnRyYWN0IEVSQzIwIHsNCiAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7DQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludCk7DQogIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOw0KDQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOw0KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsNCiAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOw0KICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsNCiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIG93bmVyLCBhZGRyZXNzIGluZGV4ZWQgc3BlbmRlciwgdWludCB2YWx1ZSk7DQp9DQoNCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIFNhZmVNYXRoIHsNCg0KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgYmFsYW5jZXM7DQogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsNCg0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsNCiAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOw0KICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07DQogICAgDQogICAgYmFsYW5jZXNbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZXNbX3RvXSwgX3ZhbHVlKTsNCiAgICBiYWxhbmNlc1tfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VzW19mcm9tXSwgX3ZhbHVlKTsNCiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoX2FsbG93YW5jZSwgX3ZhbHVlKTsNCiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpIHsNCiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZykgew0KICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICB9DQoNCn0NCg0KY29udHJhY3QgTG9ja2FibGUgaXMgT3duYWJsZSB7DQogICAgYm9vbCBkb25hdGlvbkxvY2s7DQoNCiAgICBmdW5jdGlvbiBMb2NrYWJsZSgpIHsNCiAgICAgICAgZG9uYXRpb25Mb2NrID0gZmFsc2U7DQogICAgfQ0KDQogICAgbW9kaWZpZXIgb25seVdoZW5Eb25hdGlvbk9wZW4gew0KICAgICAgICBpZiAoZG9uYXRpb25Mb2NrKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdG9wQWNjZXB0aW5nRG9uYXRpb24oKSBvbmx5T3duZXIgew0KICAgICAgICBpZiAoZG9uYXRpb25Mb2NrKSB0aHJvdzsNCiAgICAgICAgZG9uYXRpb25Mb2NrID0gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdGFydEFjY2VwdGluZ0RvbmF0aW9uKCkgb25seU93bmVyIHsNCiAgICAgICAgaWYgKCFkb25hdGlvbkxvY2spIHRocm93Ow0KICAgICAgICBkb25hdGlvbkxvY2sgPSBmYWxzZTsNCiAgICB9DQp9DQoNCmNvbnRyYWN0IFNtYXJ0UG9vbFRva2VuIGlzIFN0YW5kYXJkVG9rZW4sIExvY2thYmxlIHsNCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiU21hcnRQb29sIjsNCiAgICBzdHJpbmcgcHVibGljIHN5bWJvbCA9ICJTUFQiOw0KICAgIHVpbnQgcHVibGljIGRlY2ltYWxzID0gMDsNCg0KICAgIGFkZHJlc3MgcHVibGljIGJlbmVmaWNpYWw7DQogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBkb25hdGlvbkFtb3VudEluV2VpOw0KICAgIG1hcHBpbmcodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgZG9ub3JzOw0KICAgIHVpbnQgcHVibGljIGRvbm9yQ291bnQ7DQogICAgdWludCBwdWJsaWMgdG90YWxGdW5kUmFpc2VkOw0KICAgIHVpbnQgX3JhdGU7DQoNCiAgICB1aW50IEVUSEVSID0gMSBldGhlcjsNCg0KICAgIGV2ZW50IFRva2VuTWludChhZGRyZXNzIG5ld1Rva2VuSG9sZGVyLCB1aW50IHRva2Vuc0Ftb3VudCk7DQogICAgZXZlbnQgRG9uYXRlZChhZGRyZXNzIGluZGV4ZWQgZnJvbSwgdWludCBhbW91bnQsIHVpbnQgdG9rZW5zQW1vdW50LCB1aW50IGJsb2NrTnVtYmVyKTsNCg0KICAgIGZ1bmN0aW9uIFNtYXJ0UG9vbFRva2VuKHVpbnQgcHJlbWluZWRUb2tlbnMsIGFkZHJlc3Mgd2FsbGV0KSB7DQogICAgICAgIHRvdGFsU3VwcGx5ID0gMDsNCiAgICAgICAgX3JhdGUgPSAxMDA7DQogICAgICAgIGJlbmVmaWNpYWwgPSB3YWxsZXQ7DQogICAgICAgIHRvdGFsRnVuZFJhaXNlZCA9IDA7DQogICAgICAgIG1pbnRUb2tlbnMob3duZXIsIHNhZmVNdWwocHJlbWluZWRUb2tlbnMsIEVUSEVSIC8gX3JhdGUpKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtaW50VG9rZW5zKGFkZHJlc3MgbmV3VG9rZW5Ib2xkZXIsIHVpbnQgd2VpQW1vdW50KSBpbnRlcm5hbCByZXR1cm5zICh1aW50KXsNCiAgICAgICAgdWludCB0b2tlbnNBbW91bnQgPSBzYWZlTXVsKF9yYXRlLCB3ZWlBbW91bnQpIC8gRVRIRVI7DQoNCiAgICAgICAgaWYgKHRva2Vuc0Ftb3VudCA+PSAxKSB7DQogICAgICAgICAgICBiYWxhbmNlc1tuZXdUb2tlbkhvbGRlcl0gPSBzYWZlQWRkKA0KICAgICAgICAgICAgICAgIGJhbGFuY2VzW25ld1Rva2VuSG9sZGVyXSwgdG9rZW5zQW1vdW50KTsNCiAgICAgICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZUFkZCh0b3RhbFN1cHBseSwgdG9rZW5zQW1vdW50KTsNCg0KICAgICAgICAgICAgVG9rZW5NaW50KG5ld1Rva2VuSG9sZGVyLCB0b2tlbnNBbW91bnQpOw0KICAgICAgICAgICAgcmV0dXJuIHRva2Vuc0Ftb3VudDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gMDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIG9ubHlXaGVuRG9uYXRpb25PcGVuIHsNCiAgICAgICAgdWludCB3ZWlBbW91bnQgPSBtc2cudmFsdWU7DQogICAgICAgIGlmICh3ZWlBbW91bnQgPD0gMCkgdGhyb3c7DQoNCiAgICAgICAgaWYgKGRvbmF0aW9uQW1vdW50SW5XZWlbbXNnLnNlbmRlcl0gPT0gMCkgew0KICAgICAgICAgICAgZG9ub3JzW2Rvbm9yQ291bnRdID0gbXNnLnNlbmRlcjsNCiAgICAgICAgICAgIGRvbm9yQ291bnQgKz0gMTsNCiAgICAgICAgfQ0KDQogICAgICAgIGRvbmF0aW9uQW1vdW50SW5XZWlbbXNnLnNlbmRlcl0gPSBzYWZlQWRkKA0KICAgICAgICAgICAgZG9uYXRpb25BbW91bnRJbldlaVttc2cuc2VuZGVyXSwgd2VpQW1vdW50KTsNCiAgICAgICAgdG90YWxGdW5kUmFpc2VkID0gc2FmZUFkZCgNCiAgICAgICAgICAgIHRvdGFsRnVuZFJhaXNlZCwgd2VpQW1vdW50KTsNCiAgICAgICAgdWludCB0b2tlbnNDcmVhdGVkID0gbWludFRva2Vucyhtc2cuc2VuZGVyLCB3ZWlBbW91bnQpOw0KICAgICAgICBEb25hdGVkKG1zZy5zZW5kZXIsIHdlaUFtb3VudCwgdG9rZW5zQ3JlYXRlZCwgYmxvY2subnVtYmVyKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXREb25hdGlvbkFtb3VudCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgZG9uYXRpb24pIHsNCiAgICAgICAgcmV0dXJuIGRvbmF0aW9uQW1vdW50SW5XZWlbbXNnLnNlbmRlcl07DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2V0VG9rZW5CYWxhbmNlKCkgY29uc3RhbnQgcmV0dXJucyAodWludCB0b2tlbnMpIHsNCiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW21zZy5zZW5kZXJdOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHRva2VuUmF0ZSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgdG9rZW5SYXRlKSB7DQogICAgICAgIHJldHVybiBfcmF0ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjaGFuZ2VSYXRlKHVpbnQgbmV3UmF0ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBfcmF0ZSA9IG5ld1JhdGU7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgb25seU93bmVyIHsNCiAgICAgICAgaWYgKCFiZW5lZmljaWFsLnNlbmQodGhpcy5iYWxhbmNlKSkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICB9DQp9'