base 64 content
base64spiceHours
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4yOw0KDQpjb250cmFjdCBTcGljZU1lbWJlcnMgew0KICAgIGVudW0gTWVtYmVyTGV2ZWwgeyBOb25lLCBNZW1iZXIsIE1hbmFnZXIsIERpcmVjdG9yIH0NCiAgICBzdHJ1Y3QgTWVtYmVyIHsNCiAgICAgICAgdWludCBpZDsNCiAgICAgICAgTWVtYmVyTGV2ZWwgbGV2ZWw7DQogICAgICAgIGJ5dGVzMzIgaW5mbzsNCiAgICB9DQoNCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IE1lbWJlcikgbWVtYmVyOw0KDQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQogICAgbWFwcGluZyAodWludCA9PiBhZGRyZXNzKSBwdWJsaWMgbWVtYmVyQWRkcmVzczsNCiAgICB1aW50IHB1YmxpYyBtZW1iZXJDb3VudDsNCg0KICAgIGV2ZW50IFRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIGFkZHJlc3MgaW5kZXhlZCBvd25lcik7DQogICAgZXZlbnQgQWRkTWVtYmVyKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIGFkZHJlc3MgaW5kZXhlZCBtZW1iZXIpOw0KICAgIGV2ZW50IFJlbW92ZU1lbWJlcihhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCBhZGRyZXNzIGluZGV4ZWQgbWVtYmVyKTsNCiAgICBldmVudCBTZXRNZW1iZXJMZXZlbChhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCBhZGRyZXNzIGluZGV4ZWQgbWVtYmVyLCBNZW1iZXJMZXZlbCBsZXZlbCk7DQogICAgZXZlbnQgU2V0TWVtYmVySW5mbyhhZGRyZXNzIGluZGV4ZWQgc2VuZGVyLCBhZGRyZXNzIGluZGV4ZWQgbWVtYmVyLCBieXRlczMyIGluZm8pOw0KDQogICAgZnVuY3Rpb24gU3BpY2VNZW1iZXJzKCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQoNCiAgICAgICAgbWVtYmVyQ291bnQgPSAxOw0KICAgICAgICBtZW1iZXJBZGRyZXNzW21lbWJlckNvdW50XSA9IG93bmVyOw0KICAgICAgICBtZW1iZXJbb3duZXJdID0gTWVtYmVyKG1lbWJlckNvdW50LCBNZW1iZXJMZXZlbC5Ob25lLCAwKTsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5T3duZXIgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgbW9kaWZpZXIgb25seU1hbmFnZXIgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lciAmJiBtZW1iZXJMZXZlbChtc2cuc2VuZGVyKSA8IE1lbWJlckxldmVsLk1hbmFnZXIpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF90YXJnZXQpIG9ubHlPd25lciB7DQogICAgICAgIC8vIElmIG5ldyBvd25lciBoYXMgbm8gbWVtYmVySWQsIGNyZWF0ZSBvbmUNCiAgICAgICAgaWYgKG1lbWJlcltfdGFyZ2V0XS5pZCA9PSAwKSB7DQogICAgICAgICAgICBtZW1iZXJDb3VudCsrOw0KICAgICAgICAgICAgbWVtYmVyQWRkcmVzc1ttZW1iZXJDb3VudF0gPSBfdGFyZ2V0Ow0KICAgICAgICAgICAgbWVtYmVyW190YXJnZXRdID0gTWVtYmVyKG1lbWJlckNvdW50LCBNZW1iZXJMZXZlbC5Ob25lLCAwKTsNCiAgICAgICAgfQ0KICAgICAgICBvd25lciA9IF90YXJnZXQ7DQogICAgICAgIFRyYW5zZmVyT3duZXJzaGlwKG1zZy5zZW5kZXIsIG93bmVyKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBhZGRNZW1iZXIoYWRkcmVzcyBfdGFyZ2V0KSBvbmx5TWFuYWdlciB7DQogICAgICAgIC8vIE1ha2Ugc3VyZSB0cnlpbmcgdG8gYWRkIGFuIGV4aXN0aW5nIG1lbWJlciB0aHJvd3MgYW4gZXJyb3INCiAgICAgICAgaWYgKG1lbWJlckxldmVsKF90YXJnZXQpICE9IE1lbWJlckxldmVsLk5vbmUpIHRocm93Ow0KDQogICAgICAgIC8vIElmIGFkZGVkIG1lbWJlciBoYXMgbm8gbWVtYmVySWQsIGNyZWF0ZSBvbmUNCiAgICAgICAgaWYgKG1lbWJlcltfdGFyZ2V0XS5pZCA9PSAwKSB7DQogICAgICAgICAgICBtZW1iZXJDb3VudCsrOw0KICAgICAgICAgICAgbWVtYmVyQWRkcmVzc1ttZW1iZXJDb3VudF0gPSBfdGFyZ2V0Ow0KICAgICAgICAgICAgbWVtYmVyW190YXJnZXRdID0gTWVtYmVyKG1lbWJlckNvdW50LCBNZW1iZXJMZXZlbC5Ob25lLCAwKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFNldCBtZW1iZXJMZXZlbCB0byBpbml0aWFsIHZhbHVlIHdpdGggYmFzaWMgYWNjZXNzDQogICAgICAgIG1lbWJlcltfdGFyZ2V0XS5sZXZlbCA9IE1lbWJlckxldmVsLk1lbWJlcjsNCiAgICAgICAgQWRkTWVtYmVyKG1zZy5zZW5kZXIsIF90YXJnZXQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbW92ZU1lbWJlcihhZGRyZXNzIF90YXJnZXQpIHsNCiAgICAgICAgLy8gTWFrZSBzdXJlIHRyeWluZyB0byByZW1vdmUgYSBub24tZXhpc3RpbmcgbWVtYmVyIHRocm93cyBhbiBlcnJvcg0KICAgICAgICBpZiAobWVtYmVyTGV2ZWwoX3RhcmdldCkgPT0gTWVtYmVyTGV2ZWwuTm9uZSkgdGhyb3c7DQogICAgICAgIC8vIE1ha2Ugc3VyZSBtZW1iZXJzIGFyZSBvbmx5IGFsbG93ZWQgdG8gZGVsZXRlIG1lbWJlcnMgbG93ZXIgdGhhbiB0aGVpciBsZXZlbA0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lciAmJiBtZW1iZXJMZXZlbChtc2cuc2VuZGVyKSA8PSBtZW1iZXJMZXZlbChfdGFyZ2V0KSkgdGhyb3c7DQoNCiAgICAgICAgbWVtYmVyW190YXJnZXRdLmxldmVsID0gTWVtYmVyTGV2ZWwuTm9uZTsNCiAgICAgICAgUmVtb3ZlTWVtYmVyKG1zZy5zZW5kZXIsIF90YXJnZXQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldE1lbWJlckxldmVsKGFkZHJlc3MgX3RhcmdldCwgTWVtYmVyTGV2ZWwgbGV2ZWwpIHsNCiAgICAgICAgLy8gTWFrZSBzdXJlIGFsbCBsZXZlbHMgYXJlIGxhcmdlciB0aGFuIE5vbmUgYnV0IG5vdCBoaWdoZXIgdGhhbiBEaXJlY3Rvcg0KICAgICAgICBpZiAobGV2ZWwgPT0gTWVtYmVyTGV2ZWwuTm9uZSB8fCBsZXZlbCA+IE1lbWJlckxldmVsLkRpcmVjdG9yKSB0aHJvdzsNCiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBfdGFyZ2V0IGlzIGN1cnJlbnRseSBhbHJlYWR5IGEgbWVtYmVyDQogICAgICAgIGlmIChtZW1iZXJMZXZlbChfdGFyZ2V0KSA9PSBNZW1iZXJMZXZlbC5Ob25lKSB0aHJvdzsNCiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBuZXcgbGV2ZWwgaXMgbG93ZXIgbGV2ZWwgdGhhbiB3ZSBhcmUgKHdlIGNhbm5vdCBvdmVycHJvbW90ZSkNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIgJiYgbWVtYmVyTGV2ZWwobXNnLnNlbmRlcikgPD0gbGV2ZWwpIHRocm93Ow0KICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIG1lbWJlciBpcyBjdXJyZW50bHkgb24gbG93ZXIgbGV2ZWwgdGhhbiB3ZSBhcmUNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIgJiYgbWVtYmVyTGV2ZWwobXNnLnNlbmRlcikgPD0gbWVtYmVyTGV2ZWwoX3RhcmdldCkpIHRocm93Ow0KDQogICAgICAgIG1lbWJlcltfdGFyZ2V0XS5sZXZlbCA9IGxldmVsOw0KICAgICAgICBTZXRNZW1iZXJMZXZlbChtc2cuc2VuZGVyLCBfdGFyZ2V0LCBsZXZlbCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2V0TWVtYmVySW5mbyhhZGRyZXNzIF90YXJnZXQsIGJ5dGVzMzIgaW5mbykgew0KICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHRhcmdldCBpcyBjdXJyZW50bHkgYWxyZWFkeSBhIG1lbWJlcg0KICAgICAgICBpZiAobWVtYmVyTGV2ZWwoX3RhcmdldCkgPT0gTWVtYmVyTGV2ZWwuTm9uZSkgdGhyb3c7DQogICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbWVtYmVyIGlzIGN1cnJlbnRseSBvbiBsb3dlciBsZXZlbCB0aGFuIHdlIGFyZQ0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lciAmJiBtc2cuc2VuZGVyICE9IF90YXJnZXQgJiYgbWVtYmVyTGV2ZWwobXNnLnNlbmRlcikgPD0gbWVtYmVyTGV2ZWwoX3RhcmdldCkpIHRocm93Ow0KDQogICAgICAgIG1lbWJlcltfdGFyZ2V0XS5pbmZvID0gaW5mbzsNCiAgICAgICAgU2V0TWVtYmVySW5mbyhtc2cuc2VuZGVyLCBfdGFyZ2V0LCBpbmZvKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtZW1iZXJJZChhZGRyZXNzIF90YXJnZXQpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIG1lbWJlcltfdGFyZ2V0XS5pZDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtZW1iZXJMZXZlbChhZGRyZXNzIF90YXJnZXQpIGNvbnN0YW50IHJldHVybnMgKE1lbWJlckxldmVsKSB7DQogICAgICAgIHJldHVybiBtZW1iZXJbX3RhcmdldF0ubGV2ZWw7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbWVtYmVySW5mbyhhZGRyZXNzIF90YXJnZXQpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIpIHsNCiAgICAgICAgcmV0dXJuIG1lbWJlcltfdGFyZ2V0XS5pbmZvOw0KICAgIH0NCn0NCg0KY29udHJhY3QgU3BpY2VDb250cm9sbGVkIHsNCiAgICBTcGljZU1lbWJlcnMgbWVtYmVyczsNCg0KICAgIG1vZGlmaWVyIG9ubHlPd25lciB7DQogICAgICAgIGlmICghaGFzT3duZXJBY2Nlc3MobXNnLnNlbmRlcikpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlEaXJlY3RvciB7DQogICAgICAgIGlmICghaGFzRGlyZWN0b3JBY2Nlc3MobXNnLnNlbmRlcikpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlNYW5hZ2VyIHsNCiAgICAgICAgaWYgKCFoYXNNYW5hZ2VyQWNjZXNzKG1zZy5zZW5kZXIpKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5TWVtYmVyIHsNCiAgICAgICAgaWYgKCFoYXNNZW1iZXJBY2Nlc3MobXNnLnNlbmRlcikpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIFNwaWNlQ29udHJvbGxlZChhZGRyZXNzIG1lbWJlcnNBZGRyZXNzKSB7DQogICAgICAgIG1lbWJlcnMgPSBTcGljZU1lbWJlcnMobWVtYmVyc0FkZHJlc3MpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGhhc093bmVyQWNjZXNzKGFkZHJlc3MgX3RhcmdldCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICByZXR1cm4gKF90YXJnZXQgPT0gbWVtYmVycy5vd25lcigpKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBoYXNEaXJlY3RvckFjY2VzcyhhZGRyZXNzIF90YXJnZXQpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIChtZW1iZXJzLm1lbWJlckxldmVsKF90YXJnZXQpID49IFNwaWNlTWVtYmVycy5NZW1iZXJMZXZlbC5EaXJlY3RvciB8fCBoYXNPd25lckFjY2VzcyhfdGFyZ2V0KSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaGFzTWFuYWdlckFjY2VzcyhhZGRyZXNzIF90YXJnZXQpIGludGVybmFsIHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIChtZW1iZXJzLm1lbWJlckxldmVsKF90YXJnZXQpID49IFNwaWNlTWVtYmVycy5NZW1iZXJMZXZlbC5NYW5hZ2VyIHx8IGhhc093bmVyQWNjZXNzKF90YXJnZXQpKTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gaGFzTWVtYmVyQWNjZXNzKGFkZHJlc3MgX3RhcmdldCkgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICByZXR1cm4gKG1lbWJlcnMubWVtYmVyTGV2ZWwoX3RhcmdldCkgPj0gU3BpY2VNZW1iZXJzLk1lbWJlckxldmVsLk1lbWJlciB8fCBoYXNPd25lckFjY2VzcyhfdGFyZ2V0KSk7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBJUGF5b3V0Q2FsY3VsYXRvciB7DQogICAgZnVuY3Rpb24gY2FsY3VsYXRlUGF5b3V0KGJ5dGVzMzIgX2luZm8sIHVpbnQgX2R1cmF0aW9uKSByZXR1cm5zICh1aW50KTsNCn0NCg0KY29udHJhY3QgU3BpY2VQYXlyb2xsIGlzIFNwaWNlQ29udHJvbGxlZCB7DQogICAgc3RydWN0IFBheXJvbGxFbnRyeSB7DQogICAgICAgIGJvb2wgYXZhaWxhYmxlOw0KICAgICAgICB1aW50IGR1cmF0aW9uOw0KICAgICAgICBib29sIHByb2Nlc3NlZDsNCiAgICAgICAgdWludCBwYXlvdXQ7DQogICAgfQ0KDQogICAgYWRkcmVzcyBjcmVhdG9yOw0KDQogICAgdWludCBwdWJsaWMgZnJvbUJsb2NrOw0KICAgIHVpbnQgcHVibGljIHRvQmxvY2s7DQoNCiAgICBtYXBwaW5nIChieXRlczMyID0+IFBheXJvbGxFbnRyeSkgZW50cmllczsNCiAgICBieXRlczMyW10gaW5mb3M7DQoNCiAgICBhZGRyZXNzIGNhbGN1bGF0b3I7DQogICAgYm9vbCBwdWJsaWMgbG9ja2VkOw0KDQogICAgZXZlbnQgTmV3UGF5cm9sbChhZGRyZXNzIGluZGV4ZWQgY3JlYXRvcik7DQogICAgZXZlbnQgRmFpbGVkTWFya2luZyhieXRlczMyIGluZGV4ZWQgaW5mbywgYnl0ZXMzMiBpbmRleGVkIGRlc2NyaXB0aW9uLCB1aW50IHRvdGFsLCBpbnQgZHVyYXRpb24pOw0KICAgIGV2ZW50IEFkZE1hcmtpbmcoYnl0ZXMzMiBpbmRleGVkIGluZm8sIGJ5dGVzMzIgaW5kZXhlZCBkZXNjcmlwdGlvbiwgaW50IGR1cmF0aW9uLCB1aW50IHRvdGFsKTsNCiAgICBldmVudCBQcm9jZXNzTWFya2luZ3MoYnl0ZXMzMiBpbmRleGVkIGluZm8sIHVpbnQgdG90YWwsIHVpbnQgZHVyYXRpb24sIHVpbnQgcGF5b3V0KTsNCiAgICBldmVudCBBbGxNYXJraW5nc1Byb2Nlc3NlZChhZGRyZXNzIGluZGV4ZWQgY2FsY3VsYXRvciwgdWludCBtYXhEdXJhdGlvbiwgdWludCBmcm9tQmxvY2ssIHVpbnQgdG9CbG9jayk7DQoNCiAgICBldmVudCBNb2RpZnlNYXJraW5nKGJ5dGVzMzIgaW5kZXhlZCBpbmZvLCB1aW50IGR1cmF0aW9uLCB1aW50IHBheW91dCk7DQogICAgZXZlbnQgU2V0UGF5cm9sbExvY2tlZChib29sIGxvY2tlZCk7DQoNCiAgICBtb2RpZmllciBvbmx5Q3JlYXRvciB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IGNyZWF0b3IpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlVbnByb2Nlc3NlZCB7DQogICAgICAgIGlmIChjYWxjdWxhdG9yICE9IDApIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCiAgICANCiAgICBtb2RpZmllciBvbmx5UHJvY2Vzc2VkIHsNCiAgICAgICAgaWYgKGNhbGN1bGF0b3IgPT0gMCkgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgbW9kaWZpZXIgb25seVVubG9ja2VkIHsNCiAgICAgICAgaWYgKGxvY2tlZCkgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gU3BpY2VQYXlyb2xsKGFkZHJlc3MgX21lbWJlcnMpIFNwaWNlQ29udHJvbGxlZChfbWVtYmVycykgew0KICAgICAgICBjcmVhdG9yID0gbXNnLnNlbmRlcjsNCiAgICAgICAgZnJvbUJsb2NrID0gYmxvY2subnVtYmVyOw0KICAgICAgICBOZXdQYXlyb2xsKG1zZy5zZW5kZXIpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFkZE1hcmtpbmcoYnl0ZXMzMiBfaW5mbywgYnl0ZXMzMiBfZGVzY3JpcHRpb24sIGludCBfZHVyYXRpb24pIG9ubHlDcmVhdG9yIG9ubHlVbnByb2Nlc3NlZCByZXR1cm5zKGJvb2wpIHsNCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGR1cmF0aW9uIHdvdWxkIGJlY29tZSBuZWdhdGl2ZSBhcyBhIHJlc3VsdCBvZiB0aGlzIG1hcmtpbmcNCiAgICAgICAgLy8gYW5kIGlmIGl0IGRvZXMsIG1hcmsgdGhpcyBhcyBmYWlsZWQgYW5kIHJldHVybiBmYWxzZSB0byBpbmRpY2F0ZSBmYWlsdXJlLg0KICAgICAgICBpZiAoX2R1cmF0aW9uIDwgMCAmJiBlbnRyaWVzW19pbmZvXS5kdXJhdGlvbiA8IHVpbnQoLV9kdXJhdGlvbikpIHsNCiAgICAgICAgICBGYWlsZWRNYXJraW5nKF9pbmZvLCBfZGVzY3JpcHRpb24sIGVudHJpZXNbX2luZm9dLmR1cmF0aW9uLCBfZHVyYXRpb24pOw0KICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIElmIGluZm8gbm90IGFkZGVkIHlldCwgYWRkIGl0IHRvIHRoZSBpbmZvcyBhcnJheQ0KICAgICAgICBQYXlyb2xsRW50cnkgZW50cnkgPSBlbnRyaWVzW19pbmZvXTsNCiAgICAgICAgaWYgKCFlbnRyeS5hdmFpbGFibGUpIHsNCiAgICAgICAgICAgIGVudHJ5LmF2YWlsYWJsZSA9IHRydWU7DQogICAgICAgICAgICBpbmZvcy5wdXNoKF9pbmZvKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIE1vZGlmeSBlbnRyeSBkdXJhdGlvbiBhbmQgc2VuZCBtYXJraW5nIGV2ZW50DQogICAgICAgIGlmIChfZHVyYXRpb24gPCAwKSB7DQogICAgICAgICAgICBlbnRyeS5kdXJhdGlvbiAtPSB1aW50KC1fZHVyYXRpb24pOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZW50cnkuZHVyYXRpb24gKz0gdWludChfZHVyYXRpb24pOw0KICAgICAgICB9DQogICAgICAgIEFkZE1hcmtpbmcoX2luZm8sIF9kZXNjcmlwdGlvbiwgX2R1cmF0aW9uLCBlbnRyeS5kdXJhdGlvbik7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHByb2Nlc3NNYXJraW5ncyhhZGRyZXNzIF9jYWxjdWxhdG9yLCB1aW50IF9tYXhEdXJhdGlvbikgb25seUNyZWF0b3Igb25seVVucHJvY2Vzc2VkIHsNCiAgICAgICAgY2FsY3VsYXRvciA9IF9jYWxjdWxhdG9yOw0KICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBpbmZvcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgYnl0ZXMzMiBpbmZvID0gaW5mb3NbaV07DQogICAgICAgICAgICBQYXlyb2xsRW50cnkgZW50cnkgPSBlbnRyaWVzW2luZm9dOw0KDQogICAgICAgICAgICB1aW50IG9yaWdpbmFsRHVyYXRpb24gPSBlbnRyeS5kdXJhdGlvbjsNCiAgICAgICAgICAgIGVudHJ5LmR1cmF0aW9uID0gKG9yaWdpbmFsRHVyYXRpb24gPD0gX21heER1cmF0aW9uKSA/IG9yaWdpbmFsRHVyYXRpb24gOiBfbWF4RHVyYXRpb247DQogICAgICAgICAgICBlbnRyeS5wYXlvdXQgPSBJUGF5b3V0Q2FsY3VsYXRvcihjYWxjdWxhdG9yKS5jYWxjdWxhdGVQYXlvdXQoaW5mbywgZW50cnkuZHVyYXRpb24pOw0KICAgICAgICAgICAgUHJvY2Vzc01hcmtpbmdzKGluZm8sIG9yaWdpbmFsRHVyYXRpb24sIGVudHJ5LmR1cmF0aW9uLCBlbnRyeS5wYXlvdXQpOw0KICAgICAgICB9DQogICAgICAgIHRvQmxvY2sgPSBibG9jay5udW1iZXI7DQogICAgICAgIEFsbE1hcmtpbmdzUHJvY2Vzc2VkKF9jYWxjdWxhdG9yLCBfbWF4RHVyYXRpb24sIGZyb21CbG9jaywgdG9CbG9jayk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbW9kaWZ5TWFya2luZyhieXRlczMyIF9pbmZvLCB1aW50IF9kdXJhdGlvbikgb25seURpcmVjdG9yIG9ubHlQcm9jZXNzZWQgb25seVVubG9ja2VkIHsNCiAgICAgICAgaWYgKCFlbnRyaWVzW19pbmZvXS5hdmFpbGFibGUpIHRocm93Ow0KDQogICAgICAgIFBheXJvbGxFbnRyeSBlbnRyeSA9IGVudHJpZXNbX2luZm9dOw0KICAgICAgICBlbnRyeS5kdXJhdGlvbiA9IF9kdXJhdGlvbjsNCiAgICAgICAgZW50cnkucGF5b3V0ID0gSVBheW91dENhbGN1bGF0b3IoY2FsY3VsYXRvcikuY2FsY3VsYXRlUGF5b3V0KF9pbmZvLCBfZHVyYXRpb24pOw0KICAgICAgICBNb2RpZnlNYXJraW5nKF9pbmZvLCBlbnRyeS5kdXJhdGlvbiwgZW50cnkucGF5b3V0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2NrKCkgb25seURpcmVjdG9yIHsNCiAgICAgICAgbG9ja2VkID0gdHJ1ZTsNCiAgICAgICAgU2V0UGF5cm9sbExvY2tlZChsb2NrZWQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVubG9jaygpIG9ubHlPd25lciB7DQogICAgICAgIGxvY2tlZCA9IGZhbHNlOw0KICAgICAgICBTZXRQYXlyb2xsTG9ja2VkKGxvY2tlZCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcHJvY2Vzc2VkKCkgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICByZXR1cm4gKGNhbGN1bGF0b3IgIT0gMCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZHVyYXRpb24oYnl0ZXMzMiBfaW5mbykgY29uc3RhbnQgcmV0dXJucyAodWludCkgew0KICAgICAgICByZXR1cm4gZW50cmllc1tfaW5mb10uZHVyYXRpb247DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcGF5b3V0KGJ5dGVzMzIgX2luZm8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIGVudHJpZXNbX2luZm9dLnBheW91dDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBlbnRyeUluZm8odWludCBfaW5kZXgpIGNvbnN0YW50IHJldHVybnMgKGJ5dGVzMzIpIHsNCiAgICAgICAgcmV0dXJuIGluZm9zW19pbmRleF07DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZW50cnlDb3VudCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIGluZm9zLmxlbmd0aDsNCiAgICB9DQp9DQoNCmNvbnRyYWN0IFNwaWNlSG91cnMgaXMgU3BpY2VDb250cm9sbGVkIHsNCiAgICBhZGRyZXNzW10gcHVibGljIHBheXJvbGxzOw0KDQogICAgZXZlbnQgTWFya0hvdXJzKGJ5dGVzMzIgaW5kZXhlZCBpbmZvLCBieXRlczMyIGluZGV4ZWQgZGVzY3JpcHRpb24sIGludCBkdXJhdGlvbiwgYm9vbCBzdWNjZXNzKTsNCiAgICBldmVudCBQcm9jZXNzUGF5cm9sbChhZGRyZXNzIGluZGV4ZWQgcGF5cm9sbCwgdWludCBtYXhEdXJhdGlvbik7DQogICAgZXZlbnQgQ3JlYXRlUGF5cm9sbChhZGRyZXNzIGluZGV4ZWQgcGF5cm9sbCk7DQoNCiAgICBmdW5jdGlvbiBTcGljZUhvdXJzKGFkZHJlc3MgX21lbWJlcnMpIFNwaWNlQ29udHJvbGxlZChfbWVtYmVycykgew0KICAgICAgICBwYXlyb2xsc1twYXlyb2xscy5sZW5ndGgrK10gPSBuZXcgU3BpY2VQYXlyb2xsKG1lbWJlcnMpOw0KICAgICAgICBDcmVhdGVQYXlyb2xsKHBheXJvbGxzW3BheXJvbGxzLmxlbmd0aC0xXSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbWFya0hvdXJzKGJ5dGVzMzIgX2luZm8sIGJ5dGVzMzIgX2Rlc2NyaXB0aW9uLCBpbnQgX2R1cmF0aW9uKSBvbmx5TWVtYmVyIHsNCiAgICAgICAgaWYgKCFoYXNNYW5hZ2VyQWNjZXNzKG1zZy5zZW5kZXIpICYmIG1lbWJlcnMubWVtYmVySW5mbyhtc2cuc2VuZGVyKSAhPSBfaW5mbykgdGhyb3c7DQogICAgICAgIGlmIChfZHVyYXRpb24gPT0gMCkgdGhyb3c7DQogICAgICAgIGlmIChfaW5mbyA9PSAwKSB0aHJvdzsNCg0KICAgICAgICBTcGljZVBheXJvbGwgcGF5cm9sbCA9IFNwaWNlUGF5cm9sbChwYXlyb2xsc1twYXlyb2xscy5sZW5ndGgtMV0pOw0KICAgICAgICBib29sIHN1Y2Nlc3MgPSBwYXlyb2xsLmFkZE1hcmtpbmcoX2luZm8sIF9kZXNjcmlwdGlvbiwgX2R1cmF0aW9uKTsNCiAgICAgICAgTWFya0hvdXJzKF9pbmZvLCBfZGVzY3JpcHRpb24sIF9kdXJhdGlvbiwgc3VjY2Vzcyk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbWFya0hvdXJzKGJ5dGVzMzIgX2Rlc2NyaXB0aW9uLCBpbnQgX2R1cmF0aW9uKSB7DQogICAgICAgIG1hcmtIb3VycyhtZW1iZXJzLm1lbWJlckluZm8obXNnLnNlbmRlciksIF9kZXNjcmlwdGlvbiwgX2R1cmF0aW9uKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwcm9jZXNzUGF5cm9sbChhZGRyZXNzIF9jYWxjdWxhdG9yLCB1aW50IF9tYXhEdXJhdGlvbikgb25seURpcmVjdG9yIHsNCiAgICAgICAgU3BpY2VQYXlyb2xsIHBheXJvbGwgPSBTcGljZVBheXJvbGwocGF5cm9sbHNbcGF5cm9sbHMubGVuZ3RoLTFdKTsNCiAgICAgICAgcGF5cm9sbC5wcm9jZXNzTWFya2luZ3MoX2NhbGN1bGF0b3IsIF9tYXhEdXJhdGlvbik7DQogICAgICAgIFByb2Nlc3NQYXlyb2xsKHBheXJvbGwsIF9tYXhEdXJhdGlvbik7DQoNCiAgICAgICAgcGF5cm9sbHNbcGF5cm9sbHMubGVuZ3RoKytdID0gbmV3IFNwaWNlUGF5cm9sbChtZW1iZXJzKTsNCiAgICAgICAgQ3JlYXRlUGF5cm9sbChwYXlyb2xsc1twYXlyb2xscy5sZW5ndGgtMV0pOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGhhc1BheXJvbGwoYWRkcmVzcyBfYWRkcmVzcykgY29uc3RhbnQgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICBmb3IgKHVpbnQgaTsgaSA8IHBheXJvbGxzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICBpZiAocGF5cm9sbHNbaV0gPT0gX2FkZHJlc3MpIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwYXlyb2xsQ291bnQoKSBjb25zdGFudCByZXR1cm5zICh1aW50KSB7DQogICAgICAgIHJldHVybiBwYXlyb2xscy5sZW5ndGg7DQogICAgfQ0KfQ=='