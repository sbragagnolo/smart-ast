base 64 content
base64spork
	^'LyoqDQogKiBTcG9yayBUb2tlbiBDb250cmFjdHMNCiAqIFNlZSBTcG9yayBjb250cmFjdCBiZWxvdyBmb3IgbW9yZSBkZXRhaWwuDQogKg0KICogVGhlIERBTyBhbmQgU3BvcmsgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQ0KICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgbGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQogKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcg0KICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4NCiAqDQogKiBUaGUgREFPIGFuZCBTcG9yayBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLA0KICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YNCiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUNCiAqIEdOVSBsZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KICoNCiAqIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8NCiAqDQogKiBjcmVkaXQNCiAqICAgVGhlIERBTywgU2xvY2suaXQsIEV0aGVyZXVtIEZvdW5kYXRpb24sIEV0aENvcmUsIENvbnNlbnN5cywgcHNldWRvbnltb3VzDQogKiAgIHJlYmVscyBldmVyeXdoZXJlLCBhbmQgZXZlcnkgbHVuY2ggc3BvdCB3aXRoIHByb3BlciBlYXRpbmcgdXRlbnNpbHMuID8NCiAqLw0KDQovKioNCiAqIEB0aXRsZSBUb2tlbkludGVyZmFjZQ0KICogQG5vdGljZSBFUkMgMjAgdG9rZW4gc3RhbmRhcmQgYW5kIERBTyB0b2tlbiBpbnRlcmZhY2UuDQogKi8NCmNvbnRyYWN0IFRva2VuSW50ZXJmYWNlIHsNCg0KICAgIGV2ZW50IFRyYW5zZmVyKA0KICAgICAgICBhZGRyZXNzIGluZGV4ZWQgX2Zyb20sDQogICAgICAgIGFkZHJlc3MgaW5kZXhlZCBfdG8sDQogICAgICAgIHVpbnQyNTYgX2Ftb3VudCk7DQoNCiAgICBldmVudCBBcHByb3ZhbCgNCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9vd25lciwNCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLA0KICAgICAgICB1aW50MjU2IF9hbW91bnQpOw0KDQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiAvLyBvd25lcg0KICAgICAgICB1aW50MjU2KSBiYWxhbmNlczsNCg0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gLy8gb3duZXINCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IC8vIHNwZW5kZXINCiAgICAgICAgdWludDI1NikpIGFsbG93ZWQ7DQoNCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsNCg0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikNCiAgICBjb25zdGFudA0KICAgIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KQ0KICAgIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQoNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkNCiAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpDQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCg0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikNCiAgICBjb25zdGFudA0KICAgIHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsNCg0KfQ0KDQovKioNCiAqIEB0aXRsZSBTcG9yaw0KICoNCiAqIEBub3RpY2UgQSByb2d1ZSB1cGdyYWRlIHRva2VuIGZvciBUaGUgREFPLiBUaGVyZSBpcyBub3RoaW5nIHNhZmUgYWJvdXQgdGhpcw0KICogICBjb250cmFjdCBvciB0aGlzIGxpZmUgc28gc3RyYXAgaW4sIGJpdGNoZXMuIFlvdSBhcmUgcmVzcG9uc2libGUgZm9yIHlvdS4NCiAqICAgQSBTcG9yayBpcyBtaW50ZWQgdGhyb3VnaCBidXJuaW5nIERBTyB0b2tlbnMuIFRoaXMgaXMgaXJyZXZlcnNpYmxlIGFuZCBmb3INCiAqICAgZW50ZXJ0YWlubWVudCBwdXJwb3Nlcy4gU28gd2h5IHdvdWxkIHlvdSBkbyB0aGlzPyBEbyBpdCBmb3IgbG92ZSwgZG8gaXQNCiAqICAgZm9yIFNvIFRva2V5IE5hZGEgTW9qaXRvLCBkbyBpdCBmb3IgdGhlIGx1bHo7IGp1c3QgZG8gaXQgd2l0aCBjb252aWN0aW9uIQ0KICoNCiAqIHVzYWdlDQogKiAgIDEuIFVzZSBUaGUgREFPIHRvIGdyYW50IGFuIGFsbG93YW5jZSBvZiBEQU8gZm9yIHRoZSBTcG9yayBjb250cmFjdC4NCiAqICAgICAgKyBgREFPLmFwcHJvdmUoc3BvcmtfY29udHJhY3RfYWRkcmVzcywgYW1vdW50X29mX0RBT190b19idXJuKWANCiAqICAgICAgKyBPbmx5IGdyYW50IHRoZSBhbW91bnQgb2YgREFPIHlvdSBhcmUgcmVhZHkgdG8gZGVzdHJveSBmb3JldmVyLg0KICogICAyLiBVc2UgdGhlIFNwb3JrIG1pbnQgZnVuY3Rpb24gdG8gLi4uDQogKiAgICAgIDEuIEJ1cm4gYW4gYW1vdW50IG9mIERBTyB1cCB0byB0aGUgYW1vdW50IGFwcHJvdmVkIGluIHRoZSBwcmV2aW91cyBzdGVwLg0KICogICAgICAyLiBNaW50IGFuIGVxdWl2YWxlbnQgYW1vdW50IG9mIFNwb3JrLg0KICogICAgICAzLiBBc3NpZ24gU3BvcmsgdG9rZW5zIHRvIHRoZSBzZW5kZXIgYWNjb3VudC4NCiAqICAgMy4gWW91IG5vdyBoYXZlIFNwb3Jrcy4gRGlnIGluIQ0KICovDQpjb250cmFjdCBTcG9yayBpcyBUb2tlbkludGVyZmFjZSB7DQoNCiAgICAvLyBjcmFzaCBhbmQgYnVybg0KICAgIGFkZHJlc3MgY29uc3RhbnQgVGhlREFPID0gMHhiYjliYzI0NGQ3OTgxMjNmZGU3ODNmY2MxYzcyZDNiYjhjMTg5NDEzOw0KDQogICAgZXZlbnQgTWludCgNCiAgICAgICAgYWRkcmVzcyBpbmRleGVkIF9zZW5kZXIsDQogICAgICAgIHVpbnQyNTYgaW5kZXhlZCBfYW1vdW50LA0KICAgICAgICBzdHJpbmcgX2x1bHopOw0KDQogICAgLy8gdmFuaXR5IGF0dHJpYnV0ZXMNCiAgICBzdHJpbmcgcHVibGljIG5hbWUgPSAiU3BvcmsiOw0KICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gIlNQUksiOw0KICAgIHN0cmluZyBwdWJsaWMgdmVyc2lvbiA9ICJTcG9yazowLjEiOw0KICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDA7DQoNCiAgICAvLyBAc2VlIHtTcG9yay5taW50fQ0KICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgdGhyb3c7IC8vIHRoaXMgaXMgYSBjb2luLCBub3QgYSB3YWxsZXQuDQogICAgfQ0KDQogICAgLyoqDQogICAgICogQG5vdGljZSBCdXJuIERBTyB0b2tlbnMgaW4gZXhjaGFuZ2UgZm9yIFNwb3JrIHRva2Vucw0KICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCBvZiBEQU8gdG8gYnVybiBhbmQgZXF1aXZhbGVudCBTcG9yayB0byBtaW50DQogICAgICogQHBhcmFtIF9sdWx6IElmIHlvdSBnb3R0YSBnbywgZ28gd2l0aCBhIHNtaWxlISA/DQogICAgICogQHJldHVybiBEZXRlcm1pbmUgaWYgcmVxdWVzdCB3YXMgc3VjY2Vzc2Z1bA0KICAgICAqLw0KICAgIGZ1bmN0aW9uIG1pbnQodWludDI1NiBfYW1vdW50LCBzdHJpbmcgX2x1bHopDQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmICh0b3RhbFN1cHBseSArIF9hbW91bnQgPD0gdG90YWxTdXBwbHkpDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIHplcm8gb3Igcm9sbG92ZXIgdmFsdWUNCg0KICAgICAgICBpZiAoIVRva2VuSW50ZXJmYWNlKFRoZURBTykudHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIHRoaXMsIF9hbW91bnQpKQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyB1bmFibGUgdG8gcmV0cmlldmUgREFPIHRva2VucyBmb3Igc2VuZGVyDQoNCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gKz0gX2Ftb3VudDsNCiAgICAgICAgdG90YWxTdXBwbHkgKz0gX2Ftb3VudDsNCg0KICAgICAgICBNaW50KG1zZy5zZW5kZXIsIF9hbW91bnQsIF9sdWx6KTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQG5vdGljZSBUcmFuc2ZlciBTcG9yayB0b2tlbnMgZnJvbSBgbXNnLnNlbmRlcmAgdG8gYW5vdGhlciBhY2NvdW50Lg0KICAgICAqIEBwYXJhbSBfdG8gQWNjb3VudCByZWNlaXZpbmcgdG9rZW5zDQogICAgICogQHBhcmFtIF9hbW91bnQgQW1vdW50IG9mIHRva2VucyB0byB0cmFuc2Zlcg0KICAgICAqIEByZXR1cm4gRGV0ZXJtaW5lIGlmIHJlcXVlc3Qgd2FzIHN1Y2Nlc3NmdWwNCiAgICAgKi8NCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KQ0KICAgIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBpZiAoYmFsYW5jZXNbX3RvXSArIF9hbW91bnQgPD0gYmFsYW5jZXNbX3RvXSkNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gemVybyBvciByb2xsb3ZlciB2YWx1ZQ0KDQogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA8IF9hbW91bnQpDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIHBhcnR5IGZvdWwsIHNlbmRlciBkb2VzIG5vdCBoYXZlIGVub3VnaCBzcG9ya3MNCg0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfYW1vdW50Ow0KICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7DQoNCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQG5vdGljZSBUcmFuc2ZlciBTcG9yayB0b2tlbnMgZnJvbSBvbmUgYWNjb3VudCB0byBhbm90aGVyDQogICAgICogQHBhcmFtIF9mcm9tIEFjY291bnQgaG9sZGluZyB0b2tlbnMgZm9yIHdoaWNoIGBtc2cuc2VuZGVyYCBpcyBhbiBhcHByb3ZlZA0KICAgICAqICAgICAgICAgICAgICBzcGVuZGVyIHdpdGggYW4gYWxsb3dhbmNlIG9mIGF0IGxlYXN0IGBfYW1vdW50YCB0b2tlbnMNCiAgICAgKiBAcGFyYW0gX3RvIEFjY291bnQgcmVjZWl2aW5nIHRva2Vucw0KICAgICAqIEBwYXJhbSBfYW1vdW50IEFtb3VudCBvZiB0b2tlbnMgdG8gdHJhbnNmZXINCiAgICAgKiBAcmV0dXJuIERldGVybWluZSBpZiByZXF1ZXN0IHdhcyBzdWNjZXNzZnVsDQogICAgICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpDQogICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA8PSBiYWxhbmNlc1tfdG9dKQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyB6ZXJvIG9yIHJvbGxvdmVyIHZhbHVlDQoNCiAgICAgICAgaWYgKGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIDwgX2Ftb3VudCkNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gc2VuZGVyIGRvZXMgbm90IGhhdmUgZW5vdWdoIGFsbG93YW5jZQ0KDQogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA8IF9hbW91bnQpDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIHBhcnR5IGZvdWwsIHNlbmRlciBkb2VzIG5vdCBoYXZlIGVub3VnaCBzcG9ya3MNCg0KICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7DQogICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfYW1vdW50Ow0KICAgICAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfYW1vdW50Ow0KDQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAbm90aWNlIERldGVybWluZSB0aGUgU3BvcmsgdG9rZW4gYmFsYW5jZSBmb3IgYW4gYWNjb3VudA0KICAgICAqIEBwYXJhbSBfb3duZXIgQWNjb3VudCBob2xkaW5nIHRva2Vucw0KICAgICAqIEByZXR1cm4gVG9rZW4gYmFsYW5jZQ0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikNCiAgICBjb25zdGFudA0KICAgIHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgew0KICAgICAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAbm90aWNlIEFwcHJvdmUgYW4gYWRkcmVzcyB0byBzcGVuZCB0b2tlbnMgb24geW91ciBiZWhhbGYNCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgQWNjb3VudCB0byBzcGVuZCB0b2tlbnMgb24gYmVoYWxmIG9mIGBtc2cuc2VuZGVyYA0KICAgICAqIEBwYXJhbSBfYW1vdW50IE1heGltdW0gYW1vdW50IGBfc3BlbmRlcmAgY2FuIHRyYW5zZmVyIGZyb20gYG1zZy5zZW5kZXJgDQogICAgICogQHJldHVybiBEZXRlcm1pbmUgaWYgcmVxdWVzdCB3YXMgc3VjY2Vzc2Z1bA0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KQ0KICAgIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQG5vdGljZSBNYXhpbXVtIGFtb3VudCBhIHNwZW5kZXIgY2FuIHdpdGhkcmF3IGZyb20gYW4gYWNjb3VudA0KICAgICAqIEBwYXJhbSBfb3duZXIgVGhlIGFjY291bnQgaG9sZGluZyB0b2tlbnMNCiAgICAgKiBAcGFyYW0gX3NwZW5kZXIgVGhlIGFjY291bnQgc3BlbmRpbmcgdG9rZW5zDQogICAgICogQHJldHVybiBSZW1haW5pbmcgYWxsb3dhbmNlIGBfc3BlbmRlcmAgY2FuIHdpdGhkcmF3IGZyb20gYF9vd25lcmANCiAgICAgKi8NCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpDQogICAgY29uc3RhbnQNCiAgICByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgew0KICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQogICAgfQ0KDQp9'