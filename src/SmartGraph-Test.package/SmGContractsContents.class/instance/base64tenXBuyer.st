base 64 content
base64tenXBuyer
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoNCg0KVGVuWCBCdXllcg0KPT09PT09PT09PT09PT09PT09PT09PT09DQoNCkJ1eXMgVGVuWCB0b2tlbnMgZnJvbSB0aGUgY3Jvd2RzYWxlIG9uIHlvdXIgYmVoYWxmLg0KQXV0aG9yOiAvdS9DaW50aXgNCg0KKi8NCg0KLy8gRVJDMjAgSW50ZXJmYWNlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjANCi8vIFdlbGwsIGFsbW9zdC4gIFBBWSB0b2tlbnMgdGhyb3cgb24gdHJhbnNmZXIgZmFpbHVyZSBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZS4NCmNvbnRyYWN0IEVSQzIwIHsNCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKTsNCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpOw0KfQ0KDQovLyBJbnRlcmZhY2UgdG8gVGVuWCBJQ08gQ29udHJhY3QNCmNvbnRyYWN0IE1haW5TYWxlIHsNCiAgYWRkcmVzcyBwdWJsaWMgbXVsdGlzaWdWYXVsdDsNCiAgdWludCBwdWJsaWMgYWx0RGVwb3NpdHM7DQogIGZ1bmN0aW9uIGNyZWF0ZVRva2VucyhhZGRyZXNzIHJlY2lwaWVudCkgcGF5YWJsZTsNCn0NCg0KY29udHJhY3QgVGVuWEJ1eWVyIHsNCiAgLy8gU3RvcmUgdGhlIGFtb3VudCBvZiBFVEggZGVwb3NpdGVkIGJ5IGVhY2ggYWNjb3VudC4NCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgYmFsYW5jZXM7DQogIC8vIFN0b3JlIHdoZXRoZXIgb3Igbm90IGVhY2ggYWNjb3VudCB3b3VsZCBoYXZlIG1hZGUgaXQgaW50byB0aGUgY3Jvd2RzYWxlLg0KICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBjaGVja2VkX2luOw0KICAvLyBCb3VudHkgZm9yIGV4ZWN1dGluZyBidXkuDQogIHVpbnQyNTYgcHVibGljIGJvdW50eTsNCiAgLy8gVHJhY2sgd2hldGhlciB0aGUgY29udHJhY3QgaGFzIGJvdWdodCB0aGUgdG9rZW5zIHlldC4NCiAgYm9vbCBwdWJsaWMgYm91Z2h0X3Rva2VuczsNCiAgLy8gUmVjb3JkIHRoZSB0aW1lIHRoZSBjb250cmFjdCBib3VnaHQgdGhlIHRva2Vucy4NCiAgdWludCBwdWJsaWMgdGltZV9ib3VnaHQ7DQogIC8vIEVtZXJnZW5jeSBraWxsIHN3aXRjaCBpbiBjYXNlIGEgY3JpdGljYWwgYnVnIGlzIGZvdW5kLg0KICBib29sIHB1YmxpYyBraWxsX3N3aXRjaDsNCiAgDQogIC8vIEhhcmQgQ2FwIG9mIFRlblggQ3Jvd2RzYWxlDQogIHVpbnQgaGFyZGNhcCA9IDIwMDAwMCBldGhlcjsNCiAgLy8gUmF0aW8gb2YgUEFZIHRva2VucyByZWNlaXZlZCB0byBFVEggY29udHJpYnV0ZWQgKDM1MCArIDIwJSBmaXJzdC1kYXkgYm9udXMpDQogIHVpbnQgcGF5X3Blcl9ldGggPSA0MjA7DQogIA0KICAvLyBUaGUgVGVuWCBUb2tlbiBTYWxlIGFkZHJlc3MuDQogIE1haW5TYWxlIHB1YmxpYyBzYWxlID0gTWFpblNhbGUoMHhkNDNEMDlFYzFiQzVlNTdDOEYzRDBjNjQwMjBkNDAzYjA0YzdmNzgzKTsNCiAgLy8gVGVuWCBQQVkgVG9rZW4gQ29udHJhY3QgYWRkcmVzcy4NCiAgRVJDMjAgcHVibGljIHRva2VuID0gRVJDMjAoMHhCOTcwNDg2MjhEQjZCNjYxRDRDMmFBODMzZTk1RGJlMUE5MDVCMjgwKTsNCiAgLy8gVGhlIGRldmVsb3BlciBhZGRyZXNzLg0KICBhZGRyZXNzIGRldmVsb3BlciA9IDB4MDAwRmI4MzY5Njc3YjMwNjVkRTU4MjFhODZCYzk1NTFkNWU1RUFiOTsNCiAgDQogIC8vIEFsbG93cyB0aGUgZGV2ZWxvcGVyIHRvIHNodXQgZG93biBldmVyeXRoaW5nIGV4Y2VwdCB3aXRoZHJhd2FscyBpbiBlbWVyZ2VuY2llcy4NCiAgZnVuY3Rpb24gYWN0aXZhdGVfa2lsbF9zd2l0Y2goKSB7DQogICAgLy8gT25seSBhbGxvdyB0aGUgZGV2ZWxvcGVyIHRvIGFjdGl2YXRlIHRoZSBraWxsIHN3aXRjaC4NCiAgICBpZiAobXNnLnNlbmRlciAhPSBkZXZlbG9wZXIpIHRocm93Ow0KICAgIC8vIElycmV2ZXJzaWJseSBhY3RpdmF0ZSB0aGUga2lsbCBzd2l0Y2guDQogICAga2lsbF9zd2l0Y2ggPSB0cnVlOw0KICB9DQogIA0KICAvLyBXaXRoZHJhd3MgYWxsIEVUSCBkZXBvc2l0ZWQgb3IgUEFZIHB1cmNoYXNlZCBieSB0aGUgc2VuZGVyLg0KICBmdW5jdGlvbiB3aXRoZHJhdygpew0KICAgIC8vIElmIGNhbGxlZCBiZWZvcmUgdGhlIElDTywgY2FuY2VsIGNhbGxlcidzIHBhcnRpY2lwYXRpb24gaW4gdGhlIHNhbGUuDQogICAgaWYgKCFib3VnaHRfdG9rZW5zKSB7DQogICAgICAvLyBTdG9yZSB0aGUgdXNlcidzIGJhbGFuY2UgcHJpb3IgdG8gd2l0aGRyYXdhbCBpbiBhIHRlbXBvcmFyeSB2YXJpYWJsZS4NCiAgICAgIHVpbnQgZXRoX2Ftb3VudCA9IGJhbGFuY2VzW21zZy5zZW5kZXJdOw0KICAgICAgLy8gVXBkYXRlIHRoZSB1c2VyJ3MgYmFsYW5jZSBwcmlvciB0byBzZW5kaW5nIEVUSCB0byBwcmV2ZW50IHJlY3Vyc2l2ZSBjYWxsLg0KICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOw0KICAgICAgLy8gUmV0dXJuIHRoZSB1c2VyJ3MgZnVuZHMuICBUaHJvd3Mgb24gZmFpbHVyZSB0byBwcmV2ZW50IGxvc3Mgb2YgZnVuZHMuDQogICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGV0aF9hbW91bnQpOw0KICAgIH0NCiAgICAvLyBXaXRoZHJhdyB0aGUgc2VuZGVyJ3MgdG9rZW5zIGlmIHRoZSBjb250cmFjdCBoYXMgYWxyZWFkeSBwdXJjaGFzZWQgdGhlbS4NCiAgICBlbHNlIHsNCiAgICAgIC8vIFN0b3JlIHRoZSB1c2VyJ3MgUEFZIGJhbGFuY2UgaW4gYSB0ZW1wb3JhcnkgdmFyaWFibGUgKDEgRVRIV2VpIC0+IDQyMCBQQVlXZWkpLg0KICAgICAgdWludCBwYXlfYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0gKiBwYXlfcGVyX2V0aDsNCiAgICAgIC8vIFVwZGF0ZSB0aGUgdXNlcidzIGJhbGFuY2UgcHJpb3IgdG8gc2VuZGluZyBQQVkgdG8gcHJldmVudCByZWN1cnNpdmUgY2FsbC4NCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsNCiAgICAgIC8vIE5vIGZlZSBmb3Igd2l0aGRyYXdpbmcgaWYgdGhlIHVzZXIgd291bGQgaGF2ZSBtYWRlIGl0IGludG8gdGhlIGNyb3dkc2FsZSBhbG9uZS4NCiAgICAgIHVpbnQgZmVlID0gMDsNCiAgICAgIC8vIDElIGZlZSBpZiB0aGUgdXNlciBkaWRuJ3QgY2hlY2sgaW4gZHVyaW5nIHRoZSBjcm93ZHNhbGUuDQogICAgICBpZiAoIWNoZWNrZWRfaW5bbXNnLnNlbmRlcl0pIHsNCiAgICAgICAgZmVlID0gcGF5X2Ftb3VudCAvIDEwMDsNCiAgICAgIH0NCiAgICAgIC8vIFNlbmQgdGhlIGZ1bmRzLiAgVGhyb3dzIG9uIGZhaWx1cmUgdG8gcHJldmVudCBsb3NzIG9mIGZ1bmRzLg0KICAgICAgdG9rZW4udHJhbnNmZXIobXNnLnNlbmRlciwgcGF5X2Ftb3VudCAtIGZlZSk7DQogICAgICB0b2tlbi50cmFuc2ZlcihkZXZlbG9wZXIsIGZlZSk7DQogICAgfQ0KICB9DQogIA0KICAvLyBBbGxvdyBhbnlvbmUgdG8gY29udHJpYnV0ZSB0byB0aGUgYnV5IGV4ZWN1dGlvbiBib3VudHkuDQogIGZ1bmN0aW9uIGFkZF90b19ib3VudHkoKSBwYXlhYmxlIHsNCiAgICAvLyBEaXNhbGxvdyBhZGRpbmcgdG8gYm91bnR5IGlmIGtpbGwgc3dpdGNoIGlzIGFjdGl2ZS4NCiAgICBpZiAoa2lsbF9zd2l0Y2gpIHRocm93Ow0KICAgIC8vIERpc2FsbG93IGFkZGluZyB0byB0aGUgYm91bnR5IGlmIGNvbnRyYWN0IGhhcyBhbHJlYWR5IGJvdWdodCB0aGUgdG9rZW5zLg0KICAgIGlmIChib3VnaHRfdG9rZW5zKSB0aHJvdzsNCiAgICAvLyBVcGRhdGUgYm91bnR5IHRvIGluY2x1ZGUgcmVjZWl2ZWQgYW1vdW50Lg0KICAgIGJvdW50eSArPSBtc2cudmFsdWU7DQogIH0NCiAgDQogIC8vIEJ1eXMgdG9rZW5zIGluIHRoZSBjcm93ZHNhbGUgYW5kIHJld2FyZHMgdGhlIGNhbGxlciwgY2FsbGFibGUgYnkgYW55b25lLg0KICBmdW5jdGlvbiBidXkoKXsNCiAgICAvLyBTaG9ydCBjaXJjdWl0IHRvIHNhdmUgZ2FzIGlmIHRoZSBjb250cmFjdCBoYXMgYWxyZWFkeSBib3VnaHQgdG9rZW5zLg0KICAgIGlmIChib3VnaHRfdG9rZW5zKSByZXR1cm47DQogICAgLy8gRGlzYWxsb3cgYnV5aW5nIGludG8gdGhlIGNyb3dkc2FsZSBpZiBraWxsIHN3aXRjaCBpcyBhY3RpdmUuDQogICAgaWYgKGtpbGxfc3dpdGNoKSB0aHJvdzsNCiAgICAvLyBSZWNvcmQgdGhhdCB0aGUgY29udHJhY3QgaGFzIGJvdWdodCB0aGUgdG9rZW5zLg0KICAgIGJvdWdodF90b2tlbnMgPSB0cnVlOw0KICAgIC8vIFJlY29yZCB0aGUgdGltZSB0aGUgY29udHJhY3QgYm91Z2h0IHRoZSB0b2tlbnMuDQogICAgdGltZV9ib3VnaHQgPSBub3c7DQogICAgLy8gVHJhbnNmZXIgYWxsIHRoZSBmdW5kcyAobGVzcyB0aGUgYm91bnR5KSB0byB0aGUgVGVuWCBjcm93ZHNhbGUgY29udHJhY3QNCiAgICAvLyB0byBidXkgdG9rZW5zLiAgVGhyb3dzIGlmIHRoZSBjcm93ZHNhbGUgaGFzbid0IHN0YXJ0ZWQgeWV0IG9yIGhhcw0KICAgIC8vIGFscmVhZHkgY29tcGxldGVkLCBwcmV2ZW50aW5nIGxvc3Mgb2YgZnVuZHMuDQogICAgc2FsZS5jcmVhdGVUb2tlbnMudmFsdWUodGhpcy5iYWxhbmNlIC0gYm91bnR5KShhZGRyZXNzKHRoaXMpKTsNCiAgICAvLyBTZW5kIHRoZSBjYWxsZXIgdGhlaXIgYm91bnR5IGZvciBidXlpbmcgdG9rZW5zIGZvciB0aGUgY29udHJhY3QuDQogICAgbXNnLnNlbmRlci50cmFuc2Zlcihib3VudHkpOw0KICB9DQogIA0KICAvLyBBIGhlbHBlciBmdW5jdGlvbiBmb3IgdGhlIGRlZmF1bHQgZnVuY3Rpb24sIGFsbG93aW5nIGNvbnRyYWN0cyB0byBpbnRlcmFjdC4NCiAgZnVuY3Rpb24gZGVmYXVsdF9oZWxwZXIoKSBwYXlhYmxlIHsNCiAgICAvLyBUcmVhdCAwIEVUSCB0cmFuc2FjdGlvbnMgYXMgY2hlY2sgaW5zIGFuZCB3aXRoZHJhd2FsIHJlcXVlc3RzLg0KICAgIGlmIChtc2cudmFsdWUgPT0gMCkgew0KICAgICAgLy8gQ2hlY2sgaW4gZHVyaW5nIHRoZSBib251cyBwZXJpb2QuDQogICAgICBpZiAoYm91Z2h0X3Rva2VucyAmJiAobm93IDwgdGltZV9ib3VnaHQgKyAxIGRheXMpKSB7DQogICAgICAgIC8vIE9ubHkgYWxsb3cgY2hlY2tpbmcgaW4gYmVmb3JlIHRoZSBjcm93ZHNhbGUgaGFzIHJlYWNoZWQgdGhlIGNhcC4NCiAgICAgICAgaWYgKHNhbGUubXVsdGlzaWdWYXVsdCgpLmJhbGFuY2UgKyBzYWxlLmFsdERlcG9zaXRzKCkgPiBoYXJkY2FwKSB0aHJvdzsNCiAgICAgICAgLy8gTWFyayB1c2VyIGFzIGNoZWNrZWQgaW4sIG1lYW5pbmcgdGhleSB3b3VsZCBoYXZlIGJlZW4gYWJsZSB0byBlbnRlciBhbG9uZS4NCiAgICAgICAgY2hlY2tlZF9pblttc2cuc2VuZGVyXSA9IHRydWU7DQogICAgICB9DQogICAgICAvLyBXaXRoZHJhdyBmdW5kcyBpZiB0aGUgY3Jvd2RzYWxlIGhhc24ndCBiZWd1biB5ZXQgb3IgaWYgdGhlIGJvbnVzIHBlcmlvZCBpcyBvdmVyLg0KICAgICAgZWxzZSB7DQogICAgICAgIHdpdGhkcmF3KCk7DQogICAgICB9DQogICAgfQ0KICAgIC8vIERlcG9zaXQgdGhlIHVzZXIncyBmdW5kcyBmb3IgdXNlIGluIHB1cmNoYXNpbmcgdG9rZW5zLg0KICAgIGVsc2Ugew0KICAgICAgLy8gRGlzYWxsb3cgZGVwb3NpdHMgaWYga2lsbCBzd2l0Y2ggaXMgYWN0aXZlLg0KICAgICAgaWYgKGtpbGxfc3dpdGNoKSB0aHJvdzsNCiAgICAgIC8vIE9ubHkgYWxsb3cgZGVwb3NpdHMgaWYgdGhlIGNvbnRyYWN0IGhhc24ndCBhbHJlYWR5IHB1cmNoYXNlZCB0aGUgdG9rZW5zLg0KICAgICAgaWYgKGJvdWdodF90b2tlbnMpIHRocm93Ow0KICAgICAgLy8gVXBkYXRlIHJlY29yZHMgb2YgZGVwb3NpdGVkIEVUSCB0byBpbmNsdWRlIHRoZSByZWNlaXZlZCBhbW91bnQuDQogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSBtc2cudmFsdWU7DQogICAgfQ0KICB9DQogIA0KICAvLyBEZWZhdWx0IGZ1bmN0aW9uLiAgQ2FsbGVkIHdoZW4gYSB1c2VyIHNlbmRzIEVUSCB0byB0aGUgY29udHJhY3QuDQogIGZ1bmN0aW9uICgpIHBheWFibGUgew0KICAgIC8vIERlbGVnYXRlIHRvIHRoZSBoZWxwZXIgZnVuY3Rpb24uDQogICAgZGVmYXVsdF9oZWxwZXIoKTsNCiAgfQ0KfQ=='