base 64 content
base64tenXBuyer1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoNCg0KVGVuWCBCdXllcg0KPT09PT09PT09PT09PT09PT09PT09PT09DQoNCkJ1eXMgVGVuWCB0b2tlbnMgZnJvbSB0aGUgY3Jvd2RzYWxlIG9uIHlvdXIgYmVoYWxmLg0KQXV0aG9yOiAvdS9DaW50aXgNCg0KKi8NCg0KLy8gRVJDMjAgSW50ZXJmYWNlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjANCi8vIFdlbGwsIGFsbW9zdC4gIFBBWSB0b2tlbnMgdGhyb3cgb24gdHJhbnNmZXIgZmFpbHVyZSBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZS4NCmNvbnRyYWN0IEVSQzIwIHsNCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKTsNCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpOw0KfQ0KDQovLyBJbnRlcmZhY2UgdG8gVGVuWCBJQ08gQ29udHJhY3QNCmNvbnRyYWN0IE1haW5TYWxlIHsNCiAgYWRkcmVzcyBwdWJsaWMgbXVsdGlzaWdWYXVsdDsNCiAgdWludCBwdWJsaWMgYWx0RGVwb3NpdHM7DQogIGZ1bmN0aW9uIGNyZWF0ZVRva2VucyhhZGRyZXNzIHJlY2lwaWVudCkgcGF5YWJsZTsNCn0NCg0KY29udHJhY3QgVGVuWEJ1eWVyIHsNCiAgLy8gU3RvcmUgdGhlIGFtb3VudCBvZiBFVEggZGVwb3NpdGVkIGJ5IGVhY2ggYWNjb3VudC4NCiAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgYmFsYW5jZXM7DQogIC8vIFN0b3JlIHdoZXRoZXIgb3Igbm90IGVhY2ggYWNjb3VudCB3b3VsZCBoYXZlIG1hZGUgaXQgaW50byB0aGUgY3Jvd2RzYWxlLg0KICBtYXBwaW5nIChhZGRyZXNzID0+IGJvb2wpIHB1YmxpYyBjaGVja2VkX2luOw0KICAvLyBCb3VudHkgZm9yIGV4ZWN1dGluZyBidXkuDQogIHVpbnQyNTYgcHVibGljIGJvdW50eTsNCiAgLy8gVHJhY2sgd2hldGhlciB0aGUgY29udHJhY3QgaGFzIGJvdWdodCB0aGUgdG9rZW5zIHlldC4NCiAgYm9vbCBwdWJsaWMgYm91Z2h0X3Rva2VuczsNCiAgLy8gUmVjb3JkIHRoZSB0aW1lIHRoZSBjb250cmFjdCBib3VnaHQgdGhlIHRva2Vucy4NCiAgdWludCBwdWJsaWMgdGltZV9ib3VnaHQ7DQogIC8vIEVtZXJnZW5jeSBraWxsIHN3aXRjaCBpbiBjYXNlIGEgY3JpdGljYWwgYnVnIGlzIGZvdW5kLg0KICBib29sIGtpbGxfc3dpdGNoOw0KICANCiAgLy8gSGFyZCBDYXAgb2YgVGVuWCBDcm93ZHNhbGUNCiAgdWludCBoYXJkY2FwID0gMjAwMDAwIGV0aGVyOw0KICAvLyBSYXRpbyBvZiBQQVkgdG9rZW5zIHJlY2VpdmVkIHRvIEVUSCBjb250cmlidXRlZCAoMzUwICsgMjAlIGZpcnN0LWRheSBib251cykNCiAgdWludCBwYXlfcGVyX2V0aCA9IDQyMDsNCiAgDQogIC8vIFRoZSBUZW5YIFRva2VuIFNhbGUgYWRkcmVzcy4NCiAgTWFpblNhbGUgcHVibGljIHNhbGUgPSBNYWluU2FsZSgweGQ0M0QwOUVjMWJDNWU1N0M4RjNEMGM2NDAyMGQ0MDNiMDRjN2Y3ODMpOw0KICAvLyBUZW5YIFBBWSBUb2tlbiBDb250cmFjdCBhZGRyZXNzLg0KICBFUkMyMCBwdWJsaWMgdG9rZW4gPSBFUkMyMCgweEI5NzA0ODYyOERCNkI2NjFENEMyYUE4MzNlOTVEYmUxQTkwNUIyODApOw0KICAvLyBUaGUgZGV2ZWxvcGVyIGFkZHJlc3MuDQogIGFkZHJlc3MgZGV2ZWxvcGVyID0gMHgwMDBGYjgzNjk2NzdiMzA2NWRFNTgyMWE4NkJjOTU1MWQ1ZTVFQWI5Ow0KICANCiAgLy8gQWxsb3dzIHRoZSBkZXZlbG9wZXIgdG8gc2h1dCBkb3duIGV2ZXJ5dGhpbmcgZXhjZXB0IHdpdGhkcmF3YWxzIGluIGVtZXJnZW5jaWVzLg0KICBmdW5jdGlvbiBhY3RpdmF0ZV9raWxsX3N3aXRjaCgpIHsNCiAgICAvLyBPbmx5IGFsbG93IHRoZSBkZXZlbG9wZXIgdG8gYWN0aXZhdGUgdGhlIGtpbGwgc3dpdGNoLg0KICAgIGlmIChtc2cuc2VuZGVyICE9IGRldmVsb3BlcikgdGhyb3c7DQogICAgLy8gSXJyZXZlcnNpYmx5IGFjdGl2YXRlIHRoZSBraWxsIHN3aXRjaC4NCiAgICBraWxsX3N3aXRjaCA9IHRydWU7DQogIH0NCiAgDQogIC8vIFdpdGhkcmF3cyBhbGwgRVRIIGRlcG9zaXRlZCBvciBQQVkgcHVyY2hhc2VkIGJ5IHRoZSBzZW5kZXIuDQogIGZ1bmN0aW9uIHdpdGhkcmF3KCl7DQogICAgLy8gSWYgY2FsbGVkIGJlZm9yZSB0aGUgSUNPLCBjYW5jZWwgY2FsbGVyJ3MgcGFydGljaXBhdGlvbiBpbiB0aGUgc2FsZS4NCiAgICBpZiAoIWJvdWdodF90b2tlbnMpIHsNCiAgICAgIC8vIFN0b3JlIHRoZSB1c2VyJ3MgYmFsYW5jZSBwcmlvciB0byB3aXRoZHJhd2FsIGluIGEgdGVtcG9yYXJ5IHZhcmlhYmxlLg0KICAgICAgdWludCBldGhfYW1vdW50ID0gYmFsYW5jZXNbbXNnLnNlbmRlcl07DQogICAgICAvLyBVcGRhdGUgdGhlIHVzZXIncyBiYWxhbmNlIHByaW9yIHRvIHNlbmRpbmcgRVRIIHRvIHByZXZlbnQgcmVjdXJzaXZlIGNhbGwuDQogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7DQogICAgICAvLyBSZXR1cm4gdGhlIHVzZXIncyBmdW5kcy4gIFRocm93cyBvbiBmYWlsdXJlIHRvIHByZXZlbnQgbG9zcyBvZiBmdW5kcy4NCiAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoZXRoX2Ftb3VudCk7DQogICAgfQ0KICAgIC8vIFdpdGhkcmF3IHRoZSBzZW5kZXIncyB0b2tlbnMgaWYgdGhlIGNvbnRyYWN0IGhhcyBhbHJlYWR5IHB1cmNoYXNlZCB0aGVtLg0KICAgIGVsc2Ugew0KICAgICAgLy8gU3RvcmUgdGhlIHVzZXIncyBQQVkgYmFsYW5jZSBpbiBhIHRlbXBvcmFyeSB2YXJpYWJsZSAoMSBFVEhXZWkgLT4gNDIwIFBBWVdlaSkuDQogICAgICB1aW50IHBheV9hbW91bnQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXSAqIHBheV9wZXJfZXRoOw0KICAgICAgLy8gVXBkYXRlIHRoZSB1c2VyJ3MgYmFsYW5jZSBwcmlvciB0byBzZW5kaW5nIFBBWSB0byBwcmV2ZW50IHJlY3Vyc2l2ZSBjYWxsLg0KICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOw0KICAgICAgLy8gTm8gZmVlIGZvciB3aXRoZHJhd2luZyBpZiB0aGUgdXNlciB3b3VsZCBoYXZlIG1hZGUgaXQgaW50byB0aGUgY3Jvd2RzYWxlIGFsb25lLg0KICAgICAgdWludCBmZWUgPSAwOw0KICAgICAgLy8gMSUgZmVlIGlmIHRoZSB1c2VyIGRpZG4ndCBjaGVjayBpbiBkdXJpbmcgdGhlIGNyb3dkc2FsZS4NCiAgICAgIGlmICghY2hlY2tlZF9pblttc2cuc2VuZGVyXSkgew0KICAgICAgICBmZWUgPSBwYXlfYW1vdW50IC8gMTAwOw0KICAgICAgfQ0KICAgICAgLy8gU2VuZCB0aGUgZnVuZHMuICBUaHJvd3Mgb24gZmFpbHVyZSB0byBwcmV2ZW50IGxvc3Mgb2YgZnVuZHMuDQogICAgICB0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBwYXlfYW1vdW50IC0gZmVlKTsNCiAgICAgIHRva2VuLnRyYW5zZmVyKGRldmVsb3BlciwgZmVlKTsNCiAgICB9DQogIH0NCiAgDQogIC8vIEFsbG93IGFueW9uZSB0byBjb250cmlidXRlIHRvIHRoZSBidXkgZXhlY3V0aW9uIGJvdW50eS4NCiAgZnVuY3Rpb24gYWRkX3RvX2JvdW50eSgpIHBheWFibGUgew0KICAgIC8vIERpc2FsbG93IGFkZGluZyB0byBib3VudHkgaWYga2lsbCBzd2l0Y2ggaXMgYWN0aXZlLg0KICAgIGlmIChraWxsX3N3aXRjaCkgdGhyb3c7DQogICAgLy8gRGlzYWxsb3cgYWRkaW5nIHRvIHRoZSBib3VudHkgaWYgY29udHJhY3QgaGFzIGFscmVhZHkgYm91Z2h0IHRoZSB0b2tlbnMuDQogICAgaWYgKGJvdWdodF90b2tlbnMpIHRocm93Ow0KICAgIC8vIFVwZGF0ZSBib3VudHkgdG8gaW5jbHVkZSByZWNlaXZlZCBhbW91bnQuDQogICAgYm91bnR5ICs9IG1zZy52YWx1ZTsNCiAgfQ0KICANCiAgLy8gQnV5cyB0b2tlbnMgaW4gdGhlIGNyb3dkc2FsZSBhbmQgcmV3YXJkcyB0aGUgY2FsbGVyLCBjYWxsYWJsZSBieSBhbnlvbmUuDQogIGZ1bmN0aW9uIGJ1eSgpew0KICAgIC8vIFNob3J0IGNpcmN1aXQgdG8gc2F2ZSBnYXMgaWYgdGhlIGNvbnRyYWN0IGhhcyBhbHJlYWR5IGJvdWdodCB0b2tlbnMuDQogICAgaWYgKGJvdWdodF90b2tlbnMpIHJldHVybjsNCiAgICAvLyBEaXNhbGxvdyBidXlpbmcgaW50byB0aGUgY3Jvd2RzYWxlIGlmIGtpbGwgc3dpdGNoIGlzIGFjdGl2ZS4NCiAgICBpZiAoa2lsbF9zd2l0Y2gpIHRocm93Ow0KICAgIC8vIFJlY29yZCB0aGF0IHRoZSBjb250cmFjdCBoYXMgYm91Z2h0IHRoZSB0b2tlbnMuDQogICAgYm91Z2h0X3Rva2VucyA9IHRydWU7DQogICAgLy8gUmVjb3JkIHRoZSB0aW1lIHRoZSBjb250cmFjdCBib3VnaHQgdGhlIHRva2Vucy4NCiAgICB0aW1lX2JvdWdodCA9IG5vdzsNCiAgICAvLyBUcmFuc2ZlciBhbGwgdGhlIGZ1bmRzIChsZXNzIHRoZSBib3VudHkpIHRvIHRoZSBUZW5YIGNyb3dkc2FsZSBjb250cmFjdA0KICAgIC8vIHRvIGJ1eSB0b2tlbnMuICBUaHJvd3MgaWYgdGhlIGNyb3dkc2FsZSBoYXNuJ3Qgc3RhcnRlZCB5ZXQgb3IgaGFzDQogICAgLy8gYWxyZWFkeSBjb21wbGV0ZWQsIHByZXZlbnRpbmcgbG9zcyBvZiBmdW5kcy4NCiAgICBzYWxlLmNyZWF0ZVRva2Vucy52YWx1ZSh0aGlzLmJhbGFuY2UgLSBib3VudHkpKGFkZHJlc3ModGhpcykpOw0KICAgIC8vIFNlbmQgdGhlIGNhbGxlciB0aGVpciBib3VudHkgZm9yIGJ1eWluZyB0b2tlbnMgZm9yIHRoZSBjb250cmFjdC4NCiAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKGJvdW50eSk7DQogIH0NCiAgDQogIC8vIEEgaGVscGVyIGZ1bmN0aW9uIGZvciB0aGUgZGVmYXVsdCBmdW5jdGlvbiwgYWxsb3dpbmcgY29udHJhY3RzIHRvIGludGVyYWN0Lg0KICBmdW5jdGlvbiBkZWZhdWx0X2hlbHBlcigpIHBheWFibGUgew0KICAgIC8vIFRyZWF0IDAgRVRIIHRyYW5zYWN0aW9ucyBhcyBjaGVjayBpbnMgYW5kIHdpdGhkcmF3YWwgcmVxdWVzdHMuDQogICAgaWYgKG1zZy52YWx1ZSA9PSAwKSB7DQogICAgICAvLyBDaGVjayBpbiBkdXJpbmcgdGhlIGJvbnVzIHBlcmlvZC4NCiAgICAgIGlmIChib3VnaHRfdG9rZW5zICYmIChub3cgPCB0aW1lX2JvdWdodCArIDEgZGF5cykpIHsNCiAgICAgICAgLy8gT25seSBhbGxvdyBjaGVja2luZyBpbiBiZWZvcmUgdGhlIGNyb3dkc2FsZSBoYXMgcmVhY2hlZCB0aGUgY2FwLg0KICAgICAgICBpZiAoc2FsZS5tdWx0aXNpZ1ZhdWx0KCkuYmFsYW5jZSArIHNhbGUuYWx0RGVwb3NpdHMoKSA+IGhhcmRjYXApIHRocm93Ow0KICAgICAgICAvLyBNYXJrIHVzZXIgYXMgY2hlY2tlZCBpbiwgbWVhbmluZyB0aGV5IHdvdWxkIGhhdmUgYmVlbiBhYmxlIHRvIGVudGVyIGFsb25lLg0KICAgICAgICBjaGVja2VkX2luW21zZy5zZW5kZXJdID0gdHJ1ZTsNCiAgICAgIH0NCiAgICAgIC8vIFdpdGhkcmF3IGZ1bmRzIGlmIHRoZSBjcm93ZHNhbGUgaGFzbid0IGJlZ3VuIHlldCBvciBpZiB0aGUgYm9udXMgcGVyaW9kIGlzIG92ZXIuDQogICAgICBlbHNlIHsNCiAgICAgICAgd2l0aGRyYXcoKTsNCiAgICAgIH0NCiAgICB9DQogICAgLy8gRGVwb3NpdCB0aGUgdXNlcidzIGZ1bmRzIGZvciB1c2UgaW4gcHVyY2hhc2luZyB0b2tlbnMuDQogICAgZWxzZSB7DQogICAgICAvLyBEaXNhbGxvdyBkZXBvc2l0cyBpZiBraWxsIHN3aXRjaCBpcyBhY3RpdmUuDQogICAgICBpZiAoa2lsbF9zd2l0Y2gpIHRocm93Ow0KICAgICAgLy8gT25seSBhbGxvdyBkZXBvc2l0cyBpZiB0aGUgY29udHJhY3QgaGFzbid0IGFscmVhZHkgcHVyY2hhc2VkIHRoZSB0b2tlbnMuDQogICAgICBpZiAoYm91Z2h0X3Rva2VucykgdGhyb3c7DQogICAgICAvLyBVcGRhdGUgcmVjb3JkcyBvZiBkZXBvc2l0ZWQgRVRIIHRvIGluY2x1ZGUgdGhlIHJlY2VpdmVkIGFtb3VudC4NCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdICs9IG1zZy52YWx1ZTsNCiAgICB9DQogIH0NCiAgDQogIC8vIERlZmF1bHQgZnVuY3Rpb24uICBDYWxsZWQgd2hlbiBhIHVzZXIgc2VuZHMgRVRIIHRvIHRoZSBjb250cmFjdC4NCiAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7DQogICAgLy8gRGVsZWdhdGUgdG8gdGhlIGhlbHBlciBmdW5jdGlvbi4NCiAgICBkZWZhdWx0X2hlbHBlcigpOw0KICB9DQp9'