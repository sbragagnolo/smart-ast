base 64 content
base64theEthereumLottery
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC43Ow0KY29udHJhY3QgVGhlRXRoZXJldW1Mb3R0ZXJ5IHsNCiAvKg0KICAgIEJyaWVmIGludHJvZHVjdGlvbjoNCiAgICANCiAgICBUbyBwbGF5IHlvdSBuZWVkIHRvIHBpY2sgNCBudW1iZXJzIChyYW5nZSAwLTI1NSkgYW5kIHByb3ZpZGUgdGhlbSBzb3J0ZWQgdG8gUGxheSgpIGZ1bmN0aW9uLg0KICAgIFRvIHdpbiB5b3UgbmVlZCB0byBoaXQgYXQgbGVhc3QgMSBudW1iZXIgb3V0IG9mIDQgV2lubmluZ051bXMgd2hpY2ggd2lsbCBiZSBhbm5vdW5jZWQgb25jZSBldmVyeSB3ZWVrDQogICAgKG9yIG1vcmUgb2Z0ZW4gaWYgdGhlIGxvdHRlcnkgd2lsbCBiZWNvbWUgbW9yZSBwb3B1bGFyKS4gSWYgeW91IGhpdCBhbGwgb2YgdGhlIDQgbnVtYmVycyB5b3Ugd2lsbCB3aW4NCiAgICBhYm91dCAxMCBtaWxsaW9uIHRpbWVzIG1vcmUgdGhhbiB5b3UgcGF5ZWQgZm9yIGxvdHRlcnkgdGlja2V0LiBUaGUgZXhhY3QgdmFsdWVzIGFyZSBwcm92aWRlZCBhcyBHdWVzc1hPdXRPZjQNCiAgICBlbnRyaWVzIGluIExlZGdlciAtIG5vdGljZSB0aGF0IHRoZXkgYXJlIHByb3ZpZGVkIGluIFdlaSwgbm90IEV0aGVyICgxMF4xOCBXZWkgPSBFdGhlcikuDQogICAgVXNlIFdpdGhkcmF3KCkgZnVuY3Rpb24gdG8gcGF5IG91dC4NCg0KDQogICAgVGhlIGFkdmFudGFnZSBvZiBUaGVFdGhlcmV1bUxvdHRlcnkgaXMgdGhhdCBpdCB1c2VzIHNlY3JldCByYW5kb20gdmFsdWUgd2hpY2ggb25seSBvd25lciBrbm93cyAoY2FsbGVkIFRoZVJhbmQpLg0KICAgIEEgaGFzaCBvZiBUaGVSYW5kIChjYWxsZWQgT3BlbmluZ0hhc2gpIGlzIGFubm91bmNlZCBhdCB0aGUgYmVnaW5uaW5nIG9mIGV2ZXJ5IGRyYXcgKGxldHMgc2F5IGRyYXcgbnVtYmVyIE4pIC0gDQogICAgYXQgdGhpcyBtb21lbnQgdGlja2V0IHByaWNlIGFuZCB0aGUgdmFsdWVzIG9mIEd1ZXNzWE91dE9mNCBhcmUgcHVibGljbHkgYXZhaWxhYmxlIGFuZCBjYW4gbm90IGJlIGNoYW5nZWQuDQogICAgV2hlbiBkcmF3IE4rMSBpcyBhbm5vdW5jZWQgaW4gYSBibG9jayBYLCBhIGhhc2ggb2YgYmxvY2sgWC0xIGlzIGFzc2lnbmVkIHRvIENsb3NpbmdIYXNoIGZpZWxkIG9mIGRyYXcgTi4NCiAgICBBZnRlciBmZXcgbWludXRlcywgb3duZXIgYW5ub3VuY2VzIFRoZVJhbmQgd2hpY2ggc2F0aXNmeSBmb2xsb3dpbmcgZXhwcmVzc2lvbjogc2hhMyhUaGVSYW5kKT09ZHJhd04uT3BlbmluZ0hhc2gNCiAgICB0aGVuIFJhbmQzMkI9c2hhMyhUaGVSYW5kLCBDbG9zaW5nSGFzaCkgaXMgY2FsY3VsYXRlZCBhbiB0cmVhdGVkIGFzIGEgc291cmNlIGZvciBXaW5uaW5nTnVtYmVycywgDQogICAgYWxzbyBDbG9zaW5nSGFzaCBpcyBjaGFuZ2VkIHRvIFJhbmQzMkIgYXMgaXQgbWlnaHQgYmUgbW9yZSBpbnRlcmVzdGluZyBmb3Igc29tZW9uZSB3YXRjaGluZyBsb3R0ZXJ5IGxlZGdlcg0KICAgIHRvIHNlZSB0aGF0IG51bWJlciBpbnN0ZWFkIG9mIGhhc2ggb2Ygc29tZSBibG9jay4gDQoNCiAgICBUaGlzIGFwcHJvYWNoICgxKSB1bmFibGUgcGxheWVycyB0byBjaGVhdCwgYXMgYXMgbG9uZyBhcyBubyBvbmUga25vd3MgVGhlUmFuZCwgDQogICAgbm8gb25lIGNhbiBwcmVkaWN0IHdoYXQgV2lubmluZ051bXMgd2lsbCBiZSwgKDIpIHVuYWJsZSBvd25lciB0byBpbmZsdWVuY2UgdGhlIFdpbm5pbmdOdW1zIChpbiBvcmRlciB0bw0KICAgIHJlZHVjZSBhdmVyYWdlIGFtb3VudCB3b24pIGJlY2F1c2UgT3BlbmluZ0hhc2g9c2hhMyhUaGVSYW5kKSB3YXMgcHVibGljIGJlZm9yZSBiZXRzIHdlcmUgbWFkZSwgYW5kICgzKSByZWR1Y2VzIA0KICAgIG93bmVyIGNhcGFiaWxpdHkgb2YgcGxheWluZyBpdCdzIG93biBsb3R0ZXJ5IGFuZCBtYWtpbmcgd2lubmluZyBiZXRzIHRvIHZlcnkgc2hvcnQgd2luZG93IG9mIG9uZQ0KICAgIGV4YWN0bHkgdGhlIHNhbWUgYmxvY2sgYXMgbmV3IGRyYXcgd2FzIGFubm91bmNlZCAtIHNvIGFueW9uZSwgd2l0aCBiaWcgcHJvYmFiaWxpdHksIGNhbiB0aGluayB0aGF0IGlmIHdpbm5pbmcNCiAgICBiZXQgd2FzIG1hZGUgaW4gdGhpcyBwYXJ0aWN1bGFyIGJsb2NrIC0gcHJvYmFibHkgaXQgd2FzIHRoZSBvd25lciwgZXNwZWNpYWxseSBpZiBubyBtb3JlIGJldHMgd2VyZSBtYWRlIA0KICAgIGF0IHRoaXMgYmxvY2sgKHdoaWNoIGlzIHZlcnkgbGlrZWx5KS4NCg0KICAgIFdpdGhkcmF3IGlzIHBvc3NpYmxlIG9ubHkgYWZ0ZXIgVGhlUmFuZCB3YXMgYW5ub3VuY2VkLCBpZiB0aGUgb3duZXIgd2lsbCBub3QgYW5ub3VuY2UgVGhlUmFuZCBpbiAyIHdlZWtzLA0KICAgIHBsYXllcnMgY2FuIHVzZSBSZWZ1bmQgZnVuY3Rpb24gaW4gb3JkZXIgdG8gcmVmdW5kIHRoZWlyIEVUSCB1c2VkIHRvIG1ha2UgYmV0LiANCiAgICBUaGF0IG1vbWVudCBpcyBjYWxsZWQgRXhwaXJhdGlvblRpbWUgb24gY29udHJhY3QgTGVkZ2VyICh3aGljaCBpcyB2aXNpYmxlIGZyb20gSlNPTiBpbnRlcmZhY2UpLg0KICovDQovKg0KICBOYW1lOg0KICBUaGVFdGhlcmV1bUxvdHRlcnkNCg0KICBKU09OIGludGVyZmFjZToNCg0KW3siY29uc3RhbnQiOnRydWUsImlucHV0cyI6W10sIm5hbWUiOiJBbm5vdW5jZW1lbnRzIiwib3V0cHV0cyI6W3sibmFtZSI6IiIsInR5cGUiOiJzdHJpbmcifV0sInBheWFibGUiOmZhbHNlLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImNvbnN0YW50Ijp0cnVlLCJpbnB1dHMiOltdLCJuYW1lIjoiSW5kZXhPZkN1cnJlbnREcmF3Iiwib3V0cHV0cyI6W3sibmFtZSI6IiIsInR5cGUiOiJ1aW50MjU2In1dLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6dHJ1ZSwiaW5wdXRzIjpbeyJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sIm5hbWUiOiJsZWRnZXIiLCJvdXRwdXRzIjpbeyJuYW1lIjoiV2lubmluZ051bTEiLCJ0eXBlIjoidWludDgifSx7Im5hbWUiOiJXaW5uaW5nTnVtMiIsInR5cGUiOiJ1aW50OCJ9LHsibmFtZSI6Ildpbm5pbmdOdW0zIiwidHlwZSI6InVpbnQ4In0seyJuYW1lIjoiV2lubmluZ051bTQiLCJ0eXBlIjoidWludDgifSx7Im5hbWUiOiJDbG9zaW5nSGFzaCIsInR5cGUiOiJieXRlczMyIn0seyJuYW1lIjoiT3BlbmluZ0hhc2giLCJ0eXBlIjoiYnl0ZXMzMiJ9LHsibmFtZSI6Ikd1ZXNzNE91dE9mNCIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoiR3Vlc3MzT3V0T2Y0IiwidHlwZSI6InVpbnQyNTYifSx7Im5hbWUiOiJHdWVzczJPdXRPZjQiLCJ0eXBlIjoidWludDI1NiJ9LHsibmFtZSI6Ikd1ZXNzMU91dE9mNCIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoiUHJpY2VPZlRpY2tldCIsInR5cGUiOiJ1aW50MjU2In0seyJuYW1lIjoiRXhwaXJhdGlvblRpbWUiLCJ0eXBlIjoidWludDI1NiJ9XSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOnRydWUsImlucHV0cyI6W3sibmFtZSI6IlRoZVJhbmQiLCJ0eXBlIjoiYnl0ZXMzMiJ9XSwibmFtZSI6IkNoZWNrSGFzaCIsIm91dHB1dHMiOlt7Im5hbWUiOiJPcGVuaW5nSGFzaCIsInR5cGUiOiJieXRlczMyIn1dLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6dHJ1ZSwiaW5wdXRzIjpbeyJuYW1lIjoiRHJhd0luZGV4IiwidHlwZSI6InVpbnQ4In0seyJuYW1lIjoiUGxheWVyQWRkcmVzcyIsInR5cGUiOiJhZGRyZXNzIn1dLCJuYW1lIjoiTXlCZXQiLCJvdXRwdXRzIjpbeyJuYW1lIjoiTnVtcyIsInR5cGUiOiJ1aW50OFs0XSJ9XSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOnRydWUsImlucHV0cyI6W10sIm5hbWUiOiJyZWZlcnJhbF9mZWUiLCJvdXRwdXRzIjpbeyJuYW1lIjoiIiwidHlwZSI6InVpbnQ4In1dLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6dHJ1ZSwiaW5wdXRzIjpbeyJuYW1lIjoiIiwidHlwZSI6ImFkZHJlc3MifV0sIm5hbWUiOiJyZWZlcnJhbF9sZWRnZXIiLCJvdXRwdXRzIjpbeyJuYW1lIjoiIiwidHlwZSI6InVpbnQyNTYifV0sInBheWFibGUiOmZhbHNlLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImNvbnN0YW50IjpmYWxzZSwiaW5wdXRzIjpbeyJuYW1lIjoiTXlOdW0xIiwidHlwZSI6InVpbnQ4In0seyJuYW1lIjoiTXlOdW0yIiwidHlwZSI6InVpbnQ4In0seyJuYW1lIjoiTXlOdW0zIiwidHlwZSI6InVpbnQ4In0seyJuYW1lIjoiTXlOdW00IiwidHlwZSI6InVpbnQ4In1dLCJuYW1lIjoiUGxheSIsIm91dHB1dHMiOltdLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6ZmFsc2UsImlucHV0cyI6W3sibmFtZSI6IkRyYXdJbmRleCIsInR5cGUiOiJ1aW50MzIifV0sIm5hbWUiOiJXaXRoZHJhdyIsIm91dHB1dHMiOltdLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6ZmFsc2UsImlucHV0cyI6W3sibmFtZSI6IkRyYXdJbmRleCIsInR5cGUiOiJ1aW50MzIifV0sIm5hbWUiOiJSZWZ1bmQiLCJvdXRwdXRzIjpbXSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOmZhbHNlLCJpbnB1dHMiOlt7Im5hbWUiOiJNeU51bTEiLCJ0eXBlIjoidWludDgifSx7Im5hbWUiOiJNeU51bTIiLCJ0eXBlIjoidWludDgifSx7Im5hbWUiOiJNeU51bTMiLCJ0eXBlIjoidWludDgifSx7Im5hbWUiOiJNeU51bTQiLCJ0eXBlIjoidWludDgifSx7Im5hbWUiOiJyZWYiLCJ0eXBlIjoiYWRkcmVzcyJ9XSwibmFtZSI6IlBsYXlSZWZlcnJlZCIsIm91dHB1dHMiOltdLCJwYXlhYmxlIjp0cnVlLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImNvbnN0YW50IjpmYWxzZSwiaW5wdXRzIjpbXSwibmFtZSI6IldpdGhkcmF3X3JlZmVycmFsIiwib3V0cHV0cyI6W10sInBheWFibGUiOmZhbHNlLCJ0eXBlIjoiZnVuY3Rpb24ifSx7ImNvbnN0YW50IjpmYWxzZSwiaW5wdXRzIjpbXSwibmFtZSI6IkRlcG9zaXRfcmVmZXJyYWwiLCJvdXRwdXRzIjpbXSwicGF5YWJsZSI6dHJ1ZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJhbm9ueW1vdXMiOmZhbHNlLCJpbnB1dHMiOlt7ImluZGV4ZWQiOnRydWUsIm5hbWUiOiJJbmRleE9mRHJhdyIsInR5cGUiOiJ1aW50MjU2In0seyJpbmRleGVkIjpmYWxzZSwibmFtZSI6Ik9wZW5pbmdIYXNoIiwidHlwZSI6ImJ5dGVzMzIifSx7ImluZGV4ZWQiOmZhbHNlLCJuYW1lIjoiUHJpY2VPZlRpY2tldEluV2VpIiwidHlwZSI6InVpbnQyNTYifSx7ImluZGV4ZWQiOmZhbHNlLCJuYW1lIjoiV2VpVG9XaW4iLCJ0eXBlIjoidWludDI1NiJ9XSwibmFtZSI6Ik5ld0RyYXdSZWFkeVRvUGxheSIsInR5cGUiOiJldmVudCJ9LHsiYW5vbnltb3VzIjpmYWxzZSwiaW5wdXRzIjpbeyJpbmRleGVkIjp0cnVlLCJuYW1lIjoiSW5kZXhPZkRyYXciLCJ0eXBlIjoidWludDMyIn0seyJpbmRleGVkIjpmYWxzZSwibmFtZSI6Ildpbm5pbmdOdW1iZXIxIiwidHlwZSI6InVpbnQ4In0seyJpbmRleGVkIjpmYWxzZSwibmFtZSI6Ildpbm5pbmdOdW1iZXIyIiwidHlwZSI6InVpbnQ4In0seyJpbmRleGVkIjpmYWxzZSwibmFtZSI6Ildpbm5pbmdOdW1iZXIzIiwidHlwZSI6InVpbnQ4In0seyJpbmRleGVkIjpmYWxzZSwibmFtZSI6Ildpbm5pbmdOdW1iZXI0IiwidHlwZSI6InVpbnQ4In0seyJpbmRleGVkIjpmYWxzZSwibmFtZSI6IlRoZVJhbmQiLCJ0eXBlIjoiYnl0ZXMzMiJ9XSwibmFtZSI6IkRyYXdSZWFkeVRvUGF5b3V0IiwidHlwZSI6ImV2ZW50In0seyJhbm9ueW1vdXMiOmZhbHNlLCJpbnB1dHMiOlt7ImluZGV4ZWQiOmZhbHNlLCJuYW1lIjoiV2VpIiwidHlwZSI6InVpbnQyNTYifV0sIm5hbWUiOiJQbGF5ZXJXb24iLCJ0eXBlIjoiZXZlbnQifV0NCg0KKi8NCi8vY29uc3RydWN0b3INCmZ1bmN0aW9uIFRoZUV0aGVyZXVtTG90dGVyeSgpDQp7DQogIG93bmVyPW1zZy5zZW5kZXI7DQogIGxlZGdlci5sZW5ndGg9MDsNCiAgSW5kZXhPZkN1cnJlbnREcmF3PTA7DQogIHJlZmVycmFsX2ZlZT05MDsNCn0NCm1vZGlmaWVyIE9ubHlPd25lcigpDQp7IC8vIE1vZGlmaWVyDQogIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsNCiAgXzsNCn0NCmFkZHJlc3Mgb3duZXI7DQpzdHJpbmcgcHVibGljIEFubm91bmNlbWVudHM7Ly9qdXN0IGFkZGl0aW9uYWwgZmVhdHVyZQ0KdWludCBwdWJsaWMgSW5kZXhPZkN1cnJlbnREcmF3Oy8vc3RhcnRpbmcgZnJvbSAwDQp1aW50OCBwdWJsaWMgcmVmZXJyYWxfZmVlOw0KbWFwcGluZyhhZGRyZXNzPT51aW50MjU2KSBwdWJsaWMgcmVmZXJyYWxfbGVkZ2VyOw0Kc3RydWN0IGJldF90IHsNCiAgYWRkcmVzcyByZWZlcnJhbDsNCiAgdWludDhbNF0gTnVtczsNCiAgYm9vbCBjYW5fd2l0aGRyYXc7Ly9kZWZhdWx0PT1mYWxzZQ0KfQ0Kc3RydWN0IGxlZGdlcl90IHsNCiAgdWludDggV2lubmluZ051bTE7DQogIHVpbnQ4IFdpbm5pbmdOdW0yOw0KICB1aW50OCBXaW5uaW5nTnVtMzsNCiAgdWludDggV2lubmluZ051bTQ7DQogIGJ5dGVzMzIgQ2xvc2luZ0hhc2g7DQogIGJ5dGVzMzIgT3BlbmluZ0hhc2g7DQogIG1hcHBpbmcoYWRkcmVzcz0+YmV0X3QpIGJldHM7DQogIHVpbnQgR3Vlc3M0T3V0T2Y0Ow0KICB1aW50IEd1ZXNzM091dE9mNDsNCiAgdWludCBHdWVzczJPdXRPZjQ7DQogIHVpbnQgR3Vlc3MxT3V0T2Y0Ow0KICB1aW50IFByaWNlT2ZUaWNrZXQ7DQogIHVpbnQgRXhwaXJhdGlvblRpbWU7Ly9mb3IgZXZlbnR1YWwgcmVmdW5kcyBvbmx5LCB+MiB3ZWVrcyBhZnRlciBkcmF3IGFubm91bmNlZA0KfQ0KbGVkZ2VyX3RbXSBwdWJsaWMgbGVkZ2VyOw0KIA0KLy9AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBADQovL0BAQEBAQEBAQEBAIEhlcmUgYmVnaW5zIHdoYXQgcHJvYmFibHkgeW91IHdhbnQgdG8gYW5hbHl6ZSBAQEBAQEBAQEBAQEANCi8vQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQA0KZnVuY3Rpb24gbmV4dF9kcmF3KGJ5dGVzMzIgbmV3X2hhc2gsDQoJICB1aW50IHByaWNlb2Z0aWNrZXQsDQoJICB1aW50IGd1ZXNzNG91dG9mNCwNCgkgIHVpbnQgZ3Vlc3Mzb3V0b2Y0LA0KCSAgdWludCBndWVzczJvdXRvZjQsDQoJICB1aW50IGd1ZXNzMW91dG9mNA0KCSAgKQ0KT25seU93bmVyDQp7DQogIGxlZGdlci5sZW5ndGgrKzsNCiAgbGVkZ2VyW0luZGV4T2ZDdXJyZW50RHJhd10uQ2xvc2luZ0hhc2ggPQ0KICAgIC8vc2hhMyhibG9jay5ibG9ja2hhc2goYmxvY2subnVtYmVyLTEpKTsgICAgICAgICAgICAgICAvL3RoaXMsIG9yDQogICAgLy9zaGEzKGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXItMSksYmxvY2suY29pbmJhc2UpOy8vdGhpcyBhZGRzIGNvbXBsZXhpdHksIGJ1dCBzYWZldHkgcmVtYWlucyB0aGUgc2FtZQ0KICAgIGJsb2NrLmJsb2NraGFzaChibG9jay5udW1iZXItMSk7Ly9hZGRzIG5vaXNlIHRvIHRoZSBwcmV2aW91cyBkcmF3DQogIC8vaWYgeW91IGFyZSBqdXN0IGNoZWNraW5nIGhvdyBpdCB3b3JrcywganVzdCBwYXNzIHRoZSBjb21tZW50IGJlbG93LCBhbmQgY29tZSBiYWNrIHdoZW4geW91IGZpbmlzaCBhbmFseXppbmcNCiAgLy90aGUgY29udHJhY3QgLSBpdCBleHBsYWlucyBob3cgdGhlIG93bmVyIGNvdWxkIHdpbiB0aGlzIGxvdHRlcnkgDQogIC8vaWYgdGhlIG93bmVyIHdhcyBhYm91dCB0byBjaGVhdCwgaGUgaGFzIHRvIG1ha2UgYSBiZXQsIGFuZCB0aGVuIHVzZSB0aGlzIGYtbi4gYm90aCBpbiBhIHNpbmdsZSBibG9jay4NCiAgLy9pdHMgYmVjYXVzZSBpZiB5b3Uga25vdyBUaGVSYW5kIGFuZCBibG9ja2hhc2ggb2YgYSBsYXN0IGJsb2NrIGJlZm9yZSBuZXcgZHJhdyB0aGVuIHlvdSBjYW4gZGV0ZXJtaW5lIHRoZSBudW1iZXJzDQogIC8vYWNoaWV2aW5nIGl0IHdvdWxkIGJlIGFjdHVhbGx5IHNpbXBsZSwgYW5vdGhlciBjb250cmFjdCBpcyBuZWVkZWQgd2hpY2ggd291bGQgZ2V0IHNpZ25lZCBvd25lciB0eCBvZiB0aGlzIGYtbiBjYWxsDQogIC8vYW5kIGp1c3QgY2FsY3VsYXRlIHdoYXQgdGhlIG51bWJlcnMgd291bGQgYmUgKHRoZSBwcmV2aW91cyBibG9jayBoYXNoIGlzIGF2YWlsYWJsZSksIHBsYXkgd2l0aCB0aGF0IG51bXMsDQogIC8vYW5kIHRoZW4gcnVuIHRoaXMgZi1uLiBJdCBpcyBndWFyYW50ZWVkIHRoYXQgYm90aCBhY3Rpb25zIGFyZSBtYWRlIGluIGEgc2luZ2xlIGJsb2NrLCBhcyBpdCBpcyBhIHNpbmdsZSBjYWxsDQogIC8vc28gaWYgc29tZW9uZSBoYXZlIG1hZGUgd2lubmluZyBiZXQgaW4gZXhhY3RseSB0aGUgc2FtZSBibG9jayBhcyBhbm5vdW5jZW1lbnQgb2YgbmV4dCBkcmF3LA0KICAvL3RoZW4geW91IGNhbiBiZSBzdXNwaWNpb3VzIHRoYXQgaXQgd2FzIHRoZSBvd25lcg0KICAvL2Fsc28gYXNzdW1pbmcgdGhpcyBzY2VuYXJpbywgVGhlUmFuZCBuZWVkcyB0byBiZSBwcmVzZW50IG9uIHRoYXQgY29udHJhY3QgLSBzbyBpZiB0cmFuc2FjdGlvbiBpcyBub3QgbWluZWQNCiAgLy9pbW1lZGlhdGVseSAtIGl0IG1ha2VzIGEgd2luZG93IGZvciBhbnlvbmUgdG8gZG8gdGhlIHNhbWUgYW5kIHdpbi4NCiAgSW5kZXhPZkN1cnJlbnREcmF3PWxlZGdlci5sZW5ndGgtMTsNCiAgbGVkZ2VyW0luZGV4T2ZDdXJyZW50RHJhd10uT3BlbmluZ0hhc2ggPSBuZXdfaGFzaDsNCiAgbGVkZ2VyW0luZGV4T2ZDdXJyZW50RHJhd10uR3Vlc3M0T3V0T2Y0PWd1ZXNzNG91dG9mNDsNCiAgbGVkZ2VyW0luZGV4T2ZDdXJyZW50RHJhd10uR3Vlc3MzT3V0T2Y0PWd1ZXNzM291dG9mNDsNCiAgbGVkZ2VyW0luZGV4T2ZDdXJyZW50RHJhd10uR3Vlc3MyT3V0T2Y0PWd1ZXNzMm91dG9mNDsNCiAgbGVkZ2VyW0luZGV4T2ZDdXJyZW50RHJhd10uR3Vlc3MxT3V0T2Y0PWd1ZXNzMW91dG9mNDsNCiAgbGVkZ2VyW0luZGV4T2ZDdXJyZW50RHJhd10uUHJpY2VPZlRpY2tldD1wcmljZW9mdGlja2V0Ow0KICBsZWRnZXJbSW5kZXhPZkN1cnJlbnREcmF3XS5FeHBpcmF0aW9uVGltZT1ub3cgKyAyIHdlZWtzOy8vWW91IGNhbiByZWZ1bmQgYWZ0ZXIgRXhwaXJhdGlvblRpbWUgaWYgb3duZXIgd2lsbCBub3QgYW5ub3VuY2UgVGhlUmFuZCBzYXRpc2Z5aW5nIFRoZUhhc2gNCiAgTmV3RHJhd1JlYWR5VG9QbGF5KEluZGV4T2ZDdXJyZW50RHJhdywgbmV3X2hhc2gsIHByaWNlb2Z0aWNrZXQsIGd1ZXNzNG91dG9mNCk7Ly9ldmVudA0KfQ0KZnVuY3Rpb24gYW5ub3VuY2VfdGhlcmFuZCh1aW50MzIgaW5kZXgsDQoJCQkgIGJ5dGVzMzIgdGhlX3JhbmQNCgkJCSAgKQ0KT25seU93bmVyDQp7DQogIGlmKHNoYTModGhlX3JhbmQpDQogICAgICE9DQogICAgIGxlZGdlcltpbmRleF0uT3BlbmluZ0hhc2gpDQogICAgdGhyb3c7Ly90aGlzIGltcGxpZXMgdGhhdCBpZiBOdW1iZXJzIGFyZSBwcmVzZW50LCBicm9hZGNhc3RlZCBUaGVSYW5kIGhhcyB0byBzYXRpc2Z5IFRoZUhhc2gNCg0KDQogIGJ5dGVzMzIgY29tYmluZWRfcmFuZD1zaGEzKHRoZV9yYW5kLCBsZWRnZXJbaW5kZXhdLkNsb3NpbmdIYXNoKTsvL2Zyb20gdGhpcyBudW1iZXIgd2UnbGwgY2FsY3VsYXRlIFdpbm5pbmdOdW1zDQogIC8vdXN1YWxseSB0aGUgbGFzdCA0IEJ5dGVzIHdpbGwgYmUgdGhlIFdpbm5pbmdOdW1iZXJzLCBidXQgaXQgaXMgbm90IGFsd2F5cyB0cnVlLCBhcyBzb21lIEJ5dGUgY291bGQNCiAgLy9iZSB0aGUgc2FtZSwgdGhlbiB3ZSBuZWVkIHRvIHRha2Ugb25lIG1vcmUgQnl0ZSBmcm9tIGNvbWJpbmVkX3JhbmQgYW5kIHNvIG9uDQoNCiAgbGVkZ2VyW2luZGV4XS5DbG9zaW5nSGFzaCA9IGNvbWJpbmVkX3JhbmQ7Ly9jaGFuZ2VzIHRoZSBjbG9zaW5nIGJsb2NraGFzaCB0byBzZWVkIGZvciBXaW5uaW5nTnVtcw0KICAgIC8vdGhpcyBsaW5lIGlzIHVzZWxlc3MgZnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgbG90dGVyeQ0KICAgIC8vYnV0IG1heWJlIHNvbWUgb2YgdGhlIHBsYXllcnMgd2lsbCBmaW5kIGl0IGludGVyZXN0aW5nIHRoYXQgc29tZXRoaW5nDQogICAgLy93aGljaCBpcyBjb25uZWN0ZWQgdG8gdGhlIFdpbm5pbmdOdW1zIGlzIHByZXNlbnQgaW4gYSBsZWRnZXINCg0KDQogIC8vdGhlIGFsZ29yaXRobSBvZiBhc3NpZ25pbmcgYW4gaW50IGZyb20gc29tZSByYW5nZSB0byBzaW5nbGUgYmV0IHRha2VzIHRvbyBtdWNoIGNvZGUNCiAgdWludDhbNF0gbWVtb3J5IE51bWJlcnM7Ly9yZWx5aW5nIG9uIHRoYXQgY29tYmluZWRfcmFuZCBzaG91bGQgYmUgcmFuZG9tIC0gbGV0cyBwaWNrIE51bXMgaW50byB0aGlzIGFycmF5IA0KDQogIHVpbnQ4IGk9MDsvL2kgPSBob3cgbWFueSBudW1iZXJzIGFyZSBwaWNrZWQNCiAgd2hpbGUoaTw0KQ0KICAgIHsNCiAgICAgIE51bWJlcnNbaV09dWludDgoY29tYmluZWRfcmFuZCk7Ly9zYW1lIGFzICc9Y29tYmluZWRfcmFuZCUyNTY7Jw0KICAgICAgY29tYmluZWRfcmFuZD4+PTg7Ly9zYW1lIGFzIGNvbWJpbmVkX3JhbmQvPTI1NjsNCiAgICAgIGZvcih1aW50IGo9MDtqPGk7KytqKS8vaXMgbmV3bHkgcGlja2VkIHZhbCBpbiBhIHNldD8NCglpZihOdW1iZXJzW2pdPT1OdW1iZXJzW2ldKSB7LS1pO2JyZWFrO30vL3llcywgYnJlYWsgYmFjayB0byB3aGlsZSBsb29wIGFuZCBsb29rIGZvciBhbm90aGVyIE51bVtpXQ0KICAgICAgKytpOw0KICAgIH0NCiAgLy9wcm9iYWJpbGl0eSB0aGF0IGluIDMyIHJhbmRvbSBieXRlcyB0aGVyZSB3YXMgb25seSAzIG9yIGxlc3MgZGlmZmVyZW50IG9uZXMgfj0yLjY1ZS01NQ0KICAvL2l0J3MgbGlrZSB3aW5uaW5nIHRoaXMgbG90dGVyeSAyLjE2KjEwXjQ2IHRpbWVzIGluIGEgcm93DQogIC8vcC5zLiB0aGVyZSBhcmUgMTc0NzkyNjQwIHBvc3NpYmxlIGNvbWJpbmF0aW9ucyBvZiBwaWNraW5nIDQgbnVtYmVycyBvdXQgb2YgMjU2DQoNCiAgLy9ub3cgd2UgaGF2ZSB0byBzb3J0IHRoZSB2YWx1ZXMNCiAgZm9yKHVpbnQ4IG49NDtuPjE7bi0tKS8vYnViYmxlIHNvcnQNCiAgICB7DQogICAgICBib29sIHNvcnRlZD10cnVlOyANCiAgICAgIGZvcih1aW50OCBrPTA7azxuLTE7KytrKQ0KCWlmKE51bWJlcnNba10gPiBOdW1iZXJzW2srMV0pLy90aGVuIG1hcmsgYXJyYXkgYXMgbm90IHNvcnRlZCAmIHN3YXANCgkgIHsNCgkgICAgc29ydGVkPWZhbHNlOw0KCSAgICAoTnVtYmVyc1trXSwgTnVtYmVyc1trKzFdKT0oTnVtYmVyc1trKzFdLCBOdW1iZXJzW2tdKTsNCgkgIH0NCiAgICAgIGlmKHNvcnRlZCkgYnJlYWs7Ly9icmVha3MgYXMgc29vbiBhcyB0aGUgYXJyYXkgaXMgc29ydGVkDQogICAgfQ0KDQogIA0KICBsZWRnZXJbaW5kZXhdLldpbm5pbmdOdW0xID0gTnVtYmVyc1swXTsNCiAgbGVkZ2VyW2luZGV4XS5XaW5uaW5nTnVtMiA9IE51bWJlcnNbMV07DQogIGxlZGdlcltpbmRleF0uV2lubmluZ051bTMgPSBOdW1iZXJzWzJdOw0KICBsZWRnZXJbaW5kZXhdLldpbm5pbmdOdW00ID0gTnVtYmVyc1szXTsNCiAgDQogIERyYXdSZWFkeVRvUGF5b3V0KGluZGV4LA0KCQkgICAgTnVtYmVyc1swXSxOdW1iZXJzWzFdLE51bWJlcnNbMl0sTnVtYmVyc1szXSwNCgkJICAgIHRoZV9yYW5kKTsvL2V2ZW50DQp9DQoNCmZ1bmN0aW9uIFBsYXlSZWZlcnJlZCh1aW50OCBNeU51bTEsDQoJCSAgICAgIHVpbnQ4IE15TnVtMiwNCgkJICAgICAgdWludDggTXlOdW0zLA0KCQkgICAgICB1aW50OCBNeU51bTQsDQoJCSAgICAgIGFkZHJlc3MgcmVmDQoJCSAgICAgICkNCnBheWFibGUNCnsNCiAgaWYobXNnLnZhbHVlICE9IGxlZGdlcltJbmRleE9mQ3VycmVudERyYXddLlByaWNlT2ZUaWNrZXQgfHwvL3RvIHBsYXkgeW91IG5lZWQgdG8gcGF5IA0KICAgICBsZWRnZXJbSW5kZXhPZkN1cnJlbnREcmF3XS5iZXRzW21zZy5zZW5kZXJdLk51bXNbM10gIT0gMCkvL2lmIHlvdXIgYmV0IGFscmVhZHkgZXhpc3QNCiAgICB0aHJvdzsNCg0KICAvL2lmIG51bWJlcnMgYXJlIG5vdCBzb3J0ZWQNCiAgaWYoTXlOdW0xID49IE15TnVtMiB8fA0KICAgICBNeU51bTIgPj0gTXlOdW0zIHx8DQogICAgIE15TnVtMyA+PSBNeU51bTQNCiAgICAgKQ0KICAgIHRocm93Oy8vYmVjYXVzZSB5b3Ugc2hvdWxkIHNvcnQgdGhlIHZhbHVlcyB5b3Vyc2VsZg0KICBpZihyZWYhPTApLy93aGVuIHRoZXJlIGlzIG5vIHJlZmZlcmFsLCBmdW5jdGlvbiBpcyBjaGVhcGVyIGZvciB+MjBrIGdhcw0KICAgIGxlZGdlcltJbmRleE9mQ3VycmVudERyYXddLmJldHNbbXNnLnNlbmRlcl0ucmVmZXJyYWw9cmVmOw0KICBsZWRnZXJbSW5kZXhPZkN1cnJlbnREcmF3XS5iZXRzW21zZy5zZW5kZXJdLk51bXNbMF09TXlOdW0xOw0KICBsZWRnZXJbSW5kZXhPZkN1cnJlbnREcmF3XS5iZXRzW21zZy5zZW5kZXJdLk51bXNbMV09TXlOdW0yOw0KICBsZWRnZXJbSW5kZXhPZkN1cnJlbnREcmF3XS5iZXRzW21zZy5zZW5kZXJdLk51bXNbMl09TXlOdW0zOw0KICBsZWRnZXJbSW5kZXhPZkN1cnJlbnREcmF3XS5iZXRzW21zZy5zZW5kZXJdLk51bXNbM109TXlOdW00Ow0KICBsZWRnZXJbSW5kZXhPZkN1cnJlbnREcmF3XS5iZXRzW21zZy5zZW5kZXJdLmNhbl93aXRoZHJhdz10cnVlOw0KfQ0KLy8gUGxheSB3cmFwcGVyOg0KZnVuY3Rpb24gUGxheSh1aW50OCBNeU51bTEsDQoJICAgICAgdWludDggTXlOdW0yLA0KCSAgICAgIHVpbnQ4IE15TnVtMywNCgkgICAgICB1aW50OCBNeU51bTQNCgkgICAgICApDQp7DQogIFBsYXlSZWZlcnJlZChNeU51bTEsDQoJICAgICAgIE15TnVtMiwNCgkgICAgICAgTXlOdW0zLA0KCSAgICAgICBNeU51bTQsDQoJICAgICAgIDAvL25vIHJlZmVycmFsDQoJICAgICAgICk7DQp9DQpmdW5jdGlvbiBEZXBvc2l0X3JlZmVycmFsKCkvL3RoaXMgZnVuY3Rpb24gaXMgbm90IG1hbmRhdG9yeSB0byBiZWNvbWUgcmVmZXJyYWwNCiAgcGF5YWJsZS8vbWlnaHQgYmUgdXNlZCB0byBub3Qgd2l0aGRyYXcgYWxsIHRoZSBmdW5kcyBhdCBvbmNlIG9yIHRvIGludmVzdA0Key8vcHJvYmFibHkgbmVlZGVkIG9ubHkgYXQgdGhlIGJlZ2lubmluZ3MNCiAgcmVmZXJyYWxfbGVkZ2VyW21zZy5zZW5kZXJdKz1tc2cudmFsdWU7DQp9DQpmdW5jdGlvbiBXaXRoZHJhd19yZWZlcnJhbCgpDQp7DQogIHVpbnQgdmFsPXJlZmVycmFsX2xlZGdlclttc2cuc2VuZGVyXTsNCiAgcmVmZXJyYWxfbGVkZ2VyW21zZy5zZW5kZXJdPTA7DQogIGlmKCFtc2cuc2VuZGVyLnNlbmQodmFsKSkgLy9wYXltZW50DQogICAgdGhyb3c7DQp9DQpmdW5jdGlvbiBzZXRfcmVmZXJyYWxfZmVlKHVpbnQ4IG5ld19mZWUpDQpPbmx5T3duZXINCnsNCiAgaWYobmV3X2ZlZTw1MCB8fCBuZXdfZmVlPjEwMCkNCiAgICB0aHJvdzsvL3JlZmVycmFscyBoYXZlIGF0IGxlYXN0IDUwJSBvZiB0aGUgaW5jb21lDQogIHJlZmVycmFsX2ZlZT1uZXdfZmVlOw0KfQ0KZnVuY3Rpb24gV2l0aGRyYXcodWludDMyIERyYXdJbmRleCkNCnsNCiAgLy9pZihtc2cudmFsdWUhPTApIC8vY29tcGlsZXIgZGVhbHMgd2l0aCB0aGF0LCBhcyB0aGVyZSBpcyBubyBwYXlhYmxlIG1vZGlmaWVyIGluIHRoaXMgZi1uDQogIC8vICB0aHJvdzsvL3RoaXMgZnVuY3Rpb24gaXMgZnJlZQ0KDQogIGlmKGxlZGdlcltEcmF3SW5kZXhdLmJldHNbbXNnLnNlbmRlcl0uY2FuX3dpdGhkcmF3PT1mYWxzZSkNCiAgICB0aHJvdzsvL3Rocm93IGlmIHBsYXllciBkaWRudCBwbGF5ZWQNCg0KICAvL2J5IGRlZmF1bHQsIGV2ZXJ5IG5vbiBleGlzdGluZyB2YWx1ZSBpcyBlcXVhbCB0byAwDQogIC8vc28gaWYgdGhlcmUgd2FzIG5vIGFubm91bmNlbWVudCBXaW5uaW5nTnVtcyBhcmUgemVyb3MNCiAgaWYobGVkZ2VyW0RyYXdJbmRleF0uV2lubmluZ051bTQgPT0gMCkvL3RoZSBsZWFzdCBwb3NzaWJsZSB2YWx1ZSA9PSAzDQogICAgdGhyb3c7Ly90aGlzIGNvbmRpdGlvbiBjaGVja3MgaWYgdGhlIG51bWJlcnMgd2VyZSBhbm5vdW5jZWQNCiAgLy9zZWUgYW5ub3VuY2VfdGhlcmFuZCBmLW4gdG8gc2VlIHdoeSB0aGlzIGNoZWNrIGlzIGVub3VnaA0KICANCiAgdWludDggaGl0cz0wOw0KICB1aW50OCBpPTA7DQogIHVpbnQ4IGo9MDsNCiAgdWludDhbNF0gbWVtb3J5IHBsYXllcm51bT1sZWRnZXJbRHJhd0luZGV4XS5iZXRzW21zZy5zZW5kZXJdLk51bXM7DQogIHVpbnQ4WzRdIG1lbW9yeSBudW1zOw0KICAobnVtc1swXSxudW1zWzFdLG51bXNbMl0sbnVtc1szXSk9DQogICAgKGxlZGdlcltEcmF3SW5kZXhdLldpbm5pbmdOdW0xLA0KICAgICBsZWRnZXJbRHJhd0luZGV4XS5XaW5uaW5nTnVtMiwNCiAgICAgbGVkZ2VyW0RyYXdJbmRleF0uV2lubmluZ051bTMsDQogICAgIGxlZGdlcltEcmF3SW5kZXhdLldpbm5pbmdOdW00KTsNCiAgLy9kYXRhIHJlYWR5DQogIA0KICB3aGlsZShpPDQpLy9jb3VudCBwbGF5ZXIgaGl0cw0KICAgIHsvL2JvdGggYXJyYXlzIGFyZSBzb3J0ZWQNCiAgICAgIHdoaWxlKGo8NCAmJiBwbGF5ZXJudW1bal0gPCBudW1zW2ldKSArK2o7DQogICAgICBpZihqPT00KSBicmVhazsvL25vdGhpbmcgbW9yZSB0byBjaGVjayAtIGJyZWFrIGxvb3AgaGVyZQ0KICAgICAgaWYocGxheWVybnVtW2pdID09IG51bXNbaV0pICsraGl0czsNCiAgICAgICsraTsNCiAgICB9DQogIGlmKGhpdHM9PTApIHRocm93Ow0KICB1aW50MjU2IHdpbj0wOw0KICBpZihoaXRzPT0xKSB3aW49bGVkZ2VyW0RyYXdJbmRleF0uR3Vlc3MxT3V0T2Y0Ow0KICBpZihoaXRzPT0yKSB3aW49bGVkZ2VyW0RyYXdJbmRleF0uR3Vlc3MyT3V0T2Y0Ow0KICBpZihoaXRzPT0zKSB3aW49bGVkZ2VyW0RyYXdJbmRleF0uR3Vlc3MzT3V0T2Y0Ow0KICBpZihoaXRzPT00KSB3aW49bGVkZ2VyW0RyYXdJbmRleF0uR3Vlc3M0T3V0T2Y0Ow0KICAgIA0KICBsZWRnZXJbRHJhd0luZGV4XS5iZXRzW21zZy5zZW5kZXJdLmNhbl93aXRoZHJhdz1mYWxzZTsNCiAgaWYoIW1zZy5zZW5kZXIuc2VuZCh3aW4pKSAvL3BheW1lbnQNCiAgICB0aHJvdzsNCg0KICBpZihsZWRnZXJbRHJhd0luZGV4XS5iZXRzW21zZy5zZW5kZXJdLnJlZmVycmFsPT0wKS8vaXQgd2FzIG5vdCByZWZlcnJlZCBiZXQNCiAgICByZWZlcnJhbF9sZWRnZXJbb3duZXJdKz13aW4vMTAwOw0KICBlbHNlDQogICAgew0KICAgICAgcmVmZXJyYWxfbGVkZ2VyW2xlZGdlcltEcmF3SW5kZXhdLmJldHNbbXNnLnNlbmRlcl0ucmVmZXJyYWxdKz0NCgl3aW4vMTAwMDAqcmVmZXJyYWxfZmVlOy8vKHdpbi8xMDApKihyZWZlcnJhbF9mZWUvMTAwKTsNCiAgICAgIHJlZmVycmFsX2xlZGdlcltvd25lcl0rPQ0KCXdpbi8xMDAwMCooMTAwLXJlZmVycmFsX2ZlZSk7Ly8od2luLzEwMCkqKCgxMDAtcmVmZXJyYWxfZmVlKS8xMDApOw0KICAgIH0NCg0KICANCiAgUGxheWVyV29uKHdpbik7Ly9ldmVudA0KfQ0KZnVuY3Rpb24gUmVmdW5kKHVpbnQzMiBEcmF3SW5kZXgpDQp7DQogIC8vaWYobXNnLnZhbHVlIT0wKSAvL2NvbXBpbGVyIGRlYWxzIHdpdGggdGhhdCwgYXMgdGhlcmUgaXMgbm8gcGF5YWJsZSBtb2RpZmllciBpbiB0aGlzIGYtbg0KICAvLyAgdGhyb3c7Ly90aGlzIGZ1bmN0aW9uIGlzIGZyZWUNCg0KICBpZihsZWRnZXJbRHJhd0luZGV4XS5XaW5uaW5nTnVtNCAhPSAwKS8vaWYgVGhlUmFuZCB3YXMgYW5ub3VuY2VkLCBXaW5uaW5nTnVtNCA+PSAzDQogICAgdGhyb3c7IC8vbm8gcmVmdW5kIGlmIHRoZXJlIHdhcyBhIHZhbGlkIGFubm91bmNlDQoNCiAgaWYobm93IDwgbGVkZ2VyW0RyYXdJbmRleF0uRXhwaXJhdGlvblRpbWUpDQogICAgdGhyb3c7Ly9ubyByZWZ1bmQgd2hpbGUgdGhlcmUgaXMgc3RpbGwgVElNRSB0byBhbm5vdW5jZSBUaGVSYW5kDQogIA0KIA0KICBpZihsZWRnZXJbRHJhd0luZGV4XS5iZXRzW21zZy5zZW5kZXJdLmNhbl93aXRoZHJhdz09ZmFsc2UpDQogICAgdGhyb3c7Ly90aHJvdyBpZiBwbGF5ZXIgZGlkbnQgcGxheWVkIG9yIGFscmVhZHkgcmVmdW5kZWQNCiAgDQogIGxlZGdlcltEcmF3SW5kZXhdLmJldHNbbXNnLnNlbmRlcl0uY2FuX3dpdGhkcmF3PWZhbHNlOw0KICBpZighbXNnLnNlbmRlci5zZW5kKGxlZGdlcltEcmF3SW5kZXhdLlByaWNlT2ZUaWNrZXQpKSAvL3JlZnVuZA0KICAgIHRocm93Ow0KfQ0KLy9AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBADQovL0BAQEBAQEBAQEBAIEhlcmUgZW5kcyB3aGF0IHByb2JhYmx5IHlvdSB3YW50ZWQgdG8gYW5hbHl6ZSBAQEBAQEBAQEBAQEANCi8vQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQA0KDQpmdW5jdGlvbiBDaGVja0hhc2goYnl0ZXMzMiBUaGVSYW5kKQ0KICBjb25zdGFudCByZXR1cm5zKGJ5dGVzMzIgT3BlbmluZ0hhc2gpDQp7DQogIHJldHVybiBzaGEzKFRoZVJhbmQpOw0KfQ0KZnVuY3Rpb24gTXlCZXQodWludDggRHJhd0luZGV4LCBhZGRyZXNzIFBsYXllckFkZHJlc3MpDQogIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4WzRdIE51bXMpDQp7Ly9jaGVjayB5b3VyIG51bXMNCiAgcmV0dXJuIGxlZGdlcltEcmF3SW5kZXhdLmJldHNbUGxheWVyQWRkcmVzc10uTnVtczsNCn0NCmZ1bmN0aW9uIGFubm91bmNlKHN0cmluZyBNU0cpDQogIE9ubHlPd25lcg0Kew0KICBBbm5vdW5jZW1lbnRzPU1TRzsNCn0NCmV2ZW50IE5ld0RyYXdSZWFkeVRvUGxheSh1aW50IGluZGV4ZWQgSW5kZXhPZkRyYXcsDQoJCQkgYnl0ZXMzMiBPcGVuaW5nSGFzaCwNCgkJCSB1aW50IFByaWNlT2ZUaWNrZXRJbldlaSwNCgkJCSB1aW50IFdlaVRvV2luKTsNCmV2ZW50IERyYXdSZWFkeVRvUGF5b3V0KHVpbnQzMiBpbmRleGVkIEluZGV4T2ZEcmF3LA0KCQkJdWludDggV2lubmluZ051bWJlcjEsDQoJCQl1aW50OCBXaW5uaW5nTnVtYmVyMiwNCgkJCXVpbnQ4IFdpbm5pbmdOdW1iZXIzLA0KCQkJdWludDggV2lubmluZ051bWJlcjQsDQoJCQlieXRlczMyIFRoZVJhbmQpOw0KZXZlbnQgUGxheWVyV29uKHVpbnQgV2VpKTsNCg0KfS8vY29udHJhY3Q='