base 64 content
base64tickingBomb
	^'Y29udHJhY3QgdGlja2luZ0JvbWIgew0KDQogICAgc3RydWN0IHRlYW0gew0KICAgICAgICBzdHJpbmcgbmFtZTsNCiAgICAgICAgdWludCBsYXN0VXBkYXRlOw0KICAgICAgICBhZGRyZXNzW10gbWVtYmVyczsNCiAgICAgICAgdWludCBuYnJNZW1iZXJzOw0KICAgIH0NCg0KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IERFTEFZID0gIDYwICogNjAgKiA2OyAvLyA2IEhvdXJzDQogICAgdWludCBwdWJsaWMgY29uc3RhbnQgSU5WRVNUX0FNT1VOVCA9IDEwMCBmaW5uZXk7IC8vIDAuMSBFVEgNCiAgICB1aW50IGNvbnN0YW50IEZFRSA9IDM7DQoNCiAgICB0ZWFtIHB1YmxpYyByZWQ7DQogICAgdGVhbSBwdWJsaWMgYmx1ZTsNCg0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBwdWJsaWMgYmFsYW5jZXM7DQogICAgYWRkcmVzcyBjcmVhdG9yOw0KDQogICAgc3RyaW5nW10gcHVibGljIGhpc3RvcnlXaW5uZXI7DQogICAgdWludFtdIHB1YmxpYyBoaXN0b3J5UmVkOw0KICAgIHVpbnRbXSBwdWJsaWMgaGlzdG9yeUJsdWU7DQogICAgdWludCBwdWJsaWMgZ2FtZU5icjsNCg0KICAgIGZ1bmN0aW9uIHRpY2tpbmdCb21iKCkgew0KICAgICAgICBuZXdSb3VuZCgpOw0KICAgICAgICBjcmVhdG9yID0gbXNnLnNlbmRlcjsNCiAgICAgICAgZ2FtZU5iciA9IDA7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaGVscFJlZCgpIHsNCiAgICAgICAgdWludCBpOw0KICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsNCg0KICAgICAgICAvLyBDaGVjayBpZiBFeHBsb2RlZCwgaWYgc28gc2F2ZSB0aGUgcHJldmlvdXMgZ2FtZQ0KICAgICAgICAvLyBBbmQgY3JlYXRlIGEgbmV3IHJvdW5kDQogICAgICAgIGNoZWNrSWZFeHBsb2RlZCgpOw0KDQogICAgICAgIC8vIFVwZGF0ZSB0aGUgVGltZVN0YW1wDQogICAgICAgIHJlZC5sYXN0VXBkYXRlID0gYmxvY2sudGltZXN0YW1wOw0KDQogICAgICAgIC8vIFNwbGl0IHRoZSBpbmNvbWluZyBtb25leSBldmVyeSBJTlZFU1RfQU1PVU5UDQogICAgICAgIHdoaWxlIChhbW91bnQgPj0gSU5WRVNUX0FNT1VOVCkgew0KICAgICAgICAgICAgcmVkLm1lbWJlcnMucHVzaChtc2cuc2VuZGVyKTsNCiAgICAgICAgICAgIHJlZC5uYnJNZW1iZXJzKys7DQogICAgICAgICAgICBhbW91bnQgLT0gSU5WRVNUX0FNT1VOVDsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIElmIHRoZXJlIGlzIHN0aWxsIHNvbWUgbW9uZXkgaW4gdGhlIGJhbGFuY2UsIHNlbnQgaXQgYmFjaw0KICAgICAgICBpZiAoYW1vdW50ID4gMCkgew0KICAgICAgICAgICAgbXNnLnNlbmRlci5zZW5kKGFtb3VudCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBoZWxwQmx1ZSgpIHsNCiAgICAgICAgdWludCBpOw0KICAgICAgICB1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsNCg0KICAgICAgICAvLyBDaGVjayBpZiBFeHBsb2RlZCwgaWYgc28gc2F2ZSB0aGUgcHJldmlvdXMgZ2FtZQ0KICAgICAgICAvLyBBbmQgY3JlYXRlIGEgbmV3IGdhbWUNCiAgICAgICAgY2hlY2tJZkV4cGxvZGVkKCk7DQoNCiAgICAgICAgLy8gVXBkYXRlIHRoZSBUaW1lU3RhbXANCiAgICAgICAgYmx1ZS5sYXN0VXBkYXRlID0gYmxvY2sudGltZXN0YW1wOw0KDQogICAgICAgIC8vIFNwbGl0IHRoZSBpbmNvbWluZyBtb25leSBldmVyeSAxMDAgZmlubmV5cw0KICAgICAgICB3aGlsZSAoYW1vdW50ID49IElOVkVTVF9BTU9VTlQpIHsNCiAgICAgICAgICAgIGJsdWUubWVtYmVycy5wdXNoKG1zZy5zZW5kZXIpOw0KICAgICAgICAgICAgYmx1ZS5uYnJNZW1iZXJzKys7DQogICAgICAgICAgICBhbW91bnQgLT0gSU5WRVNUX0FNT1VOVDsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIElmIHRoZXJlIGlzIHN0aWxsIHNvbWUgbW9uZXkgaW4gdGhlIGJhbGFuY2UsIHNlbnQgaXQgYmFjaw0KICAgICAgICBpZiAoYW1vdW50ID4gMCkgew0KICAgICAgICAgICAgbXNnLnNlbmRlci5zZW5kKGFtb3VudCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjaGVja0lmRXhwbG9kZWQoKSB7DQogICAgICAgIGlmIChjaGVja1RpbWUoKSkgew0KICAgICAgICAgICAgbmV3Um91bmQoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoZWNrVGltZSgpIHByaXZhdGUgcmV0dXJucyhib29sIGV4cGxvZGVkKSB7DQogICAgICAgIHVpbnQgaTsNCiAgICAgICAgdWludCBsb3N0QW1vdW50ID0gMDsNCiAgICAgICAgdWludCBnYWluUGVyTWVtYmVyID0gMDsNCiAgICAgICAgdWludCBmZWVDb2xsZWN0ZWQgPSAwOw0KDQogICAgICAgIC8vIElmIFJlZCBhbmQgQmx1ZSBoYXZlIGV4cGxvZGVkIGF0IHRoZSBzYW1lIHRpbWUsIHJldHVybiB0aGUgYW1vdW50ZWQgaW52ZXN0ZWQNCiAgICAgICAgaWYgKHJlZC5sYXN0VXBkYXRlID09IGJsdWUubGFzdFVwZGF0ZSAmJiByZWQubGFzdFVwZGF0ZSArIERFTEFZIDwgYmxvY2sudGltZXN0YW1wKSB7DQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmVkLm1lbWJlcnMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICBiYWxhbmNlc1tyZWQubWVtYmVyc1tpXV0gKz0gSU5WRVNUX0FNT1VOVDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBibHVlLm1lbWJlcnMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICBiYWxhbmNlc1tibHVlLm1lbWJlcnNbaV1dICs9IElOVkVTVF9BTU9VTlQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGhpc3RvcnlXaW5uZXIucHVzaCgnVGllIGJldHdlZW4gUmVkIGFuZCBCbHVlJyk7DQogICAgICAgICAgICBoaXN0b3J5UmVkLnB1c2gocmVkLm5ick1lbWJlcnMpOw0KICAgICAgICAgICAgaGlzdG9yeUJsdWUucHVzaChibHVlLm5ick1lbWJlcnMpOw0KICAgICAgICAgICAgZ2FtZU5icisrOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBUYWtlIHRoZSBvbGRlciB0aW1lc3RhbXANCiAgICAgICAgaWYgKHJlZC5sYXN0VXBkYXRlIDwgYmx1ZS5sYXN0VXBkYXRlKSB7DQogICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgUmVkIGJvbWIgZXhwbG9kZWQNCiAgICAgICAgICAgIGlmIChyZWQubGFzdFVwZGF0ZSArIERFTEFZIDwgYmxvY2sudGltZXN0YW1wKSB7DQogICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBsb3N0IGFtb3VudCBieSB0aGUgcmVkIHRlYW0NCiAgICAgICAgICAgICAgICAvLyBOdW1iZXIgb2YgUmVkIG1lbWJlciAqIEludmVzdGVkIGFtb3VudCBwZXIgdXNlciAgKg0KICAgICAgICAgICAgICAgIGZlZUNvbGxlY3RlZCArPSAocmVkLm5ick1lbWJlcnMgKiBJTlZFU1RfQU1PVU5UICogRkVFIC8gMTAwKTsNCiAgICAgICAgICAgICAgICBiYWxhbmNlc1tjcmVhdG9yXSArPSBmZWVDb2xsZWN0ZWQ7DQogICAgICAgICAgICAgICAgbG9zdEFtb3VudCA9IChyZWQubmJyTWVtYmVycyAqIElOVkVTVF9BTU9VTlQpIC0gZmVlQ29sbGVjdGVkOw0KDQogICAgICAgICAgICAgICAgZ2FpblBlck1lbWJlciA9IGxvc3RBbW91bnQgLyBibHVlLm5ick1lbWJlcnM7DQogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGJsdWUubWVtYmVycy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICBiYWxhbmNlc1tibHVlLm1lbWJlcnNbaV1dICs9IChJTlZFU1RfQU1PVU5UICsgZ2FpblBlck1lbWJlcik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaGlzdG9yeVdpbm5lci5wdXNoKCdSZWQnKTsNCiAgICAgICAgICAgICAgICBoaXN0b3J5UmVkLnB1c2gocmVkLm5ick1lbWJlcnMpOw0KICAgICAgICAgICAgICAgIGhpc3RvcnlCbHVlLnB1c2goYmx1ZS5uYnJNZW1iZXJzKTsNCiAgICAgICAgICAgICAgICBnYW1lTmJyKys7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgQmx1ZSBib21iIGV4cGxvZGVkDQogICAgICAgICAgICBpZiAoYmx1ZS5sYXN0VXBkYXRlICsgREVMQVkgPCBibG9jay50aW1lc3RhbXApIHsNCiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGxvc3QgYW1vdW50IGJ5IHRoZSByZWQgdGVhbQ0KICAgICAgICAgICAgICAgIC8vIE51bWJlciBvZiBSZWQgbWVtYmVyICogSW52ZXN0ZWQgYW1vdW50IHBlciB1c2VyICAqDQogICAgICAgICAgICAgICAgZmVlQ29sbGVjdGVkICs9IChibHVlLm5ick1lbWJlcnMgKiBJTlZFU1RfQU1PVU5UICogRkVFIC8gMTAwKTsNCiAgICAgICAgICAgICAgICBiYWxhbmNlc1tjcmVhdG9yXSArPSBmZWVDb2xsZWN0ZWQ7DQogICAgICAgICAgICAgICAgbG9zdEFtb3VudCA9IChibHVlLm5ick1lbWJlcnMgKiBJTlZFU1RfQU1PVU5UKSAtIGZlZUNvbGxlY3RlZDsNCiAgICAgICAgICAgICAgICBnYWluUGVyTWVtYmVyID0gbG9zdEFtb3VudCAvIHJlZC5uYnJNZW1iZXJzOw0KICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByZWQubWVtYmVycy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICBiYWxhbmNlc1tyZWQubWVtYmVyc1tpXV0gKz0gKElOVkVTVF9BTU9VTlQgKyBnYWluUGVyTWVtYmVyKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBoaXN0b3J5V2lubmVyLnB1c2goJ0JsdWUnKTsNCiAgICAgICAgICAgICAgICBoaXN0b3J5UmVkLnB1c2gocmVkLm5ick1lbWJlcnMpOw0KICAgICAgICAgICAgICAgIGhpc3RvcnlCbHVlLnB1c2goYmx1ZS5uYnJNZW1iZXJzKTsNCiAgICAgICAgICAgICAgICBnYW1lTmJyKys7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBuZXdSb3VuZCgpIHByaXZhdGUgew0KICAgICAgICByZWQubmFtZSA9ICJSZWQgdGVhbSI7DQogICAgICAgIGJsdWUubmFtZSA9ICJCbHVlIHRlYW0iOw0KICAgICAgICByZWQubGFzdFVwZGF0ZSA9IGJsb2NrLnRpbWVzdGFtcDsNCiAgICAgICAgYmx1ZS5sYXN0VXBkYXRlID0gYmxvY2sudGltZXN0YW1wOw0KICAgICAgICByZWQubmJyTWVtYmVycyA9IDA7DQogICAgICAgIGJsdWUubmJyTWVtYmVycyA9IDA7DQogICAgICAgIHJlZC5tZW1iZXJzID0gbmV3IGFkZHJlc3NbXSgwKTsNCiAgICAgICAgYmx1ZS5tZW1iZXJzID0gbmV3IGFkZHJlc3NbXSgwKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbigpIHsNCiAgICAgICAgLy8gSGVscCB0aGUgb2xkZXN0IHRpbWVzdGFtcCAoZ29pbmcgdG8gZXhwbG9kZSBmaXJzdCkNCiAgICAgICAgaWYgKHJlZC5sYXN0VXBkYXRlIDwgYmx1ZS5sYXN0VXBkYXRlKSB7DQogICAgICAgICAgICBoZWxwUmVkKCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBoZWxwQmx1ZSgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY29sbGVjdEJhbGFuY2UoKSB7DQogICAgICAgIG1zZy5zZW5kZXIuc2VuZChiYWxhbmNlc1ttc2cuc2VuZGVyXSk7DQogICAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsNCiAgICB9DQoNCiAgICAvLyBBbGxvdyB0aGUgY3JlYXRvciB0byBzZW5kIHRoZWlyIGJhbGFuY2VzIHRvIHRoZSBwbGF5ZXJzDQogICAgZnVuY3Rpb24gc2VuZEJhbGFuY2UoYWRkcmVzcyBwbGF5ZXIpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gY3JlYXRvcikgew0KICAgICAgICAgICAgcGxheWVyLnNlbmQoYmFsYW5jZXNbcGxheWVyXSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBuZXdPd25lcihhZGRyZXNzIG5ld093bmVyKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGNyZWF0b3IpIHsNCiAgICAgICAgICAgIGNyZWF0b3IgPSBuZXdPd25lcjsNCiAgICAgICAgfQ0KICAgIH0NCg0KfQ=='