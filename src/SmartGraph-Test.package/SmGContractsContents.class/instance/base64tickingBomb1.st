base 64 content
base64tickingBomb1
	^'Y29udHJhY3QgdGlja2luZ0JvbWIgew0KDQogICAgc3RydWN0IHRlYW0gew0KICAgICAgICBzdHJpbmcgbmFtZTsNCiAgICAgICAgdWludCBsYXN0VXBkYXRlOw0KICAgICAgICBhZGRyZXNzW10gbWVtYmVyczsNCiAgICAgICAgdWludCBuYnJNZW1iZXJzOw0KICAgIH0NCg0KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IERFTEFZID0gIDYwICogNjAgKiAxMjsgLy8gMTIgSG91cnMNCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBJTlZFU1RfQU1PVU5UID0gNTAwIGZpbm5leTsgLy8gMC41IEVUSA0KICAgIHVpbnQgY29uc3RhbnQgRkVFID0gMzsNCg0KICAgIHRlYW0gcHVibGljIHJlZDsNCiAgICB0ZWFtIHB1YmxpYyBibHVlOw0KDQogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIHB1YmxpYyBiYWxhbmNlczsNCiAgICBhZGRyZXNzIGNyZWF0b3I7DQoNCiAgICBzdHJpbmdbXSBwdWJsaWMgaGlzdG9yeVdpbm5lcjsNCiAgICB1aW50W10gcHVibGljIGhpc3RvcnlSZWQ7DQogICAgdWludFtdIHB1YmxpYyBoaXN0b3J5Qmx1ZTsNCiAgICB1aW50IHB1YmxpYyBnYW1lTmJyOw0KDQogICAgZnVuY3Rpb24gdGlja2luZ0JvbWIoKSB7DQogICAgICAgIG5ld1JvdW5kKCk7DQogICAgICAgIGNyZWF0b3IgPSBtc2cuc2VuZGVyOw0KICAgICAgICBnYW1lTmJyID0gMDsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBoZWxwUmVkKCkgew0KICAgICAgICB1aW50IGk7DQogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOw0KDQogICAgICAgIC8vIENoZWNrIGlmIEV4cGxvZGVkLCBpZiBzbyBzYXZlIHRoZSBwcmV2aW91cyBnYW1lDQogICAgICAgIC8vIEFuZCBjcmVhdGUgYSBuZXcgcm91bmQNCiAgICAgICAgY2hlY2tJZkV4cGxvZGVkKCk7DQoNCiAgICAgICAgLy8gVXBkYXRlIHRoZSBUaW1lU3RhbXANCiAgICAgICAgcmVkLmxhc3RVcGRhdGUgPSBibG9jay50aW1lc3RhbXA7DQoNCiAgICAgICAgLy8gU3BsaXQgdGhlIGluY29taW5nIG1vbmV5IGV2ZXJ5IElOVkVTVF9BTU9VTlQNCiAgICAgICAgd2hpbGUgKGFtb3VudCA+PSBJTlZFU1RfQU1PVU5UKSB7DQogICAgICAgICAgICByZWQubWVtYmVycy5wdXNoKG1zZy5zZW5kZXIpOw0KICAgICAgICAgICAgcmVkLm5ick1lbWJlcnMrKzsNCiAgICAgICAgICAgIGFtb3VudCAtPSBJTlZFU1RfQU1PVU5UOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gSWYgdGhlcmUgaXMgc3RpbGwgc29tZSBtb25leSBpbiB0aGUgYmFsYW5jZSwgc2VudCBpdCBiYWNrDQogICAgICAgIGlmIChhbW91bnQgPiAwKSB7DQogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQoYW1vdW50KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGhlbHBCbHVlKCkgew0KICAgICAgICB1aW50IGk7DQogICAgICAgIHVpbnQgYW1vdW50ID0gbXNnLnZhbHVlOw0KDQogICAgICAgIC8vIENoZWNrIGlmIEV4cGxvZGVkLCBpZiBzbyBzYXZlIHRoZSBwcmV2aW91cyBnYW1lDQogICAgICAgIC8vIEFuZCBjcmVhdGUgYSBuZXcgZ2FtZQ0KICAgICAgICBjaGVja0lmRXhwbG9kZWQoKTsNCg0KICAgICAgICAvLyBVcGRhdGUgdGhlIFRpbWVTdGFtcA0KICAgICAgICBibHVlLmxhc3RVcGRhdGUgPSBibG9jay50aW1lc3RhbXA7DQoNCiAgICAgICAgLy8gU3BsaXQgdGhlIGluY29taW5nIG1vbmV5IGV2ZXJ5IDEwMCBmaW5uZXlzDQogICAgICAgIHdoaWxlIChhbW91bnQgPj0gSU5WRVNUX0FNT1VOVCkgew0KICAgICAgICAgICAgYmx1ZS5tZW1iZXJzLnB1c2gobXNnLnNlbmRlcik7DQogICAgICAgICAgICBibHVlLm5ick1lbWJlcnMrKzsNCiAgICAgICAgICAgIGFtb3VudCAtPSBJTlZFU1RfQU1PVU5UOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gSWYgdGhlcmUgaXMgc3RpbGwgc29tZSBtb25leSBpbiB0aGUgYmFsYW5jZSwgc2VudCBpdCBiYWNrDQogICAgICAgIGlmIChhbW91bnQgPiAwKSB7DQogICAgICAgICAgICBtc2cuc2VuZGVyLnNlbmQoYW1vdW50KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNoZWNrSWZFeHBsb2RlZCgpIHsNCiAgICAgICAgaWYgKGNoZWNrVGltZSgpKSB7DQogICAgICAgICAgICBuZXdSb3VuZCgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY2hlY2tUaW1lKCkgcHJpdmF0ZSByZXR1cm5zKGJvb2wgZXhwbG9kZWQpIHsNCiAgICAgICAgdWludCBpOw0KICAgICAgICB1aW50IGxvc3RBbW91bnQgPSAwOw0KICAgICAgICB1aW50IGdhaW5QZXJNZW1iZXIgPSAwOw0KICAgICAgICB1aW50IGZlZUNvbGxlY3RlZCA9IDA7DQoNCiAgICAgICAgLy8gSWYgUmVkIGFuZCBCbHVlIGhhdmUgZXhwbG9kZWQgYXQgdGhlIHNhbWUgdGltZSwgcmV0dXJuIHRoZSBhbW91bnRlZCBpbnZlc3RlZA0KICAgICAgICBpZiAocmVkLmxhc3RVcGRhdGUgPT0gYmx1ZS5sYXN0VXBkYXRlICYmIHJlZC5sYXN0VXBkYXRlICsgREVMQVkgPCBibG9jay50aW1lc3RhbXApIHsNCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByZWQubWVtYmVycy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGJhbGFuY2VzW3JlZC5tZW1iZXJzW2ldXSArPSBJTlZFU1RfQU1PVU5UOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGJsdWUubWVtYmVycy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGJhbGFuY2VzW2JsdWUubWVtYmVyc1tpXV0gKz0gSU5WRVNUX0FNT1VOVDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaGlzdG9yeVdpbm5lci5wdXNoKCdUaWUgYmV0d2VlbiBSZWQgYW5kIEJsdWUnKTsNCiAgICAgICAgICAgIGhpc3RvcnlSZWQucHVzaChyZWQubmJyTWVtYmVycyk7DQogICAgICAgICAgICBoaXN0b3J5Qmx1ZS5wdXNoKGJsdWUubmJyTWVtYmVycyk7DQogICAgICAgICAgICBnYW1lTmJyKys7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFRha2UgdGhlIG9sZGVyIHRpbWVzdGFtcA0KICAgICAgICBpZiAocmVkLmxhc3RVcGRhdGUgPCBibHVlLmxhc3RVcGRhdGUpIHsNCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBSZWQgYm9tYiBleHBsb2RlZA0KICAgICAgICAgICAgaWYgKHJlZC5sYXN0VXBkYXRlICsgREVMQVkgPCBibG9jay50aW1lc3RhbXApIHsNCiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGxvc3QgYW1vdW50IGJ5IHRoZSByZWQgdGVhbQ0KICAgICAgICAgICAgICAgIC8vIE51bWJlciBvZiBSZWQgbWVtYmVyICogSW52ZXN0ZWQgYW1vdW50IHBlciB1c2VyICAqDQogICAgICAgICAgICAgICAgZmVlQ29sbGVjdGVkICs9IChyZWQubmJyTWVtYmVycyAqIElOVkVTVF9BTU9VTlQgKiBGRUUgLyAxMDApOw0KICAgICAgICAgICAgICAgIGJhbGFuY2VzW2NyZWF0b3JdICs9IGZlZUNvbGxlY3RlZDsNCiAgICAgICAgICAgICAgICBsb3N0QW1vdW50ID0gKHJlZC5uYnJNZW1iZXJzICogSU5WRVNUX0FNT1VOVCkgLSBmZWVDb2xsZWN0ZWQ7DQoNCiAgICAgICAgICAgICAgICBnYWluUGVyTWVtYmVyID0gbG9zdEFtb3VudCAvIGJsdWUubmJyTWVtYmVyczsNCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmx1ZS5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgIGJhbGFuY2VzW2JsdWUubWVtYmVyc1tpXV0gKz0gKElOVkVTVF9BTU9VTlQgKyBnYWluUGVyTWVtYmVyKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBoaXN0b3J5V2lubmVyLnB1c2goJ1JlZCcpOw0KICAgICAgICAgICAgICAgIGhpc3RvcnlSZWQucHVzaChyZWQubmJyTWVtYmVycyk7DQogICAgICAgICAgICAgICAgaGlzdG9yeUJsdWUucHVzaChibHVlLm5ick1lbWJlcnMpOw0KICAgICAgICAgICAgICAgIGdhbWVOYnIrKzsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBCbHVlIGJvbWIgZXhwbG9kZWQNCiAgICAgICAgICAgIGlmIChibHVlLmxhc3RVcGRhdGUgKyBERUxBWSA8IGJsb2NrLnRpbWVzdGFtcCkgew0KICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgbG9zdCBhbW91bnQgYnkgdGhlIHJlZCB0ZWFtDQogICAgICAgICAgICAgICAgLy8gTnVtYmVyIG9mIFJlZCBtZW1iZXIgKiBJbnZlc3RlZCBhbW91bnQgcGVyIHVzZXIgICoNCiAgICAgICAgICAgICAgICBmZWVDb2xsZWN0ZWQgKz0gKGJsdWUubmJyTWVtYmVycyAqIElOVkVTVF9BTU9VTlQgKiBGRUUgLyAxMDApOw0KICAgICAgICAgICAgICAgIGJhbGFuY2VzW2NyZWF0b3JdICs9IGZlZUNvbGxlY3RlZDsNCiAgICAgICAgICAgICAgICBsb3N0QW1vdW50ID0gKGJsdWUubmJyTWVtYmVycyAqIElOVkVTVF9BTU9VTlQpIC0gZmVlQ29sbGVjdGVkOw0KICAgICAgICAgICAgICAgIGdhaW5QZXJNZW1iZXIgPSBsb3N0QW1vdW50IC8gcmVkLm5ick1lbWJlcnM7DQogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlZC5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgIGJhbGFuY2VzW3JlZC5tZW1iZXJzW2ldXSArPSAoSU5WRVNUX0FNT1VOVCArIGdhaW5QZXJNZW1iZXIpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGhpc3RvcnlXaW5uZXIucHVzaCgnQmx1ZScpOw0KICAgICAgICAgICAgICAgIGhpc3RvcnlSZWQucHVzaChyZWQubmJyTWVtYmVycyk7DQogICAgICAgICAgICAgICAgaGlzdG9yeUJsdWUucHVzaChibHVlLm5ick1lbWJlcnMpOw0KICAgICAgICAgICAgICAgIGdhbWVOYnIrKzsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG5ld1JvdW5kKCkgcHJpdmF0ZSB7DQogICAgICAgIHJlZC5uYW1lID0gIlJlZCB0ZWFtIjsNCiAgICAgICAgYmx1ZS5uYW1lID0gIkJsdWUgdGVhbSI7DQogICAgICAgIHJlZC5sYXN0VXBkYXRlID0gYmxvY2sudGltZXN0YW1wOw0KICAgICAgICBibHVlLmxhc3RVcGRhdGUgPSBibG9jay50aW1lc3RhbXA7DQogICAgICAgIHJlZC5uYnJNZW1iZXJzID0gMDsNCiAgICAgICAgYmx1ZS5uYnJNZW1iZXJzID0gMDsNCiAgICAgICAgcmVkLm1lbWJlcnMgPSBuZXcgYWRkcmVzc1tdKDApOw0KICAgICAgICBibHVlLm1lbWJlcnMgPSBuZXcgYWRkcmVzc1tdKDApOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uKCkgew0KICAgICAgICAvLyBIZWxwIHRoZSBvbGRlc3QgdGltZXN0YW1wIChnb2luZyB0byBleHBsb2RlIGZpcnN0KQ0KICAgICAgICBpZiAocmVkLmxhc3RVcGRhdGUgPCBibHVlLmxhc3RVcGRhdGUpIHsNCiAgICAgICAgICAgIGhlbHBSZWQoKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGhlbHBCbHVlKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjb2xsZWN0QmFsYW5jZSgpIHsNCiAgICAgICAgbXNnLnNlbmRlci5zZW5kKGJhbGFuY2VzW21zZy5zZW5kZXJdKTsNCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOw0KICAgIH0NCg0KICAgIC8vIEFsbG93IHRoZSBjcmVhdG9yIHRvIHNlbmQgdGhlaXIgYmFsYW5jZXMgdG8gdGhlIHBsYXllcnMNCiAgICBmdW5jdGlvbiBzZW5kQmFsYW5jZShhZGRyZXNzIHBsYXllcikgew0KICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBjcmVhdG9yKSB7DQogICAgICAgICAgICBwbGF5ZXIuc2VuZChiYWxhbmNlc1twbGF5ZXJdKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG5ld093bmVyKGFkZHJlc3MgbmV3T3duZXIpIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgPT0gY3JlYXRvcikgew0KICAgICAgICAgICAgY3JlYXRvciA9IG5ld093bmVyOw0KICAgICAgICB9DQogICAgfQ0KDQp9'