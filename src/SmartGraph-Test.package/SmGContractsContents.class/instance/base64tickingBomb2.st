base 64 content
base64tickingBomb2
	^'Y29udHJhY3QgdGlja2luZ0JvbWIgew0KDQogICAgc3RydWN0IHRlYW0gew0KICAgICAgICBzdHJpbmcgbmFtZTsNCiAgICAgICAgdWludCBsYXN0VXBkYXRlOw0KICAgICAgICBhZGRyZXNzW10gbWVtYmVyczsNCiAgICAgICAgdWludCBuYnJNZW1iZXJzOw0KICAgIH0NCg0KICAgIHVpbnQgcHVibGljIGNvbnN0YW50IERFTEFZID0gIDYwICogNjAgKiAyNDsgLy8gMjQgSG91cnMNCiAgICB1aW50IHB1YmxpYyBjb25zdGFudCBJTlZFU1RfQU1PVU5UID0gMTAwMCBmaW5uZXk7IC8vIDEgRVRIDQogICAgdWludCBjb25zdGFudCBGRUUgPSAzOw0KDQogICAgdGVhbSBwdWJsaWMgcmVkOw0KICAgIHRlYW0gcHVibGljIGJsdWU7DQoNCiAgICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VzOw0KICAgIGFkZHJlc3MgY3JlYXRvcjsNCg0KICAgIHN0cmluZ1tdIHB1YmxpYyBoaXN0b3J5V2lubmVyOw0KICAgIHVpbnRbXSBwdWJsaWMgaGlzdG9yeVJlZDsNCiAgICB1aW50W10gcHVibGljIGhpc3RvcnlCbHVlOw0KICAgIHVpbnQgcHVibGljIGdhbWVOYnI7DQoNCiAgICBmdW5jdGlvbiB0aWNraW5nQm9tYigpIHsNCiAgICAgICAgbmV3Um91bmQoKTsNCiAgICAgICAgY3JlYXRvciA9IG1zZy5zZW5kZXI7DQogICAgICAgIGdhbWVOYnIgPSAwOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGhlbHBSZWQoKSB7DQogICAgICAgIHVpbnQgaTsNCiAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7DQoNCiAgICAgICAgLy8gQ2hlY2sgaWYgRXhwbG9kZWQsIGlmIHNvIHNhdmUgdGhlIHByZXZpb3VzIGdhbWUNCiAgICAgICAgLy8gQW5kIGNyZWF0ZSBhIG5ldyByb3VuZA0KICAgICAgICBjaGVja0lmRXhwbG9kZWQoKTsNCg0KICAgICAgICAvLyBVcGRhdGUgdGhlIFRpbWVTdGFtcA0KICAgICAgICByZWQubGFzdFVwZGF0ZSA9IGJsb2NrLnRpbWVzdGFtcDsNCg0KICAgICAgICAvLyBTcGxpdCB0aGUgaW5jb21pbmcgbW9uZXkgZXZlcnkgSU5WRVNUX0FNT1VOVA0KICAgICAgICB3aGlsZSAoYW1vdW50ID49IElOVkVTVF9BTU9VTlQpIHsNCiAgICAgICAgICAgIHJlZC5tZW1iZXJzLnB1c2gobXNnLnNlbmRlcik7DQogICAgICAgICAgICByZWQubmJyTWVtYmVycysrOw0KICAgICAgICAgICAgYW1vdW50IC09IElOVkVTVF9BTU9VTlQ7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBJZiB0aGVyZSBpcyBzdGlsbCBzb21lIG1vbmV5IGluIHRoZSBiYWxhbmNlLCBzZW50IGl0IGJhY2sNCiAgICAgICAgaWYgKGFtb3VudCA+IDApIHsNCiAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChhbW91bnQpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gaGVscEJsdWUoKSB7DQogICAgICAgIHVpbnQgaTsNCiAgICAgICAgdWludCBhbW91bnQgPSBtc2cudmFsdWU7DQoNCiAgICAgICAgLy8gQ2hlY2sgaWYgRXhwbG9kZWQsIGlmIHNvIHNhdmUgdGhlIHByZXZpb3VzIGdhbWUNCiAgICAgICAgLy8gQW5kIGNyZWF0ZSBhIG5ldyBnYW1lDQogICAgICAgIGNoZWNrSWZFeHBsb2RlZCgpOw0KDQogICAgICAgIC8vIFVwZGF0ZSB0aGUgVGltZVN0YW1wDQogICAgICAgIGJsdWUubGFzdFVwZGF0ZSA9IGJsb2NrLnRpbWVzdGFtcDsNCg0KICAgICAgICAvLyBTcGxpdCB0aGUgaW5jb21pbmcgbW9uZXkgZXZlcnkgMTAwIGZpbm5leXMNCiAgICAgICAgd2hpbGUgKGFtb3VudCA+PSBJTlZFU1RfQU1PVU5UKSB7DQogICAgICAgICAgICBibHVlLm1lbWJlcnMucHVzaChtc2cuc2VuZGVyKTsNCiAgICAgICAgICAgIGJsdWUubmJyTWVtYmVycysrOw0KICAgICAgICAgICAgYW1vdW50IC09IElOVkVTVF9BTU9VTlQ7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBJZiB0aGVyZSBpcyBzdGlsbCBzb21lIG1vbmV5IGluIHRoZSBiYWxhbmNlLCBzZW50IGl0IGJhY2sNCiAgICAgICAgaWYgKGFtb3VudCA+IDApIHsNCiAgICAgICAgICAgIG1zZy5zZW5kZXIuc2VuZChhbW91bnQpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY2hlY2tJZkV4cGxvZGVkKCkgew0KICAgICAgICBpZiAoY2hlY2tUaW1lKCkpIHsNCiAgICAgICAgICAgIG5ld1JvdW5kKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjaGVja1RpbWUoKSBwcml2YXRlIHJldHVybnMoYm9vbCBleHBsb2RlZCkgew0KICAgICAgICB1aW50IGk7DQogICAgICAgIHVpbnQgbG9zdEFtb3VudCA9IDA7DQogICAgICAgIHVpbnQgZ2FpblBlck1lbWJlciA9IDA7DQogICAgICAgIHVpbnQgZmVlQ29sbGVjdGVkID0gMDsNCg0KICAgICAgICAvLyBJZiBSZWQgYW5kIEJsdWUgaGF2ZSBleHBsb2RlZCBhdCB0aGUgc2FtZSB0aW1lLCByZXR1cm4gdGhlIGFtb3VudGVkIGludmVzdGVkDQogICAgICAgIGlmIChyZWQubGFzdFVwZGF0ZSA9PSBibHVlLmxhc3RVcGRhdGUgJiYgcmVkLmxhc3RVcGRhdGUgKyBERUxBWSA8IGJsb2NrLnRpbWVzdGFtcCkgew0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlZC5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgYmFsYW5jZXNbcmVkLm1lbWJlcnNbaV1dICs9IElOVkVTVF9BTU9VTlQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmx1ZS5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgYmFsYW5jZXNbYmx1ZS5tZW1iZXJzW2ldXSArPSBJTlZFU1RfQU1PVU5UOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBoaXN0b3J5V2lubmVyLnB1c2goJ1RpZSBiZXR3ZWVuIFJlZCBhbmQgQmx1ZScpOw0KICAgICAgICAgICAgaGlzdG9yeVJlZC5wdXNoKHJlZC5uYnJNZW1iZXJzKTsNCiAgICAgICAgICAgIGhpc3RvcnlCbHVlLnB1c2goYmx1ZS5uYnJNZW1iZXJzKTsNCiAgICAgICAgICAgIGdhbWVOYnIrKzsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gVGFrZSB0aGUgb2xkZXIgdGltZXN0YW1wDQogICAgICAgIGlmIChyZWQubGFzdFVwZGF0ZSA8IGJsdWUubGFzdFVwZGF0ZSkgew0KICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIFJlZCBib21iIGV4cGxvZGVkDQogICAgICAgICAgICBpZiAocmVkLmxhc3RVcGRhdGUgKyBERUxBWSA8IGJsb2NrLnRpbWVzdGFtcCkgew0KICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgbG9zdCBhbW91bnQgYnkgdGhlIHJlZCB0ZWFtDQogICAgICAgICAgICAgICAgLy8gTnVtYmVyIG9mIFJlZCBtZW1iZXIgKiBJbnZlc3RlZCBhbW91bnQgcGVyIHVzZXIgICoNCiAgICAgICAgICAgICAgICBmZWVDb2xsZWN0ZWQgKz0gKHJlZC5uYnJNZW1iZXJzICogSU5WRVNUX0FNT1VOVCAqIEZFRSAvIDEwMCk7DQogICAgICAgICAgICAgICAgYmFsYW5jZXNbY3JlYXRvcl0gKz0gZmVlQ29sbGVjdGVkOw0KICAgICAgICAgICAgICAgIGxvc3RBbW91bnQgPSAocmVkLm5ick1lbWJlcnMgKiBJTlZFU1RfQU1PVU5UKSAtIGZlZUNvbGxlY3RlZDsNCg0KICAgICAgICAgICAgICAgIGdhaW5QZXJNZW1iZXIgPSBsb3N0QW1vdW50IC8gYmx1ZS5uYnJNZW1iZXJzOw0KICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBibHVlLm1lbWJlcnMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZXNbYmx1ZS5tZW1iZXJzW2ldXSArPSAoSU5WRVNUX0FNT1VOVCArIGdhaW5QZXJNZW1iZXIpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGhpc3RvcnlXaW5uZXIucHVzaCgnUmVkJyk7DQogICAgICAgICAgICAgICAgaGlzdG9yeVJlZC5wdXNoKHJlZC5uYnJNZW1iZXJzKTsNCiAgICAgICAgICAgICAgICBoaXN0b3J5Qmx1ZS5wdXNoKGJsdWUubmJyTWVtYmVycyk7DQogICAgICAgICAgICAgICAgZ2FtZU5icisrOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIEJsdWUgYm9tYiBleHBsb2RlZA0KICAgICAgICAgICAgaWYgKGJsdWUubGFzdFVwZGF0ZSArIERFTEFZIDwgYmxvY2sudGltZXN0YW1wKSB7DQogICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBsb3N0IGFtb3VudCBieSB0aGUgcmVkIHRlYW0NCiAgICAgICAgICAgICAgICAvLyBOdW1iZXIgb2YgUmVkIG1lbWJlciAqIEludmVzdGVkIGFtb3VudCBwZXIgdXNlciAgKg0KICAgICAgICAgICAgICAgIGZlZUNvbGxlY3RlZCArPSAoYmx1ZS5uYnJNZW1iZXJzICogSU5WRVNUX0FNT1VOVCAqIEZFRSAvIDEwMCk7DQogICAgICAgICAgICAgICAgYmFsYW5jZXNbY3JlYXRvcl0gKz0gZmVlQ29sbGVjdGVkOw0KICAgICAgICAgICAgICAgIGxvc3RBbW91bnQgPSAoYmx1ZS5uYnJNZW1iZXJzICogSU5WRVNUX0FNT1VOVCkgLSBmZWVDb2xsZWN0ZWQ7DQogICAgICAgICAgICAgICAgZ2FpblBlck1lbWJlciA9IGxvc3RBbW91bnQgLyByZWQubmJyTWVtYmVyczsNCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmVkLm1lbWJlcnMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZXNbcmVkLm1lbWJlcnNbaV1dICs9IChJTlZFU1RfQU1PVU5UICsgZ2FpblBlck1lbWJlcik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaGlzdG9yeVdpbm5lci5wdXNoKCdCbHVlJyk7DQogICAgICAgICAgICAgICAgaGlzdG9yeVJlZC5wdXNoKHJlZC5uYnJNZW1iZXJzKTsNCiAgICAgICAgICAgICAgICBoaXN0b3J5Qmx1ZS5wdXNoKGJsdWUubmJyTWVtYmVycyk7DQogICAgICAgICAgICAgICAgZ2FtZU5icisrOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbmV3Um91bmQoKSBwcml2YXRlIHsNCiAgICAgICAgcmVkLm5hbWUgPSAiUmVkIHRlYW0iOw0KICAgICAgICBibHVlLm5hbWUgPSAiQmx1ZSB0ZWFtIjsNCiAgICAgICAgcmVkLmxhc3RVcGRhdGUgPSBibG9jay50aW1lc3RhbXA7DQogICAgICAgIGJsdWUubGFzdFVwZGF0ZSA9IGJsb2NrLnRpbWVzdGFtcDsNCiAgICAgICAgcmVkLm5ick1lbWJlcnMgPSAwOw0KICAgICAgICBibHVlLm5ick1lbWJlcnMgPSAwOw0KICAgICAgICByZWQubWVtYmVycyA9IG5ldyBhZGRyZXNzW10oMCk7DQogICAgICAgIGJsdWUubWVtYmVycyA9IG5ldyBhZGRyZXNzW10oMCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24oKSB7DQogICAgICAgIC8vIEhlbHAgdGhlIG9sZGVzdCB0aW1lc3RhbXAgKGdvaW5nIHRvIGV4cGxvZGUgZmlyc3QpDQogICAgICAgIGlmIChyZWQubGFzdFVwZGF0ZSA8IGJsdWUubGFzdFVwZGF0ZSkgew0KICAgICAgICAgICAgaGVscFJlZCgpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaGVscEJsdWUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNvbGxlY3RCYWxhbmNlKCkgew0KICAgICAgICBtc2cuc2VuZGVyLnNlbmQoYmFsYW5jZXNbbXNnLnNlbmRlcl0pOw0KICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IDA7DQogICAgfQ0KDQogICAgLy8gQWxsb3cgdGhlIGNyZWF0b3IgdG8gc2VuZCB0aGVpciBiYWxhbmNlcyB0byB0aGUgcGxheWVycw0KICAgIGZ1bmN0aW9uIHNlbmRCYWxhbmNlKGFkZHJlc3MgcGxheWVyKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyID09IGNyZWF0b3IpIHsNCiAgICAgICAgICAgIHBsYXllci5zZW5kKGJhbGFuY2VzW3BsYXllcl0pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbmV3T3duZXIoYWRkcmVzcyBuZXdPd25lcikgew0KICAgICAgICBpZiAobXNnLnNlbmRlciA9PSBjcmVhdG9yKSB7DQogICAgICAgICAgICBjcmVhdG9yID0gbmV3T3duZXI7DQogICAgICAgIH0NCiAgICB9DQoNCn0='