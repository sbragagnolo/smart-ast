base 64 content
base64token10
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KY29udHJhY3QgQ29udHJhY3RSZWNlaXZlciB7DQogICAgIA0KICAgIHN0cnVjdCBUS04gew0KICAgICAgICBhZGRyZXNzIHNlbmRlcjsNCiAgICAgICAgdWludCB2YWx1ZTsNCiAgICAgICAgYnl0ZXMgZGF0YTsNCiAgICAgICAgYnl0ZXM0IHNpZzsNCiAgICB9DQogICAgDQogICAgDQogICAgZnVuY3Rpb24gdG9rZW5GYWxsYmFjayhhZGRyZXNzIF9mcm9tLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpew0KICAgICAgVEtOIG1lbW9yeSB0a247DQogICAgICB0a24uc2VuZGVyID0gX2Zyb207DQogICAgICB0a24udmFsdWUgPSBfdmFsdWU7DQogICAgICB0a24uZGF0YSA9IF9kYXRhOw0KICAgICAgdWludDMyIHUgPSB1aW50MzIoX2RhdGFbM10pICsgKHVpbnQzMihfZGF0YVsyXSkgPDwgOCkgKyAodWludDMyKF9kYXRhWzFdKSA8PCAxNikgKyAodWludDMyKF9kYXRhWzBdKSA8PCAyNCk7DQogICAgICB0a24uc2lnID0gYnl0ZXM0KHUpOw0KIA0KICAgIH0NCn0NCg0KY29udHJhY3QgU2FmZU1hdGggew0KICAgIHVpbnQyNTYgY29uc3RhbnQgcHVibGljIE1BWF9VSU5UMjU2ID0NCiAgICAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY7DQoNCiAgICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsNCiAgICAgICAgaWYgKHggPiBNQVhfVUlOVDI1NiAtIHkpIHRocm93Ow0KICAgICAgICByZXR1cm4geCArIHk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IHgsIHVpbnQyNTYgeSkgY29uc3RhbnQgaW50ZXJuYWwgcmV0dXJucyAodWludDI1NiB6KSB7DQogICAgICAgIGlmICh4IDwgeSkgdGhyb3c7DQogICAgICAgIHJldHVybiB4IC0geTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQyNTYgeCwgdWludDI1NiB5KSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2IHopIHsNCiAgICAgICAgaWYgKHkgPT0gMCkgcmV0dXJuIDA7DQogICAgICAgIGlmICh4ID4gTUFYX1VJTlQyNTYgLyB5KSB0aHJvdzsNCiAgICAgICAgcmV0dXJuIHggKiB5Ow0KICAgIH0NCn0NCg0KY29udHJhY3QgVG9rZW4gaXMgU2FmZU1hdGh7DQoNCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOw0KICANCiAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAiIjsNCiAgc3RyaW5nIHB1YmxpYyBuYW1lID0gIiI7DQogIHVpbnQ4IHB1YmxpYyBkZWNpbWFscyA9IDE4Ow0KICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseSA9IDA7DQogIGFkZHJlc3Mgb3duZXIgPSAwOw0KICBib29sIHNldHVwRG9uZSA9IGZhbHNlOw0KICANCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSwgYnl0ZXMgaW5kZXhlZCBkYXRhKTsNCiAgDQogIGZ1bmN0aW9uIFRva2VuKGFkZHJlc3MgYWRyKSB7DQoJCW93bmVyID0gYWRyOyAgICAgICAgDQogICAgfQ0KCQ0KCWZ1bmN0aW9uIFNldHVwVG9rZW4oc3RyaW5nIF90b2tlbk5hbWUsIHN0cmluZyBfdG9rZW5TeW1ib2wsIHVpbnQyNTYgX3Rva2VuU3VwcGx5KQ0KCXsNCgkJaWYgKG1zZy5zZW5kZXIgPT0gb3duZXIgJiYgc2V0dXBEb25lID09IGZhbHNlKQ0KCQl7DQoJCQlzeW1ib2wgPSBfdG9rZW5TeW1ib2w7DQoJCQluYW1lID0gX3Rva2VuTmFtZTsNCgkJCXRvdGFsU3VwcGx5ID0gX3Rva2VuU3VwcGx5ICogMTAwMDAwMDAwMDAwMDAwMDAwMDsNCgkJCWJhbGFuY2VzW293bmVyXSA9IHRvdGFsU3VwcGx5Ow0KCQkJc2V0dXBEb25lID0gdHJ1ZTsNCgkJfQ0KCX0NCiAgDQogIGZ1bmN0aW9uIG5hbWUoKSBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgX25hbWUpIHsNCiAgICAgIHJldHVybiBuYW1lOw0KICB9DQoNCiAgZnVuY3Rpb24gc3ltYm9sKCkgY29uc3RhbnQgcmV0dXJucyAoc3RyaW5nIF9zeW1ib2wpIHsNCiAgICAgIHJldHVybiBzeW1ib2w7DQogIH0NCg0KICBmdW5jdGlvbiBkZWNpbWFscygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQ4IF9kZWNpbWFscykgew0KICAgICAgcmV0dXJuIGRlY2ltYWxzOw0KICB9DQoNCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IF90b3RhbFN1cHBseSkgew0KICAgICAgcmV0dXJuIHRvdGFsU3VwcGx5Ow0KICB9DQogIA0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUsIGJ5dGVzIF9kYXRhKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgIA0KICAgIGlmKGlzQ29udHJhY3QoX3RvKSkgew0KICAgICAgICByZXR1cm4gdHJhbnNmZXJUb0NvbnRyYWN0KF90bywgX3ZhbHVlLCBfZGF0YSk7DQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgICByZXR1cm4gdHJhbnNmZXJUb0FkZHJlc3MoX3RvLCBfdmFsdWUsIF9kYXRhKTsNCiAgICB9DQp9DQogIA0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgDQogICAgYnl0ZXMgbWVtb3J5IGVtcHR5Ow0KICAgIGlmKGlzQ29udHJhY3QoX3RvKSkgew0KICAgICAgICByZXR1cm4gdHJhbnNmZXJUb0NvbnRyYWN0KF90bywgX3ZhbHVlLCBlbXB0eSk7DQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgICByZXR1cm4gdHJhbnNmZXJUb0FkZHJlc3MoX3RvLCBfdmFsdWUsIGVtcHR5KTsNCiAgICB9DQp9DQoNCiAgZnVuY3Rpb24gaXNDb250cmFjdChhZGRyZXNzIF9hZGRyKSBwcml2YXRlIHJldHVybnMgKGJvb2wgaXNfY29udHJhY3QpIHsNCiAgICAgIHVpbnQgbGVuZ3RoOw0KCSAgDQoJICBpZiAoYmFsYW5jZU9mKF9hZGRyKSA+PTAgKQ0KCSAgDQogICAgICBhc3NlbWJseSB7DQogICAgICAgICAgICBsZW5ndGggOj0gZXh0Y29kZXNpemUoX2FkZHIpDQogICAgICAgIH0NCiAgICAgICAgaWYobGVuZ3RoPjApIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogIGZ1bmN0aW9uIHRyYW5zZmVyVG9BZGRyZXNzKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSwgYnl0ZXMgX2RhdGEpIHByaXZhdGUgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgaWYgKGJhbGFuY2VPZihtc2cuc2VuZGVyKSA8IF92YWx1ZSkgdGhyb3c7DQogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBzYWZlU3ViKGJhbGFuY2VPZihtc2cuc2VuZGVyKSwgX3ZhbHVlKTsNCiAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlT2YoX3RvKSwgX3ZhbHVlKTsNCiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX2RhdGEpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQogIA0KICBmdW5jdGlvbiB0cmFuc2ZlclRvQ29udHJhY3QoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgcHJpdmF0ZSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICBpZiAoYmFsYW5jZU9mKG1zZy5zZW5kZXIpIDwgX3ZhbHVlKSB0aHJvdzsNCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSA9IHNhZmVTdWIoYmFsYW5jZU9mKG1zZy5zZW5kZXIpLCBfdmFsdWUpOw0KICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VPZihfdG8pLCBfdmFsdWUpOw0KICAgIENvbnRyYWN0UmVjZWl2ZXIgcmVjaWV2ZXIgPSBDb250cmFjdFJlY2VpdmVyKF90byk7DQogICAgcmVjaWV2ZXIudG9rZW5GYWxsYmFjayhtc2cuc2VuZGVyLCBfdmFsdWUsIF9kYXRhKTsNCiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSwgX2RhdGEpOw0KICAgIHJldHVybiB0cnVlOw0KfQ0KDQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7DQogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07DQogIH0NCn0='