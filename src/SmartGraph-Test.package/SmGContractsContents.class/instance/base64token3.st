base 64 content
base64token3
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4yOw0KDQpjb250cmFjdCBvd25lZCB7DQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQoNCiAgICBmdW5jdGlvbiBvd25lZCgpIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlPd25lciB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgew0KICAgICAgICBpZiAobmV3T3duZXIgPT0gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwKSB0aHJvdzsNCiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsNCiAgICB9DQp9DQoNCg0KDQoNCmNvbnRyYWN0IHRva2VuUmVjaXBpZW50IHsgZnVuY3Rpb24gcmVjZWl2ZUFwcHJvdmFsKGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX3ZhbHVlLCBhZGRyZXNzIF90b2tlbiwgYnl0ZXMgX2V4dHJhRGF0YSk7IH0NCg0KDQoNCg0KLyogRGVudGFjb2luIENvbnRyYWN0ICovDQpjb250cmFjdCB0b2tlbiBpcyBvd25lZCB7DQogICAgc3RyaW5nIHB1YmxpYyBuYW1lOw0KICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sOw0KICAgIHVpbnQ4IHB1YmxpYyBkZWNpbWFsczsNCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsNCiAgICB1aW50MjU2IHB1YmxpYyBidXlQcmljZUV0aDsNCiAgICB1aW50MjU2IHB1YmxpYyBzZWxsUHJpY2VFdGg7DQogICAgdWludDI1NiBwdWJsaWMgbWluQmFsYW5jZUZvckFjY291bnRzOw0KLy9QdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbg0KDQoNCi8qIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgYmFsYW5jZXMgKi8NCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOw0KDQoNCi8qIEdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8NCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsNCg0KDQovKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8NCiAgICBmdW5jdGlvbiB0b2tlbigpIHsNCiAgICAgICAgdG90YWxTdXBwbHkgPSA4MDAwMDAwMDAwMDAwOw0KICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gPSB0b3RhbFN1cHBseTsNCi8vIEdpdmUgdGhlIGNyZWF0b3IgYWxsIHRva2Vucw0KICAgICAgICBuYW1lID0gIkRlbnRhY29pbiI7DQovLyBTZXQgdGhlIG5hbWUgZm9yIGRpc3BsYXkgcHVycG9zZXMNCiAgICAgICAgc3ltYm9sID0gItmoIjsNCi8vIFNldCB0aGUgc3ltYm9sIGZvciBkaXNwbGF5IHB1cnBvc2VzDQogICAgICAgIGRlY2ltYWxzID0gMDsNCi8vIEFtb3VudCBvZiBkZWNpbWFscyBmb3IgZGlzcGxheSBwdXJwb3Nlcw0KICAgICAgICBidXlQcmljZUV0aCA9IDEgZmlubmV5Ow0KICAgICAgICBzZWxsUHJpY2VFdGggPSAxIGZpbm5leTsNCi8vIFNlbGwgYW5kIGJ1eSBwcmljZXMgZm9yIERlbnRhY29pbnMNCiAgICAgICAgbWluQmFsYW5jZUZvckFjY291bnRzID0gNSBmaW5uZXk7DQovLyBNaW5pbWFsIGV0aCBiYWxhbmNlIG9mIHNlbmRlciBhbmQgcmVjZWl2ZXINCiAgICB9DQoNCg0KDQoNCi8qIENvbnN0cnVjdG9yIHBhcmFtZXRlcnMgKi8NCiAgICBmdW5jdGlvbiBzZXRFdGhlclByaWNlcyh1aW50MjU2IG5ld0J1eVByaWNlRXRoLCB1aW50MjU2IG5ld1NlbGxQcmljZUV0aCkgb25seU93bmVyIHsNCiAgICAgICAgYnV5UHJpY2VFdGggPSBuZXdCdXlQcmljZUV0aDsNCiAgICAgICAgc2VsbFByaWNlRXRoID0gbmV3U2VsbFByaWNlRXRoOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldE1pbkJhbGFuY2UodWludCBtaW5pbXVtQmFsYW5jZUluV2VpKSBvbmx5T3duZXIgew0KICAgICBtaW5CYWxhbmNlRm9yQWNjb3VudHMgPSBtaW5pbXVtQmFsYW5jZUluV2VpOw0KICAgIH0NCg0KDQoNCg0KLyogU2VuZCBjb2lucyAqLw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgew0KICAgICAgICBpZiAoX3ZhbHVlIDwgMSkgdGhyb3c7DQovLyBQcmV2ZW50cyBkcmFpbiwgc3BhbSBhbmQgb3ZlcmZsb3dzDQogICAgICAgIGFkZHJlc3MgRGVudGFjb2luQWRkcmVzcyA9IHRoaXM7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyICYmIF90byA9PSBEZW50YWNvaW5BZGRyZXNzKSB7DQogICAgICAgICAgICBzZWxsRGVudGFjb2luc0FnYWluc3RFdGhlcihfdmFsdWUpOw0KLy8gU2VsbCBEZW50YWNvaW5zIGFnYWluc3QgZXRoIGJ5IHNlbmRpbmcgdG8gdGhlIHRva2VuIGNvbnRyYWN0DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsNCi8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaA0KICAgICAgICAgICAgaWYgKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlIDwgYmFsYW5jZU9mW190b10pIHRocm93Ow0KLy8gQ2hlY2sgZm9yIG92ZXJmbG93cw0KICAgICAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsNCi8vIFN1YnRyYWN0IGZyb20gdGhlIHNlbmRlcg0KICAgICAgICAgICAgaWYgKG1zZy5zZW5kZXIuYmFsYW5jZSA+PSBtaW5CYWxhbmNlRm9yQWNjb3VudHMgJiYgX3RvLmJhbGFuY2UgPj0gbWluQmFsYW5jZUZvckFjY291bnRzKSB7DQogICAgICAgICAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOw0KLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQNCiAgICAgICAgICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQovLyBOb3RpZnkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBiYWxhbmNlT2ZbdGhpc10gKz0gMTsNCiAgICAgICAgICAgICAgICBiYWxhbmNlT2ZbX3RvXSArPSAoX3ZhbHVlIC0gMSk7DQovLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgICAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCi8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlDQogICAgICAgICAgICAgICAgaWYobXNnLnNlbmRlci5iYWxhbmNlIDwgbWluQmFsYW5jZUZvckFjY291bnRzKSB7DQogICAgICAgICAgICAgICAgICAgIGlmKCFtc2cuc2VuZGVyLnNlbmQobWluQmFsYW5jZUZvckFjY291bnRzICogMykpIHRocm93Ow0KLy8gU2VuZCBtaW5CYWxhbmNlIHRvIFNlbmRlcg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZihfdG8uYmFsYW5jZSA8IG1pbkJhbGFuY2VGb3JBY2NvdW50cykgew0KICAgICAgICAgICAgICAgICAgICBpZighX3RvLnNlbmQobWluQmFsYW5jZUZvckFjY291bnRzKSkgdGhyb3c7DQovLyBTZW5kIG1pbkJhbGFuY2UgdG8gUmVjZWl2ZXINCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCg0KDQoNCi8qIFVzZXIgYnV5cyBEZW50YWNvaW5zIGFuZCBwYXlzIGluIEV0aGVyICovDQogICAgZnVuY3Rpb24gYnV5RGVudGFjb2luc0FnYWluc3RFdGhlcigpIHBheWFibGUgcmV0dXJucyAodWludCBhbW91bnQpIHsNCiAgICAgICAgaWYgKGJ1eVByaWNlRXRoID09IDApIHRocm93Ow0KLy8gQXZvaWQgYnV5aW5nIGlmIG5vdCBhbGxvd2VkDQogICAgICAgIGlmIChtc2cudmFsdWUgPCBidXlQcmljZUV0aCkgdGhyb3c7DQovLyBBdm9pZCBzZW5kaW5nIHNtYWxsIGFtb3VudHMgYW5kIHNwYW0NCiAgICAgICAgYW1vdW50ID0gbXNnLnZhbHVlIC8gYnV5UHJpY2VFdGg7DQovLyBDYWxjdWxhdGUgdGhlIGFtb3VudCBvZiBEZW50YWNvaW5zDQogICAgICAgIGlmIChiYWxhbmNlT2ZbdGhpc10gPCBhbW91bnQpIHRocm93Ow0KLy8gQ2hlY2sgaWYgaXQgaGFzIGVub3VnaCB0byBzZWxsDQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSArPSBhbW91bnQ7DQovLyBBZGQgdGhlIGFtb3VudCB0byBidXllcidzIGJhbGFuY2UNCiAgICAgICAgYmFsYW5jZU9mW3RoaXNdIC09IGFtb3VudDsNCi8vIFN1YnRyYWN0IGFtb3VudCBmcm9tIHNlbGxlcidzIGJhbGFuY2UNCiAgICAgICAgVHJhbnNmZXIodGhpcywgbXNnLnNlbmRlciwgYW1vdW50KTsNCi8vIEV4ZWN1dGUgYW4gZXZlbnQgcmVmbGVjdGluZyB0aGUgY2hhbmdlDQogICAgICAgIHJldHVybiBhbW91bnQ7DQogICAgfQ0KDQoNCi8qIFVzZXIgc2VsbHMgRGVudGFjb2lucyBhbmQgZ2V0cyBFdGhlciAqLw0KICAgIGZ1bmN0aW9uIHNlbGxEZW50YWNvaW5zQWdhaW5zdEV0aGVyKHVpbnQyNTYgYW1vdW50KSByZXR1cm5zICh1aW50IHJldmVudWUpIHsNCiAgICAgICAgaWYgKHNlbGxQcmljZUV0aCA9PSAwKSB0aHJvdzsNCi8vIEF2b2lkIHNlbGxpbmcNCiAgICAgICAgaWYgKGFtb3VudCA8IDEpIHRocm93Ow0KLy8gQXZvaWQgc3BhbQ0KICAgICAgICBpZiAoYmFsYW5jZU9mW21zZy5zZW5kZXJdIDwgYW1vdW50KSB0aHJvdzsNCi8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaCB0byBzZWxsDQogICAgICAgIHJldmVudWUgPSBhbW91bnQgKiBzZWxsUHJpY2VFdGg7DQovLyByZXZlbnVlID0gZXRoIHRoYXQgd2lsbCBiZSBzZW5kIHRvIHRoZSB1c2VyDQogICAgICAgIGlmICgodGhpcy5iYWxhbmNlIC0gcmV2ZW51ZSkgPCAoMTAwICogbWluQmFsYW5jZUZvckFjY291bnRzKSkgdGhyb3c7DQovLyBLZWVwIGNlcnRhaW4gYW1vdW50IG9mIGV0aCBpbiBjb250cmFjdCBmb3IgdHggZmVlcw0KICAgICAgICBiYWxhbmNlT2ZbdGhpc10gKz0gYW1vdW50Ow0KLy8gQWRkIHRoZSBhbW91bnQgdG8gb3duZXIncyBiYWxhbmNlDQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBhbW91bnQ7DQovLyBTdWJ0cmFjdCB0aGUgYW1vdW50IGZyb20gc2VsbGVyJ3MgYmFsYW5jZQ0KICAgICAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZChyZXZlbnVlKSkgew0KLy8gU2VuZCBldGhlciB0byB0aGUgc2VsbGVyLiBJdCdzIGltcG9ydGFudA0KICAgICAgICAgICAgdGhyb3c7DQovLyBUbyBkbyB0aGlzIGxhc3QgdG8gYXZvaWQgcmVjdXJzaW9uIGF0dGFja3MNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIHRoaXMsIGFtb3VudCk7DQovLyBFeGVjdXRlIGFuIGV2ZW50IHJlZmxlY3Rpbmcgb24gdGhlIGNoYW5nZQ0KICAgICAgICAgICAgcmV0dXJuIHJldmVudWU7DQovLyBFbmQgZnVuY3Rpb24gYW5kIHJldHVybnMNCiAgICAgICAgfQ0KICAgIH0NCg0KDQoNCg0KLyogQWxsb3cgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBpbiB5b3VyIGJlaGFsZiAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCg0KLyogQXBwcm92ZSBhbmQgdGhlbiBjb211bmljYXRlIHRoZSBhcHByb3ZlZCBjb250cmFjdCBpbiBhIHNpbmdsZSB0eCAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgdG9rZW5SZWNpcGllbnQgc3BlbmRlciA9IHRva2VuUmVjaXBpZW50KF9zcGVuZGVyKTsNCiAgICAgICAgaWYgKGFwcHJvdmUoX3NwZW5kZXIsIF92YWx1ZSkpIHsNCiAgICAgICAgICAgIHNwZW5kZXIucmVjZWl2ZUFwcHJvdmFsKG1zZy5zZW5kZXIsIF92YWx1ZSwgdGhpcywgX2V4dHJhRGF0YSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KDQovKiBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgKi8NCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgaWYgKGJhbGFuY2VPZltfZnJvbV0gPCBfdmFsdWUpIHRocm93Ow0KLy8gQ2hlY2sgaWYgdGhlIHNlbmRlciBoYXMgZW5vdWdoDQogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsNCi8vIENoZWNrIGZvciBvdmVyZmxvd3MNCiAgICAgICAgaWYgKF92YWx1ZSA+IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pIHRocm93Ow0KLy8gQ2hlY2sgYWxsb3dhbmNlDQogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOw0KLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyDQogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsNCi8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50DQogICAgICAgIGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOw0KICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCg0KDQoNCi8qIHJlZnVuZCBUbyBPd25lciAqLw0KICAgIGZ1bmN0aW9uIHJlZnVuZFRvT3duZXIgKHVpbnQyNTYgYW1vdW50T2ZFdGgsIHVpbnQyNTYgZGNuKSBvbmx5T3duZXIgew0KICAgICAgICB1aW50MjU2IGV0aCA9IGFtb3VudE9mRXRoICogMSBldGhlcjsNCiAgICAgICAgaWYgKCFtc2cuc2VuZGVyLnNlbmQoZXRoKSkgew0KLy8gU2VuZCBldGhlciB0byB0aGUgb3duZXIuIEl0J3MgaW1wb3J0YW50DQogICAgICAgICAgICB0aHJvdzsNCi8vIFRvIGRvIHRoaXMgbGFzdCB0byBhdm9pZCByZWN1cnNpb24gYXR0YWNrcw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgdGhpcywgYW1vdW50T2ZFdGgpOw0KLy8gRXhlY3V0ZSBhbiBldmVudCByZWZsZWN0aW5nIG9uIHRoZSBjaGFuZ2UNCiAgICAgICAgfQ0KICAgICAgICBpZiAoYmFsYW5jZU9mW3RoaXNdIDwgZGNuKSB0aHJvdzsNCi8vIENoZWNrIGlmIGl0IGhhcyBlbm91Z2ggdG8gc2VsbA0KICAgICAgICBiYWxhbmNlT2ZbbXNnLnNlbmRlcl0gKz0gZGNuOw0KLy8gQWRkIHRoZSBhbW91bnQgdG8gYnV5ZXIncyBiYWxhbmNlDQogICAgICAgIGJhbGFuY2VPZlt0aGlzXSAtPSBkY247DQovLyBTdWJ0cmFjdCBhbW91bnQgZnJvbSBzZWxsZXIncyBiYWxhbmNlDQogICAgICAgIFRyYW5zZmVyKHRoaXMsIG1zZy5zZW5kZXIsIGRjbik7DQovLyBFeGVjdXRlIGFuIGV2ZW50IHJlZmxlY3RpbmcgdGhlIGNoYW5nZQ0KICAgIH0NCg0KDQovKiBUaGlzIHVubmFtZWQgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW5ldmVyIHNvbWVvbmUgdHJpZXMgdG8gc2VuZCBldGhlciB0byBpdCBhbmQgc2VsbHMgRGVudGFjb2lucyAqLw0KICAgIGZ1bmN0aW9uKCkgcGF5YWJsZSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7DQogICAgICAgICAgICBidXlEZW50YWNvaW5zQWdhaW5zdEV0aGVyKCk7DQogICAgICAgIH0NCiAgICB9DQp9'