base 64 content
base64token40
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC43Ow0KDQpjb250cmFjdCB0b2tlblJlY2lwaWVudCB7IGZ1bmN0aW9uIHJlY2VpdmVBcHByb3ZhbChhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSwgYWRkcmVzcyBfdG9rZW4sIGJ5dGVzIF9leHRyYURhdGEpOyB9DQoNCmNvbnRyYWN0IFRva2VuIHsNCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50MjU2IF92YWx1ZSk7DQogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOw0KICBldmVudCBUb3RhbFN1cHBseVNldCh1aW50MjU2IF9hbW91bnQpOw0KICBldmVudCBCbG9ja0xvY2tTZXQodWludDI1NiBfdmFsdWUpOw0KICBldmVudCBOZXdPd25lcihhZGRyZXNzIF9uZXdPd25lcik7DQogIGV2ZW50IE5ld1N1cHBseUFkanVzdGVyKGFkZHJlc3MgX25ld1N1cHBseUFkanVzdGVyKTsNCg0KICBtb2RpZmllciBvbmx5T3duZXIgew0KICAgIGlmIChtc2cuc2VuZGVyID09IG93bmVyKSB7DQogICAgICBfOw0KICAgIH0NCiAgfQ0KDQogIG1vZGlmaWVyIGNhbkFkanVzdFN1cHBseSB7DQogICAgaWYgKG1zZy5zZW5kZXIgPT0gc3VwcGx5QWRqdXN0ZXIgfHwgbXNnLnNlbmRlciA9PSBvd25lcikgew0KICAgICAgXzsNCiAgICB9DQogIH0NCg0KICBtb2RpZmllciBibG9ja0xvY2soYWRkcmVzcyBfc2VuZGVyKSB7DQogICAgaWYgKCFpc0xvY2tlZCgpIHx8IF9zZW5kZXIgPT0gb3duZXIpIHsNCiAgICAgIF87DQogICAgfQ0KICB9DQoNCiAgbW9kaWZpZXIgdmFsaWRUcmFuc2ZlcihhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSB7DQogICAgaWYgKGlzVHJhbnNmZXJWYWxpZChfZnJvbSwgX3RvLCBfYW1vdW50KSkgew0KICAgICAgXzsNCiAgICB9DQogIH0NCg0KICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseTsNCiAgc3RyaW5nIHB1YmxpYyBuYW1lOw0KICB1aW50OCBwdWJsaWMgZGVjaW1hbHM7DQogIHN0cmluZyBwdWJsaWMgc3ltYm9sOw0KICBzdHJpbmcgcHVibGljIHZlcnNpb24gPSAnMC4wLjEnOw0KICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCiAgYWRkcmVzcyBwdWJsaWMgc3VwcGx5QWRqdXN0ZXI7DQogIHVpbnQyNTYgcHVibGljIGxvY2tlZFVudGlsQmxvY2s7DQoNCiAgZnVuY3Rpb24gVG9rZW4oDQogICAgc3RyaW5nIF90b2tlbk5hbWUsDQogICAgdWludDggX2RlY2ltYWxVbml0cywNCiAgICBzdHJpbmcgX3Rva2VuU3ltYm9sLA0KICAgIHVpbnQyNTYgX2xvY2tlZFVudGlsQmxvY2sNCiAgICApIHsNCg0KICAgIG5hbWUgPSBfdG9rZW5OYW1lOw0KICAgIGRlY2ltYWxzID0gX2RlY2ltYWxVbml0czsNCiAgICBzeW1ib2wgPSBfdG9rZW5TeW1ib2w7DQogICAgbG9ja2VkVW50aWxCbG9jayA9IF9sb2NrZWRVbnRpbEJsb2NrOw0KICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFwcHJvdmVBbmRDYWxsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlLCBieXRlcyBfZXh0cmFEYXRhKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICB0b2tlblJlY2lwaWVudCBzcGVuZGVyID0gdG9rZW5SZWNpcGllbnQoX3NwZW5kZXIpOw0KICAgIGlmIChhcHByb3ZlKF9zcGVuZGVyLCBfdmFsdWUpKSB7DQogICAgICBzcGVuZGVyLnJlY2VpdmVBcHByb3ZhbChtc2cuc2VuZGVyLCBfdmFsdWUsIHRoaXMsIF9leHRyYURhdGEpOw0KICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQ0KICAgICAgYmxvY2tMb2NrKG1zZy5zZW5kZXIpDQogICAgICB2YWxpZFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKQ0KICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQoNCiAgICAvLyB0cmFuc2ZlciB0b2tlbnMNCiAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgYmFsYW5jZXNbX3RvXSArPSBfdmFsdWU7DQoNCiAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQ0KICAgICAgYmxvY2tMb2NrKF9mcm9tKQ0KICAgICAgdmFsaWRUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpDQogICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgIC8vIGNoZWNrIHN1ZmZpY2llbnQgYWxsb3dhbmNlDQogICAgaWYgKF92YWx1ZSA+IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKSB7DQogICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLy8gdHJhbnNmZXIgdG9rZW5zDQogICAgYmFsYW5jZXNbX2Zyb21dIC09IF92YWx1ZTsNCiAgICBiYWxhbmNlc1tfdG9dICs9IF92YWx1ZTsNCiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQoNCiAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsNCiAgICByZXR1cm4gYmFsYW5jZXNbX293bmVyXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgew0KICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICB9DQoNCiAgZnVuY3Rpb24gaXNUcmFuc2ZlclZhbGlkKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wgaXNWYWxpZCkgew0KICAgIHJldHVybiAgYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQgJiYgICAgICAgICAgICAgICAgICAgLy8gc3VmZmljaWVudCBiYWxhbmNlDQogICAgICAgICAgICBpc092ZXJmbG93KGJhbGFuY2VzW190b10sIF9hbW91bnQpID09IGZhbHNlICYmICAvLyBkb2VzIG5vdCBvdmVyZmxvdyByZWNpcGllbnQgYmFsYW5jZQ0KICAgICAgICAgICAgX2Ftb3VudCA+IDAgJiYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW1vdW50IGlzIHBvc2l0aXZlDQogICAgICAgICAgICBfdG8gIT0gYWRkcmVzcyh0aGlzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmV2ZW50IHNlbmRpbmcgdG9rZW5zIHRvIGNvbnRyYWN0DQogICAgOw0KICB9DQoNCiAgZnVuY3Rpb24gaXNPdmVyZmxvdyh1aW50MjU2IF92YWx1ZSwgdWludDI1NiBfaW5jcmVhc2UpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKGJvb2wgaXNPdmVyZmxvdykgew0KICAgIHJldHVybiBfdmFsdWUgKyBfaW5jcmVhc2UgPCBfdmFsdWU7DQogIH0NCg0KICBmdW5jdGlvbiBzZXRCbG9ja0xvY2sodWludDI1NiBfbG9ja2VkVW50aWxCbG9jaykgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIGxvY2tlZFVudGlsQmxvY2sgPSBfbG9ja2VkVW50aWxCbG9jazsNCiAgICBCbG9ja0xvY2tTZXQoX2xvY2tlZFVudGlsQmxvY2spOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gaXNMb2NrZWQoKSBjb25zdGFudCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICByZXR1cm4gbG9ja2VkVW50aWxCbG9jayA+IGJsb2NrLm51bWJlcjsNCiAgfQ0KDQogIGZ1bmN0aW9uIHJlcGxhY2VPd25lcihhZGRyZXNzIF9uZXdPd25lcikgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIG93bmVyID0gX25ld093bmVyOw0KICAgIE5ld093bmVyKF9uZXdPd25lcik7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICBmdW5jdGlvbiBzZXRTdXBwbHlBZGp1c3RlcihhZGRyZXNzIF9uZXdTdXBwbHlBZGp1c3Rlcikgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIHN1cHBseUFkanVzdGVyID0gX25ld1N1cHBseUFkanVzdGVyOw0KICAgIE5ld1N1cHBseUFkanVzdGVyKF9uZXdTdXBwbHlBZGp1c3Rlcik7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICBmdW5jdGlvbiBzZXRUb3RhbFN1cHBseSh1aW50MjU2IF9hbW91bnQpIGNhbkFkanVzdFN1cHBseSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICB0b3RhbFN1cHBseSA9IF9hbW91bnQ7DQogICAgVG90YWxTdXBwbHlTZXQodG90YWxTdXBwbHkpOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gc2V0QmFsYW5jZShhZGRyZXNzIF9hZGRyLCB1aW50MjU2IF9uZXdCYWxhbmNlKSBjYW5BZGp1c3RTdXBwbHkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgdWludDI1NiBvbGRCYWxhbmNlID0gYmFsYW5jZXNbX2FkZHJdOw0KDQogICAgYmFsYW5jZXNbX2FkZHJdID0gX25ld0JhbGFuY2U7DQoNCiAgICBpZiAob2xkQmFsYW5jZSA+IF9uZXdCYWxhbmNlKSB7DQogICAgICBUcmFuc2ZlcihfYWRkciwgdGhpcywgb2xkQmFsYW5jZSAtIF9uZXdCYWxhbmNlKTsNCiAgICB9IGVsc2UgaWYgKF9uZXdCYWxhbmNlID4gb2xkQmFsYW5jZSkgew0KICAgICAgVHJhbnNmZXIodGhpcywgX2FkZHIsIF9uZXdCYWxhbmNlIC0gb2xkQmFsYW5jZSk7DQogICAgfQ0KDQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOw0KICBtYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7DQp9'