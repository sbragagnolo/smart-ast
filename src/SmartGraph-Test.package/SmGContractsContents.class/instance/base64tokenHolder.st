base 64 content
base64tokenHolder
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoNCiAgICBPdmVyZmxvdyBwcm90ZWN0ZWQgbWF0aCBmdW5jdGlvbnMNCiovDQpjb250cmFjdCBTYWZlTWF0aCB7DQogICAgLyoqDQogICAgICAgIGNvbnN0cnVjdG9yDQogICAgKi8NCiAgICBmdW5jdGlvbiBTYWZlTWF0aCgpIHsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiByZXR1cm5zIHRoZSBzdW0gb2YgX3ggYW5kIF95LCBhc3NlcnRzIGlmIHRoZSBjYWxjdWxhdGlvbiBvdmVyZmxvd3MNCg0KICAgICAgICBAcGFyYW0gX3ggICB2YWx1ZSAxDQogICAgICAgIEBwYXJhbSBfeSAgIHZhbHVlIDINCg0KICAgICAgICBAcmV0dXJuIHN1bQ0KICAgICovDQogICAgZnVuY3Rpb24gc2FmZUFkZCh1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgICAgIHVpbnQyNTYgeiA9IF94ICsgX3k7DQogICAgICAgIGFzc2VydCh6ID49IF94KTsNCiAgICAgICAgcmV0dXJuIHo7DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgcmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiBfeCBtaW51cyBfeSwgYXNzZXJ0cyBpZiB0aGUgc3VidHJhY3Rpb24gcmVzdWx0cyBpbiBhIG5lZ2F0aXZlIG51bWJlcg0KDQogICAgICAgIEBwYXJhbSBfeCAgIG1pbnVlbmQNCiAgICAgICAgQHBhcmFtIF95ICAgc3VidHJhaGVuZA0KDQogICAgICAgIEByZXR1cm4gZGlmZmVyZW5jZQ0KICAgICovDQogICAgZnVuY3Rpb24gc2FmZVN1Yih1aW50MjU2IF94LCB1aW50MjU2IF95KSBpbnRlcm5hbCByZXR1cm5zICh1aW50MjU2KSB7DQogICAgICAgIGFzc2VydChfeCA+PSBfeSk7DQogICAgICAgIHJldHVybiBfeCAtIF95Ow0KICAgIH0NCg0KICAgIC8qKg0KICAgICAgICBAZGV2IHJldHVybnMgdGhlIHByb2R1Y3Qgb2YgbXVsdGlwbHlpbmcgX3ggYnkgX3ksIGFzc2VydHMgaWYgdGhlIGNhbGN1bGF0aW9uIG92ZXJmbG93cw0KDQogICAgICAgIEBwYXJhbSBfeCAgIGZhY3RvciAxDQogICAgICAgIEBwYXJhbSBfeSAgIGZhY3RvciAyDQoNCiAgICAgICAgQHJldHVybiBwcm9kdWN0DQogICAgKi8NCiAgICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQyNTYgX3gsIHVpbnQyNTYgX3kpIGludGVybmFsIHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICAgICAgdWludDI1NiB6ID0gX3ggKiBfeTsNCiAgICAgICAgYXNzZXJ0KF94ID09IDAgfHwgeiAvIF94ID09IF95KTsNCiAgICAgICAgcmV0dXJuIHo7DQogICAgfQ0KfSANCg0KLyoNCiAgICBPd25lZCBjb250cmFjdCBpbnRlcmZhY2UNCiovDQpjb250cmFjdCBJT3duZWQgew0KICAgIC8vIHRoaXMgZnVuY3Rpb24gaXNuJ3QgYWJzdHJhY3Qgc2luY2UgdGhlIGNvbXBpbGVyIGVtaXRzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGdldHRlciBmdW5jdGlvbnMgYXMgZXh0ZXJuYWwNCiAgICBmdW5jdGlvbiBvd25lcigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIG93bmVyKSB7IG93bmVyOyB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIF9uZXdPd25lcikgcHVibGljOw0KICAgIGZ1bmN0aW9uIGFjY2VwdE93bmVyc2hpcCgpIHB1YmxpYzsNCn0NCg0KLyoNCiAgICBQcm92aWRlcyBzdXBwb3J0IGFuZCB1dGlsaXRpZXMgZm9yIGNvbnRyYWN0IG93bmVyc2hpcA0KKi8NCmNvbnRyYWN0IE93bmVkIGlzIElPd25lZCB7DQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQogICAgYWRkcmVzcyBwdWJsaWMgbmV3T3duZXI7DQoNCiAgICBldmVudCBPd25lclVwZGF0ZShhZGRyZXNzIF9wcmV2T3duZXIsIGFkZHJlc3MgX25ld093bmVyKTsNCg0KICAgIC8qKg0KICAgICAgICBAZGV2IGNvbnN0cnVjdG9yDQogICAgKi8NCiAgICBmdW5jdGlvbiBPd25lZCgpIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgIH0NCg0KICAgIC8vIGFsbG93cyBleGVjdXRpb24gYnkgdGhlIG93bmVyIG9ubHkNCiAgICBtb2RpZmllciBvd25lck9ubHkgew0KICAgICAgICBhc3NlcnQobXNnLnNlbmRlciA9PSBvd25lcik7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgYWxsb3dzIHRyYW5zZmVycmluZyB0aGUgY29udHJhY3Qgb3duZXJzaGlwDQogICAgICAgIHRoZSBuZXcgb3duZXIgc3RpbGwgbmVlZCB0byBhY2NlcHQgdGhlIHRyYW5zZmVyDQogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY29udHJhY3Qgb3duZXINCg0KICAgICAgICBAcGFyYW0gX25ld093bmVyICAgIG5ldyBjb250cmFjdCBvd25lcg0KICAgICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIHB1YmxpYyBvd25lck9ubHkgew0KICAgICAgICByZXF1aXJlKF9uZXdPd25lciAhPSBvd25lcik7DQogICAgICAgIG5ld093bmVyID0gX25ld093bmVyOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAgICBAZGV2IHVzZWQgYnkgYSBuZXcgb3duZXIgdG8gYWNjZXB0IGFuIG93bmVyc2hpcCB0cmFuc2Zlcg0KICAgICovDQogICAgZnVuY3Rpb24gYWNjZXB0T3duZXJzaGlwKCkgcHVibGljIHsNCiAgICAgICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG5ld093bmVyKTsNCiAgICAgICAgT3duZXJVcGRhdGUob3duZXIsIG5ld093bmVyKTsNCiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsNCiAgICAgICAgbmV3T3duZXIgPSAweDA7DQogICAgfQ0KfQ0KDQovKg0KICAgIFRva2VuIEhvbGRlciBpbnRlcmZhY2UNCiovDQpjb250cmFjdCBJVG9rZW5Ib2xkZXIgaXMgSU93bmVkIHsNCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VucyhJRVJDMjBUb2tlbiBfdG9rZW4sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpIHB1YmxpYzsNCn0NCg0KLyoNCiAgICBXZSBjb25zaWRlciBldmVyeSBjb250cmFjdCB0byBiZSBhICd0b2tlbiBob2xkZXInIHNpbmNlIGl0J3MgY3VycmVudGx5IG5vdCBwb3NzaWJsZQ0KICAgIGZvciBhIGNvbnRyYWN0IHRvIGRlbnkgcmVjZWl2aW5nIHRva2Vucy4NCg0KICAgIFRoZSBUb2tlbkhvbGRlcidzIGNvbnRyYWN0IHNvbGUgcHVycG9zZSBpcyB0byBwcm92aWRlIGEgc2FmZXR5IG1lY2hhbmlzbSB0aGF0IGFsbG93cw0KICAgIHRoZSBvd25lciB0byBzZW5kIHRva2VucyB0aGF0IHdlcmUgc2VudCB0byB0aGUgY29udHJhY3QgYnkgbWlzdGFrZSBiYWNrIHRvIHRoZWlyIHNlbmRlci4NCiovDQpjb250cmFjdCBUb2tlbkhvbGRlciBpcyBJVG9rZW5Ib2xkZXIsIE93bmVkIHsNCiAgICAvKioNCiAgICAgICAgQGRldiBjb25zdHJ1Y3Rvcg0KICAgICovDQogICAgZnVuY3Rpb24gVG9rZW5Ib2xkZXIoKSB7DQogICAgfQ0KDQogICAgLy8gdmFsaWRhdGVzIGFuIGFkZHJlc3MgLSBjdXJyZW50bHkgb25seSBjaGVja3MgdGhhdCBpdCBpc24ndCBudWxsDQogICAgbW9kaWZpZXIgdmFsaWRBZGRyZXNzKGFkZHJlc3MgX2FkZHJlc3MpIHsNCiAgICAgICAgcmVxdWlyZShfYWRkcmVzcyAhPSAweDApOw0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIC8vIHZlcmlmaWVzIHRoYXQgdGhlIGFkZHJlc3MgaXMgZGlmZmVyZW50IHRoYW4gdGhpcyBjb250cmFjdCBhZGRyZXNzDQogICAgbW9kaWZpZXIgbm90VGhpcyhhZGRyZXNzIF9hZGRyZXNzKSB7DQogICAgICAgIHJlcXVpcmUoX2FkZHJlc3MgIT0gYWRkcmVzcyh0aGlzKSk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgd2l0aGRyYXdzIHRva2VucyBoZWxkIGJ5IHRoZSBjb250cmFjdCBhbmQgc2VuZHMgdGhlbSB0byBhbiBhY2NvdW50DQogICAgICAgIGNhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgb3duZXINCg0KICAgICAgICBAcGFyYW0gX3Rva2VuICAgRVJDMjAgdG9rZW4gY29udHJhY3QgYWRkcmVzcw0KICAgICAgICBAcGFyYW0gX3RvICAgICAgYWNjb3VudCB0byByZWNlaXZlIHRoZSBuZXcgYW1vdW50DQogICAgICAgIEBwYXJhbSBfYW1vdW50ICBhbW91bnQgdG8gd2l0aGRyYXcNCiAgICAqLw0KICAgIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW5zKElFUkMyMFRva2VuIF90b2tlbiwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkNCiAgICAgICAgcHVibGljDQogICAgICAgIG93bmVyT25seQ0KICAgICAgICB2YWxpZEFkZHJlc3MoX3Rva2VuKQ0KICAgICAgICB2YWxpZEFkZHJlc3MoX3RvKQ0KICAgICAgICBub3RUaGlzKF90bykNCiAgICB7DQogICAgICAgIGFzc2VydChfdG9rZW4udHJhbnNmZXIoX3RvLCBfYW1vdW50KSk7DQogICAgfQ0KfQ0KDQovKg0KICAgIEVSQzIwIFN0YW5kYXJkIFRva2VuIGludGVyZmFjZQ0KKi8NCmNvbnRyYWN0IElFUkMyMFRva2VuIHsNCiAgICAvLyB0aGVzZSBmdW5jdGlvbnMgYXJlbid0IGFic3RyYWN0IHNpbmNlIHRoZSBjb21waWxlciBlbWl0cyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBnZXR0ZXIgZnVuY3Rpb25zIGFzIGV4dGVybmFsDQogICAgZnVuY3Rpb24gbmFtZSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChzdHJpbmcgbmFtZSkgeyBuYW1lOyB9DQogICAgZnVuY3Rpb24gc3ltYm9sKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHN0cmluZyBzeW1ib2wpIHsgc3ltYm9sOyB9DQogICAgZnVuY3Rpb24gZGVjaW1hbHMoKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDggZGVjaW1hbHMpIHsgZGVjaW1hbHM7IH0NCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KSB7IHRvdGFsU3VwcGx5OyB9DQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBwdWJsaWMgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7IF9vd25lcjsgYmFsYW5jZTsgfQ0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSB7IF9vd25lcjsgX3NwZW5kZXI7IHJlbWFpbmluZzsgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCn0NCg0KLyoqDQogICAgRVJDMjAgU3RhbmRhcmQgVG9rZW4gaW1wbGVtZW50YXRpb24NCiovDQpjb250cmFjdCBFUkMyMFRva2VuIGlzIElFUkMyMFRva2VuLCBTYWZlTWF0aCB7DQogICAgc3RyaW5nIHB1YmxpYyBzdGFuZGFyZCA9ICdUb2tlbiAwLjEnOw0KICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICcnOw0KICAgIHN0cmluZyBwdWJsaWMgc3ltYm9sID0gJyc7DQogICAgdWludDggcHVibGljIGRlY2ltYWxzID0gMDsNCiAgICB1aW50MjU2IHB1YmxpYyB0b3RhbFN1cHBseSA9IDA7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsNCg0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOw0KDQogICAgLyoqDQogICAgICAgIEBkZXYgY29uc3RydWN0b3INCg0KICAgICAgICBAcGFyYW0gX25hbWUgICAgICAgIHRva2VuIG5hbWUNCiAgICAgICAgQHBhcmFtIF9zeW1ib2wgICAgICB0b2tlbiBzeW1ib2wNCiAgICAgICAgQHBhcmFtIF9kZWNpbWFscyAgICBkZWNpbWFsIHBvaW50cywgZm9yIGRpc3BsYXkgcHVycG9zZXMNCiAgICAqLw0KICAgIGZ1bmN0aW9uIEVSQzIwVG9rZW4oc3RyaW5nIF9uYW1lLCBzdHJpbmcgX3N5bWJvbCwgdWludDggX2RlY2ltYWxzKSB7DQogICAgICAgIHJlcXVpcmUoYnl0ZXMoX25hbWUpLmxlbmd0aCA+IDAgJiYgYnl0ZXMoX3N5bWJvbCkubGVuZ3RoID4gMCk7IC8vIHZhbGlkYXRlIGlucHV0DQoNCiAgICAgICAgbmFtZSA9IF9uYW1lOw0KICAgICAgICBzeW1ib2wgPSBfc3ltYm9sOw0KICAgICAgICBkZWNpbWFscyA9IF9kZWNpbWFsczsNCiAgICB9DQoNCiAgICAvLyB2YWxpZGF0ZXMgYW4gYWRkcmVzcyAtIGN1cnJlbnRseSBvbmx5IGNoZWNrcyB0aGF0IGl0IGlzbid0IG51bGwNCiAgICBtb2RpZmllciB2YWxpZEFkZHJlc3MoYWRkcmVzcyBfYWRkcmVzcykgew0KICAgICAgICByZXF1aXJlKF9hZGRyZXNzICE9IDB4MCk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgc2VuZCBjb2lucw0KICAgICAgICB0aHJvd3Mgb24gYW55IGVycm9yIHJhdGhlciB0aGVuIHJldHVybiBhIGZhbHNlIGZsYWcgdG8gbWluaW1pemUgdXNlciBlcnJvcnMNCg0KICAgICAgICBAcGFyYW0gX3RvICAgICAgdGFyZ2V0IGFkZHJlc3MNCiAgICAgICAgQHBhcmFtIF92YWx1ZSAgIHRyYW5zZmVyIGFtb3VudA0KDQogICAgICAgIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwsIGZhbHNlIGlmIGl0IHdhc24ndA0KICAgICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQ0KICAgICAgICBwdWJsaWMNCiAgICAgICAgdmFsaWRBZGRyZXNzKF90bykNCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQ0KICAgIHsNCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlT2ZbbXNnLnNlbmRlcl0sIF92YWx1ZSk7DQogICAgICAgIGJhbGFuY2VPZltfdG9dID0gc2FmZUFkZChiYWxhbmNlT2ZbX3RvXSwgX3ZhbHVlKTsNCiAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBhbiBhY2NvdW50L2NvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMNCiAgICAgICAgdGhyb3dzIG9uIGFueSBlcnJvciByYXRoZXIgdGhlbiByZXR1cm4gYSBmYWxzZSBmbGFnIHRvIG1pbmltaXplIHVzZXIgZXJyb3JzDQoNCiAgICAgICAgQHBhcmFtIF9mcm9tICAgIHNvdXJjZSBhZGRyZXNzDQogICAgICAgIEBwYXJhbSBfdG8gICAgICB0YXJnZXQgYWRkcmVzcw0KICAgICAgICBAcGFyYW0gX3ZhbHVlICAgdHJhbnNmZXIgYW1vdW50DQoNCiAgICAgICAgQHJldHVybiB0cnVlIGlmIHRoZSB0cmFuc2ZlciB3YXMgc3VjY2Vzc2Z1bCwgZmFsc2UgaWYgaXQgd2Fzbid0DQogICAgKi8NCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKQ0KICAgICAgICBwdWJsaWMNCiAgICAgICAgdmFsaWRBZGRyZXNzKF9mcm9tKQ0KICAgICAgICB2YWxpZEFkZHJlc3MoX3RvKQ0KICAgICAgICByZXR1cm5zIChib29sIHN1Y2Nlc3MpDQogICAgew0KICAgICAgICBhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdID0gc2FmZVN1YihhbGxvd2FuY2VbX2Zyb21dW21zZy5zZW5kZXJdLCBfdmFsdWUpOw0KICAgICAgICBiYWxhbmNlT2ZbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlT2ZbX2Zyb21dLCBfdmFsdWUpOw0KICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZU9mW190b10sIF92YWx1ZSk7DQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAgICBAZGV2IGFsbG93IGFub3RoZXIgYWNjb3VudC9jb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBvbiB5b3VyIGJlaGFsZg0KICAgICAgICB0aHJvd3Mgb24gYW55IGVycm9yIHJhdGhlciB0aGVuIHJldHVybiBhIGZhbHNlIGZsYWcgdG8gbWluaW1pemUgdXNlciBlcnJvcnMNCg0KICAgICAgICBhbHNvLCB0byBtaW5pbWl6ZSB0aGUgcmlzayBvZiB0aGUgYXBwcm92ZS90cmFuc2ZlckZyb20gYXR0YWNrIHZlY3Rvcg0KICAgICAgICAoc2VlIGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVlMUHRReFp1MVVBdk85Y1oxTzJSUFhCYlQwbW9vaDREWUtqQV9qcC1STE0vKSwgYXBwcm92ZSBoYXMgdG8gYmUgY2FsbGVkIHR3aWNlDQogICAgICAgIGluIDIgc2VwYXJhdGUgdHJhbnNhY3Rpb25zIC0gb25jZSB0byBjaGFuZ2UgdGhlIGFsbG93YW5jZSB0byAwIGFuZCBzZWNvbmRseSB0byBjaGFuZ2UgaXQgdG8gdGhlIG5ldyBhbGxvd2FuY2UgdmFsdWUNCg0KICAgICAgICBAcGFyYW0gX3NwZW5kZXIgYXBwcm92ZWQgYWRkcmVzcw0KICAgICAgICBAcGFyYW0gX3ZhbHVlICAgYWxsb3dhbmNlIGFtb3VudA0KDQogICAgICAgIEByZXR1cm4gdHJ1ZSBpZiB0aGUgYXBwcm92YWwgd2FzIHN1Y2Nlc3NmdWwsIGZhbHNlIGlmIGl0IHdhc24ndA0KICAgICovDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkNCiAgICAgICAgcHVibGljDQogICAgICAgIHZhbGlkQWRkcmVzcyhfc3BlbmRlcikNCiAgICAgICAgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQ0KICAgIHsNCiAgICAgICAgLy8gaWYgdGhlIGFsbG93YW5jZSBpc24ndCAwLCBpdCBjYW4gb25seSBiZSB1cGRhdGVkIHRvIDAgdG8gcHJldmVudCBhbiBhbGxvd2FuY2UgY2hhbmdlIGltbWVkaWF0ZWx5IGFmdGVyIHdpdGhkcmF3YWwNCiAgICAgICAgcmVxdWlyZShfdmFsdWUgPT0gMCB8fCBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID09IDApOw0KDQogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQp9DQoNCi8qDQogICAgU21hcnQgVG9rZW4gaW50ZXJmYWNlDQoqLw0KY29udHJhY3QgSVNtYXJ0VG9rZW4gaXMgSVRva2VuSG9sZGVyLCBJRVJDMjBUb2tlbiB7DQogICAgZnVuY3Rpb24gZGlzYWJsZVRyYW5zZmVycyhib29sIF9kaXNhYmxlKSBwdWJsaWM7DQogICAgZnVuY3Rpb24gaXNzdWUoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcHVibGljOw0KICAgIGZ1bmN0aW9uIGRlc3Ryb3koYWRkcmVzcyBfZnJvbSwgdWludDI1NiBfYW1vdW50KSBwdWJsaWM7DQp9DQoNCi8qDQogICAgU21hcnQgVG9rZW4gdjAuMg0KDQogICAgJ093bmVkJyBpcyBzcGVjaWZpZWQgaGVyZSBmb3IgcmVhZGFiaWxpdHkgcmVhc29ucw0KKi8NCmNvbnRyYWN0IFNtYXJ0VG9rZW4gaXMgSVNtYXJ0VG9rZW4sIEVSQzIwVG9rZW4sIE93bmVkLCBUb2tlbkhvbGRlciB7DQogICAgc3RyaW5nIHB1YmxpYyB2ZXJzaW9uID0gJzAuMic7DQoNCiAgICBib29sIHB1YmxpYyB0cmFuc2ZlcnNFbmFibGVkID0gdHJ1ZTsgICAgLy8gdHJ1ZSBpZiB0cmFuc2Zlci90cmFuc2ZlckZyb20gYXJlIGVuYWJsZWQsIGZhbHNlIGlmIG5vdA0KDQogICAgLy8gdHJpZ2dlcmVkIHdoZW4gYSBzbWFydCB0b2tlbiBpcyBkZXBsb3llZCAtIHRoZSBfdG9rZW4gYWRkcmVzcyBpcyBkZWZpbmVkIGZvciBmb3J3YXJkIGNvbXBhdGliaWxpdHksIGluIGNhc2Ugd2Ugd2FudCB0byB0cmlnZ2VyIHRoZSBldmVudCBmcm9tIGEgZmFjdG9yeQ0KICAgIGV2ZW50IE5ld1NtYXJ0VG9rZW4oYWRkcmVzcyBfdG9rZW4pOw0KICAgIC8vIHRyaWdnZXJlZCB3aGVuIHRoZSB0b3RhbCBzdXBwbHkgaXMgaW5jcmVhc2VkDQogICAgZXZlbnQgSXNzdWFuY2UodWludDI1NiBfYW1vdW50KTsNCiAgICAvLyB0cmlnZ2VyZWQgd2hlbiB0aGUgdG90YWwgc3VwcGx5IGlzIGRlY3JlYXNlZA0KICAgIGV2ZW50IERlc3RydWN0aW9uKHVpbnQyNTYgX2Ftb3VudCk7DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBjb25zdHJ1Y3Rvcg0KDQogICAgICAgIEBwYXJhbSBfbmFtZSAgICAgICB0b2tlbiBuYW1lDQogICAgICAgIEBwYXJhbSBfc3ltYm9sICAgICB0b2tlbiBzaG9ydCBzeW1ib2wsIDEtNiBjaGFyYWN0ZXJzDQogICAgICAgIEBwYXJhbSBfZGVjaW1hbHMgICBmb3IgZGlzcGxheSBwdXJwb3NlcyBvbmx5DQogICAgKi8NCiAgICBmdW5jdGlvbiBTbWFydFRva2VuKHN0cmluZyBfbmFtZSwgc3RyaW5nIF9zeW1ib2wsIHVpbnQ4IF9kZWNpbWFscykNCiAgICAgICAgRVJDMjBUb2tlbihfbmFtZSwgX3N5bWJvbCwgX2RlY2ltYWxzKQ0KICAgIHsNCiAgICAgICAgcmVxdWlyZShieXRlcyhfc3ltYm9sKS5sZW5ndGggPD0gNik7IC8vIHZhbGlkYXRlIGlucHV0DQogICAgICAgIE5ld1NtYXJ0VG9rZW4oYWRkcmVzcyh0aGlzKSk7DQogICAgfQ0KDQogICAgLy8gYWxsb3dzIGV4ZWN1dGlvbiBvbmx5IHdoZW4gdHJhbnNmZXJzIGFyZW4ndCBkaXNhYmxlZA0KICAgIG1vZGlmaWVyIHRyYW5zZmVyc0FsbG93ZWQgew0KICAgICAgICBhc3NlcnQodHJhbnNmZXJzRW5hYmxlZCk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgLyoqDQogICAgICAgIEBkZXYgZGlzYWJsZXMvZW5hYmxlcyB0cmFuc2ZlcnMNCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBvd25lcg0KDQogICAgICAgIEBwYXJhbSBfZGlzYWJsZSAgICB0cnVlIHRvIGRpc2FibGUgdHJhbnNmZXJzLCBmYWxzZSB0byBlbmFibGUgdGhlbQ0KICAgICovDQogICAgZnVuY3Rpb24gZGlzYWJsZVRyYW5zZmVycyhib29sIF9kaXNhYmxlKSBwdWJsaWMgb3duZXJPbmx5IHsNCiAgICAgICAgdHJhbnNmZXJzRW5hYmxlZCA9ICFfZGlzYWJsZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBpbmNyZWFzZXMgdGhlIHRva2VuIHN1cHBseSBhbmQgc2VuZHMgdGhlIG5ldyB0b2tlbnMgdG8gYW4gYWNjb3VudA0KICAgICAgICBjYW4gb25seSBiZSBjYWxsZWQgYnkgdGhlIGNvbnRyYWN0IG93bmVyDQoNCiAgICAgICAgQHBhcmFtIF90byAgICAgICAgIGFjY291bnQgdG8gcmVjZWl2ZSB0aGUgbmV3IGFtb3VudA0KICAgICAgICBAcGFyYW0gX2Ftb3VudCAgICAgYW1vdW50IHRvIGluY3JlYXNlIHRoZSBzdXBwbHkgYnkNCiAgICAqLw0KICAgIGZ1bmN0aW9uIGlzc3VlKGFkZHJlc3MgX3RvLCB1aW50MjU2IF9hbW91bnQpDQogICAgICAgIHB1YmxpYw0KICAgICAgICBvd25lck9ubHkNCiAgICAgICAgdmFsaWRBZGRyZXNzKF90bykNCiAgICAgICAgbm90VGhpcyhfdG8pDQogICAgew0KICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVBZGQodG90YWxTdXBwbHksIF9hbW91bnQpOw0KICAgICAgICBiYWxhbmNlT2ZbX3RvXSA9IHNhZmVBZGQoYmFsYW5jZU9mW190b10sIF9hbW91bnQpOw0KDQogICAgICAgIElzc3VhbmNlKF9hbW91bnQpOw0KICAgICAgICBUcmFuc2Zlcih0aGlzLCBfdG8sIF9hbW91bnQpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAgICBAZGV2IHJlbW92ZXMgdG9rZW5zIGZyb20gYW4gYWNjb3VudCBhbmQgZGVjcmVhc2VzIHRoZSB0b2tlbiBzdXBwbHkNCiAgICAgICAgY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjb250cmFjdCBvd25lcg0KDQogICAgICAgIEBwYXJhbSBfZnJvbSAgICAgICBhY2NvdW50IHRvIHJlbW92ZSB0aGUgYW1vdW50IGZyb20NCiAgICAgICAgQHBhcmFtIF9hbW91bnQgICAgIGFtb3VudCB0byBkZWNyZWFzZSB0aGUgc3VwcGx5IGJ5DQogICAgKi8NCiAgICBmdW5jdGlvbiBkZXN0cm95KGFkZHJlc3MgX2Zyb20sIHVpbnQyNTYgX2Ftb3VudCkNCiAgICAgICAgcHVibGljDQogICAgICAgIG93bmVyT25seQ0KICAgIHsNCiAgICAgICAgYmFsYW5jZU9mW19mcm9tXSA9IHNhZmVTdWIoYmFsYW5jZU9mW19mcm9tXSwgX2Ftb3VudCk7DQogICAgICAgIHRvdGFsU3VwcGx5ID0gc2FmZVN1Yih0b3RhbFN1cHBseSwgX2Ftb3VudCk7DQoNCiAgICAgICAgVHJhbnNmZXIoX2Zyb20sIHRoaXMsIF9hbW91bnQpOw0KICAgICAgICBEZXN0cnVjdGlvbihfYW1vdW50KTsNCiAgICB9DQoNCiAgICAvLyBFUkMyMCBzdGFuZGFyZCBtZXRob2Qgb3ZlcnJpZGVzIHdpdGggc29tZSBleHRyYSBmdW5jdGlvbmFsaXR5DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBzZW5kIGNvaW5zDQogICAgICAgIHRocm93cyBvbiBhbnkgZXJyb3IgcmF0aGVyIHRoZW4gcmV0dXJuIGEgZmFsc2UgZmxhZyB0byBtaW5pbWl6ZSB1c2VyIGVycm9ycw0KICAgICAgICBub3RlIHRoYXQgd2hlbiB0cmFuc2ZlcnJpbmcgdG8gdGhlIHNtYXJ0IHRva2VuJ3MgYWRkcmVzcywgdGhlIGNvaW5zIGFyZSBhY3R1YWxseSBkZXN0cm95ZWQNCg0KICAgICAgICBAcGFyYW0gX3RvICAgICAgdGFyZ2V0IGFkZHJlc3MNCiAgICAgICAgQHBhcmFtIF92YWx1ZSAgIHRyYW5zZmVyIGFtb3VudA0KDQogICAgICAgIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwsIGZhbHNlIGlmIGl0IHdhc24ndA0KICAgICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSBwdWJsaWMgdHJhbnNmZXJzQWxsb3dlZCByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgYXNzZXJ0KHN1cGVyLnRyYW5zZmVyKF90bywgX3ZhbHVlKSk7DQoNCiAgICAgICAgLy8gdHJhbnNmZXJyaW5nIHRvIHRoZSBjb250cmFjdCBhZGRyZXNzIGRlc3Ryb3lzIHRva2Vucw0KICAgICAgICBpZiAoX3RvID09IGFkZHJlc3ModGhpcykpIHsNCiAgICAgICAgICAgIGJhbGFuY2VPZltfdG9dIC09IF92YWx1ZTsNCiAgICAgICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsNCiAgICAgICAgICAgIERlc3RydWN0aW9uKF92YWx1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgICAgQGRldiBhbiBhY2NvdW50L2NvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMNCiAgICAgICAgdGhyb3dzIG9uIGFueSBlcnJvciByYXRoZXIgdGhlbiByZXR1cm4gYSBmYWxzZSBmbGFnIHRvIG1pbmltaXplIHVzZXIgZXJyb3JzDQogICAgICAgIG5vdGUgdGhhdCB3aGVuIHRyYW5zZmVycmluZyB0byB0aGUgc21hcnQgdG9rZW4ncyBhZGRyZXNzLCB0aGUgY29pbnMgYXJlIGFjdHVhbGx5IGRlc3Ryb3llZA0KDQogICAgICAgIEBwYXJhbSBfZnJvbSAgICBzb3VyY2UgYWRkcmVzcw0KICAgICAgICBAcGFyYW0gX3RvICAgICAgdGFyZ2V0IGFkZHJlc3MNCiAgICAgICAgQHBhcmFtIF92YWx1ZSAgIHRyYW5zZmVyIGFtb3VudA0KDQogICAgICAgIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdHJhbnNmZXIgd2FzIHN1Y2Nlc3NmdWwsIGZhbHNlIGlmIGl0IHdhc24ndA0KICAgICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHRyYW5zZmVyc0FsbG93ZWQgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFzc2VydChzdXBlci50cmFuc2ZlckZyb20oX2Zyb20sIF90bywgX3ZhbHVlKSk7DQoNCiAgICAgICAgLy8gdHJhbnNmZXJyaW5nIHRvIHRoZSBjb250cmFjdCBhZGRyZXNzIGRlc3Ryb3lzIHRva2Vucw0KICAgICAgICBpZiAoX3RvID09IGFkZHJlc3ModGhpcykpIHsNCiAgICAgICAgICAgIGJhbGFuY2VPZltfdG9dIC09IF92YWx1ZTsNCiAgICAgICAgICAgIHRvdGFsU3VwcGx5IC09IF92YWx1ZTsNCiAgICAgICAgICAgIERlc3RydWN0aW9uKF92YWx1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQp9'