base 64 content
base64tokenResolver
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4wOw0KDQpjb250cmFjdCBBYnN0cmFjdEVOUyB7DQogICAgZnVuY3Rpb24gb3duZXIoYnl0ZXMzMiBub2RlKSBjb25zdGFudCByZXR1cm5zKGFkZHJlc3MpOw0KICAgIGZ1bmN0aW9uIHJlc29sdmVyKGJ5dGVzMzIgbm9kZSkgY29uc3RhbnQgcmV0dXJucyhhZGRyZXNzKTsNCiAgICBmdW5jdGlvbiB0dGwoYnl0ZXMzMiBub2RlKSBjb25zdGFudCByZXR1cm5zKHVpbnQ2NCk7DQogICAgZnVuY3Rpb24gc2V0T3duZXIoYnl0ZXMzMiBub2RlLCBhZGRyZXNzIG93bmVyKTsNCiAgICBmdW5jdGlvbiBzZXRTdWJub2RlT3duZXIoYnl0ZXMzMiBub2RlLCBieXRlczMyIGxhYmVsLCBhZGRyZXNzIG93bmVyKTsNCiAgICBmdW5jdGlvbiBzZXRSZXNvbHZlcihieXRlczMyIG5vZGUsIGFkZHJlc3MgcmVzb2x2ZXIpOw0KICAgIGZ1bmN0aW9uIHNldFRUTChieXRlczMyIG5vZGUsIHVpbnQ2NCB0dGwpOw0KfQ0KDQovKioNCiAqIEEgc2ltcGxlIHJlc29sdmVyIGludGVuZGVkIGZvciB1c2Ugd2l0aCB0b2tlbiBjb250cmFjdHMuIE9ubHkgYWxsb3dzIHRoZQ0KICogb3duZXIgb2YgYSBub2RlIHRvIHNldCBpdHMgYWRkcmVzcywgYW5kIHJldHVybnMgdGhlIEVSQzIwIEpTT04gQUJJIGZvciBhbGwNCiAqIEFCSSBxdWVyaWVzLg0KICogDQogKiBBbHNvIGFjdHMgYXMgdGhlIHJlZ2lzdHJhciBmb3IgJ3RoZXRva2VuLmV0aCcgdG8gc2ltcGxpZnkgc2V0dGluZyB1cCBuZXcgdG9rZW5zLg0KICovDQpjb250cmFjdCBUb2tlblJlc29sdmVyIHsNCiAgICBieXRlczQgY29uc3RhbnQgSU5URVJGQUNFX01FVEFfSUQgPSAweDAxZmZjOWE3Ow0KICAgIGJ5dGVzNCBjb25zdGFudCBBRERSX0lOVEVSRkFDRV9JRCA9IDB4M2IzYjU3ZGU7DQogICAgYnl0ZXM0IGNvbnN0YW50IEFCSV9JTlRFUkZBQ0VfSUQgPSAweDIyMDNhYjU2Ow0KICAgIGJ5dGVzMzIgY29uc3RhbnQgUk9PVF9OT0RFID0gMHg2MzdmMTJlN2NkNmJlZDY1ZWVjZWVlMzRkMzU4NjgyNzk3NzhmYzU2YzNlNWU5NTFmNDZiODAxZmI3OGEyZDI2Ow0KICAgIGJ5dGVzIFRPS0VOX0pTT05fQUJJID0gJ1t7ImNvbnN0YW50Ijp0cnVlLCJpbnB1dHMiOltdLCJuYW1lIjoibmFtZSIsIm91dHB1dHMiOlt7Im5hbWUiOiJuYW1lIiwidHlwZSI6InN0cmluZyJ9XSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOmZhbHNlLCJpbnB1dHMiOlt7Im5hbWUiOiJfc3BlbmRlciIsInR5cGUiOiJhZGRyZXNzIn0seyJuYW1lIjoiX3ZhbHVlIiwidHlwZSI6InVpbnQyNTYifV0sIm5hbWUiOiJhcHByb3ZlIiwib3V0cHV0cyI6W3sibmFtZSI6InN1Y2Nlc3MiLCJ0eXBlIjoiYm9vbCJ9XSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOnRydWUsImlucHV0cyI6W10sIm5hbWUiOiJ0b3RhbFN1cHBseSIsIm91dHB1dHMiOlt7Im5hbWUiOiJ0b3RhbFN1cHBseSIsInR5cGUiOiJ1aW50MjU2In1dLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6ZmFsc2UsImlucHV0cyI6W3sibmFtZSI6Il9mcm9tIiwidHlwZSI6ImFkZHJlc3MifSx7Im5hbWUiOiJfdG8iLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6Il92YWx1ZSIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoidHJhbnNmZXJGcm9tIiwib3V0cHV0cyI6W3sibmFtZSI6InN1Y2Nlc3MiLCJ0eXBlIjoiYm9vbCJ9XSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOnRydWUsImlucHV0cyI6W10sIm5hbWUiOiJkZWNpbWFscyIsIm91dHB1dHMiOlt7Im5hbWUiOiJkZWNpbWFscyIsInR5cGUiOiJ1aW50OCJ9XSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOnRydWUsImlucHV0cyI6W3sibmFtZSI6Il9vd25lciIsInR5cGUiOiJhZGRyZXNzIn1dLCJuYW1lIjoiYmFsYW5jZU9mIiwib3V0cHV0cyI6W3sibmFtZSI6ImJhbGFuY2UiLCJ0eXBlIjoidWludDI1NiJ9XSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOnRydWUsImlucHV0cyI6W10sIm5hbWUiOiJzeW1ib2wiLCJvdXRwdXRzIjpbeyJuYW1lIjoic3ltYm9sIiwidHlwZSI6InN0cmluZyJ9XSwicGF5YWJsZSI6ZmFsc2UsInR5cGUiOiJmdW5jdGlvbiJ9LHsiY29uc3RhbnQiOmZhbHNlLCJpbnB1dHMiOlt7Im5hbWUiOiJfdG8iLCJ0eXBlIjoiYWRkcmVzcyJ9LHsibmFtZSI6Il92YWx1ZSIsInR5cGUiOiJ1aW50MjU2In1dLCJuYW1lIjoidHJhbnNmZXIiLCJvdXRwdXRzIjpbeyJuYW1lIjoic3VjY2VzcyIsInR5cGUiOiJib29sIn1dLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn0seyJjb25zdGFudCI6dHJ1ZSwiaW5wdXRzIjpbeyJuYW1lIjoiX293bmVyIiwidHlwZSI6ImFkZHJlc3MifSx7Im5hbWUiOiJfc3BlbmRlciIsInR5cGUiOiJhZGRyZXNzIn1dLCJuYW1lIjoiYWxsb3dhbmNlIiwib3V0cHV0cyI6W3sibmFtZSI6InJlbWFpbmluZyIsInR5cGUiOiJ1aW50MjU2In1dLCJwYXlhYmxlIjpmYWxzZSwidHlwZSI6ImZ1bmN0aW9uIn1dJzsNCiAgICANCiAgICBldmVudCBBZGRyQ2hhbmdlZChieXRlczMyIGluZGV4ZWQgbm9kZSwgYWRkcmVzcyBhKTsNCg0KICAgIEFic3RyYWN0RU5TIGVucyA9IEFic3RyYWN0RU5TKDB4MzE0MTU5MjY1ZEQ4ZGJiMzEwNjQyZjk4ZjUwQzA2NjE3M0MxMjU5Yik7DQogICAgbWFwcGluZyhieXRlczMyPT5hZGRyZXNzKSBhZGRyZXNzZXM7DQogICAgYWRkcmVzcyBvd25lcjsNCg0KICAgIG1vZGlmaWVyIG9ubHlfbm9kZV9vd25lcihieXRlczMyIG5vZGUpIHsNCiAgICAgICAgcmVxdWlyZShlbnMub3duZXIobm9kZSkgPT0gbXNnLnNlbmRlciB8fCBvd25lciA9PSBtc2cuc2VuZGVyKTsNCiAgICAgICAgXzsNCiAgICB9DQogICAgDQogICAgbW9kaWZpZXIgb25seV9vd25lcigpIHsNCiAgICAgICAgcmVxdWlyZShvd25lciA9PSBtc2cuc2VuZGVyKTsNCiAgICAgICAgXzsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gc2V0T3duZXIoYWRkcmVzcyBuZXdPd25lcikgb25seV9vd25lciB7DQogICAgICAgIG93bmVyID0gbmV3T3duZXI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbmV3VG9rZW4oc3RyaW5nIG5hbWUsIGFkZHJlc3MgYWRkcikgb25seV9vd25lciB7DQogICAgICAgIHZhciBsYWJlbCA9IHNoYTMobmFtZSk7DQogICAgICAgIHZhciBub2RlID0gc2hhMyhST09UX05PREUsIGxhYmVsKTsNCiAgICAgICAgDQogICAgICAgIGVucy5zZXRTdWJub2RlT3duZXIoUk9PVF9OT0RFLCBsYWJlbCwgdGhpcyk7DQogICAgICAgIGVucy5zZXRSZXNvbHZlcihub2RlLCB0aGlzKTsNCiAgICAgICAgYWRkcmVzc2VzW25vZGVdID0gYWRkcjsNCiAgICAgICAgQWRkckNoYW5nZWQobm9kZSwgYWRkcik7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIHNldFN1Ym5vZGVPd25lcihieXRlczIyIGxhYmVsLCBhZGRyZXNzIG5ld093bmVyKSBvbmx5X293bmVyIHsNCiAgICAgICAgZW5zLnNldFN1Ym5vZGVPd25lcihST09UX05PREUsIGxhYmVsLCBuZXdPd25lcik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gVG9rZW5SZXNvbHZlcigpIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcmVzb2x2ZXIgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlIHNwZWNpZmllZCBieSB0aGUgcHJvdmlkZWQgaGFzaC4NCiAgICAgKiBAcGFyYW0gaW50ZXJmYWNlSUQgVGhlIElEIG9mIHRoZSBpbnRlcmZhY2UgdG8gY2hlY2sgZm9yLg0KICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgY29udHJhY3QgaW1wbGVtZW50cyB0aGUgcmVxdWVzdGVkIGludGVyZmFjZS4NCiAgICAgKi8NCiAgICBmdW5jdGlvbiBzdXBwb3J0c0ludGVyZmFjZShieXRlczQgaW50ZXJmYWNlSUQpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgcmV0dXJuIGludGVyZmFjZUlEID09IEFERFJfSU5URVJGQUNFX0lEIHx8DQogICAgICAgICAgICAgICBpbnRlcmZhY2VJRCA9PSBBQklfSU5URVJGQUNFX0lEIHx8DQogICAgICAgICAgICAgICBpbnRlcmZhY2VJRCA9PSBJTlRFUkZBQ0VfTUVUQV9JRDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZXR1cm5zIHRoZSBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCBhbiBFTlMgbm9kZS4NCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgRU5TIG5vZGUgdG8gcXVlcnkuDQogICAgICogQHJldHVybiBUaGUgYXNzb2NpYXRlZCBhZGRyZXNzLg0KICAgICAqLw0KICAgIGZ1bmN0aW9uIGFkZHIoYnl0ZXMzMiBub2RlKSBjb25zdGFudCByZXR1cm5zIChhZGRyZXNzIHJldCkgew0KICAgICAgICByZXQgPSBhZGRyZXNzZXNbbm9kZV07DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0cyB0aGUgYWRkcmVzcyBhc3NvY2lhdGVkIHdpdGggYW4gRU5TIG5vZGUuDQogICAgICogTWF5IG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBvd25lciBvZiB0aGF0IG5vZGUgaW4gdGhlIEVOUyByZWdpc3RyeS4NCiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgbm9kZSB0byB1cGRhdGUuDQogICAgICogQHBhcmFtIGFkZHIgVGhlIGFkZHJlc3MgdG8gc2V0Lg0KICAgICAqLw0KICAgIGZ1bmN0aW9uIHNldEFkZHIoYnl0ZXMzMiBub2RlLCBhZGRyZXNzIGFkZHIpIG9ubHlfbm9kZV9vd25lcihub2RlKSB7DQogICAgICAgIGFkZHJlc3Nlc1tub2RlXSA9IGFkZHI7DQogICAgICAgIEFkZHJDaGFuZ2VkKG5vZGUsIGFkZHIpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHVybnMgdGhlIEFCSSBhc3NvY2lhdGVkIHdpdGggYW4gRU5TIG5vZGUuDQogICAgICogRGVmaW5lZCBpbiBFSVAyMDUuDQogICAgICogQHBhcmFtIG5vZGUgVGhlIEVOUyBub2RlIHRvIHF1ZXJ5DQogICAgICogQHBhcmFtIGNvbnRlbnRUeXBlcyBBIGJpdHdpc2UgT1Igb2YgdGhlIEFCSSBmb3JtYXRzIGFjY2VwdGVkIGJ5IHRoZSBjYWxsZXIuDQogICAgICogQHJldHVybiBjb250ZW50VHlwZSBUaGUgY29udGVudCB0eXBlIG9mIHRoZSByZXR1cm4gdmFsdWUNCiAgICAgKiBAcmV0dXJuIGRhdGEgVGhlIEFCSSBkYXRhDQogICAgICovDQogICAgZnVuY3Rpb24gQUJJKGJ5dGVzMzIgbm9kZSwgdWludDI1NiBjb250ZW50VHlwZXMpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgY29udGVudFR5cGUsIGJ5dGVzIGRhdGEpIHsNCiAgICAgICAgbm9kZTsNCiAgICAgICAgaWYoY29udGVudFR5cGVzICYgMSA9PSAxKSB7DQogICAgICAgICAgICAvLyBKU09OIEFCSQ0KICAgICAgICAgICAgY29udGVudFR5cGUgPSAxOw0KICAgICAgICAgICAgZGF0YSA9IFRPS0VOX0pTT05fQUJJOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGNvbnRlbnRUeXBlID0gMDsNCiAgICB9DQp9'