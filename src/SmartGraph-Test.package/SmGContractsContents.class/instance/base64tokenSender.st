base 64 content
base64tokenSender
	^'cHJhZ21hIHNvbGlkaXR5ID49MC40LjExOw0KDQpjb250cmFjdCBPd25lZCB7DQogICAgZnVuY3Rpb24gT3duZWQoKSB7DQogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICB9DQoNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCg0KICAgIC8vIFRoaXMgY29udHJhY3Qgb25seSBkZWZpbmVzIGEgbW9kaWZpZXIgYW5kIGEgZmV3IHVzZWZ1bCBmdW5jdGlvbnMNCiAgICAvLyBUaGUgZnVuY3Rpb24gYm9keSBpcyBpbnNlcnRlZCB3aGVyZSB0aGUgc3BlY2lhbCBzeW1ib2wgIl8iIGluIHRoZQ0KICAgIC8vIGRlZmluaXRpb24gb2YgYSBtb2RpZmllciBhcHBlYXJzLg0KICAgIG1vZGlmaWVyIG9ubHlPd25lciB7IGlmIChtc2cuc2VuZGVyID09IG93bmVyKSBfOyB9DQoNCiAgICBmdW5jdGlvbiBjaGFuZ2VPd25lcihhZGRyZXNzIF9uZXdPd25lcikgb25seU93bmVyIHsNCiAgICAgICAgb3duZXIgPSBfbmV3T3duZXI7DQogICAgfQ0KDQogICAgLy8gVGhpcyBpcyBhIGdlbmVyYWwgc2FmdHkgZnVuY3Rpb24gdGhhdCBhbGxvd3MgdGhlIG93bmVyIHRvIGRvIGEgbG90DQogICAgLy8gIG9mIHRoaW5ncyBpbiB0aGUgdW5saWtlbHkgZXZlbnQgdGhhdCBzb21ldGhpbmcgZ29lcyB3cm9uZw0KICAgIC8vIF9kc3QgaXMgdGhlIGNvbnRyYWN0IGJlaW5nIGNhbGxlZCBtYWtpbmcgdGhpcyBsaWtlIGEgMS8xIG11bHRpc2lnDQogICAgZnVuY3Rpb24gZXhlY3V0ZShhZGRyZXNzIF9kc3QsIHVpbnQgX3ZhbHVlLCBieXRlcyBfZGF0YSkgb25seU93bmVyIHsNCiAgICAgICAgX2RzdC5jYWxsLnZhbHVlKF92YWx1ZSkoX2RhdGEpOw0KICAgIH0NCn0NCi8vIHRvIGdldCB0aGUgbmVlZGVkIHRva2VuIGZ1bmN0aW9ucyBpbiB0aGUgY29udHJhY3QNCmNvbnRyYWN0IFRva2VuIHsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzLCB1aW50KSByZXR1cm5zKGJvb2wpOw0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsNCn0NCg0KY29udHJhY3QgVG9rZW5TZW5kZXIgaXMgT3duZWQgew0KICAgIFRva2VuIHB1YmxpYyB0b2tlbjsgLy8gdGhlIHRva2VuIHdlIGFyZSB3b3JraW5nIHdpdGgNCiAgICB1aW50IHB1YmxpYyB0b3RhbFRvRGlzdHJpYnV0ZTsNCg0KICAgIHVpbnQgcHVibGljIG5leHQ7DQoNCg0KICAgIHN0cnVjdCBUcmFuc2ZlciB7DQogICAgICAgIGFkZHJlc3MgYWRkcjsNCiAgICAgICAgdWludCBhbW91bnQ7DQogICAgfQ0KDQogICAgVHJhbnNmZXJbXSBwdWJsaWMgdHJhbnNmZXJzOw0KDQogICAgZnVuY3Rpb24gVG9rZW5TZW5kZXIoYWRkcmVzcyBfdG9rZW4pIHsNCiAgICAgICAgdG9rZW4gPSBUb2tlbihfdG9rZW4pOw0KICAgIH0NCg0KICAgIC8vIHRoaXMgaXMgYSB1c2VkIHRvIHNhdmUgZ2FzDQogICAgdWludCBjb25zdGFudCBEMTYwID0gMHgwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOw0KDQogICAgLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCBtYWtlcyB0aGUgbGlzdCBvZiB0cmFuc2ZlcnMgYW5kIHZhcmlvdXMNCiAgICAvLyAgY2hlY2tzIGFyb3VuZCB0aGF0IGxpc3QsIGl0IGlzIGEgbGl0dGxlIHRyaWNreSwgdGhlIGRhdGEgaW5wdXQgaXMNCiAgICAvLyAgc3RydWN0dXJlZCB3aXRoIHRoZSBgYW1vdW50YCBhbmQgdGhlIChyZWNlaXZpbmcpIGBhZGRyYCBjb21iaW5lZCBhcyBvbmUNCiAgICAvLyAgbG9uZyBudW1iZXIgYW5kIHRoZW4gdGhpcyBudW1iZXIgaXMgZGVjb25zdHJ1Y3RlZCBpbiB0aGlzIGZ1bmN0aW9uIHRvDQogICAgLy8gIHNhdmUgZ2FzIGFuZCByZWR1Y2UgdGhlIG51bWJlciBvZiBgMGAncyB0aGF0IGFyZSBuZWVkZWQgdG8gYmUgc3RvcmVkDQogICAgLy8gICBvbiB0aGUgYmxvY2tjaGFpbg0KICAgIGZ1bmN0aW9uIGZpbGwodWludFtdIGRhdGEpIG9ubHlPd25lciB7DQoNCiAgICAgICAgLy8gSWYgdGhlIHNlbmQgaGFzIHN0YXJ0ZWQgdGhlbiB3ZSBqdXN0IHRocm93DQogICAgICAgIGlmIChuZXh0PjApIHRocm93Ow0KDQogICAgICAgIHVpbnQgYWNjOw0KICAgICAgICB1aW50IG9mZnNldCA9IHRyYW5zZmVycy5sZW5ndGg7DQogICAgICAgIHRyYW5zZmVycy5sZW5ndGggPSB0cmFuc2ZlcnMubGVuZ3RoICsgZGF0YS5sZW5ndGg7DQogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKysgKSB7DQogICAgICAgICAgICBhZGRyZXNzIGFkZHIgPSBhZGRyZXNzKCBkYXRhW2ldICYgKEQxNjAtMSkgKTsNCiAgICAgICAgICAgIHVpbnQgYW1vdW50ID0gZGF0YVtpXSAvIEQxNjA7DQoNCiAgICAgICAgICAgIHRyYW5zZmVyc1tvZmZzZXQgKyBpXS5hZGRyID0gYWRkcjsNCiAgICAgICAgICAgIHRyYW5zZmVyc1tvZmZzZXQgKyBpXS5hbW91bnQgPSBhbW91bnQ7DQogICAgICAgICAgICBhY2MgKz0gYW1vdW50Ow0KICAgICAgICB9DQogICAgICAgIHRvdGFsVG9EaXN0cmlidXRlICs9IGFjYzsNCiAgICB9DQogICAgLy8gVGhpcyBmdW5jdGlvbiBhY3R1YWxseSBtYWtlcyB0aGUgc2VuZHMgYW5kIHRyYWNrcyB0aGUgYW1vdW50IG9mIGdhcyB1c2VkDQogICAgLy8gIGlmIGl0IHRha2VzIG1vcmUgZ2FzIHRoYW4gd2FzIHNlbnQgd2l0aCB0aGUgdHJhbnNhY3Rpb24gdGhlbiB0aGlzDQogICAgLy8gIGZ1bmN0aW9uIHdpbGwgbmVlZCB0byBiZSBjYWxsZWQgYSBmZXcgdGltZXMgdW50aWwNCiAgICBmdW5jdGlvbiBydW4oKSBvbmx5T3duZXIgew0KICAgICAgICBpZiAodHJhbnNmZXJzLmxlbmd0aCA9PSAwKSByZXR1cm47DQoNCiAgICAgICAgLy8gS2VlcCBuZXh0IGluIHRoZSBzdGFjayB2YXIgbU5leHQgdG8gc2F2ZSBnYXMNCiAgICAgICAgdWludCBtTmV4dCA9IG5leHQ7DQoNCiAgICAgICAgLy8gU2V0IHRoZSBjb250cmFjdCBhcyBmaW5hbGl6ZWQgdG8gYXZvaWQgcmVlbnRyYW5jZQ0KICAgICAgICBuZXh0ID0gdHJhbnNmZXJzLmxlbmd0aDsNCg0KICAgICAgICBpZiAoKG1OZXh0ID09IDAgKSAmJiAoIHRva2VuLmJhbGFuY2VPZih0aGlzKSAhPSB0b3RhbFRvRGlzdHJpYnV0ZSkpIHRocm93Ow0KDQogICAgICAgIHdoaWxlICgobU5leHQ8dHJhbnNmZXJzLmxlbmd0aCkgJiYgKCBnYXMoKSA+IDE1MDAwMCApKSB7DQogICAgICAgICAgICB1aW50IGFtb3VudCA9IHRyYW5zZmVyc1ttTmV4dF0uYW1vdW50Ow0KICAgICAgICAgICAgYWRkcmVzcyBhZGRyID0gdHJhbnNmZXJzW21OZXh0XS5hZGRyOw0KICAgICAgICAgICAgaWYgKGFtb3VudCA+IDApIHsNCiAgICAgICAgICAgICAgICBpZiAoIXRva2VuLnRyYW5zZmVyKGFkZHIsIHRyYW5zZmVyc1ttTmV4dF0uYW1vdW50KSkgdGhyb3c7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBtTmV4dCArKzsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFNldCB0aGUgbmV4dCB0byB0aGUgYWN0dWFsIHN0YXRlLg0KICAgICAgICBuZXh0ID0gbU5leHQ7DQogICAgfQ0KDQoNCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLw0KICAgIC8vIEhlbHBlciBmdW5jdGlvbnMNCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLw0KDQogICAgZnVuY3Rpb24gaGFzVGVybWluYXRlZCgpIGNvbnN0YW50IHJldHVybnMgKGJvb2wpIHsNCiAgICAgICAgaWYgKHRyYW5zZmVycy5sZW5ndGggPT0gMCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICBpZiAobmV4dCA8IHRyYW5zZmVycy5sZW5ndGgpIHJldHVybiBmYWxzZTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gblRyYW5zZmVycygpIGNvbnN0YW50IHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIHRyYW5zZmVycy5sZW5ndGg7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZ2FzKCkgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludCBfZ2FzKSB7DQogICAgICAgIGFzc2VtYmx5IHsNCiAgICAgICAgICAgIF9nYXM6PSBnYXMNCiAgICAgICAgfQ0KICAgIH0NCg0KfQ=='