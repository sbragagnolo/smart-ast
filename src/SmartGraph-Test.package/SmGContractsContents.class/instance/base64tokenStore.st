base 64 content
base64tokenStore
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLy8gRVJDMjAgdG9rZW4gcHJvdG9jb2wsIHNlZSBtb3JlIGRldGFpbHMgYXQNCi8vIGh0dHBzOi8vdGhlZXRoZXJldW0ud2lraS93L2luZGV4LnBocC9FUkMyMF9Ub2tlbl9TdGFuZGFyZA0KLy8gQW5kIGFsc28gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2VpcHMvaXNzdWVzLzIwDQoNCmNvbnRyYWN0IFRva2VuIHsNCiAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHN1cHBseSk7DQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKTsNCiAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsNCg0KICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsNCiAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7DQp9DQoNCi8vIFNhZmUgbWF0aGVtYXRpY3MgdG8gbWFrZSB0aGUgY29kZSBtb3JlIHJlYWRhYmxlDQoNCmNvbnRyYWN0IFNhZmVNYXRoIHsNCiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKiBiOw0KICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQoNCiAgZnVuY3Rpb24gc2FmZUFkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKyBiOw0KICAgIGFzc2VydChjPj1hICYmIGM+PWIpOw0KICAgIHJldHVybiBjOw0KICB9DQp9DQoNCi8vIE93bmFibGUgaW50ZXJmYWNlIHRvIHNpbXBsaWZ5IG93bmVyIGNoZWNrcw0KDQpjb250cmFjdCBPd25hYmxlIHsNCiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQoNCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsNCiAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogIH0NCg0KICBtb2RpZmllciBvbmx5T3duZXIoKSB7DQogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IG93bmVyKTsNCiAgICBfOw0KICB9DQoNCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBfbmV3T3duZXIpIG9ubHlPd25lciB7DQogICAgcmVxdWlyZShfbmV3T3duZXIgIT0gYWRkcmVzcygwKSk7DQogICAgb3duZXIgPSBfbmV3T3duZXI7DQogIH0NCn0NCg0KLy8gSW50ZXJmYWNlIGZvciB0cmFkaW5nIGRpc2NvdW50cyBhbmQgcmViYXRlcyBmb3Igc3BlY2lmaWMgYWNjb3VudHMNCg0KY29udHJhY3QgQWNjb3VudE1vZGlmaWVyc0ludGVyZmFjZSB7DQogIGZ1bmN0aW9uIGFjY291bnRNb2RpZmllcnMoYWRkcmVzcyBfdXNlcikgY29uc3RhbnQgcmV0dXJucyh1aW50IHRha2VGZWVEaXNjb3VudCwgdWludCByZWJhdGVQZXJjZW50YWdlKTsNCiAgZnVuY3Rpb24gdHJhZGVNb2RpZmllcnMoYWRkcmVzcyBfbWFrZXIsIGFkZHJlc3MgX3Rha2VyKSBjb25zdGFudCByZXR1cm5zKHVpbnQgdGFrZUZlZURpc2NvdW50LCB1aW50IHJlYmF0ZVBlcmNlbnRhZ2UpOw0KfQ0KDQovLyBJbnRlcmZhY2UgZm9yIHRyYWRlIHRhY2tlcg0KDQpjb250cmFjdCBUcmFkZVRyYWNrZXJJbnRlcmZhY2Ugew0KICBmdW5jdGlvbiB0cmFkZUNvbXBsZXRlKGFkZHJlc3MgX3Rva2VuR2V0LCB1aW50IF9hbW91bnRHZXQsIGFkZHJlc3MgX3Rva2VuR2l2ZSwgdWludCBfYW1vdW50R2l2ZSwgYWRkcmVzcyBfZ2V0LCBhZGRyZXNzIF9naXZlLCB1aW50IF90YWtlckZlZSwgdWludCBfbWFrZXJSZWJhdGUpOw0KfQ0KDQovLyBFeGNoYW5nZSBjb250cmFjdA0KDQpjb250cmFjdCBUb2tlblN0b3JlIGlzIFNhZmVNYXRoLCBPd25hYmxlIHsNCg0KICAvLyBUaGUgYWNjb3VudCB0aGF0IHdpbGwgcmVjZWl2ZSBmZWVzDQogIGFkZHJlc3MgZmVlQWNjb3VudDsNCg0KICAvLyBUaGUgYWNjb3VudCB0aGF0IHN0b3JlcyBmZWUgZGlzY291bnRzL3JlYmF0ZXMNCiAgYWRkcmVzcyBhY2NvdW50TW9kaWZpZXJzOw0KICANCiAgLy8gVHJhZGUgdHJhY2tlciBhY2NvdW50DQogIGFkZHJlc3MgdHJhZGVUcmFja2VyOw0KDQogIC8vIFdlIGNoYXJnZSBvbmx5IHRoZSB0YWtlcnMgYW5kIHRoaXMgaXMgdGhlIGZlZSwgcGVyY2VudGFnZSB0aW1lcyAxIGV0aGVyDQogIHVpbnQgcHVibGljIGZlZTsNCg0KICAvLyBNYXBwaW5nIG9mIHRva2VuIGFkZHJlc3NlcyB0byBtYXBwaW5nIG9mIGFjY291bnQgYmFsYW5jZXMgKHRva2VuIDAgbWVhbnMgRXRoZXIpDQogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgcHVibGljIHRva2VuczsNCg0KICAvLyBNYXBwaW5nIG9mIHVzZXIgYWNjb3VudHMgdG8gbWFwcGluZyBvZiBvcmRlciBoYXNoZXMgdG8gdWludHMgKGFtb3VudCBvZiBvcmRlciB0aGF0IGhhcyBiZWVuIGZpbGxlZCkNCiAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChieXRlczMyID0+IHVpbnQpKSBwdWJsaWMgb3JkZXJGaWxsczsNCiAgDQogIC8vIEFkZHJlc3Mgb2YgYSBuZXh0IGFuZCBwcmV2aW91cyB2ZXJzaW9ucyBvZiB0aGUgY29udHJhY3QsIGFsc28gc3RhdHVzIG9mIHRoZSBjb250cmFjdA0KICAvLyBjYW4gYmUgdXNlZCBmb3IgdXNlci10cmlnZ2VyZWQgZnVuZCBtaWdyYXRpb25zDQogIGFkZHJlc3MgcHVibGljIHN1Y2Nlc3NvcjsNCiAgYWRkcmVzcyBwdWJsaWMgcHJlZGVjZXNzb3I7DQogIGJvb2wgcHVibGljIGRlcHJlY2F0ZWQ7DQogIHVpbnQxNiBwdWJsaWMgdmVyc2lvbjsNCg0KICAvLyBMb2dnaW5nIGV2ZW50cw0KICAvLyBOb3RlOiBPcmRlciBjcmVhdGlvbiBpcyBoYW5kbGVkIG9mZi1jaGFpbiwgc2VlIGV4cGxhbmF0aW9uIGZ1cnRoZXIgYmVsb3cNCiAgZXZlbnQgQ2FuY2VsKGFkZHJlc3MgdG9rZW5HZXQsIHVpbnQgYW1vdW50R2V0LCBhZGRyZXNzIHRva2VuR2l2ZSwgdWludCBhbW91bnRHaXZlLCB1aW50IGV4cGlyZXMsIHVpbnQgbm9uY2UsIGFkZHJlc3MgdXNlciwgdWludDggdiwgYnl0ZXMzMiByLCBieXRlczMyIHMpOw0KICBldmVudCBUcmFkZShhZGRyZXNzIHRva2VuR2V0LCB1aW50IGFtb3VudEdldCwgYWRkcmVzcyB0b2tlbkdpdmUsIHVpbnQgYW1vdW50R2l2ZSwgYWRkcmVzcyBnZXQsIGFkZHJlc3MgZ2l2ZSwgdWludCBub25jZSk7DQogIGV2ZW50IERlcG9zaXQoYWRkcmVzcyB0b2tlbiwgYWRkcmVzcyB1c2VyLCB1aW50IGFtb3VudCwgdWludCBiYWxhbmNlKTsNCiAgZXZlbnQgV2l0aGRyYXcoYWRkcmVzcyB0b2tlbiwgYWRkcmVzcyB1c2VyLCB1aW50IGFtb3VudCwgdWludCBiYWxhbmNlKTsNCiAgZXZlbnQgRnVuZHNNaWdyYXRlZChhZGRyZXNzIHVzZXIpOw0KDQogIGZ1bmN0aW9uIFRva2VuU3RvcmUodWludCBfZmVlLCBhZGRyZXNzIF9wcmVkZWNlc3Nvcikgew0KICAgIGZlZUFjY291bnQgPSBvd25lcjsNCiAgICBmZWUgPSBfZmVlOw0KICAgIHByZWRlY2Vzc29yID0gX3ByZWRlY2Vzc29yOw0KICAgIGRlcHJlY2F0ZWQgPSBmYWxzZTsNCiAgICBpZiAocHJlZGVjZXNzb3IgIT0gYWRkcmVzcygwKSkgew0KICAgICAgdmVyc2lvbiA9IFRva2VuU3RvcmUocHJlZGVjZXNzb3IpLnZlcnNpb24oKSArIDE7DQogICAgfSBlbHNlIHsNCiAgICAgIHZlcnNpb24gPSAxOw0KICAgIH0NCiAgfQ0KDQogIC8vIFRocm93IG9uIGRlZmF1bHQgaGFuZGxlciB0byBwcmV2ZW50IGRpcmVjdCB0cmFuc2FjdGlvbnMgb2YgRXRoZXINCiAgZnVuY3Rpb24oKSB7DQogICAgcmV2ZXJ0KCk7DQogIH0NCiAgDQogIG1vZGlmaWVyIGRlcHJlY2FibGUoKSB7DQogICAgcmVxdWlyZSghZGVwcmVjYXRlZCk7DQogICAgXzsNCiAgfQ0KDQogIGZ1bmN0aW9uIGRlcHJlY2F0ZShib29sIF9kZXByZWNhdGVkLCBhZGRyZXNzIF9zdWNjZXNzb3IpIG9ubHlPd25lciB7DQogICAgZGVwcmVjYXRlZCA9IF9kZXByZWNhdGVkOw0KICAgIHN1Y2Nlc3NvciA9IF9zdWNjZXNzb3I7DQogIH0NCg0KICBmdW5jdGlvbiBjaGFuZ2VGZWVBY2NvdW50KGFkZHJlc3MgX2ZlZUFjY291bnQpIG9ubHlPd25lciB7DQogICAgcmVxdWlyZShfZmVlQWNjb3VudCAhPSBhZGRyZXNzKDApKTsNCiAgICBmZWVBY2NvdW50ID0gX2ZlZUFjY291bnQ7DQogIH0NCg0KICBmdW5jdGlvbiBjaGFuZ2VBY2NvdW50TW9kaWZpZXJzKGFkZHJlc3MgX2FjY291bnRNb2RpZmllcnMpIG9ubHlPd25lciB7DQogICAgYWNjb3VudE1vZGlmaWVycyA9IF9hY2NvdW50TW9kaWZpZXJzOw0KICB9DQogIA0KICBmdW5jdGlvbiBjaGFuZ2VUcmFkZVRyYWNrZXIoYWRkcmVzcyBfdHJhZGVUcmFja2VyKSBvbmx5T3duZXIgew0KICAgIHRyYWRlVHJhY2tlciA9IF90cmFkZVRyYWNrZXI7DQogIH0NCg0KICAvLyBGZWUgY2FuIG9ubHkgYmUgZGVjcmVhc2VkIQ0KICBmdW5jdGlvbiBjaGFuZ2VGZWUodWludCBfZmVlKSBvbmx5T3duZXIgew0KICAgIHJlcXVpcmUoX2ZlZSA8PSBmZWUpOw0KICAgIGZlZSA9IF9mZWU7DQogIH0NCiAgDQogIC8vIEFsbG93cyBhIHVzZXIgdG8gZ2V0IGhlciBjdXJyZW50IGRpc2NvdW50L3JlYmF0ZQ0KICBmdW5jdGlvbiBnZXRBY2NvdW50TW9kaWZpZXJzKCkgY29uc3RhbnQgcmV0dXJucyh1aW50IHRha2VGZWVEaXNjb3VudCwgdWludCByZWJhdGVQZXJjZW50YWdlKSB7DQogICAgaWYgKGFjY291bnRNb2RpZmllcnMgIT0gYWRkcmVzcygwKSkgew0KICAgICAgcmV0dXJuIEFjY291bnRNb2RpZmllcnNJbnRlcmZhY2UoYWNjb3VudE1vZGlmaWVycykuYWNjb3VudE1vZGlmaWVycyhtc2cuc2VuZGVyKTsNCiAgICB9IGVsc2Ugew0KICAgICAgcmV0dXJuICgwLCAwKTsNCiAgICB9DQogIH0NCiAgDQogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vDQogIC8vIERlcG9zaXRzLCB3aXRoZHJhd2FscywgYmFsYW5jZXMNCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8NCg0KICBmdW5jdGlvbiBkZXBvc2l0KCkgcGF5YWJsZSBkZXByZWNhYmxlIHsNCiAgICB0b2tlbnNbMF1bbXNnLnNlbmRlcl0gPSBzYWZlQWRkKHRva2Vuc1swXVttc2cuc2VuZGVyXSwgbXNnLnZhbHVlKTsNCiAgICBEZXBvc2l0KDAsIG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgdG9rZW5zWzBdW21zZy5zZW5kZXJdKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHdpdGhkcmF3KHVpbnQgX2Ftb3VudCkgew0KICAgIHJlcXVpcmUodG9rZW5zWzBdW21zZy5zZW5kZXJdID49IF9hbW91bnQpOw0KICAgIHRva2Vuc1swXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIodG9rZW5zWzBdW21zZy5zZW5kZXJdLCBfYW1vdW50KTsNCiAgICBpZiAoIW1zZy5zZW5kZXIuY2FsbC52YWx1ZShfYW1vdW50KSgpKSB7DQogICAgICByZXZlcnQoKTsNCiAgICB9DQogICAgV2l0aGRyYXcoMCwgbXNnLnNlbmRlciwgX2Ftb3VudCwgdG9rZW5zWzBdW21zZy5zZW5kZXJdKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGRlcG9zaXRUb2tlbihhZGRyZXNzIF90b2tlbiwgdWludCBfYW1vdW50KSBkZXByZWNhYmxlIHsNCiAgICAvLyBOb3RlIHRoYXQgVG9rZW4oX3Rva2VuKS5hcHByb3ZlKHRoaXMsIF9hbW91bnQpIG5lZWRzIHRvIGJlIGNhbGxlZA0KICAgIC8vIGZpcnN0IG9yIHRoaXMgY29udHJhY3Qgd2lsbCBub3QgYmUgYWJsZSB0byBkbyB0aGUgdHJhbnNmZXIuDQogICAgcmVxdWlyZShfdG9rZW4gIT0gMCk7DQogICAgaWYgKCFUb2tlbihfdG9rZW4pLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCB0aGlzLCBfYW1vdW50KSkgew0KICAgICAgcmV2ZXJ0KCk7DQogICAgfQ0KICAgIHRva2Vuc1tfdG9rZW5dW21zZy5zZW5kZXJdID0gc2FmZUFkZCh0b2tlbnNbX3Rva2VuXVttc2cuc2VuZGVyXSwgX2Ftb3VudCk7DQogICAgRGVwb3NpdChfdG9rZW4sIG1zZy5zZW5kZXIsIF9hbW91bnQsIHRva2Vuc1tfdG9rZW5dW21zZy5zZW5kZXJdKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHdpdGhkcmF3VG9rZW4oYWRkcmVzcyBfdG9rZW4sIHVpbnQgX2Ftb3VudCkgew0KICAgIHJlcXVpcmUoX3Rva2VuICE9IDApOw0KICAgIHJlcXVpcmUodG9rZW5zW190b2tlbl1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCk7DQogICAgdG9rZW5zW190b2tlbl1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKHRva2Vuc1tfdG9rZW5dW21zZy5zZW5kZXJdLCBfYW1vdW50KTsNCiAgICBpZiAoIVRva2VuKF90b2tlbikudHJhbnNmZXIobXNnLnNlbmRlciwgX2Ftb3VudCkpIHsNCiAgICAgIHJldmVydCgpOw0KICAgIH0NCiAgICBXaXRoZHJhdyhfdG9rZW4sIG1zZy5zZW5kZXIsIF9hbW91bnQsIHRva2Vuc1tfdG9rZW5dW21zZy5zZW5kZXJdKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF90b2tlbiwgYWRkcmVzcyBfdXNlcikgY29uc3RhbnQgcmV0dXJucyAodWludCkgew0KICAgIHJldHVybiB0b2tlbnNbX3Rva2VuXVtfdXNlcl07DQogIH0NCiAgDQogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vDQogIC8vIFRyYWRpbmcNCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8NCg0KICAvLyBOb3RlOiBPcmRlciBjcmVhdGlvbiBoYXBwZW5zIG9mZi1jaGFpbiBidXQgdGhlIG9yZGVycyBhcmUgc2lnbmVkIGJ5IGNyZWF0b3JzLA0KICAvLyB3ZSB2YWxpZGF0ZSB0aGUgY29udGVudHMgYW5kIHRoZSBjcmVhdG9yIGFkZHJlc3MgaW4gdGhlIGxvZ2ljIGJlbG93DQoNCiAgZnVuY3Rpb24gdHJhZGUoYWRkcmVzcyBfdG9rZW5HZXQsIHVpbnQgX2Ftb3VudEdldCwgYWRkcmVzcyBfdG9rZW5HaXZlLCB1aW50IF9hbW91bnRHaXZlLA0KICAgICAgdWludCBfZXhwaXJlcywgdWludCBfbm9uY2UsIGFkZHJlc3MgX3VzZXIsIHVpbnQ4IF92LCBieXRlczMyIF9yLCBieXRlczMyIF9zLCB1aW50IF9hbW91bnQpIHsNCiAgICBieXRlczMyIGhhc2ggPSBzaGEyNTYodGhpcywgX3Rva2VuR2V0LCBfYW1vdW50R2V0LCBfdG9rZW5HaXZlLCBfYW1vdW50R2l2ZSwgX2V4cGlyZXMsIF9ub25jZSk7DQogICAgLy8gQ2hlY2sgb3JkZXIgc2lnbmF0dXJlcyBhbmQgZXhwaXJhdGlvbiwgYWxzbyBjaGVjayBpZiBub3QgZnVsZmlsbGVkIHlldA0KCQlpZiAoZWNyZWNvdmVyKHNoYTMoIlx4MTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcbjMyIiwgaGFzaCksIF92LCBfciwgX3MpICE9IF91c2VyIHx8DQogICAgICBibG9jay5udW1iZXIgPiBfZXhwaXJlcyB8fA0KICAgICAgc2FmZUFkZChvcmRlckZpbGxzW191c2VyXVtoYXNoXSwgX2Ftb3VudCkgPiBfYW1vdW50R2V0KSB7DQogICAgICByZXZlcnQoKTsNCiAgICB9DQogICAgdHJhZGVCYWxhbmNlcyhfdG9rZW5HZXQsIF9hbW91bnRHZXQsIF90b2tlbkdpdmUsIF9hbW91bnRHaXZlLCBfdXNlciwgbXNnLnNlbmRlciwgX2Ftb3VudCk7DQogICAgb3JkZXJGaWxsc1tfdXNlcl1baGFzaF0gPSBzYWZlQWRkKG9yZGVyRmlsbHNbX3VzZXJdW2hhc2hdLCBfYW1vdW50KTsNCiAgICBUcmFkZShfdG9rZW5HZXQsIF9hbW91bnQsIF90b2tlbkdpdmUsIF9hbW91bnRHaXZlICogX2Ftb3VudCAvIF9hbW91bnRHZXQsIF91c2VyLCBtc2cuc2VuZGVyLCBfbm9uY2UpOw0KICB9DQogIA0KICBmdW5jdGlvbiB0cmFkZUJhbGFuY2VzKGFkZHJlc3MgX3Rva2VuR2V0LCB1aW50IF9hbW91bnRHZXQsIGFkZHJlc3MgX3Rva2VuR2l2ZSwgdWludCBfYW1vdW50R2l2ZSwNCiAgICAgIGFkZHJlc3MgX3VzZXIsIGFkZHJlc3MgX2NhbGxlciwgdWludCBfYW1vdW50KSBwcml2YXRlIHsNCg0KICAgIHVpbnQgZmVlVGFrZVZhbHVlID0gc2FmZU11bChfYW1vdW50LCBmZWUpIC8gKDEgZXRoZXIpOw0KICAgIHVpbnQgcmViYXRlVmFsdWUgPSAwOw0KICAgIHVpbnQgdG9rZW5HaXZlVmFsdWUgPSBzYWZlTXVsKF9hbW91bnRHaXZlLCBfYW1vdW50KSAvIF9hbW91bnRHZXQ7IC8vIFByb3BvcnRpb25hdGUgdG8gcmVxdWVzdCByYXRpbw0KDQogICAgLy8gQXBwbHkgbW9kaWZpZXJzDQogICAgaWYgKGFjY291bnRNb2RpZmllcnMgIT0gYWRkcmVzcygwKSkgew0KICAgICAgdmFyIChmZWVUYWtlRGlzY291bnQsIHJlYmF0ZVBlcmNlbnRhZ2UpID0gQWNjb3VudE1vZGlmaWVyc0ludGVyZmFjZShhY2NvdW50TW9kaWZpZXJzKS50cmFkZU1vZGlmaWVycyhfdXNlciwgX2NhbGxlcik7DQogICAgICAvLyBDaGVjayB0aGF0IHRoZSBkaXNjb3VudHMvcmViYXRlcyBhcmUgbmV2ZXIgaGlnaGVyIHRoZW4gMTAwJQ0KICAgICAgaWYgKGZlZVRha2VEaXNjb3VudCA+IDEwMCkgew0KICAgICAgICBmZWVUYWtlRGlzY291bnQgPSAwOw0KICAgICAgfQ0KICAgICAgaWYgKHJlYmF0ZVBlcmNlbnRhZ2UgPiAxMDApIHsNCiAgICAgICAgcmViYXRlUGVyY2VudGFnZSA9IDA7DQogICAgICB9DQogICAgICBmZWVUYWtlVmFsdWUgPSBzYWZlTXVsKGZlZVRha2VWYWx1ZSwgMTAwIC0gZmVlVGFrZURpc2NvdW50KSAvIDEwMDsgIC8vIGRpc2NvdW50ZWQgZmVlDQogICAgICByZWJhdGVWYWx1ZSA9IHNhZmVNdWwocmViYXRlUGVyY2VudGFnZSwgZmVlVGFrZVZhbHVlKSAvIDEwMDsgICAgICAgIC8vICUgb2YgYWN0dWFsIHRha2VyIGZlZQ0KICAgIH0NCiAgICANCiAgICB0b2tlbnNbX3Rva2VuR2V0XVtfdXNlcl0gPSBzYWZlQWRkKHRva2Vuc1tfdG9rZW5HZXRdW191c2VyXSwgc2FmZUFkZChfYW1vdW50LCByZWJhdGVWYWx1ZSkpOw0KICAgIHRva2Vuc1tfdG9rZW5HZXRdW19jYWxsZXJdID0gc2FmZVN1Yih0b2tlbnNbX3Rva2VuR2V0XVtfY2FsbGVyXSwgc2FmZUFkZChfYW1vdW50LCBmZWVUYWtlVmFsdWUpKTsNCiAgICB0b2tlbnNbX3Rva2VuR2l2ZV1bX3VzZXJdID0gc2FmZVN1Yih0b2tlbnNbX3Rva2VuR2l2ZV1bX3VzZXJdLCB0b2tlbkdpdmVWYWx1ZSk7DQogICAgdG9rZW5zW190b2tlbkdpdmVdW19jYWxsZXJdID0gc2FmZUFkZCh0b2tlbnNbX3Rva2VuR2l2ZV1bX2NhbGxlcl0sIHRva2VuR2l2ZVZhbHVlKTsNCiAgICB0b2tlbnNbX3Rva2VuR2V0XVtmZWVBY2NvdW50XSA9IHNhZmVBZGQodG9rZW5zW190b2tlbkdldF1bZmVlQWNjb3VudF0sIHNhZmVTdWIoZmVlVGFrZVZhbHVlLCByZWJhdGVWYWx1ZSkpOw0KICAgIA0KICAgIGlmICh0cmFkZVRyYWNrZXIgIT0gYWRkcmVzcygwKSkgew0KICAgICAgVHJhZGVUcmFja2VySW50ZXJmYWNlKHRyYWRlVHJhY2tlcikudHJhZGVDb21wbGV0ZShfdG9rZW5HZXQsIF9hbW91bnQsIF90b2tlbkdpdmUsIHRva2VuR2l2ZVZhbHVlLCBfdXNlciwgX2NhbGxlciwgZmVlVGFrZVZhbHVlLCByZWJhdGVWYWx1ZSk7DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gdGVzdFRyYWRlKGFkZHJlc3MgX3Rva2VuR2V0LCB1aW50IF9hbW91bnRHZXQsIGFkZHJlc3MgX3Rva2VuR2l2ZSwgdWludCBfYW1vdW50R2l2ZSwgdWludCBfZXhwaXJlcywNCiAgICAgIHVpbnQgX25vbmNlLCBhZGRyZXNzIF91c2VyLCB1aW50OCBfdiwgYnl0ZXMzMiBfciwgYnl0ZXMzMiBfcywgdWludCBfYW1vdW50LCBhZGRyZXNzIF9zZW5kZXIpIGNvbnN0YW50IHJldHVybnMoYm9vbCkgew0KICAgIGlmICh0b2tlbnNbX3Rva2VuR2V0XVtfc2VuZGVyXSA8IF9hbW91bnQgfHwNCiAgICAgIGF2YWlsYWJsZVZvbHVtZShfdG9rZW5HZXQsIF9hbW91bnRHZXQsIF90b2tlbkdpdmUsIF9hbW91bnRHaXZlLCBfZXhwaXJlcywgX25vbmNlLCBfdXNlciwgX3YsIF9yLCBfcykgPCBfYW1vdW50KSB7DQogICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gYXZhaWxhYmxlVm9sdW1lKGFkZHJlc3MgX3Rva2VuR2V0LCB1aW50IF9hbW91bnRHZXQsIGFkZHJlc3MgX3Rva2VuR2l2ZSwgdWludCBfYW1vdW50R2l2ZSwgdWludCBfZXhwaXJlcywNCiAgICAgIHVpbnQgX25vbmNlLCBhZGRyZXNzIF91c2VyLCB1aW50OCBfdiwgYnl0ZXMzMiBfciwgYnl0ZXMzMiBfcykgY29uc3RhbnQgcmV0dXJucyh1aW50KSB7DQogICAgYnl0ZXMzMiBoYXNoID0gc2hhMjU2KHRoaXMsIF90b2tlbkdldCwgX2Ftb3VudEdldCwgX3Rva2VuR2l2ZSwgX2Ftb3VudEdpdmUsIF9leHBpcmVzLCBfbm9uY2UpOw0KICAgIGlmIChlY3JlY292ZXIoc2hhMygiXHgxOUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOlxuMzIiLCBoYXNoKSwgX3YsIF9yLCBfcykgIT0gX3VzZXIgfHwNCiAgICAgIGJsb2NrLm51bWJlciA+IF9leHBpcmVzKSB7DQogICAgICByZXR1cm4gMDsNCiAgICB9DQogICAgdWludCBhdmFpbGFibGUxID0gc2FmZVN1YihfYW1vdW50R2V0LCBvcmRlckZpbGxzW191c2VyXVtoYXNoXSk7DQogICAgdWludCBhdmFpbGFibGUyID0gc2FmZU11bCh0b2tlbnNbX3Rva2VuR2l2ZV1bX3VzZXJdLCBfYW1vdW50R2V0KSAvIF9hbW91bnRHaXZlOw0KICAgIGlmIChhdmFpbGFibGUxIDwgYXZhaWxhYmxlMikgcmV0dXJuIGF2YWlsYWJsZTE7DQogICAgcmV0dXJuIGF2YWlsYWJsZTI7DQogIH0NCg0KICBmdW5jdGlvbiBhbW91bnRGaWxsZWQoYWRkcmVzcyBfdG9rZW5HZXQsIHVpbnQgX2Ftb3VudEdldCwgYWRkcmVzcyBfdG9rZW5HaXZlLCB1aW50IF9hbW91bnRHaXZlLCB1aW50IF9leHBpcmVzLA0KICAgICAgdWludCBfbm9uY2UsIGFkZHJlc3MgX3VzZXIpIGNvbnN0YW50IHJldHVybnModWludCkgew0KICAgIGJ5dGVzMzIgaGFzaCA9IHNoYTI1Nih0aGlzLCBfdG9rZW5HZXQsIF9hbW91bnRHZXQsIF90b2tlbkdpdmUsIF9hbW91bnRHaXZlLCBfZXhwaXJlcywgX25vbmNlKTsNCiAgICByZXR1cm4gb3JkZXJGaWxsc1tfdXNlcl1baGFzaF07DQogIH0NCg0KICBmdW5jdGlvbiBjYW5jZWxPcmRlcihhZGRyZXNzIF90b2tlbkdldCwgdWludCBfYW1vdW50R2V0LCBhZGRyZXNzIF90b2tlbkdpdmUsIHVpbnQgX2Ftb3VudEdpdmUsIHVpbnQgX2V4cGlyZXMsDQogICAgICB1aW50IF9ub25jZSwgdWludDggX3YsIGJ5dGVzMzIgX3IsIGJ5dGVzMzIgX3MpIHsNCiAgICBieXRlczMyIGhhc2ggPSBzaGEyNTYodGhpcywgX3Rva2VuR2V0LCBfYW1vdW50R2V0LCBfdG9rZW5HaXZlLCBfYW1vdW50R2l2ZSwgX2V4cGlyZXMsIF9ub25jZSk7DQogICAgaWYgKCEoZWNyZWNvdmVyKHNoYTMoIlx4MTlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcbjMyIiwgaGFzaCksIF92LCBfciwgX3MpID09IG1zZy5zZW5kZXIpKSB7DQogICAgICByZXZlcnQoKTsNCiAgICB9DQogICAgb3JkZXJGaWxsc1ttc2cuc2VuZGVyXVtoYXNoXSA9IF9hbW91bnRHZXQ7DQogICAgQ2FuY2VsKF90b2tlbkdldCwgX2Ftb3VudEdldCwgX3Rva2VuR2l2ZSwgX2Ftb3VudEdpdmUsIF9leHBpcmVzLCBfbm9uY2UsIG1zZy5zZW5kZXIsIF92LCBfciwgX3MpOw0KICB9DQogIA0KICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLw0KICAvLyBNaWdyYXRpb25zDQogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vDQoNCiAgLy8gVXNlci10cmlnZ2VyZWQgKCEpIGZ1bmQgbWlncmF0aW9ucyBpbiBjYXNlIGNvbnRyYWN0IGdvdCB1cGRhdGVkDQogIC8vIFNpbWlsYXIgdG8gd2l0aGRyYXcgYnV0IHdlIHVzZSBhIHN1Y2Nlc3NvciBhY2NvdW50IGluc3RlYWQNCiAgLy8gQXMgd2UgZG9uJ3Qgc3RvcmUgdXNlciB0b2tlbnMgbGlzdCBvbiBjaGFpbiwgaXQgaGFzIHRvIGJlIHBhc3NlZCBmcm9tIHRoZSBvdXRzaWRlDQogIGZ1bmN0aW9uIG1pZ3JhdGVGdW5kcyhhZGRyZXNzW10gX3Rva2Vucykgew0KICANCiAgICAvLyBHZXQgdGhlIGxhdGVzdCBzdWNjZXNzb3IgaW4gdGhlIGNoYWluDQogICAgcmVxdWlyZShzdWNjZXNzb3IgIT0gYWRkcmVzcygwKSk7DQogICAgVG9rZW5TdG9yZSBuZXdFeGNoYW5nZSA9IFRva2VuU3RvcmUoc3VjY2Vzc29yKTsNCiAgICBmb3IgKHVpbnQxNiBuID0gMDsgbiA8IDIwOyBuKyspIHsgIC8vIFdlIHdpbGwgbG9vayBwYXN0IDIwIGNvbnRyYWN0cyBpbiB0aGUgZnV0dXJlDQogICAgICBhZGRyZXNzIG5leHRTdWNjZXNzb3IgPSBuZXdFeGNoYW5nZS5zdWNjZXNzb3IoKTsNCiAgICAgIGlmIChuZXh0U3VjY2Vzc29yID09IGFkZHJlc3ModGhpcykpIHsgIC8vIENpcmN1bGFyIHN1Y2Nlc3Npb24NCiAgICAgICAgcmV2ZXJ0KCk7DQogICAgICB9DQogICAgICBpZiAobmV4dFN1Y2Nlc3NvciA9PSBhZGRyZXNzKDApKSB7IC8vIFdlIHJlYWNoZWQgdGhlIG5ld2VzdCwgc3RvcA0KICAgICAgICBicmVhazsNCiAgICAgIH0NCiAgICAgIG5ld0V4Y2hhbmdlID0gVG9rZW5TdG9yZShuZXh0U3VjY2Vzc29yKTsNCiAgICB9DQoNCiAgICAvLyBFdGhlcg0KICAgIHVpbnQgZXRoZXJBbW91bnQgPSB0b2tlbnNbMF1bbXNnLnNlbmRlcl07DQogICAgaWYgKGV0aGVyQW1vdW50ID4gMCkgew0KICAgICAgdG9rZW5zWzBdW21zZy5zZW5kZXJdID0gMDsNCiAgICAgIG5ld0V4Y2hhbmdlLmRlcG9zaXRGb3JVc2VyLnZhbHVlKGV0aGVyQW1vdW50KShtc2cuc2VuZGVyKTsNCiAgICB9DQoNCiAgICAvLyBUb2tlbnMNCiAgICBmb3IgKG4gPSAwOyBuIDwgX3Rva2Vucy5sZW5ndGg7IG4rKykgew0KICAgICAgYWRkcmVzcyB0b2tlbiA9IF90b2tlbnNbbl07DQogICAgICByZXF1aXJlKHRva2VuICE9IGFkZHJlc3MoMCkpOyAvLyAwID0gRXRoZXIsIHdlIGhhbmRsZSBpdCBhYm92ZQ0KICAgICAgdWludCB0b2tlbkFtb3VudCA9IHRva2Vuc1t0b2tlbl1bbXNnLnNlbmRlcl07DQogICAgICBpZiAodG9rZW5BbW91bnQgPT0gMCkgew0KICAgICAgICBjb250aW51ZTsNCiAgICAgIH0NCiAgICAgIGlmICghVG9rZW4odG9rZW4pLmFwcHJvdmUobmV3RXhjaGFuZ2UsIHRva2VuQW1vdW50KSkgew0KICAgICAgICByZXZlcnQoKTsNCiAgICAgIH0NCiAgICAgIHRva2Vuc1t0b2tlbl1bbXNnLnNlbmRlcl0gPSAwOw0KICAgICAgbmV3RXhjaGFuZ2UuZGVwb3NpdFRva2VuRm9yVXNlcih0b2tlbiwgdG9rZW5BbW91bnQsIG1zZy5zZW5kZXIpOw0KICAgIH0NCg0KICAgIEZ1bmRzTWlncmF0ZWQobXNnLnNlbmRlcik7DQogIH0NCg0KICAvLyBUaGlzIGlzIHVzZWQgZm9yIG1pZ3JhdGlvbnMgb25seS4gVG8gYmUgY2FsbGVkIGJ5IHByZXZpb3VzIGV4Y2hhbmdlIG9ubHksDQogIC8vIHVzZXItdHJpZ2dlcmVkLCBvbiBiZWhhbGYgb2YgdGhlIHVzZXIgY2FsbGVkIHRoZSBtaWdyYXRlRnVuZHMgbWV0aG9kLg0KICAvLyBOb3RlIHRoYXQgaXQgZG9lcyBleGFjdGx5IHRoZSBzYW1lIGFzIGRlcG9zaXRUb2tlbiwgYnV0IGFzIHRoaXMgaXMgY2FsbGVkDQogIC8vIGJ5IGEgcHJldmlvdXMgZ2VuZXJhdGlvbiBvZiBleGNoYW5nZSBpdHNlbGYsIHdlIGNyZWRpdCBpbnRlcm5hbGx5IG5vdCB0aGUNCiAgLy8gcHJldmlvdXMgZXhjaGFuZ2UsIGJ1dCB0aGUgdXNlciBpdCB3YXMgY2FsbGVkIGZvci4NCiAgZnVuY3Rpb24gZGVwb3NpdEZvclVzZXIoYWRkcmVzcyBfdXNlcikgcGF5YWJsZSBkZXByZWNhYmxlIHsNCiAgICByZXF1aXJlKF91c2VyICE9IGFkZHJlc3MoMCkpOw0KICAgIHJlcXVpcmUobXNnLnZhbHVlID4gMCk7DQogICAgVG9rZW5TdG9yZSBjYWxsZXIgPSBUb2tlblN0b3JlKG1zZy5zZW5kZXIpOw0KICAgIHJlcXVpcmUoY2FsbGVyLnZlcnNpb24oKSA+IDApOyAvLyBNYWtlIHN1cmUgaXQncyBhbiBleGNoYW5nZSBhY2NvdW50DQogICAgdG9rZW5zWzBdW191c2VyXSA9IHNhZmVBZGQodG9rZW5zWzBdW191c2VyXSwgbXNnLnZhbHVlKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGRlcG9zaXRUb2tlbkZvclVzZXIoYWRkcmVzcyBfdG9rZW4sIHVpbnQgX2Ftb3VudCwgYWRkcmVzcyBfdXNlcikgZGVwcmVjYWJsZSB7DQogICAgcmVxdWlyZShfdG9rZW4gIT0gYWRkcmVzcygwKSk7DQogICAgcmVxdWlyZShfdXNlciAhPSBhZGRyZXNzKDApKTsNCiAgICByZXF1aXJlKF9hbW91bnQgPiAwKTsNCiAgICBUb2tlblN0b3JlIGNhbGxlciA9IFRva2VuU3RvcmUobXNnLnNlbmRlcik7DQogICAgcmVxdWlyZShjYWxsZXIudmVyc2lvbigpID4gMCk7IC8vIE1ha2Ugc3VyZSBpdCdzIGFuIGV4Y2hhbmdlIGFjY291bnQNCiAgICBpZiAoIVRva2VuKF90b2tlbikudHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIHRoaXMsIF9hbW91bnQpKSB7DQogICAgICByZXZlcnQoKTsNCiAgICB9DQogICAgdG9rZW5zW190b2tlbl1bX3VzZXJdID0gc2FmZUFkZCh0b2tlbnNbX3Rva2VuXVtfdXNlcl0sIF9hbW91bnQpOw0KICB9DQp9'