base 64 content
base64tokenTrader
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLy9odHRwczovL2dpdGh1Yi5jb20vbmV4dXNkZXYvZXJjMjAvYmxvYi9tYXN0ZXIvY29udHJhY3RzL2VyYzIwLnNvbA0KDQpjb250cmFjdCBFUkMyMENvbnN0YW50IHsNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoIGFkZHJlc3Mgd2hvICkgY29uc3RhbnQgcmV0dXJucyAodWludCB2YWx1ZSk7DQp9DQpjb250cmFjdCBFUkMyMFN0YXRlZnVsIHsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlciggYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7DQp9DQpjb250cmFjdCBFUkMyMEV2ZW50cyB7DQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7DQp9DQpjb250cmFjdCBFUkMyMCBpcyBFUkMyMENvbnN0YW50LCBFUkMyMFN0YXRlZnVsLCBFUkMyMEV2ZW50cyB7fQ0KDQpjb250cmFjdCBvd25lZCB7DQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQoNCiAgICBmdW5jdGlvbiBvd25lZCgpIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgIH0NCg0KICAgIG1vZGlmaWVyIG9ubHlPd25lciB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgew0KICAgICAgICBvd25lciA9IG5ld093bmVyOw0KICAgIH0NCn0NCg0KLy8gY29udHJhY3QgY2FuIHNlbGwgdG9rZW5zIGZvciBFVEgNCi8vIHByaWNlcyBhcmUgaW4gYW1vdW50IG9mIHdlaSBwZXIgYmF0Y2ggb2YgdG9rZW4gdW5pdHMNCg0KY29udHJhY3QgVG9rZW5UcmFkZXIgaXMgb3duZWQgew0KDQogICAgYWRkcmVzcyBwdWJsaWMgYXNzZXQ7ICAgICAgIC8vIGFkZHJlc3Mgb2YgdG9rZW4NCiAgICB1aW50MjU2IHB1YmxpYyBzZWxsUHJpY2U7ICAgLy8gY29udHJhY3Qgc2VsbHMgbG90cyBvZiB0b2tlbnMgYXQgdGhpcyBwcmljZQ0KICAgIHVpbnQyNTYgcHVibGljIHVuaXRzOyAgICAgICAvLyBsb3Qgc2l6ZSAodG9rZW4td2VpKQ0KDQogICAgYm9vbCBwdWJsaWMgc2VsbHNUb2tlbnM7ICAgIC8vIGlzIGNvbnRyYWN0IHNlbGxpbmcNCg0KICAgIGV2ZW50IEFjdGl2YXRlZEV2ZW50KGJvb2wgc2VsbHMpOw0KICAgIGV2ZW50IFVwZGF0ZUV2ZW50KCk7DQoNCiAgICBmdW5jdGlvbiBUb2tlblRyYWRlciAoDQogICAgICAgIGFkZHJlc3MgX2Fzc2V0LCANCiAgICAgICAgdWludDI1NiBfc2VsbFByaWNlLCANCiAgICAgICAgdWludDI1NiBfdW5pdHMsDQogICAgICAgIGJvb2wgICAgX3NlbGxzVG9rZW5zDQogICAgICAgICkNCiAgICB7DQogICAgICAgICAgYXNzZXQgICAgICAgICA9IF9hc3NldDsgDQogICAgICAgICAgc2VsbFByaWNlICAgID0gX3NlbGxQcmljZTsNCiAgICAgICAgICB1bml0cyAgICAgICAgID0gX3VuaXRzOyANCiAgICAgICAgICBzZWxsc1Rva2VucyAgID0gX3NlbGxzVG9rZW5zOw0KDQogICAgICAgICAgQWN0aXZhdGVkRXZlbnQoc2VsbHNUb2tlbnMpOw0KICAgIH0NCg0KICAgIC8vIG1vZGlmeSB0cmFkaW5nIGJlaGF2aW9yDQogICAgZnVuY3Rpb24gYWN0aXZhdGUgKA0KICAgICAgICBib29sICAgIF9zZWxsc1Rva2Vucw0KICAgICAgICApIG9ubHlPd25lcg0KICAgIHsNCiAgICAgICAgICBzZWxsc1Rva2VucyAgID0gX3NlbGxzVG9rZW5zOw0KDQogICAgICAgICAgQWN0aXZhdGVkRXZlbnQoc2VsbHNUb2tlbnMpOw0KICAgIH0NCg0KICAgIC8vIGFsbG93IG93bmVyIHRvIHJlbW92ZSB0cmFkZSB0b2tlbg0KICAgIGZ1bmN0aW9uIHdpdGhkcmF3QXNzZXQodWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIG9rKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIEVSQzIwKGFzc2V0KS50cmFuc2Zlcihvd25lcixfdmFsdWUpOw0KICAgICAgICBVcGRhdGVFdmVudCgpOw0KICAgIH0NCg0KICAgIC8vIGFsbG93IG93bmVyIHRvIHJlbW92ZSBhcmJpdHJhcnkgdG9rZW5zDQogICAgLy8gaW5jbHVkZWQganVzdCBpbiBjYXNlIGNvbnRyYWN0IHJlY2VpdmVzIHdyb25nIHRva2VuDQogICAgZnVuY3Rpb24gd2l0aGRyYXdUb2tlbihhZGRyZXNzIF90b2tlbiwgdWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIG9rKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIEVSQzIwKF90b2tlbikudHJhbnNmZXIob3duZXIsX3ZhbHVlKTsNCiAgICAgICAgVXBkYXRlRXZlbnQoKTsNCiAgICB9DQoNCiAgICAvLyBhbGxvdyBvd25lciB0byByZW1vdmUgRVRIDQogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiBfdmFsdWUpIG9ubHlPd25lciByZXR1cm5zIChib29sIG9rKQ0KICAgIHsNCiAgICAgICAgaWYodGhpcy5iYWxhbmNlID49IF92YWx1ZSkgew0KICAgICAgICAgICAgcmV0dXJuIG93bmVyLnNlbmQoX3ZhbHVlKTsNCiAgICAgICAgfQ0KICAgICAgICBVcGRhdGVFdmVudCgpOw0KICAgIH0NCg0KICAgIC8vdXNlciBidXlzIHRva2VuIHdpdGggRVRIDQogICAgZnVuY3Rpb24gYnV5KCkgcGF5YWJsZSB7DQogICAgICAgIGlmKHNlbGxzVG9rZW5zIHx8IG1zZy5zZW5kZXIgPT0gb3duZXIpIA0KICAgICAgICB7DQogICAgICAgICAgICB1aW50IG9yZGVyICAgPSBtc2cudmFsdWUgLyBzZWxsUHJpY2U7IA0KICAgICAgICAgICAgdWludCBjYW5fc2VsbCA9IEVSQzIwKGFzc2V0KS5iYWxhbmNlT2YoYWRkcmVzcyh0aGlzKSkgLyB1bml0czsNCg0KICAgICAgICAgICAgaWYob3JkZXIgPiBjYW5fc2VsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB1aW50MjU2IGNoYW5nZSA9IG1zZy52YWx1ZSAtIChjYW5fc2VsbCAqIHNlbGxQcmljZSk7DQogICAgICAgICAgICAgICAgb3JkZXIgPSBjYW5fc2VsbDsNCiAgICAgICAgICAgICAgICBpZighbXNnLnNlbmRlci5zZW5kKGNoYW5nZSkpIHRocm93Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZihvcmRlciA+IDApIHsNCiAgICAgICAgICAgICAgICBpZighRVJDMjAoYXNzZXQpLnRyYW5zZmVyKG1zZy5zZW5kZXIsb3JkZXIgKiB1bml0cykpIHRocm93Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgVXBkYXRlRXZlbnQoKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIGlmKCFtc2cuc2VuZGVyLnNlbmQobXNnLnZhbHVlKSkgdGhyb3c7ICAvLyByZXR1cm4gdXNlciBmdW5kcyBpZiB0aGUgY29udHJhY3QgaXMgbm90IHNlbGxpbmcNCiAgICB9DQoNCiAgICAvLyBzZW5kaW5nIEVUSCB0byBjb250cmFjdCBzZWxscyBHTlQgdG8gdXNlcg0KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgew0KICAgICAgICBidXkoKTsNCiAgICB9DQp9DQoNCi8vIFRoaXMgY29udHJhY3QgZGVwbG95cyBUb2tlblRyYWRlciBjb250cmFjdHMgYW5kIGxvZ3MgdGhlIGV2ZW50DQovLyB0cmFkZSBwYWlycyBhcmUgaWRlbnRpZmllZCB3aXRoIHNoYTMoYXNzZXQsdW5pdHMpDQoNCmNvbnRyYWN0IFRva2VuVHJhZGVyRmFjdG9yeSB7DQoNCiAgICBldmVudCBUcmFkZUxpc3RpbmcoYnl0ZXMzMiBib29raWQsIGFkZHJlc3Mgb3duZXIsIGFkZHJlc3MgYWRkcik7DQogICAgZXZlbnQgTmV3Qm9vayhieXRlczMyIGJvb2tpZCwgYWRkcmVzcyBhc3NldCwgdWludDI1NiB1bml0cyk7DQoNCiAgICBtYXBwaW5nKCBhZGRyZXNzID0+IGJvb2wgKSBfdmVyaWZ5Ow0KICAgIG1hcHBpbmcoIGJ5dGVzMzIgPT4gYm9vbCApIHBhaXJFeGl0czsNCiAgICANCiAgICBmdW5jdGlvbiB2ZXJpZnkoYWRkcmVzcyB0cmFkZUNvbnRyYWN0KSAgY29uc3RhbnQgcmV0dXJucyAoDQogICAgICAgIGJvb2wgdmFsaWQsDQogICAgICAgIGFkZHJlc3MgYXNzZXQsIA0KICAgICAgICB1aW50MjU2IHNlbGxQcmljZSwgDQogICAgICAgIHVpbnQyNTYgdW5pdHMsDQogICAgICAgIGJvb2wgICAgc2VsbHNUb2tlbnMNCiAgICAgICAgKSB7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHZhbGlkID0gX3ZlcmlmeVt0cmFkZUNvbnRyYWN0XTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYodmFsaWQpIHsNCiAgICAgICAgICAgICAgICBUb2tlblRyYWRlciB0ID0gVG9rZW5UcmFkZXIodHJhZGVDb250cmFjdCk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgYXNzZXQgPSB0LmFzc2V0KCk7DQogICAgICAgICAgICAgICAgc2VsbFByaWNlID0gdC5zZWxsUHJpY2UoKTsNCiAgICAgICAgICAgICAgICB1bml0cyA9IHQudW5pdHMoKTsNCiAgICAgICAgICAgICAgICBzZWxsc1Rva2VucyA9IHQuc2VsbHNUb2tlbnMoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgDQogICAgfQ0KDQogICAgZnVuY3Rpb24gY3JlYXRlVHJhZGVDb250cmFjdCggICAgICAgDQogICAgICAgIGFkZHJlc3MgX2Fzc2V0LCANCiAgICAgICAgdWludDI1NiBfc2VsbFByaWNlLCANCiAgICAgICAgdWludDI1NiBfdW5pdHMsDQogICAgICAgIGJvb2wgICAgX3NlbGxzVG9rZW5zDQogICAgICAgICkgcmV0dXJucyAoYWRkcmVzcykgDQogICAgew0KICAgICAgICBpZihfdW5pdHMgPT0gMCkgdGhyb3c7ICAgICAgICAgICAgICAvLyBjYW4ndCBzZWxsIHplcm8gdW5pdHMNCg0KICAgICAgICBhZGRyZXNzIHRyYWRlciA9IG5ldyBUb2tlblRyYWRlciAoDQogICAgICAgICAgICAgICAgICAgICBfYXNzZXQsIA0KICAgICAgICAgICAgICAgICAgICAgX3NlbGxQcmljZSwgDQogICAgICAgICAgICAgICAgICAgICBfdW5pdHMsDQogICAgICAgICAgICAgICAgICAgICBfc2VsbHNUb2tlbnMpOw0KDQogICAgICAgIHZhciBib29raWQgPSBzaGEzKF9hc3NldCxfdW5pdHMpOw0KDQogICAgICAgIF92ZXJpZnlbdHJhZGVyXSA9IHRydWU7IC8vIHJlY29yZCB0aGF0IHRoaXMgZmFjdG9yeSBjcmVhdGVkIHRoZSB0cmFkZXINCg0KICAgICAgICBUb2tlblRyYWRlcih0cmFkZXIpLnRyYW5zZmVyT3duZXJzaGlwKG1zZy5zZW5kZXIpOyAvLyBzZXQgdGhlIG93bmVyIHRvIHdob2V2ZXIgY2FsbGVkIHRoZSBmdW5jdGlvbg0KDQogICAgICAgIGlmKHBhaXJFeGl0c1tib29raWRdID09IGZhbHNlKSB7DQogICAgICAgICAgICBwYWlyRXhpdHNbYm9va2lkXSA9IHRydWU7DQogICAgICAgICAgICBOZXdCb29rKGJvb2tpZCwgX2Fzc2V0LCBfdW5pdHMpOw0KICAgICAgICB9DQoNCiAgICAgICAgVHJhZGVMaXN0aW5nKGJvb2tpZCxtc2cuc2VuZGVyLHRyYWRlcik7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gKCkgew0KICAgICAgICB0aHJvdzsgICAgIC8vIFByZXZlbnRzIGFjY2lkZW50YWwgc2VuZGluZyBvZiBldGhlciB0byB0aGUgZmFjdG9yeQ0KICAgIH0NCn0='