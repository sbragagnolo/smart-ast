base 64 content
base64tokenTrader1
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4wOw0KDQovL2h0dHBzOi8vZ2l0aHViLmNvbS9uZXh1c2Rldi9lcmMyMC9ibG9iL21hc3Rlci9jb250cmFjdHMvZXJjMjAuc29sDQoNCmNvbnRyYWN0IEVSQzIwQ29uc3RhbnQgew0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZiggYWRkcmVzcyB3aG8gKSBjb25zdGFudCByZXR1cm5zICh1aW50IHZhbHVlKTsNCn0NCmNvbnRyYWN0IEVSQzIwU3RhdGVmdWwgew0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsNCn0NCmNvbnRyYWN0IEVSQzIwRXZlbnRzIHsNCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsNCn0NCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQ29uc3RhbnQsIEVSQzIwU3RhdGVmdWwsIEVSQzIwRXZlbnRzIHt9DQoNCmNvbnRyYWN0IG93bmVkIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCg0KICAgIGZ1bmN0aW9uIG93bmVkKCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgfQ0KDQogICAgbW9kaWZpZXIgb25seU93bmVyIHsNCiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHRocm93Ow0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3MgbmV3T3duZXIpIG9ubHlPd25lciB7DQogICAgICAgIG93bmVyID0gbmV3T3duZXI7DQogICAgfQ0KfQ0KDQovLyBjb250cmFjdCBjYW4gc2VsbCB0b2tlbnMgZm9yIEVUSA0KLy8gcHJpY2VzIGFyZSBpbiBhbW91bnQgb2Ygd2VpIHBlciBiYXRjaCBvZiB0b2tlbiB1bml0cw0KDQpjb250cmFjdCBUb2tlblRyYWRlciBpcyBvd25lZCB7DQoNCiAgICBhZGRyZXNzIHB1YmxpYyBhc3NldDsgICAgICAgLy8gYWRkcmVzcyBvZiB0b2tlbg0KICAgIHVpbnQyNTYgcHVibGljIHNlbGxQcmljZTsgICAvLyBjb250cmFjdCBzZWxscyBsb3RzIG9mIHRva2VucyBhdCB0aGlzIHByaWNlDQogICAgdWludDI1NiBwdWJsaWMgdW5pdHM7ICAgICAgIC8vIGxvdCBzaXplICh0b2tlbi13ZWkpDQoNCiAgICBib29sIHB1YmxpYyBzZWxsc1Rva2VuczsgICAgLy8gaXMgY29udHJhY3Qgc2VsbGluZw0KDQogICAgZXZlbnQgQWN0aXZhdGVkRXZlbnQoYm9vbCBzZWxscyk7DQogICAgZXZlbnQgVXBkYXRlRXZlbnQoKTsNCg0KICAgIGZ1bmN0aW9uIFRva2VuVHJhZGVyICgNCiAgICAgICAgYWRkcmVzcyBfYXNzZXQsIA0KICAgICAgICB1aW50MjU2IF9zZWxsUHJpY2UsIA0KICAgICAgICB1aW50MjU2IF91bml0cywNCiAgICAgICAgYm9vbCAgICBfc2VsbHNUb2tlbnMNCiAgICAgICAgKQ0KICAgIHsNCiAgICAgICAgICBhc3NldCAgICAgICAgID0gX2Fzc2V0OyANCiAgICAgICAgICBzZWxsUHJpY2UgICAgPSBfc2VsbFByaWNlOw0KICAgICAgICAgIHVuaXRzICAgICAgICAgPSBfdW5pdHM7IA0KICAgICAgICAgIHNlbGxzVG9rZW5zICAgPSBfc2VsbHNUb2tlbnM7DQoNCiAgICAgICAgICBBY3RpdmF0ZWRFdmVudChzZWxsc1Rva2Vucyk7DQogICAgfQ0KDQogICAgLy8gbW9kaWZ5IHRyYWRpbmcgYmVoYXZpb3INCiAgICBmdW5jdGlvbiBhY3RpdmF0ZSAoDQogICAgICAgIGJvb2wgICAgX3NlbGxzVG9rZW5zDQogICAgICAgICkgb25seU93bmVyDQogICAgew0KICAgICAgICAgIHNlbGxzVG9rZW5zICAgPSBfc2VsbHNUb2tlbnM7DQoNCiAgICAgICAgICBBY3RpdmF0ZWRFdmVudChzZWxsc1Rva2Vucyk7DQogICAgfQ0KDQogICAgLy8gYWxsb3cgb3duZXIgdG8gcmVtb3ZlIHRyYWRlIHRva2VuDQogICAgZnVuY3Rpb24gd2l0aGRyYXdBc3NldCh1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spDQogICAgew0KICAgICAgICByZXR1cm4gRVJDMjAoYXNzZXQpLnRyYW5zZmVyKG93bmVyLF92YWx1ZSk7DQogICAgICAgIFVwZGF0ZUV2ZW50KCk7DQogICAgfQ0KDQogICAgLy8gYWxsb3cgb3duZXIgdG8gcmVtb3ZlIGFyYml0cmFyeSB0b2tlbnMNCiAgICAvLyBpbmNsdWRlZCBqdXN0IGluIGNhc2UgY29udHJhY3QgcmVjZWl2ZXMgd3JvbmcgdG9rZW4NCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VuKGFkZHJlc3MgX3Rva2VuLCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spDQogICAgew0KICAgICAgICByZXR1cm4gRVJDMjAoX3Rva2VuKS50cmFuc2Zlcihvd25lcixfdmFsdWUpOw0KICAgICAgICBVcGRhdGVFdmVudCgpOw0KICAgIH0NCg0KICAgIC8vIGFsbG93IG93bmVyIHRvIHJlbW92ZSBFVEgNCiAgICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spDQogICAgew0KICAgICAgICBpZih0aGlzLmJhbGFuY2UgPj0gX3ZhbHVlKSB7DQogICAgICAgICAgICByZXR1cm4gb3duZXIuc2VuZChfdmFsdWUpOw0KICAgICAgICB9DQogICAgICAgIFVwZGF0ZUV2ZW50KCk7DQogICAgfQ0KDQogICAgLy91c2VyIGJ1eXMgdG9rZW4gd2l0aCBFVEgNCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHsNCiAgICAgICAgaWYoc2VsbHNUb2tlbnMgfHwgbXNnLnNlbmRlciA9PSBvd25lcikgDQogICAgICAgIHsNCiAgICAgICAgICAgIHVpbnQgb3JkZXIgICA9IG1zZy52YWx1ZSAvIHNlbGxQcmljZTsgDQogICAgICAgICAgICB1aW50IGNhbl9zZWxsID0gRVJDMjAoYXNzZXQpLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSAvIHVuaXRzOw0KDQogICAgICAgICAgICBpZihvcmRlciA+IGNhbl9zZWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHVpbnQyNTYgY2hhbmdlID0gbXNnLnZhbHVlIC0gKGNhbl9zZWxsICogc2VsbFByaWNlKTsNCiAgICAgICAgICAgICAgICBvcmRlciA9IGNhbl9zZWxsOw0KICAgICAgICAgICAgICAgIGlmKCFtc2cuc2VuZGVyLnNlbmQoY2hhbmdlKSkgdGhyb3c7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmKG9yZGVyID4gMCkgew0KICAgICAgICAgICAgICAgIGlmKCFFUkMyMChhc3NldCkudHJhbnNmZXIobXNnLnNlbmRlcixvcmRlciAqIHVuaXRzKSkgdGhyb3c7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBVcGRhdGVFdmVudCgpOw0KICAgICAgICB9DQogICAgICAgIGVsc2UgaWYoIW1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpKSB0aHJvdzsgIC8vIHJldHVybiB1c2VyIGZ1bmRzIGlmIHRoZSBjb250cmFjdCBpcyBub3Qgc2VsbGluZw0KICAgIH0NCg0KICAgIC8vIHNlbmRpbmcgRVRIIHRvIGNvbnRyYWN0IHNlbGxzIEdOVCB0byB1c2VyDQogICAgZnVuY3Rpb24gKCkgcGF5YWJsZSB7DQogICAgICAgIGJ1eSgpOw0KICAgIH0NCn0NCg0KLy8gVGhpcyBjb250cmFjdCBkZXBsb3lzIFRva2VuVHJhZGVyIGNvbnRyYWN0cyBhbmQgbG9ncyB0aGUgZXZlbnQNCi8vIHRyYWRlIHBhaXJzIGFyZSBpZGVudGlmaWVkIHdpdGggc2hhMyhhc3NldCx1bml0cykNCg0KY29udHJhY3QgVG9rZW5UcmFkZXJGYWN0b3J5IHsNCg0KICAgIGV2ZW50IFRyYWRlTGlzdGluZyhieXRlczMyIGJvb2tpZCwgYWRkcmVzcyBvd25lciwgYWRkcmVzcyBhZGRyKTsNCiAgICBldmVudCBOZXdCb29rKGJ5dGVzMzIgYm9va2lkLCBhZGRyZXNzIGFzc2V0LCB1aW50MjU2IHVuaXRzKTsNCg0KICAgIG1hcHBpbmcoIGFkZHJlc3MgPT4gYm9vbCApIF92ZXJpZnk7DQogICAgbWFwcGluZyggYnl0ZXMzMiA9PiBib29sICkgcGFpckV4aXRzOw0KDQogICAgZnVuY3Rpb24gdmVyaWZ5KGFkZHJlc3MgdHJhZGVDb250cmFjdCkgIGNvbnN0YW50IHJldHVybnMgKA0KICAgICAgICBib29sIHZhbGlkLA0KICAgICAgICBhZGRyZXNzIGFzc2V0LCANCiAgICAgICAgdWludDI1NiBzZWxsUHJpY2UsIA0KICAgICAgICB1aW50MjU2IHVuaXRzLA0KICAgICAgICBib29sICAgIHNlbGxzVG9rZW5zDQogICAgICAgICkgew0KDQogICAgICAgICAgICB2YWxpZCA9IF92ZXJpZnlbdHJhZGVDb250cmFjdF07DQoNCiAgICAgICAgICAgIGlmKHZhbGlkKSB7DQogICAgICAgICAgICAgICAgVG9rZW5UcmFkZXIgdCA9IFRva2VuVHJhZGVyKHRyYWRlQ29udHJhY3QpOw0KDQogICAgICAgICAgICAgICAgYXNzZXQgPSB0LmFzc2V0KCk7DQogICAgICAgICAgICAgICAgc2VsbFByaWNlID0gdC5zZWxsUHJpY2UoKTsNCiAgICAgICAgICAgICAgICB1bml0cyA9IHQudW5pdHMoKTsNCiAgICAgICAgICAgICAgICBzZWxsc1Rva2VucyA9IHQuc2VsbHNUb2tlbnMoKTsNCiAgICAgICAgICAgIH0NCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGNyZWF0ZVRyYWRlQ29udHJhY3QoICAgICAgIA0KICAgICAgICBhZGRyZXNzIF9hc3NldCwgDQogICAgICAgIHVpbnQyNTYgX3NlbGxQcmljZSwgDQogICAgICAgIHVpbnQyNTYgX3VuaXRzLA0KICAgICAgICBib29sICAgIF9zZWxsc1Rva2Vucw0KICAgICAgICApIHJldHVybnMgKGFkZHJlc3MpIA0KICAgIHsNCiAgICAgICAgaWYoX3VuaXRzID09IDApIHRocm93OyAgICAgICAgICAgICAgLy8gY2FuJ3Qgc2VsbCB6ZXJvIHVuaXRzDQoNCiAgICAgICAgYWRkcmVzcyB0cmFkZXIgPSBuZXcgVG9rZW5UcmFkZXIgKA0KICAgICAgICAgICAgICAgICAgICAgX2Fzc2V0LCANCiAgICAgICAgICAgICAgICAgICAgIF9zZWxsUHJpY2UsIA0KICAgICAgICAgICAgICAgICAgICAgX3VuaXRzLA0KICAgICAgICAgICAgICAgICAgICAgX3NlbGxzVG9rZW5zKTsNCg0KICAgICAgICB2YXIgYm9va2lkID0gc2hhMyhfYXNzZXQsX3VuaXRzKTsNCg0KICAgICAgICBfdmVyaWZ5W3RyYWRlcl0gPSB0cnVlOyAvLyByZWNvcmQgdGhhdCB0aGlzIGZhY3RvcnkgY3JlYXRlZCB0aGUgdHJhZGVyDQoNCiAgICAgICAgVG9rZW5UcmFkZXIodHJhZGVyKS50cmFuc2Zlck93bmVyc2hpcChtc2cuc2VuZGVyKTsgLy8gc2V0IHRoZSBvd25lciB0byB3aG9ldmVyIGNhbGxlZCB0aGUgZnVuY3Rpb24NCg0KICAgICAgICBpZihwYWlyRXhpdHNbYm9va2lkXSA9PSBmYWxzZSkgew0KICAgICAgICAgICAgcGFpckV4aXRzW2Jvb2tpZF0gPSB0cnVlOw0KICAgICAgICAgICAgTmV3Qm9vayhib29raWQsIF9hc3NldCwgX3VuaXRzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFRyYWRlTGlzdGluZyhib29raWQsbXNnLnNlbmRlcix0cmFkZXIpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgdGhyb3c7ICAgICAvLyBQcmV2ZW50cyBhY2NpZGVudGFsIHNlbmRpbmcgb2YgZXRoZXIgdG8gdGhlIGZhY3RvcnkNCiAgICB9DQp9'