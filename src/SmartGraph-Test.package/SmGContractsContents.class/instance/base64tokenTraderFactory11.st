base 64 content
base64tokenTraderFactory11
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4wOw0KDQovL2h0dHBzOi8vZ2l0aHViLmNvbS9uZXh1c2Rldi9lcmMyMC9ibG9iL21hc3Rlci9jb250cmFjdHMvZXJjMjAuc29sDQoNCmNvbnRyYWN0IEVSQzIwQ29uc3RhbnQgew0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCBzdXBwbHkpOw0KICAgIGZ1bmN0aW9uIGJhbGFuY2VPZiggYWRkcmVzcyB3aG8gKSBjb25zdGFudCByZXR1cm5zICh1aW50IHZhbHVlKTsNCiAgICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IF9hbGxvd2FuY2UpOw0KfQ0KY29udHJhY3QgRVJDMjBTdGF0ZWZ1bCB7DQogICAgZnVuY3Rpb24gdHJhbnNmZXIoIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbSggYWRkcmVzcyBmcm9tLCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsNCiAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7DQp9DQpjb250cmFjdCBFUkMyMEV2ZW50cyB7DQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7DQogICAgZXZlbnQgQXBwcm92YWwoIGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOw0KfQ0KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBDb25zdGFudCwgRVJDMjBTdGF0ZWZ1bCwgRVJDMjBFdmVudHMge30NCg0KY29udHJhY3Qgb3duZWQgew0KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOw0KDQogICAgZnVuY3Rpb24gb3duZWQoKSB7DQogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5T3duZXIgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsNCiAgICAgICAgb3duZXIgPSBuZXdPd25lcjsNCiAgICB9DQp9DQoNCi8vIGNvbnRyYWN0IGNhbiBidXkgb3Igc2VsbCB0b2tlbnMgZm9yIEVUSA0KLy8gcHJpY2VzIGFyZSBpbiBhbW91bnQgb2Ygd2VpIHBlciBiYXRjaCBvZiB0b2tlbiB1bml0cw0KDQpjb250cmFjdCBUb2tlblRyYWRlciBpcyBvd25lZCB7DQoNCiAgICBhZGRyZXNzIHB1YmxpYyBhc3NldDsgICAgICAgLy8gYWRkcmVzcyBvZiB0b2tlbg0KICAgIHVpbnQyNTYgcHVibGljIGJ1eVByaWNlOyAgIC8vIGNvbnRhY3QgYnV5cyBsb3RzIG9mIHRva2VuIGF0IHRoaXMgcHJpY2UNCiAgICB1aW50MjU2IHB1YmxpYyBzZWxsUHJpY2U7ICAvLyBjb250cmFjdCBzZWxscyBsb3RzIGF0IHRoaXMgcHJpY2UNCiAgICB1aW50MjU2IHB1YmxpYyB1bml0czsgICAgICAgLy8gbG90IHNpemUgKHRva2VuLXdlaSkNCg0KICAgIGJvb2wgcHVibGljIHNlbGxzVG9rZW5zOyAgICAvLyBpcyBjb250cmFjdCBzZWxsaW5nDQogICAgYm9vbCBwdWJsaWMgYnV5c1Rva2VuczsgICAgIC8vIGlzIGNvbnRyYWN0IGJ1eWluZw0KDQogICAgZXZlbnQgQWN0aXZhdGVkRXZlbnQoYm9vbCBzZWxscywgYm9vbCBidXlzKTsNCiAgICBldmVudCBVcGRhdGVFdmVudCgpOw0KDQogICAgZnVuY3Rpb24gVG9rZW5UcmFkZXIgKA0KICAgICAgICBhZGRyZXNzIF9hc3NldCwgDQogICAgICAgIHVpbnQyNTYgX2J1eVByaWNlLCANCiAgICAgICAgdWludDI1NiBfc2VsbFByaWNlLCANCiAgICAgICAgdWludDI1NiBfdW5pdHMsDQogICAgICAgIGJvb2wgICAgX3NlbGxzVG9rZW5zLA0KICAgICAgICBib29sICAgIF9idXlzVG9rZW5zDQogICAgICAgICkNCiAgICB7DQogICAgICAgICAgYXNzZXQgICAgICAgICA9IF9hc3NldDsgDQogICAgICAgICAgYnV5UHJpY2UgICAgID0gX2J1eVByaWNlOyANCiAgICAgICAgICBzZWxsUHJpY2UgICAgPSBfc2VsbFByaWNlOw0KICAgICAgICAgIHVuaXRzICAgICAgICAgPSBfdW5pdHM7IA0KICAgICAgICAgIHNlbGxzVG9rZW5zICAgPSBfc2VsbHNUb2tlbnM7DQogICAgICAgICAgYnV5c1Rva2VucyAgICA9IF9idXlzVG9rZW5zOw0KDQogICAgICAgICAgQWN0aXZhdGVkRXZlbnQoc2VsbHNUb2tlbnMsYnV5c1Rva2Vucyk7DQogICAgfQ0KDQogICAgLy8gbW9kaWZ5IHRyYWRpbmcgYmVoYXZpb3INCiAgICBmdW5jdGlvbiBhY3RpdmF0ZSAoDQogICAgICAgIGJvb2wgICAgX3NlbGxzVG9rZW5zLA0KICAgICAgICBib29sICAgIF9idXlzVG9rZW5zDQogICAgICAgICkNCiAgICB7DQogICAgICAgICAgc2VsbHNUb2tlbnMgICA9IF9zZWxsc1Rva2VuczsNCiAgICAgICAgICBidXlzVG9rZW5zICAgID0gX2J1eXNUb2tlbnM7DQoNCiAgICAgICAgICBBY3RpdmF0ZWRFdmVudChzZWxsc1Rva2VucyxidXlzVG9rZW5zKTsNCiAgICB9DQoNCiAgICAvLyBhbGxvd3Mgb3duZXIgdG8gZGVwb3NpdCBFVEgNCiAgICAvLyBkZXBvc2l0IHRva2VucyBieSBzZW5kaW5nIHRoZW0gZGlyZWN0bHkgdG8gY29udHJhY3QNCiAgICAvLyBidXllcnMgbXVzdCBub3Qgc2VuZCB0b2tlbnMgdG8gdGhlIGNvbnRyYWN0LCB1c2U6IHNlbGwoLi4uKQ0KICAgIGZ1bmN0aW9uIGRlcG9zaXQoKSBwYXlhYmxlIG9ubHlPd25lciB7DQogICAgfQ0KDQogICAgLy8gYWxsb3cgb3duZXIgdG8gcmVtb3ZlIHRyYWRlIHRva2VuDQogICAgZnVuY3Rpb24gd2l0aGRyYXdBc3NldCh1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spDQogICAgew0KICAgICAgICByZXR1cm4gRVJDMjAoYXNzZXQpLnRyYW5zZmVyKG93bmVyLF92YWx1ZSk7DQogICAgfQ0KDQogICAgLy8gYWxsb3cgb3duZXIgdG8gcmVtb3ZlIGFyYml0cmFyeSB0b2tlbnMNCiAgICAvLyBpbmNsdWRlZCBqdXN0IGluIGNhc2UgY29udHJhY3QgcmVjZWl2ZXMgd3JvbmcgdG9rZW4NCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2VuKGFkZHJlc3MgX3Rva2VuLCB1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spDQogICAgew0KICAgICAgICByZXR1cm4gRVJDMjAoX3Rva2VuKS50cmFuc2Zlcihvd25lcixfdmFsdWUpOw0KICAgIH0NCg0KICAgIC8vIGFsbG93IG93bmVyIHRvIHJlbW92ZSBFVEgNCiAgICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50MjU2IF92YWx1ZSkgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spDQogICAgew0KICAgICAgICBpZih0aGlzLmJhbGFuY2UgPj0gX3ZhbHVlKSB7DQogICAgICAgICAgICByZXR1cm4gb3duZXIuc2VuZChfdmFsdWUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy91c2VyIGJ1eXMgdG9rZW4gd2l0aCBFVEgNCiAgICBmdW5jdGlvbiBidXkoKSBwYXlhYmxlIHsNCiAgICAgICAgaWYoc2VsbHNUb2tlbnMgfHwgbXNnLnNlbmRlciA9PSBvd25lcikgDQogICAgICAgIHsNCiAgICAgICAgICAgIHVpbnQgb3JkZXIgICA9IG1zZy52YWx1ZSAvIHNlbGxQcmljZTsgDQogICAgICAgICAgICB1aW50IGNhbl9zZWxsID0gRVJDMjAoYXNzZXQpLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSAvIHVuaXRzOw0KDQogICAgICAgICAgICBpZihvcmRlciA+IGNhbl9zZWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHVpbnQyNTYgY2hhbmdlID0gbXNnLnZhbHVlIC0gKGNhbl9zZWxsICogc2VsbFByaWNlKTsNCiAgICAgICAgICAgICAgICBvcmRlciA9IGNhbl9zZWxsOw0KICAgICAgICAgICAgICAgIGlmKCFtc2cuc2VuZGVyLnNlbmQoY2hhbmdlKSkgdGhyb3c7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmKG9yZGVyID4gMCkgew0KICAgICAgICAgICAgICAgIGlmKCFFUkMyMChhc3NldCkudHJhbnNmZXIobXNnLnNlbmRlcixvcmRlciAqIHVuaXRzKSkgdGhyb3c7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBVcGRhdGVFdmVudCgpOw0KICAgICAgICB9DQogICAgICAgIGVsc2UgdGhyb3c7ICAvLyByZXR1cm4gdXNlciBmdW5kcyBpZiB0aGUgY29udHJhY3QgaXMgbm90IHNlbGxpbmcNCiAgICB9DQoNCiAgICAvLyB1c2VyIHNlbGxzIHRva2VuIGZvciBFVEgNCiAgICAvLyB1c2VyIG11c3Qgc2V0IGFsbG93YW5jZSBmb3IgdGhpcyBjb250cmFjdCBiZWZvcmUgY2FsbGluZw0KICAgIGZ1bmN0aW9uIHNlbGwodWludDI1NiBhbW91bnQpIHsNCiAgICAgICAgaWYgKGJ1eXNUb2tlbnMgfHwgbXNnLnNlbmRlciA9PSBvd25lcikgew0KICAgICAgICAgICAgdWludDI1NiBjYW5fYnV5ID0gdGhpcy5iYWxhbmNlIC8gYnV5UHJpY2U7ICAvLyB0b2tlbiBsb3RzIGNvbnRyYWN0IGNhbiBidXkNCiAgICAgICAgICAgIHVpbnQyNTYgb3JkZXIgPSBhbW91bnQgLyB1bml0czsgICAgICAgICAgICAgLy8gdG9rZW4gbG90cyBhdmFpbGFibGUNCg0KICAgICAgICAgICAgaWYob3JkZXIgPiBjYW5fYnV5KSBvcmRlciA9IGNhbl9idXk7ICAgICAgICAvLyBhZGp1c3Qgb3JkZXIgZm9yIGZ1bmRzDQoNCiAgICAgICAgICAgIGlmIChvcmRlciA+IDApDQogICAgICAgICAgICB7IA0KICAgICAgICAgICAgICAgIC8vIGV4dHJhY3QgdXNlciB0b2tlbnMNCiAgICAgICAgICAgICAgICBpZighRVJDMjAoYXNzZXQpLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCBhZGRyZXNzKHRoaXMpLCBhbW91bnQpKSB0aHJvdzsNCg0KICAgICAgICAgICAgICAgIC8vIHBheSB1c2VyDQogICAgICAgICAgICAgICAgaWYoIW1zZy5zZW5kZXIuc2VuZChvcmRlciAqIGJ1eVByaWNlKSkgdGhyb3c7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBVcGRhdGVFdmVudCgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8gc2VuZGluZyBFVEggdG8gY29udHJhY3Qgc2VsbHMgRVRIIHRvIHVzZXINCiAgICBmdW5jdGlvbiAoKSBwYXlhYmxlIHsNCiAgICAgICAgYnV5KCk7DQogICAgfQ0KfQ0KDQovLyBUaGlzIGNvbnRyYWN0IGRlcGxveXMgVG9rZW5UcmFkZXIgY29udHJhY3RzIGFuZCBsb2dzIHRoZSBldmVudA0KLy8gdHJhZGUgcGFpcnMgYXJlIGlkZW50aWZpZWQgd2l0aCBzaGEzKGFzc2V0LHVuaXRzKQ0KDQpjb250cmFjdCBUb2tlblRyYWRlckZhY3Rvcnkgew0KDQogICAgZXZlbnQgVHJhZGVMaXN0aW5nKGJ5dGVzMzIgYm9va2lkLCBhZGRyZXNzIG93bmVyLCBhZGRyZXNzIGFkZHIpOw0KICAgIGV2ZW50IE5ld0Jvb2soYnl0ZXMzMiBib29raWQsIGFkZHJlc3MgYXNzZXQsIHVpbnQyNTYgdW5pdHMpOw0KDQogICAgbWFwcGluZyggYWRkcmVzcyA9PiBib29sICkgcHVibGljIHZlcmlmeTsNCiAgICBtYXBwaW5nKCBieXRlczMyID0+IGJvb2wgKSBwYWlyRXhpdHM7DQoNCiAgICBmdW5jdGlvbiBjcmVhdGVUcmFkZUNvbnRyYWN0KCAgICAgICANCiAgICAgICAgYWRkcmVzcyBfYXNzZXQsIA0KICAgICAgICB1aW50MjU2IF9idXlQcmljZSwgDQogICAgICAgIHVpbnQyNTYgX3NlbGxQcmljZSwgDQogICAgICAgIHVpbnQyNTYgX3VuaXRzLA0KICAgICAgICBib29sICAgIF9zZWxsc1Rva2VucywNCiAgICAgICAgYm9vbCAgICBfYnV5c1Rva2Vucw0KICAgICAgICApIHJldHVybnMgKGFkZHJlc3MpIA0KICAgIHsNCiAgICAgICAgaWYoX2J1eVByaWNlID4gX3NlbGxQcmljZSkgdGhyb3c7IC8vIG11c3QgbWFrZSBwcm9maXQgb24gc3ByZWFkDQogICAgICAgIGlmKF91bml0cyA9PSAwKSB0aHJvdzsgICAgICAgICAgICAgIC8vIGNhbid0IHNlbGwgemVybyB1bml0cw0KDQogICAgICAgIGFkZHJlc3MgdHJhZGVyID0gbmV3IFRva2VuVHJhZGVyICgNCiAgICAgICAgICAgICAgICAgICAgIF9hc3NldCwgDQogICAgICAgICAgICAgICAgICAgICBfYnV5UHJpY2UsIA0KICAgICAgICAgICAgICAgICAgICAgX3NlbGxQcmljZSwgDQogICAgICAgICAgICAgICAgICAgICBfdW5pdHMsDQogICAgICAgICAgICAgICAgICAgICBfc2VsbHNUb2tlbnMsDQogICAgICAgICAgICAgICAgICAgICBfYnV5c1Rva2Vucyk7DQoNCiAgICAgICAgdmFyIGJvb2tpZCA9IHNoYTMoX2Fzc2V0LF91bml0cyk7DQoNCiAgICAgICAgdmVyaWZ5W3RyYWRlcl0gPSB0cnVlOyAvLyByZWNvcmQgdGhhdCB0aGlzIGZhY3RvcnkgY3JlYXRlZCB0aGUgdHJhZGVyDQoNCiAgICAgICAgVG9rZW5UcmFkZXIodHJhZGVyKS50cmFuc2Zlck93bmVyc2hpcChtc2cuc2VuZGVyKTsgLy8gc2V0IHRoZSBvd25lciB0byB3aG9ldmVyIGNhbGxlZCB0aGUgZnVuY3Rpb24NCg0KICAgICAgICBpZihwYWlyRXhpdHNbYm9va2lkXSA9PSBmYWxzZSkgew0KICAgICAgICAgICAgcGFpckV4aXRzW2Jvb2tpZF0gPSB0cnVlOw0KICAgICAgICAgICAgTmV3Qm9vayhib29raWQsIF9hc3NldCwgX3VuaXRzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFRyYWRlTGlzdGluZyhib29raWQsbXNnLnNlbmRlcix0cmFkZXIpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgdGhyb3c7ICAgICAvLyBQcmV2ZW50cyBhY2NpZGVudGFsIHNlbmRpbmcgb2YgZXRoZXIgdG8gdGhlIGZhY3RvcnkNCiAgICB9DQp9'