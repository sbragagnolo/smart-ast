base 64 content
base64tokenTraderFactory3
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC40Ow0KDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIFRva2VuVHJhZGVyRmFjdG9yeQ0KLy8NCi8vIERlY2VudHJhbGlzZWQgdHJ1c3RsZXNzIEVSQzIwLWNvbXBsaWFudCB0b2tlbiB0byBFVEggZXhjaGFuZ2UgY29udHJhY3QNCi8vIG9uIHRoZSBFdGhlcmV1bSBibG9ja2NoYWluLg0KLy8NCi8vIE5vdGUgdGhhdCB0aGlzIFRva2VuVHJhZGVyIGNhbm5vdCBiZSB1c2VkIHdpdGggdGhlIEdvbGVtIE5ldHdvcmsgVG9rZW4NCi8vIGRpcmVjdGx5IGFzIHRoZSB0b2tlbiBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIEVSQzIwDQovLyB0cmFuc2ZlckZyb20oLi4uKSwgYXBwcm92ZSguLi4pIGFuZCBhbGxvd2FuY2UoLi4uKSBtZXRob2RzDQovLw0KLy8gSGlzdG9yeToNCi8vICAgSmFuIDI1IDIwMTcgLSBCUEIgQWRkZWQgbWFrZXJUcmFuc2ZlckFzc2V0KC4uLikgYW5kDQovLyAgICAgICAgICAgICAgICAgICAgIG1ha2VyVHJhbnNmZXJFdGhlciguLi4pDQovLyAgIEZlYiAwNSAyMDE3IC0gQlBCIEJ1ZyBmaXggaW4gdGhlIGNoYW5nZSBjYWxjdWxhdGlvbiBmb3IgdGhlIFVuaWNvcm4NCi8vICAgICAgICAgICAgICAgICAgICAgdG9rZW4gd2l0aCBuYXR1cmFsIG51bWJlciAxDQovLw0KLy8gRW5qb3kuIChjKSBKb25ueUxhdHRlICYgQm9ra3lQb29CYWggMjAxNy4gVGhlIE1JVCBsaWNlbmNlLg0KLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMA0KY29udHJhY3QgRVJDMjAgew0KICAgIGZ1bmN0aW9uIHRvdGFsU3VwcGx5KCkgY29uc3RhbnQgcmV0dXJucyAodWludCB0b3RhbFN1cHBseSk7DQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IGJhbGFuY2UpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50IHJlbWFpbmluZyk7DQogICAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIF9mcm9tLCBhZGRyZXNzIGluZGV4ZWQgX3RvLCB1aW50IF92YWx1ZSk7DQogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50IF92YWx1ZSk7DQp9DQoNCmNvbnRyYWN0IE93bmVkIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCiAgICBldmVudCBPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8pOw0KDQogICAgZnVuY3Rpb24gT3duZWQoKSB7DQogICAgICAgIG93bmVyID0gbXNnLnNlbmRlcjsNCiAgICB9DQoNCiAgICBtb2RpZmllciBvbmx5T3duZXIgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgdGhyb3c7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgbW9kaWZpZXIgb25seU93bmVyT3JUb2tlblRyYWRlcldpdGhTYW1lT3duZXIgew0KICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lciAmJiBUb2tlblRyYWRlcihtc2cuc2VuZGVyKS5vd25lcigpICE9IG93bmVyKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzIG5ld093bmVyKSBvbmx5T3duZXIgew0KICAgICAgICBPd25lcnNoaXBUcmFuc2ZlcnJlZChvd25lciwgbmV3T3duZXIpOw0KICAgICAgICBvd25lciA9IG5ld093bmVyOw0KICAgIH0NCn0NCg0KLy8gY29udHJhY3QgY2FuIGJ1eSBvciBzZWxsIHRva2VucyBmb3IgRVRIDQovLyBwcmljZXMgYXJlIGluIGFtb3VudCBvZiB3ZWkgcGVyIGJhdGNoIG9mIHRva2VuIHVuaXRzDQoNCmNvbnRyYWN0IFRva2VuVHJhZGVyIGlzIE93bmVkIHsNCg0KICAgIGFkZHJlc3MgcHVibGljIGFzc2V0OyAgICAgICAvLyBhZGRyZXNzIG9mIHRva2VuDQogICAgdWludDI1NiBwdWJsaWMgYnV5UHJpY2U7ICAgIC8vIGNvbnRyYWN0IGJ1eXMgbG90cyBvZiB0b2tlbiBhdCB0aGlzIHByaWNlDQogICAgdWludDI1NiBwdWJsaWMgc2VsbFByaWNlOyAgIC8vIGNvbnRyYWN0IHNlbGxzIGxvdHMgYXQgdGhpcyBwcmljZQ0KICAgIHVpbnQyNTYgcHVibGljIHVuaXRzOyAgICAgICAvLyBsb3Qgc2l6ZSAodG9rZW4td2VpKQ0KDQogICAgYm9vbCBwdWJsaWMgYnV5c1Rva2VuczsgICAgIC8vIGlzIGNvbnRyYWN0IGJ1eWluZw0KICAgIGJvb2wgcHVibGljIHNlbGxzVG9rZW5zOyAgICAvLyBpcyBjb250cmFjdCBzZWxsaW5nDQoNCiAgICBldmVudCBBY3RpdmF0ZWRFdmVudChib29sIGJ1eXMsIGJvb2wgc2VsbHMpOw0KICAgIGV2ZW50IE1ha2VyRGVwb3NpdGVkRXRoZXIodWludDI1NiBhbW91bnQpOw0KICAgIGV2ZW50IE1ha2VyV2l0aGRyZXdBc3NldCh1aW50MjU2IHRva2Vucyk7DQogICAgZXZlbnQgTWFrZXJUcmFuc2ZlcnJlZEFzc2V0KGFkZHJlc3MgdG9Ub2tlblRyYWRlciwgdWludDI1NiB0b2tlbnMpOw0KICAgIGV2ZW50IE1ha2VyV2l0aGRyZXdFUkMyMFRva2VuKGFkZHJlc3MgdG9rZW5BZGRyZXNzLCB1aW50MjU2IHRva2Vucyk7DQogICAgZXZlbnQgTWFrZXJXaXRoZHJld0V0aGVyKHVpbnQyNTYgZXRoZXJzKTsNCiAgICBldmVudCBNYWtlclRyYW5zZmVycmVkRXRoZXIoYWRkcmVzcyB0b1Rva2VuVHJhZGVyLCB1aW50MjU2IGV0aGVycyk7DQogICAgZXZlbnQgVGFrZXJCb3VnaHRBc3NldChhZGRyZXNzIGluZGV4ZWQgYnV5ZXIsIHVpbnQyNTYgZXRoZXJzU2VudCwNCiAgICAgICAgdWludDI1NiBldGhlcnNSZXR1cm5lZCwgdWludDI1NiB0b2tlbnNCb3VnaHQpOw0KICAgIGV2ZW50IFRha2VyU29sZEFzc2V0KGFkZHJlc3MgaW5kZXhlZCBzZWxsZXIsIHVpbnQyNTYgZXRoZXJWYWx1ZU9mVG9rZW5zVG9TZWxsLA0KICAgICAgICB1aW50MjU2IHRva2Vuc1NvbGQsIHVpbnQyNTYgZXRoZXJWYWx1ZU9mVG9rZW5zU29sZCk7DQoNCiAgICAvLyBDb25zdHJ1Y3RvciAtIG9ubHkgdG8gYmUgY2FsbGVkIGJ5IHRoZSBUb2tlblRyYWRlckZhY3RvcnkgY29udHJhY3QNCiAgICBmdW5jdGlvbiBUb2tlblRyYWRlciAoDQogICAgICAgIGFkZHJlc3MgX2Fzc2V0LA0KICAgICAgICB1aW50MjU2IF9idXlQcmljZSwNCiAgICAgICAgdWludDI1NiBfc2VsbFByaWNlLA0KICAgICAgICB1aW50MjU2IF91bml0cywNCiAgICAgICAgYm9vbCAgICBfYnV5c1Rva2VucywNCiAgICAgICAgYm9vbCAgICBfc2VsbHNUb2tlbnMNCiAgICApIHsNCiAgICAgICAgYXNzZXQgICAgICAgPSBfYXNzZXQ7DQogICAgICAgIGJ1eVByaWNlICAgID0gX2J1eVByaWNlOw0KICAgICAgICBzZWxsUHJpY2UgICA9IF9zZWxsUHJpY2U7DQogICAgICAgIHVuaXRzICAgICAgID0gX3VuaXRzOw0KICAgICAgICBidXlzVG9rZW5zICA9IF9idXlzVG9rZW5zOw0KICAgICAgICBzZWxsc1Rva2VucyA9IF9zZWxsc1Rva2VuczsNCiAgICAgICAgQWN0aXZhdGVkRXZlbnQoYnV5c1Rva2Vucywgc2VsbHNUb2tlbnMpOw0KICAgIH0NCg0KICAgIC8vIE1ha2VyIGNhbiBhY3RpdmF0ZSBvciBkZWFjdGl2YXRlIHRoaXMgY29udHJhY3QncyBidXlpbmcgYW5kDQogICAgLy8gc2VsbGluZyBzdGF0dXMNCiAgICAvLw0KICAgIC8vIFRoZSBBY3RpdmF0ZWRFdmVudCgpIGV2ZW50IGlzIGxvZ2dlZCB3aXRoIHRoZSBmb2xsb3dpbmcNCiAgICAvLyBwYXJhbWV0ZXI6DQogICAgLy8gICBidXlzVG9rZW5zICAgdGhpcyBjb250cmFjdCBjYW4gYnV5IGFzc2V0IHRva2Vucw0KICAgIC8vICAgc2VsbHNUb2tlbnMgIHRoaXMgY29udHJhY3QgY2FuIHNlbGwgYXNzZXQgdG9rZW5zDQogICAgLy8NCiAgICBmdW5jdGlvbiBhY3RpdmF0ZSAoDQogICAgICAgIGJvb2wgX2J1eXNUb2tlbnMsDQogICAgICAgIGJvb2wgX3NlbGxzVG9rZW5zDQogICAgKSBvbmx5T3duZXIgew0KICAgICAgICBidXlzVG9rZW5zICA9IF9idXlzVG9rZW5zOw0KICAgICAgICBzZWxsc1Rva2VucyA9IF9zZWxsc1Rva2VuczsNCiAgICAgICAgQWN0aXZhdGVkRXZlbnQoYnV5c1Rva2Vucywgc2VsbHNUb2tlbnMpOw0KICAgIH0NCg0KICAgIC8vIE1ha2VyIGNhbiBkZXBvc2l0IGV0aGVycyB0byB0aGlzIGNvbnRyYWN0IHNvIHRoaXMgY29udHJhY3QNCiAgICAvLyBjYW4gYnV5IGFzc2V0IHRva2Vucy4NCiAgICAvLw0KICAgIC8vIE1ha2VyIGRlcG9zaXRzIGFzc2V0IHRva2VucyB0byB0aGlzIGNvbnRyYWN0IGJ5IGNhbGxpbmcgdGhlDQogICAgLy8gYXNzZXQncyB0cmFuc2ZlcigpIG1ldGhvZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVycw0KICAgIC8vICAgX3RvICAgICBpcyB0aGUgYWRkcmVzcyBvZiBUSElTIGNvbnRyYWN0DQogICAgLy8gICBfdmFsdWUgIGlzIHRoZSBudW1iZXIgb2YgYXNzZXQgdG9rZW5zIHRvIGJlIHRyYW5zZmVycmVkDQogICAgLy8NCiAgICAvLyBUYWtlciBNVVNUIE5PVCBzZW5kIHRva2VucyBkaXJlY3RseSB0byB0aGlzIGNvbnRyYWN0LiBUYWtlcnMNCiAgICAvLyBNVVNUIHVzZSB0aGUgdGFrZXJTZWxsQXNzZXQoKSBtZXRob2QgdG8gc2VsbCBhc3NldCB0b2tlbnMNCiAgICAvLyB0byB0aGlzIGNvbnRyYWN0DQogICAgLy8NCiAgICAvLyBNYWtlciBjYW4gYWxzbyB0cmFuc2ZlciBldGhlcnMgZnJvbSBvbmUgVG9rZW5UcmFkZXIgY29udHJhY3QNCiAgICAvLyB0byBhbm90aGVyIFRva2VuVHJhZGVyIGNvbnRyYWN0LCBib3RoIG93bmVkIGJ5IHRoZSBNYWtlcg0KICAgIC8vDQogICAgLy8gVGhlIE1ha2VyRGVwb3NpdGVkRXRoZXIoKSBldmVudCBpcyBsb2dnZWQgd2l0aCB0aGUgZm9sbG93aW5nDQogICAgLy8gcGFyYW1ldGVyOg0KICAgIC8vICAgZXRoZXJzICBpcyB0aGUgbnVtYmVyIG9mIGV0aGVycyBkZXBvc2l0ZWQgYnkgdGhlIG1ha2VyDQogICAgLy8NCiAgICAvLyBUaGlzIG1ldGhvZCB3YXMgY2FsbGVkIGRlcG9zaXQoKSBpbiB0aGUgb2xkIHZlcnNpb24NCiAgICAvLw0KICAgIGZ1bmN0aW9uIG1ha2VyRGVwb3NpdEV0aGVyKCkgcGF5YWJsZSBvbmx5T3duZXJPclRva2VuVHJhZGVyV2l0aFNhbWVPd25lciB7DQogICAgICAgIE1ha2VyRGVwb3NpdGVkRXRoZXIobXNnLnZhbHVlKTsNCiAgICB9DQoNCiAgICAvLyBNYWtlciBjYW4gd2l0aGRyYXcgYXNzZXQgdG9rZW5zIGZyb20gdGhpcyBjb250cmFjdCwgd2l0aCB0aGUNCiAgICAvLyBmb2xsb3dpbmcgcGFyYW1ldGVyOg0KICAgIC8vICAgdG9rZW5zICBpcyB0aGUgbnVtYmVyIG9mIGFzc2V0IHRva2VucyB0byBiZSB3aXRoZHJhd24NCiAgICAvLw0KICAgIC8vIFRoZSBNYWtlcldpdGhkcmV3QXNzZXQoKSBldmVudCBpcyBsb2dnZWQgd2l0aCB0aGUgZm9sbG93aW5nDQogICAgLy8gcGFyYW1ldGVyOg0KICAgIC8vICAgdG9rZW5zICBpcyB0aGUgbnVtYmVyIG9mIHRva2VucyB3aXRoZHJhd24gYnkgdGhlIG1ha2VyDQogICAgLy8NCiAgICAvLyBUaGlzIG1ldGhvZCB3YXMgY2FsbGVkIHdpdGhkcmF3QXNzZXQoKSBpbiB0aGUgb2xkIHZlcnNpb24NCiAgICAvLw0KICAgIGZ1bmN0aW9uIG1ha2VyV2l0aGRyYXdBc3NldCh1aW50MjU2IHRva2Vucykgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spIHsNCiAgICAgICAgTWFrZXJXaXRoZHJld0Fzc2V0KHRva2Vucyk7DQogICAgICAgIHJldHVybiBFUkMyMChhc3NldCkudHJhbnNmZXIob3duZXIsIHRva2Vucyk7DQogICAgfQ0KDQogICAgLy8gTWFrZXIgY2FuIHRyYW5zZmVyIGFzc2V0IHRva2VucyBmcm9tIHRoaXMgY29udHJhY3QgdG8gYW5vdGhlcg0KICAgIC8vIFRva2VuVHJhZGVyIGNvbnRyYWN0LCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyOg0KICAgIC8vICAgdG9Ub2tlblRyYWRlciAgQW5vdGhlciBUb2tlblRyYWRlciBjb250cmFjdCBvd25lZCBieSB0aGUNCiAgICAvLyAgICAgICAgICAgICAgICAgIHNhbWUgb3duZXIgYW5kIHdpdGggdGhlIHNhbWUgYXNzZXQNCiAgICAvLyAgIHRva2VucyAgICAgICAgIGlzIHRoZSBudW1iZXIgb2YgYXNzZXQgdG9rZW5zIHRvIGJlIG1vdmVkDQogICAgLy8NCiAgICAvLyBUaGUgTWFrZXJUcmFuc2ZlcnJlZEFzc2V0KCkgZXZlbnQgaXMgbG9nZ2VkIHdpdGggdGhlIGZvbGxvd2luZw0KICAgIC8vIHBhcmFtZXRlcnM6DQogICAgLy8gICB0b1Rva2VuVHJhZGVyICBUaGUgb3RoZXIgVG9rZW5UcmFkZXIgY29udHJhY3Qgb3duZWQgYnkNCiAgICAvLyAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIG93bmVyIGFuZCB3aXRoIHRoZSBzYW1lIGFzc2V0DQogICAgLy8gICB0b2tlbnMgICAgICAgICBpcyB0aGUgbnVtYmVyIG9mIHRva2VucyB0cmFuc2ZlcnJlZA0KICAgIC8vDQogICAgLy8gVGhlIGFzc2V0IFRyYW5zZmVyKCkgZXZlbnQgaXMgYWxzbyBsb2dnZWQgZnJvbSB0aGlzIGNvbnRyYWN0DQogICAgLy8gdG8gdGhlIG90aGVyIGNvbnRyYWN0DQogICAgLy8NCiAgICBmdW5jdGlvbiBtYWtlclRyYW5zZmVyQXNzZXQoDQogICAgICAgIFRva2VuVHJhZGVyIHRvVG9rZW5UcmFkZXIsDQogICAgICAgIHVpbnQyNTYgdG9rZW5zDQogICAgKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBvaykgew0KICAgICAgICBpZiAob3duZXIgIT0gdG9Ub2tlblRyYWRlci5vd25lcigpIHx8IGFzc2V0ICE9IHRvVG9rZW5UcmFkZXIuYXNzZXQoKSkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgTWFrZXJUcmFuc2ZlcnJlZEFzc2V0KHRvVG9rZW5UcmFkZXIsIHRva2Vucyk7DQogICAgICAgIHJldHVybiBFUkMyMChhc3NldCkudHJhbnNmZXIodG9Ub2tlblRyYWRlciwgdG9rZW5zKTsNCiAgICB9DQoNCiAgICAvLyBNYWtlciBjYW4gd2l0aGRyYXcgYW55IEVSQzIwIGFzc2V0IHRva2VucyBmcm9tIHRoaXMgY29udHJhY3QNCiAgICAvLw0KICAgIC8vIFRoaXMgbWV0aG9kIGlzIGluY2x1ZGVkIGluIHRoZSBjYXNlIHdoZXJlIHRoaXMgY29udHJhY3QgcmVjZWl2ZXMNCiAgICAvLyB0aGUgd3JvbmcgdG9rZW5zDQogICAgLy8NCiAgICAvLyBUaGUgTWFrZXJXaXRoZHJld0VSQzIwVG9rZW4oKSBldmVudCBpcyBsb2dnZWQgd2l0aCB0aGUgZm9sbG93aW5nDQogICAgLy8gcGFyYW1ldGVyOg0KICAgIC8vICAgdG9rZW5BZGRyZXNzICBpcyB0aGUgYWRkcmVzcyBvZiB0aGUgdG9rZW5zIHdpdGhkcmF3biBieSB0aGUgbWFrZXINCiAgICAvLyAgIHRva2VucyAgICAgICAgaXMgdGhlIG51bWJlciBvZiB0b2tlbnMgd2l0aGRyYXduIGJ5IHRoZSBtYWtlcg0KICAgIC8vDQogICAgLy8gVGhpcyBtZXRob2Qgd2FzIGNhbGxlZCB3aXRoZHJhd1Rva2VuKCkgaW4gdGhlIG9sZCB2ZXJzaW9uDQogICAgLy8NCiAgICBmdW5jdGlvbiBtYWtlcldpdGhkcmF3RVJDMjBUb2tlbigNCiAgICAgICAgYWRkcmVzcyB0b2tlbkFkZHJlc3MsDQogICAgICAgIHVpbnQyNTYgdG9rZW5zDQogICAgKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBvaykgew0KICAgICAgICBNYWtlcldpdGhkcmV3RVJDMjBUb2tlbih0b2tlbkFkZHJlc3MsIHRva2Vucyk7DQogICAgICAgIHJldHVybiBFUkMyMCh0b2tlbkFkZHJlc3MpLnRyYW5zZmVyKG93bmVyLCB0b2tlbnMpOw0KICAgIH0NCg0KICAgIC8vIE1ha2VyIGNhbiB3aXRoZHJhdyBldGhlcnMgZnJvbSB0aGlzIGNvbnRyYWN0DQogICAgLy8NCiAgICAvLyBUaGUgTWFrZXJXaXRoZHJld0V0aGVyKCkgZXZlbnQgaXMgbG9nZ2VkIHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXINCiAgICAvLyAgIGV0aGVycyAgaXMgdGhlIG51bWJlciBvZiBldGhlcnMgd2l0aGRyYXduIGJ5IHRoZSBtYWtlcg0KICAgIC8vDQogICAgLy8gVGhpcyBtZXRob2Qgd2FzIGNhbGxlZCB3aXRoZHJhdygpIGluIHRoZSBvbGQgdmVyc2lvbg0KICAgIC8vDQogICAgZnVuY3Rpb24gbWFrZXJXaXRoZHJhd0V0aGVyKHVpbnQyNTYgZXRoZXJzKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBvaykgew0KICAgICAgICBpZiAodGhpcy5iYWxhbmNlID49IGV0aGVycykgew0KICAgICAgICAgICAgTWFrZXJXaXRoZHJld0V0aGVyKGV0aGVycyk7DQogICAgICAgICAgICByZXR1cm4gb3duZXIuc2VuZChldGhlcnMpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8gTWFrZXIgY2FuIHRyYW5zZmVyIGV0aGVycyBmcm9tIHRoaXMgY29udHJhY3QgdG8gYW5vdGhlciBUb2tlblRyYWRlcg0KICAgIC8vIGNvbnRyYWN0LCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczoNCiAgICAvLyAgIHRvVG9rZW5UcmFkZXIgIEFub3RoZXIgVG9rZW5UcmFkZXIgY29udHJhY3Qgb3duZWQgYnkgdGhlDQogICAgLy8gICAgICAgICAgICAgICAgICBzYW1lIG93bmVyIGFuZCB3aXRoIHRoZSBzYW1lIGFzc2V0DQogICAgLy8gICBldGhlcnMgICAgICAgICBpcyB0aGUgbnVtYmVyIG9mIGV0aGVycyB0byBiZSBtb3ZlZA0KICAgIC8vDQogICAgLy8gVGhlIE1ha2VyVHJhbnNmZXJyZWRFdGhlcigpIGV2ZW50IGlzIGxvZ2dlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyDQogICAgLy8gICB0b1Rva2VuVHJhZGVyICBUaGUgb3RoZXIgVG9rZW5UcmFkZXIgY29udHJhY3Qgb3duZWQgYnkgdGhlDQogICAgLy8gICAgICAgICAgICAgICAgICBzYW1lIG93bmVyIGFuZCB3aXRoIHRoZSBzYW1lIGFzc2V0DQogICAgLy8gICBldGhlcnMgICAgICAgICBpcyB0aGUgbnVtYmVyIG9mIGV0aGVycyB0cmFuc2ZlcnJlZA0KICAgIC8vDQogICAgLy8gVGhlIE1ha2VyRGVwb3NpdGVkRXRoZXIoKSBldmVudCBpcyBsb2dnZWQgb24gdGhlIG90aGVyDQogICAgLy8gY29udHJhY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcjoNCiAgICAvLyAgIGV0aGVycyAgaXMgdGhlIG51bWJlciBvZiBldGhlcnMgZGVwb3NpdGVkIGJ5IHRoZSBtYWtlcg0KICAgIC8vDQogICAgZnVuY3Rpb24gbWFrZXJUcmFuc2ZlckV0aGVyKA0KICAgICAgICBUb2tlblRyYWRlciB0b1Rva2VuVHJhZGVyLA0KICAgICAgICB1aW50MjU2IGV0aGVycw0KICAgICkgb25seU93bmVyIHJldHVybnMgKGJvb2wgb2spIHsNCiAgICAgICAgaWYgKG93bmVyICE9IHRvVG9rZW5UcmFkZXIub3duZXIoKSB8fCBhc3NldCAhPSB0b1Rva2VuVHJhZGVyLmFzc2V0KCkpIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIGlmICh0aGlzLmJhbGFuY2UgPj0gZXRoZXJzKSB7DQogICAgICAgICAgICBNYWtlclRyYW5zZmVycmVkRXRoZXIodG9Ub2tlblRyYWRlciwgZXRoZXJzKTsNCiAgICAgICAgICAgIHRvVG9rZW5UcmFkZXIubWFrZXJEZXBvc2l0RXRoZXIudmFsdWUoZXRoZXJzKSgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8gVGFrZXIgYnV5cyBhc3NldCB0b2tlbnMgYnkgc2VuZGluZyBldGhlcnMNCiAgICAvLw0KICAgIC8vIFRoZSBUYWtlckJvdWdodEFzc2V0KCkgZXZlbnQgaXMgbG9nZ2VkIHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzDQogICAgLy8gICBidXllciAgICAgICAgICAgaXMgdGhlIGJ1eWVyJ3MgYWRkcmVzcw0KICAgIC8vICAgZXRoZXJzU2VudCAgICAgIGlzIHRoZSBudW1iZXIgb2YgZXRoZXJzIHNlbnQgYnkgdGhlIGJ1eWVyDQogICAgLy8gICBldGhlcnNSZXR1cm5lZCAgaXMgdGhlIG51bWJlciBvZiBldGhlcnMgc2VudCBiYWNrIHRvIHRoZSBidXllciBhcw0KICAgIC8vICAgICAgICAgICAgICAgICAgIGNoYW5nZQ0KICAgIC8vICAgdG9rZW5zQm91Z2h0ICAgIGlzIHRoZSBudW1iZXIgb2YgYXNzZXQgdG9rZW5zIHNlbnQgdG8gdGhlIGJ1eWVyDQogICAgLy8NCiAgICAvLyBUaGlzIG1ldGhvZCB3YXMgY2FsbGVkIGJ1eSgpIGluIHRoZSBvbGQgdmVyc2lvbg0KICAgIC8vDQogICAgZnVuY3Rpb24gdGFrZXJCdXlBc3NldCgpIHBheWFibGUgew0KICAgICAgICBpZiAoc2VsbHNUb2tlbnMgfHwgbXNnLnNlbmRlciA9PSBvd25lcikgew0KICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHNlbGxQcmljZSBoYXMgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcyA+IDANCiAgICAgICAgICAgIHVpbnQgb3JkZXIgICAgPSBtc2cudmFsdWUgLyBzZWxsUHJpY2U7DQogICAgICAgICAgICAvLyBOb3RlIHRoYXQgdW5pdHMgaGFzIGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXMgPiAwDQogICAgICAgICAgICB1aW50IGNhbl9zZWxsID0gRVJDMjAoYXNzZXQpLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSAvIHVuaXRzOw0KICAgICAgICAgICAgdWludDI1NiBjaGFuZ2UgPSAwOw0KICAgICAgICAgICAgaWYgKG1zZy52YWx1ZSA+IChjYW5fc2VsbCAqIHNlbGxQcmljZSkpIHsNCiAgICAgICAgICAgICAgICBjaGFuZ2UgID0gbXNnLnZhbHVlIC0gKGNhbl9zZWxsICogc2VsbFByaWNlKTsNCiAgICAgICAgICAgICAgICBvcmRlciA9IGNhbl9zZWxsOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGNoYW5nZSA+IDApIHsNCiAgICAgICAgICAgICAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZChjaGFuZ2UpKSB0aHJvdzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChvcmRlciA+IDApIHsNCiAgICAgICAgICAgICAgICBpZiAoIUVSQzIwKGFzc2V0KS50cmFuc2Zlcihtc2cuc2VuZGVyLCBvcmRlciAqIHVuaXRzKSkgdGhyb3c7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBUYWtlckJvdWdodEFzc2V0KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSwgY2hhbmdlLCBvcmRlciAqIHVuaXRzKTsNCiAgICAgICAgfQ0KICAgICAgICAvLyBSZXR1cm4gdXNlciBmdW5kcyBpZiB0aGUgY29udHJhY3QgaXMgbm90IHNlbGxpbmcNCiAgICAgICAgZWxzZSBpZiAoIW1zZy5zZW5kZXIuc2VuZChtc2cudmFsdWUpKSB0aHJvdzsNCiAgICB9DQoNCiAgICAvLyBUYWtlciBzZWxscyBhc3NldCB0b2tlbnMgZm9yIGV0aGVycyBieToNCiAgICAvLyAxLiBDYWxsaW5nIHRoZSBhc3NldCdzIGFwcHJvdmUoKSBtZXRob2Qgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnMNCiAgICAvLyAgICBfc3BlbmRlciAgICAgICAgICAgIGlzIHRoZSBhZGRyZXNzIG9mIHRoaXMgY29udHJhY3QNCiAgICAvLyAgICBfdmFsdWUgICAgICAgICAgICAgIGlzIHRoZSBudW1iZXIgb2YgdG9rZW5zIHRvIGJlIHNvbGQNCiAgICAvLyAyLiBDYWxsaW5nIHRoaXMgdGFrZXJTZWxsQXNzZXQoKSBtZXRob2Qgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcg0KICAgIC8vICAgIGV0aGVyVmFsdWVPZlRva2VucyAgaXMgdGhlIGV0aGVyIHZhbHVlIG9mIHRoZSBhc3NldCB0b2tlbnMgdG8gYmUgc29sZA0KICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHRha2VyDQogICAgLy8NCiAgICAvLyBUaGUgVGFrZXJTb2xkQXNzZXQoKSBldmVudCBpcyBsb2dnZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnMNCiAgICAvLyAgIHNlbGxlciAgICAgICAgICAgICAgICAgICAgaXMgdGhlIHNlbGxlcidzIGFkZHJlc3MNCiAgICAvLyAgIGV0aGVyVmFsdWVPZlRva2Vuc1RvU2VsbCAgaXMgdGhlIGV0aGVyIHZhbHVlIG9mIHRoZSBhc3NldCB0b2tlbnMgYmVpbmcNCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29sZCBieSB0aGUgdGFrZXINCiAgICAvLyAgIHRva2Vuc1NvbGQgICAgICAgICAgICAgICAgaXMgdGhlIG51bWJlciBvZiB0aGUgYXNzZXQgdG9rZW5zIHNvbGQNCiAgICAvLyAgIGV0aGVyVmFsdWVPZlRva2Vuc1NvbGQgICAgaXMgdGhlIGV0aGVyIHZhbHVlIG9mIHRoZSBhc3NldCB0b2tlbnMgc29sZA0KICAgIC8vDQogICAgLy8gVGhpcyBtZXRob2Qgd2FzIGNhbGxlZCBzZWxsKCkgaW4gdGhlIG9sZCB2ZXJzaW9uDQogICAgLy8NCiAgICBmdW5jdGlvbiB0YWtlclNlbGxBc3NldCh1aW50MjU2IGV0aGVyVmFsdWVPZlRva2Vuc1RvU2VsbCkgew0KICAgICAgICBpZiAoYnV5c1Rva2VucyB8fCBtc2cuc2VuZGVyID09IG93bmVyKSB7DQogICAgICAgICAgICAvLyBNYXhpbXVtIG51bWJlciBvZiB0b2tlbiB0aGUgY29udHJhY3QgY2FuIGJ1eQ0KICAgICAgICAgICAgLy8gTm90ZSB0aGF0IGJ1eVByaWNlIGhhcyBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFzID4gMA0KICAgICAgICAgICAgdWludDI1NiBjYW5fYnV5ID0gdGhpcy5iYWxhbmNlIC8gYnV5UHJpY2U7DQogICAgICAgICAgICAvLyBUb2tlbiBsb3RzIGF2YWlsYWJsZQ0KICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHVuaXRzIGhhcyBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFzID4gMA0KICAgICAgICAgICAgdWludDI1NiBvcmRlciA9IGV0aGVyVmFsdWVPZlRva2Vuc1RvU2VsbCAvIHVuaXRzOw0KICAgICAgICAgICAgLy8gQWRqdXN0IG9yZGVyIGZvciBmdW5kcyBhdmFpbGFibGUNCiAgICAgICAgICAgIGlmIChvcmRlciA+IGNhbl9idXkpIG9yZGVyID0gY2FuX2J1eTsNCiAgICAgICAgICAgIGlmIChvcmRlciA+IDApIHsNCiAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHVzZXIgdG9rZW5zDQogICAgICAgICAgICAgICAgaWYgKCFFUkMyMChhc3NldCkudHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIGFkZHJlc3ModGhpcyksIG9yZGVyICogdW5pdHMpKSB0aHJvdzsNCiAgICAgICAgICAgICAgICAvLyBQYXkgdXNlcg0KICAgICAgICAgICAgICAgIGlmICghbXNnLnNlbmRlci5zZW5kKG9yZGVyICogYnV5UHJpY2UpKSB0aHJvdzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFRha2VyU29sZEFzc2V0KG1zZy5zZW5kZXIsIGV0aGVyVmFsdWVPZlRva2Vuc1RvU2VsbCwgb3JkZXIgKiB1bml0cywgb3JkZXIgKiBidXlQcmljZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBUYWtlciBidXlzIHRva2VucyBieSBzZW5kaW5nIGV0aGVycw0KICAgIGZ1bmN0aW9uICgpIHBheWFibGUgew0KICAgICAgICB0YWtlckJ1eUFzc2V0KCk7DQogICAgfQ0KfQ0KDQovLyBUaGlzIGNvbnRyYWN0IGRlcGxveXMgVG9rZW5UcmFkZXIgY29udHJhY3RzIGFuZCBsb2dzIHRoZSBldmVudA0KY29udHJhY3QgVG9rZW5UcmFkZXJGYWN0b3J5IGlzIE93bmVkIHsNCg0KICAgIGV2ZW50IFRyYWRlTGlzdGluZyhhZGRyZXNzIGluZGV4ZWQgb3duZXJBZGRyZXNzLCBhZGRyZXNzIGluZGV4ZWQgdG9rZW5UcmFkZXJBZGRyZXNzLA0KICAgICAgICBhZGRyZXNzIGluZGV4ZWQgYXNzZXQsIHVpbnQyNTYgYnV5UHJpY2UsIHVpbnQyNTYgc2VsbFByaWNlLCB1aW50MjU2IHVuaXRzLA0KICAgICAgICBib29sIGJ1eXNUb2tlbnMsIGJvb2wgc2VsbHNUb2tlbnMpOw0KICAgIGV2ZW50IE93bmVyV2l0aGRyZXdFUkMyMFRva2VuKGFkZHJlc3MgaW5kZXhlZCB0b2tlbkFkZHJlc3MsIHVpbnQyNTYgdG9rZW5zKTsNCg0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBfdmVyaWZ5Ow0KDQogICAgLy8gQW55b25lIGNhbiBjYWxsIHRoaXMgbWV0aG9kIHRvIHZlcmlmeSB0aGUgc2V0dGluZ3Mgb2YgYQ0KICAgIC8vIFRva2VuVHJhZGVyIGNvbnRyYWN0LiBUaGUgcGFyYW1ldGVycyBhcmU6DQogICAgLy8gICB0cmFkZUNvbnRyYWN0ICBpcyB0aGUgYWRkcmVzcyBvZiBhIFRva2VuVHJhZGVyIGNvbnRyYWN0DQogICAgLy8NCiAgICAvLyBSZXR1cm4gdmFsdWVzOg0KICAgIC8vICAgdmFsaWQgICAgICAgIGRpZCB0aGlzIFRva2VuVHJhZGVyRmFjdG9yeSBjcmVhdGUgdGhlIFRva2VuVHJhZGVyIGNvbnRyYWN0Pw0KICAgIC8vICAgb3duZXIgICAgICAgIGlzIHRoZSBvd25lciBvZiB0aGUgVG9rZW5UcmFkZXIgY29udHJhY3QNCiAgICAvLyAgIGFzc2V0ICAgICAgICBpcyB0aGUgRVJDMjAgYXNzZXQgYWRkcmVzcw0KICAgIC8vICAgYnV5UHJpY2UgICAgIGlzIHRoZSBidXkgcHJpY2UgaW4gZXRoZXJzIHBlciBgdW5pdHNgIG9mIGFzc2V0IHRva2Vucw0KICAgIC8vICAgc2VsbFByaWNlICAgIGlzIHRoZSBzZWxsIHByaWNlIGluIGV0aGVycyBwZXIgYHVuaXRzYCBvZiBhc3NldCB0b2tlbnMNCiAgICAvLyAgIHVuaXRzICAgICAgICBpcyB0aGUgbnVtYmVyIG9mIHVuaXRzIG9mIGFzc2V0IHRva2Vucw0KICAgIC8vICAgYnV5c1Rva2VucyAgIGlzIHRoZSBUb2tlblRyYWRlciBjb250cmFjdCBidXlpbmcgdG9rZW5zPw0KICAgIC8vICAgc2VsbHNUb2tlbnMgIGlzIHRoZSBUb2tlblRyYWRlciBjb250cmFjdCBzZWxsaW5nIHRva2Vucz8NCiAgICAvLw0KICAgIGZ1bmN0aW9uIHZlcmlmeShhZGRyZXNzIHRyYWRlQ29udHJhY3QpIGNvbnN0YW50IHJldHVybnMgKA0KICAgICAgICBib29sICAgIHZhbGlkLA0KICAgICAgICBhZGRyZXNzIG93bmVyLA0KICAgICAgICBhZGRyZXNzIGFzc2V0LA0KICAgICAgICB1aW50MjU2IGJ1eVByaWNlLA0KICAgICAgICB1aW50MjU2IHNlbGxQcmljZSwNCiAgICAgICAgdWludDI1NiB1bml0cywNCiAgICAgICAgYm9vbCAgICBidXlzVG9rZW5zLA0KICAgICAgICBib29sICAgIHNlbGxzVG9rZW5zDQogICAgKSB7DQogICAgICAgIHZhbGlkID0gX3ZlcmlmeVt0cmFkZUNvbnRyYWN0XTsNCiAgICAgICAgaWYgKHZhbGlkKSB7DQogICAgICAgICAgICBUb2tlblRyYWRlciB0ID0gVG9rZW5UcmFkZXIodHJhZGVDb250cmFjdCk7DQogICAgICAgICAgICBvd25lciAgICAgICAgID0gdC5vd25lcigpOw0KICAgICAgICAgICAgYXNzZXQgICAgICAgICA9IHQuYXNzZXQoKTsNCiAgICAgICAgICAgIGJ1eVByaWNlICAgICAgPSB0LmJ1eVByaWNlKCk7DQogICAgICAgICAgICBzZWxsUHJpY2UgICAgID0gdC5zZWxsUHJpY2UoKTsNCiAgICAgICAgICAgIHVuaXRzICAgICAgICAgPSB0LnVuaXRzKCk7DQogICAgICAgICAgICBidXlzVG9rZW5zICAgID0gdC5idXlzVG9rZW5zKCk7DQogICAgICAgICAgICBzZWxsc1Rva2VucyAgID0gdC5zZWxsc1Rva2VucygpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8gTWFrZXIgY2FuIGNhbGwgdGhpcyBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IFRva2VuVHJhZGVyIGNvbnRyYWN0DQogICAgLy8gd2l0aCB0aGUgbWFrZXIgYmVpbmcgdGhlIG93bmVyIG9mIHRoaXMgbmV3IGNvbnRyYWN0DQogICAgLy8NCiAgICAvLyBQYXJhbWV0ZXJzOg0KICAgIC8vICAgYXNzZXQgICAgICAgIGlzIHRoZSBFUkMyMCBhc3NldCBhZGRyZXNzDQogICAgLy8gICBidXlQcmljZSAgICAgaXMgdGhlIGJ1eSBwcmljZSBpbiBldGhlcnMgcGVyIGB1bml0c2Agb2YgYXNzZXQgdG9rZW5zDQogICAgLy8gICBzZWxsUHJpY2UgICAgaXMgdGhlIHNlbGwgcHJpY2UgaW4gZXRoZXJzIHBlciBgdW5pdHNgIG9mIGFzc2V0IHRva2Vucw0KICAgIC8vICAgdW5pdHMgICAgICAgIGlzIHRoZSBudW1iZXIgb2YgdW5pdHMgb2YgYXNzZXQgdG9rZW5zDQogICAgLy8gICBidXlzVG9rZW5zICAgaXMgdGhlIFRva2VuVHJhZGVyIGNvbnRyYWN0IGJ1eWluZyB0b2tlbnM/DQogICAgLy8gICBzZWxsc1Rva2VucyAgaXMgdGhlIFRva2VuVHJhZGVyIGNvbnRyYWN0IHNlbGxpbmcgdG9rZW5zPw0KICAgIC8vDQogICAgLy8gRm9yIGV4YW1wbGUsIGxpc3RpbmcgYSBUb2tlblRyYWRlciBjb250cmFjdCBvbiB0aGUgUkVQIEF1Z3VyIHRva2VuIHdoZXJlDQogICAgLy8gdGhlIGNvbnRyYWN0IHdpbGwgYnV5IFJFUCB0b2tlbnMgYXQgYSByYXRlIG9mIDM5MDAwLzEwMDAwMCA9IDAuMzkgRVRIDQogICAgLy8gcGVyIFJFUCB0b2tlbiBhbmQgc2VsbCBSRVAgdG9rZW5zIGF0IGEgcmF0ZSBvZiA0MTAwMC8xMDAwMDAgPSAwLjQxIEVUSA0KICAgIC8vIHBlciBSRVAgdG9rZW46DQogICAgLy8gICBhc3NldCAgICAgICAgMHg0OGM4MGYxZjRkNTNkNTk1MWU1ZDU0MzhiNTRjYmE4NGYyOWYzMmE1DQogICAgLy8gICBidXlQcmljZSAgICAgMzkwMDANCiAgICAvLyAgIHNlbGxQcmljZSAgICA0MTAwMA0KICAgIC8vICAgdW5pdHMgICAgICAgIDEwMDAwMA0KICAgIC8vICAgYnV5c1Rva2VucyAgIHRydWUNCiAgICAvLyAgIHNlbGxzVG9rZW5zICB0cnVlDQogICAgLy8NCiAgICAvLyBUaGUgVHJhZGVMaXN0aW5nKCkgZXZlbnQgaXMgbG9nZ2VkIHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzDQogICAgLy8gICBvd25lckFkZHJlc3MgICAgICAgIGlzIHRoZSBNYWtlcidzIGFkZHJlc3MNCiAgICAvLyAgIHRva2VuVHJhZGVyQWRkcmVzcyAgaXMgdGhlIGFkZHJlc3Mgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgVG9rZW5UcmFkZXIgY29udHJhY3QNCiAgICAvLyAgIGFzc2V0ICAgICAgICAgICAgICAgaXMgdGhlIEVSQzIwIGFzc2V0IGFkZHJlc3MNCiAgICAvLyAgIGJ1eVByaWNlICAgICAgICAgICAgaXMgdGhlIGJ1eSBwcmljZSBpbiBldGhlcnMgcGVyIGB1bml0c2Agb2YgYXNzZXQgdG9rZW5zDQogICAgLy8gICBzZWxsUHJpY2UgICAgICAgICAgIGlzIHRoZSBzZWxsIHByaWNlIGluIGV0aGVycyBwZXIgYHVuaXRzYCBvZiBhc3NldCB0b2tlbnMNCiAgICAvLyAgIHVuaXQgICAgICAgICAgICAgICAgaXMgdGhlIG51bWJlciBvZiB1bml0cyBvZiBhc3NldCB0b2tlbnMNCiAgICAvLyAgIGJ1eXNUb2tlbnMgICAgICAgICAgaXMgdGhlIFRva2VuVHJhZGVyIGNvbnRyYWN0IGJ1eWluZyB0b2tlbnM/DQogICAgLy8gICBzZWxsc1Rva2VucyAgICAgICAgIGlzIHRoZSBUb2tlblRyYWRlciBjb250cmFjdCBzZWxsaW5nIHRva2Vucz8NCiAgICAvLw0KICAgIGZ1bmN0aW9uIGNyZWF0ZVRyYWRlQ29udHJhY3QoDQogICAgICAgIGFkZHJlc3MgYXNzZXQsDQogICAgICAgIHVpbnQyNTYgYnV5UHJpY2UsDQogICAgICAgIHVpbnQyNTYgc2VsbFByaWNlLA0KICAgICAgICB1aW50MjU2IHVuaXRzLA0KICAgICAgICBib29sICAgIGJ1eXNUb2tlbnMsDQogICAgICAgIGJvb2wgICAgc2VsbHNUb2tlbnMNCiAgICApIHJldHVybnMgKGFkZHJlc3MgdHJhZGVyKSB7DQogICAgICAgIC8vIENhbm5vdCBoYXZlIGludmFsaWQgYXNzZXQNCiAgICAgICAgaWYgKGFzc2V0ID09IDB4MCkgdGhyb3c7DQogICAgICAgIC8vIENhbm5vdCBzZXQgemVybyBvciBuZWdhdGl2ZSBwcmljZQ0KICAgICAgICBpZiAoYnV5UHJpY2UgPD0gMCB8fCBzZWxsUHJpY2UgPD0gMCkgdGhyb3c7DQogICAgICAgIC8vIE11c3QgbWFrZSBwcm9maXQgb24gc3ByZWFkDQogICAgICAgIGlmIChidXlQcmljZSA+PSBzZWxsUHJpY2UpIHRocm93Ow0KICAgICAgICAvLyBDYW5ub3QgYnV5IG9yIHNlbGwgemVybyBvciBuZWdhdGl2ZSB1bml0cw0KICAgICAgICBpZiAodW5pdHMgPD0gMCkgdGhyb3c7DQogICAgICAgIHRyYWRlciA9IG5ldyBUb2tlblRyYWRlcigNCiAgICAgICAgICAgIGFzc2V0LA0KICAgICAgICAgICAgYnV5UHJpY2UsDQogICAgICAgICAgICBzZWxsUHJpY2UsDQogICAgICAgICAgICB1bml0cywNCiAgICAgICAgICAgIGJ1eXNUb2tlbnMsDQogICAgICAgICAgICBzZWxsc1Rva2Vucyk7DQogICAgICAgIC8vIFJlY29yZCB0aGF0IHRoaXMgZmFjdG9yeSBjcmVhdGVkIHRoZSB0cmFkZXINCiAgICAgICAgX3ZlcmlmeVt0cmFkZXJdID0gdHJ1ZTsNCiAgICAgICAgLy8gU2V0IHRoZSBvd25lciB0byB3aG9ldmVyIGNhbGxlZCB0aGUgZnVuY3Rpb24NCiAgICAgICAgVG9rZW5UcmFkZXIodHJhZGVyKS50cmFuc2Zlck93bmVyc2hpcChtc2cuc2VuZGVyKTsNCiAgICAgICAgVHJhZGVMaXN0aW5nKG1zZy5zZW5kZXIsIHRyYWRlciwgYXNzZXQsIGJ1eVByaWNlLCBzZWxsUHJpY2UsIHVuaXRzLCBidXlzVG9rZW5zLCBzZWxsc1Rva2Vucyk7DQogICAgfQ0KDQogICAgLy8gRmFjdG9yeSBvd25lciBjYW4gd2l0aGRyYXcgYW55IEVSQzIwIGFzc2V0IHRva2VucyBmcm9tIHRoaXMgY29udHJhY3QNCiAgICAvLw0KICAgIC8vIFRoaXMgbWV0aG9kIGlzIGluY2x1ZGVkIGluIHRoZSBjYXNlIHdoZXJlIHRoaXMgY29udHJhY3QgcmVjZWl2ZXMNCiAgICAvLyB0aGUgd3JvbmcgdG9rZW5zDQogICAgLy8NCiAgICAvLyBUaGUgT3duZXJXaXRoZHJld0VSQzIwVG9rZW4oKSBldmVudCBpcyBsb2dnZWQgd2l0aCB0aGUgZm9sbG93aW5nDQogICAgLy8gcGFyYW1ldGVyOg0KICAgIC8vICAgdG9rZW5BZGRyZXNzICBpcyB0aGUgYWRkcmVzcyBvZiB0aGUgdG9rZW5zIHdpdGhkcmF3biBieSB0aGUgbWFrZXINCiAgICAvLyAgIHRva2VucyAgICAgICAgaXMgdGhlIG51bWJlciBvZiB0b2tlbnMgd2l0aGRyYXduIGJ5IHRoZSBtYWtlcg0KICAgIC8vDQogICAgZnVuY3Rpb24gb3duZXJXaXRoZHJhd0VSQzIwVG9rZW4oYWRkcmVzcyB0b2tlbkFkZHJlc3MsIHVpbnQyNTYgdG9rZW5zKSBvbmx5T3duZXIgcmV0dXJucyAoYm9vbCBvaykgew0KICAgICAgICBPd25lcldpdGhkcmV3RVJDMjBUb2tlbih0b2tlbkFkZHJlc3MsIHRva2Vucyk7DQogICAgICAgIHJldHVybiBFUkMyMCh0b2tlbkFkZHJlc3MpLnRyYW5zZmVyKG93bmVyLCB0b2tlbnMpOw0KICAgIH0NCg0KICAgIC8vIFByZXZlbnRzIGFjY2lkZW50YWwgc2VuZGluZyBvZiBldGhlciB0byB0aGUgZmFjdG9yeQ0KICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgdGhyb3c7DQogICAgfQ0KfQ=='