base 64 content
base64tokenVault14
	^'LyoNCiAqIEVSQzIwIGludGVyZmFjZQ0KICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMA0KICovDQpjb250cmFjdCBFUkMyMCB7DQogIHVpbnQgcHVibGljIHRvdGFsU3VwcGx5Ow0KICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyB3aG8pIGNvbnN0YW50IHJldHVybnMgKHVpbnQpOw0KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSBjb25zdGFudCByZXR1cm5zICh1aW50KTsNCg0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsNCiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7DQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBzcGVuZGVyLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsNCiAgZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkIGZyb20sIGFkZHJlc3MgaW5kZXhlZCB0bywgdWludCB2YWx1ZSk7DQogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOw0KfQ0KDQoNCg0KLyoqDQogKiBNYXRoIG9wZXJhdGlvbnMgd2l0aCBzYWZldHkgY2hlY2tzDQogKi8NCmNvbnRyYWN0IFNhZmVNYXRoIHsNCiAgZnVuY3Rpb24gc2FmZU11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgIHVpbnQgYyA9IGEgKiBiOw0KICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgYXNzZXJ0KGIgPiAwKTsNCiAgICB1aW50IGMgPSBhIC8gYjsNCiAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KDQogIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICBhc3NlcnQoYiA8PSBhKTsNCiAgICByZXR1cm4gYSAtIGI7DQogIH0NCg0KICBmdW5jdGlvbiBzYWZlQWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgdWludCBjID0gYSArIGI7DQogICAgYXNzZXJ0KGM+PWEgJiYgYz49Yik7DQogICAgcmV0dXJuIGM7DQogIH0NCg0KICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgew0KICAgIHJldHVybiBhID49IGIgPyBhIDogYjsNCiAgfQ0KDQogIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7DQogICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7DQogIH0NCg0KICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICByZXR1cm4gYSA+PSBiID8gYSA6IGI7DQogIH0NCg0KICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgew0KICAgIGlmICghYXNzZXJ0aW9uKSB7DQogICAgICB0aHJvdzsNCiAgICB9DQogIH0NCn0NCg0KDQoNCi8qKg0KICogU3RhbmRhcmQgRVJDMjAgdG9rZW4gd2l0aCBTaG9ydCBIYW5kIEF0dGFjayBhbmQgYXBwcm92ZSgpIHJhY2UgY29uZGl0aW9uIG1pdGlnYXRpb24uDQogKg0KICogQmFzZWQgb24gY29kZSBieSBGaXJzdEJsb29kOg0KICogaHR0cHM6Ly9naXRodWIuY29tL0ZpcnN0Ymxvb2Rpby90b2tlbi9ibG9iL21hc3Rlci9zbWFydF9jb250cmFjdC9GaXJzdEJsb29kVG9rZW4uc29sDQogKi8NCmNvbnRyYWN0IFN0YW5kYXJkVG9rZW4gaXMgRVJDMjAsIFNhZmVNYXRoIHsNCg0KICAvKiBUb2tlbiBzdXBwbHkgZ290IGluY3JlYXNlZCBhbmQgYSBuZXcgb3duZXIgcmVjZWl2ZWQgdGhlc2UgdG9rZW5zICovDQogIGV2ZW50IE1pbnRlZChhZGRyZXNzIHJlY2VpdmVyLCB1aW50IGFtb3VudCk7DQoNCiAgLyogQWN0dWFsIGJhbGFuY2VzIG9mIHRva2VuIGhvbGRlcnMgKi8NCiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJhbGFuY2VzOw0KDQogIC8qIGFwcHJvdmUoKSBhbGxvd2FuY2VzICovDQogIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50KSkgYWxsb3dlZDsNCg0KICAvKiBJbnRlcmZhY2UgZGVjbGFyYXRpb24gKi8NCiAgZnVuY3Rpb24gaXNUb2tlbigpIHB1YmxpYyBjb25zdGFudCByZXR1cm5zIChib29sIHdlQXJlKSB7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICAvKioNCiAgICoNCiAgICogRml4IGZvciB0aGUgRVJDMjAgc2hvcnQgYWRkcmVzcyBhdHRhY2sNCiAgICoNCiAgICogaHR0cDovL3Zlc3NlbmVzLmNvbS90aGUtZXJjMjAtc2hvcnQtYWRkcmVzcy1hdHRhY2stZXhwbGFpbmVkLw0KICAgKi8NCiAgbW9kaWZpZXIgb25seVBheWxvYWRTaXplKHVpbnQgc2l6ZSkgew0KICAgICBpZihtc2cuZGF0YS5sZW5ndGggPCBzaXplICsgNCkgew0KICAgICAgIHRocm93Ow0KICAgICB9DQogICAgIF87DQogIH0NCg0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIG9ubHlQYXlsb2FkU2l6ZSgyICogMzIpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlc1ttc2cuc2VuZGVyXSwgX3ZhbHVlKTsNCiAgICBiYWxhbmNlc1tfdG9dID0gc2FmZUFkZChiYWxhbmNlc1tfdG9dLCBfdmFsdWUpOw0KICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsNCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludCBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgIHVpbnQgX2FsbG93YW5jZSA9IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdOw0KDQogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHNhZmVTdWIoX2FsbG93YW5jZSwgX3ZhbHVlKSB3aWxsIGFscmVhZHkgdGhyb3cgaWYgdGhpcyBjb25kaXRpb24gaXMgbm90IG1ldA0KICAgIC8vIGlmIChfdmFsdWUgPiBfYWxsb3dhbmNlKSB0aHJvdzsNCg0KICAgIGJhbGFuY2VzW190b10gPSBzYWZlQWRkKGJhbGFuY2VzW190b10sIF92YWx1ZSk7DQogICAgYmFsYW5jZXNbX2Zyb21dID0gc2FmZVN1YihiYWxhbmNlc1tfZnJvbV0sIF92YWx1ZSk7DQogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBzYWZlU3ViKF9hbGxvd2FuY2UsIF92YWx1ZSk7DQogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7DQogICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07DQogIH0NCg0KICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgIC8vIFRvIGNoYW5nZSB0aGUgYXBwcm92ZSBhbW91bnQgeW91IGZpcnN0IGhhdmUgdG8gcmVkdWNlIHRoZSBhZGRyZXNzZXNgDQogICAgLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QNCiAgICAvLyAgYWxyZWFkeSAwIHRvIG1pdGlnYXRlIHRoZSByYWNlIGNvbmRpdGlvbiBkZXNjcmliZWQgaGVyZToNCiAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkNCiAgICBpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHRocm93Ow0KDQogICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICBmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgcmVtYWluaW5nKSB7DQogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQogIH0NCg0KICAvKioNCiAgICogQXRvbWljIGluY3JlbWVudCBvZiBhcHByb3ZlZCBzcGVuZGluZw0KICAgKg0KICAgKiBXb3JrcyBhcm91bmQgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzIwI2lzc3VlY29tbWVudC0yNjM1MjQ3MjkNCiAgICoNCiAgICovDQogIGZ1bmN0aW9uIGFkZEFwcHJvdmFsKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQgX2FkZGVkVmFsdWUpDQogIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgdWludCBvbGRWYWx1ZSA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOw0KICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBzYWZlQWRkKG9sZFZhbHVlLCBfYWRkZWRWYWx1ZSk7DQogICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOw0KICAgICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICAvKioNCiAgICogQXRvbWljIGRlY3JlbWVudCBvZiBhcHByb3ZlZCBzcGVuZGluZy4NCiAgICoNCiAgICogV29ya3MgYXJvdW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMCNpc3N1ZWNvbW1lbnQtMjYzNTI0NzI5DQogICAqLw0KICBmdW5jdGlvbiBzdWJBcHByb3ZhbChhZGRyZXNzIF9zcGVuZGVyLCB1aW50IF9zdWJ0cmFjdGVkVmFsdWUpDQogIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KDQogICAgICB1aW50IG9sZFZhbCA9IGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdOw0KDQogICAgICBpZiAoX3N1YnRyYWN0ZWRWYWx1ZSA+IG9sZFZhbCkgew0KICAgICAgICAgIGFsbG93ZWRbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gMDsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBzYWZlU3ViKG9sZFZhbCwgX3N1YnRyYWN0ZWRWYWx1ZSk7DQogICAgICB9DQogICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0pOw0KICAgICAgcmV0dXJuIHRydWU7DQogIH0NCg0KfQ0KDQoNCg0KLyoNCiAqIE93bmFibGUNCiAqDQogKiBCYXNlIGNvbnRyYWN0IHdpdGggYW4gb3duZXIuDQogKiBQcm92aWRlcyBvbmx5T3duZXIgbW9kaWZpZXIsIHdoaWNoIHByZXZlbnRzIGZ1bmN0aW9uIGZyb20gcnVubmluZyBpZiBpdCBpcyBjYWxsZWQgYnkgYW55b25lIG90aGVyIHRoYW4gdGhlIG93bmVyLg0KICovDQpjb250cmFjdCBPd25hYmxlIHsNCiAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQoNCiAgZnVuY3Rpb24gT3duYWJsZSgpIHsNCiAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogIH0NCg0KICBtb2RpZmllciBvbmx5T3duZXIoKSB7DQogICAgaWYgKG1zZy5zZW5kZXIgIT0gb3duZXIpIHsNCiAgICAgIHRocm93Ow0KICAgIH0NCiAgICBfOw0KICB9DQoNCiAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsNCiAgICBpZiAobmV3T3duZXIgIT0gYWRkcmVzcygwKSkgew0KICAgICAgb3duZXIgPSBuZXdPd25lcjsNCiAgICB9DQogIH0NCg0KfQ0KDQoNCi8qKg0KICogSG9sZCB0b2tlbnMgZm9yIGEgZ3JvdXAgaW52ZXN0b3Igb2YgaW52ZXN0b3JzIHVudGlsIHRoZSB1bmxvY2sgZGF0ZS4NCiAqDQogKiBBZnRlciB0aGUgdW5sb2NrIGRhdGUgdGhlIGludmVzdG9yIGNhbiBjbGFpbSB0aGVpciB0b2tlbnMuDQogKg0KICogU3RlcHMNCiAqDQogKiAtIFByZXBhcmUgYSBzcHJlYWRzaGVldCBmb3IgdG9rZW4gYWxsb2NhdGlvbg0KICogLSBEZXBsb3kgdGhpcyBjb250cmFjdCwgd2l0aCB0aGUgc3VtIHRvIHRva2VucyB0byBiZSBkaXN0cmlidXRlZCwgZnJvbSB0aGUgb3duZXIgYWNjb3VudA0KICogLSBDYWxsIHNldEludmVzdG9yIGZvciBhbGwgaW52ZXN0b3JzIGZyb20gdGhlIG93bmVyIGFjY291bnQgdXNpbmcgYSBsb2NhbCBzY3JpcHQgYW5kIENTViBpbnB1dA0KICogLSBNb3ZlIHRva2Vuc1RvQmVBbGxvY2F0ZWQgaW4gdGhpcyBjb250cmFjdCB1c2luZyBTdGFuZGFyZFRva2VuLnRyYW5zZmVyKCkNCiAqIC0gQ2FsbCBsb2NrIGZyb20gdGhlIG93bmVyIGFjY291bnQNCiAqIC0gV2FpdCB1bnRpbCB0aGUgZnJlZXplIHBlcmlvZCBpcyBvdmVyDQogKiAtIEFmdGVyIHRoZSBmcmVlemUgdGltZSBpcyBvdmVyIGludmVzdG9ycyBjYW4gY2FsbCBjbGFpbSgpIGZyb20gdGhlaXIgYWRkcmVzcyB0byBnZXQgdGhlaXIgdG9rZW5zDQogKg0KICovDQpjb250cmFjdCBUb2tlblZhdWx0IGlzIE93bmFibGUgew0KDQogIC8qKiBIb3cgbWFueSBpbnZlc3RvcnMgd2UgaGF2ZSBub3cgKi8NCiAgdWludCBwdWJsaWMgaW52ZXN0b3JDb3VudDsNCg0KICAvKiogU3VtIGZyb20gdGhlIHNwcmVhZHNoZWV0IGhvdyBtdWNoIHRva2VucyB3ZSBzaG91bGQgZ2V0IG9uIHRoZSBjb250cmFjdC4gSWYgdGhlIHN1bSBkb2VzIG5vdCBtYXRjaCBhdCB0aGUgdGltZSBvZiB0aGUgbG9jayB0aGUgdmF1bHQgaXMgZmF1bHR5IGFuZCBtdXN0IGJlIHJlY3JlYXRlZC4qLw0KICB1aW50IHB1YmxpYyB0b2tlbnNUb0JlQWxsb2NhdGVkOw0KDQogIC8qKiBIb3cgbWFueSB0b2tlbnMgaW52ZXN0b3JzIGhhdmUgY2xhaW1lZCBzbyBmYXIgKi8NCiAgdWludCBwdWJsaWMgdG90YWxDbGFpbWVkOw0KDQogIC8qKiBIb3cgbWFueSB0b2tlbnMgb3VyIGludGVybmFsIGJvb2sga2VlcGluZyB0ZWxscyB1cyB0byBoYXZlIGF0IHRoZSB0aW1lIG9mIGxvY2soKSB3aGVuIGFsbCBpbnZlc3RvciBkYXRhIGhhcyBiZWVuIGxvYWRlZCAqLw0KICB1aW50IHB1YmxpYyB0b2tlbnNBbGxvY2F0ZWRUb3RhbDsNCg0KICAvKiogSG93IG11Y2ggd2UgaGF2ZSBhbGxvY2F0ZWQgdG8gdGhlIGludmVzdG9ycyBpbnZlc3RlZCAqLw0KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGJhbGFuY2VzOw0KDQogIC8qKiBIb3cgbWFueSB0b2tlbnMgaW52ZXN0b3JzIGhhdmUgY2xhaW1lZCAqLw0KICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgcHVibGljIGNsYWltZWQ7DQoNCiAgLyoqIFdoZW4gb3VyIGNsYWltIGZyZWV6ZSBpcyBvdmVyIChVTklYIHRpbWVzdGFtcCkgKi8NCiAgdWludCBwdWJsaWMgZnJlZXplRW5kc0F0Ow0KDQogIC8qKiBXaGVuIHRoaXMgdmF1bHQgd2FzIGxvY2tlZCAoVU5JWCB0aW1lc3RhbXApICovDQogIHVpbnQgcHVibGljIGxvY2tlZEF0Ow0KDQogIC8qKiBXZSBjYW4gYWxzbyBkZWZpbmUgb3VyIG93biB0b2tlbiwgd2hpY2ggd2lsbCBvdmVycmlkZSB0aGUgSUNPIG9uZSAqKiovDQogIFN0YW5kYXJkVG9rZW4gcHVibGljIHRva2VuOw0KDQogIC8qKiBXaGF0IGlzIG91ciBjdXJyZW50IHN0YXRlLg0KICAgKg0KICAgKiBMb2FkaW5nOiBJbnZlc3RvciBkYXRhIGlzIGJlaW5nIGxvYWRlZCBhbmQgY29udHJhY3Qgbm90IHlldCBsb2NrZWQNCiAgICogSG9sZGluZzogSG9sZGluZyB0b2tlbnMgZm9yIGludmVzdG9ycw0KICAgKiBEaXN0cmlidXRpbmc6IEZyZWV6ZSB0aW1lIGlzIG92ZXIsIGludmVzdG9ycyBjYW4gY2xhaW0gdGhlaXIgdG9rZW5zDQogICAqLw0KICBlbnVtIFN0YXRle1Vua25vd24sIExvYWRpbmcsIEhvbGRpbmcsIERpc3RyaWJ1dGluZ30NCg0KICAvKiogV2UgYWxsb2NhdGVkIHRva2VucyBmb3IgaW52ZXN0b3IgKi8NCiAgZXZlbnQgQWxsb2NhdGVkKGFkZHJlc3MgaW52ZXN0b3IsIHVpbnQgdmFsdWUpOw0KDQogIC8qKiBXZSBkaXN0cmlidXRlZCB0b2tlbnMgdG8gYW4gaW52ZXN0b3IgKi8NCiAgZXZlbnQgRGlzdHJpYnV0ZWQoYWRkcmVzcyBpbnZlc3RvcnMsIHVpbnQgY291bnQpOw0KDQogIGV2ZW50IExvY2tlZCgpOw0KDQogIC8qKg0KICAgKiBDcmVhdGUgcHJlc2FsZSBjb250cmFjdCB3aGVyZSBsb2NrIHVwIHBlcmlvZCBpcyBnaXZlbiBkYXlzDQogICAqDQogICAqIEBwYXJhbSBfb3duZXIgV2hvIGNhbiBsb2FkIGludmVzdG9yIGRhdGEgYW5kIGxvY2sNCiAgICogQHBhcmFtIF9mcmVlemVFbmRzQXQgVU5JWCB0aW1lc3RhbXAgd2hlbiB0aGUgdmF1bHQgdW5sb2Nrcw0KICAgKiBAcGFyYW0gX3Rva2VuIFRva2VuIGNvbnRyYWN0IGFkZHJlc3Mgd2UgYXJlIGRpc3RyaWJ1dGluZw0KICAgKiBAcGFyYW0gX3Rva2Vuc1RvQmVBbGxvY2F0ZWQgVG90YWwgbnVtYmVyIG9mIHRva2VucyB0aGlzIHZhdWx0IHdpbGwgaG9sZCAtIGluY2x1ZGluZyBkZWNpbWFsIG11bHRpcGxjYXRpb24NCiAgICoNCiAgICovDQogIGZ1bmN0aW9uIFRva2VuVmF1bHQoYWRkcmVzcyBfb3duZXIsIHVpbnQgX2ZyZWV6ZUVuZHNBdCwgU3RhbmRhcmRUb2tlbiBfdG9rZW4sIHVpbnQgX3Rva2Vuc1RvQmVBbGxvY2F0ZWQpIHsNCg0KICAgIG93bmVyID0gX293bmVyOw0KDQogICAgLy8gSW52YWxpZCBvd2Vucg0KICAgIGlmKG93bmVyID09IDApIHsNCiAgICAgIHRocm93Ow0KICAgIH0NCg0KICAgIHRva2VuID0gX3Rva2VuOw0KDQogICAgLy8gQ2hlY2sgdGhlIGFkZHJlc3MgbG9va3MgbGlrZSBhIHRva2VuIGNvbnRyYWN0DQogICAgaWYoIXRva2VuLmlzVG9rZW4oKSkgew0KICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgLy8gR2l2ZSBhcmd1bWVudA0KICAgIGlmKF9mcmVlemVFbmRzQXQgPT0gMCkgew0KICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgLy8gU2FuaXR5IGNoZWNrIG9uIF90b2tlbnNUb0JlQWxsb2NhdGVkDQogICAgaWYoX3Rva2Vuc1RvQmVBbGxvY2F0ZWQgPT0gMCkgew0KICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgZnJlZXplRW5kc0F0ID0gX2ZyZWV6ZUVuZHNBdDsNCiAgICB0b2tlbnNUb0JlQWxsb2NhdGVkID0gX3Rva2Vuc1RvQmVBbGxvY2F0ZWQ7DQogIH0NCg0KICAvLy8gQGRldiBBZGQgYSBwcmVzYWxlIHBhcnRpY2lwYXRpbmcgYWxsb2NhdGlvbg0KICBmdW5jdGlvbiBzZXRJbnZlc3RvcihhZGRyZXNzIGludmVzdG9yLCB1aW50IGFtb3VudCkgcHVibGljIG9ubHlPd25lciB7DQoNCiAgICBpZihsb2NrZWRBdCA+IDApIHsNCiAgICAgIC8vIENhbm5vdCBhZGQgbmV3IGludmVzdG9ycyBhZnRlciB0aGUgdmF1bHQgaXMgbG9ja2VkDQogICAgICB0aHJvdzsNCiAgICB9DQoNCiAgICBpZihhbW91bnQgPT0gMCkgdGhyb3c7IC8vIE5vIGVtcHR5IGJ1eXMNCg0KICAgIC8vIERvbid0IGFsbG93IHJlc2V0DQogICAgaWYoYmFsYW5jZXNbaW52ZXN0b3JdID4gMCkgew0KICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgYmFsYW5jZXNbaW52ZXN0b3JdID0gYW1vdW50Ow0KDQogICAgaW52ZXN0b3JDb3VudCsrOw0KDQogICAgdG9rZW5zQWxsb2NhdGVkVG90YWwgKz0gYW1vdW50Ow0KDQogICAgQWxsb2NhdGVkKGludmVzdG9yLCBhbW91bnQpOw0KICB9DQoNCiAgLy8vIEBkZXYgTG9jayB0aGUgdmF1bHQNCiAgLy8vICAgICAgLSBBbGwgYmFsYW5jZXMgaGF2ZSBiZWVuIGxvYWRlZCBpbiBjb3JyZWN0bHkNCiAgLy8vICAgICAgLSBUb2tlbnMgYXJlIHRyYW5zZmVycmVkIG9uIHRoaXMgdmF1bHQgY29ycmVjdGx5DQogIC8vLyAgICAgIC0gQ2hlY2tzIGFyZSBpbiBwbGFjZSB0byBwcmV2ZW50IGNyZWF0aW5nIGEgdmF1bHQgdGhhdCBpcyBsb2NrZWQgd2l0aCBpbmNvcnJlY3QgdG9rZW4gYmFsYW5jZXMuDQogIGZ1bmN0aW9uIGxvY2soKSBvbmx5T3duZXIgew0KDQogICAgaWYobG9ja2VkQXQgPiAwKSB7DQogICAgICB0aHJvdzsgLy8gQWxyZWFkeSBsb2NrZWQNCiAgICB9DQoNCiAgICAvLyBTcHJlYWRzaGVldCBzdW0gZG9lcyBub3QgbWF0Y2ggdG8gd2hhdCB3ZSBoYXZlIGxvYWRlZCB0byB0aGUgaW52ZXN0b3IgZGF0YQ0KICAgIGlmKHRva2Vuc0FsbG9jYXRlZFRvdGFsICE9IHRva2Vuc1RvQmVBbGxvY2F0ZWQpIHsNCiAgICAgIHRocm93Ow0KICAgIH0NCg0KICAgIC8vIERvIG5vdCBsb2NrIHRoZSB2YXVsdCBpZiB0aGUgZ2l2ZW4gdG9rZW5zIGFyZSBub3Qgb24gdGhpcyBjb250cmFjdA0KICAgIGlmKHRva2VuLmJhbGFuY2VPZihhZGRyZXNzKHRoaXMpKSAhPSB0b2tlbnNBbGxvY2F0ZWRUb3RhbCkgew0KICAgICAgdGhyb3c7DQogICAgfQ0KDQogICAgbG9ja2VkQXQgPSBub3c7DQoNCiAgICBMb2NrZWQoKTsNCiAgfQ0KDQogIC8vLyBAZGV2IEluIHRoZSBjYXNlIGxvY2tpbmcgZmFpbGVkLCB0aGVuIGFsbG93IHRoZSBvd25lciB0byByZWNsYWltIHRoZSB0b2tlbnMgb24gdGhlIGNvbnRyYWN0Lg0KICBmdW5jdGlvbiByZWNvdmVyRmFpbGVkTG9jaygpIG9ubHlPd25lciB7DQogICAgaWYobG9ja2VkQXQgPiAwKSB7DQogICAgICB0aHJvdzsNCiAgICB9DQoNCiAgICAvLyBUcmFuc2ZlciBhbGwgdG9rZW5zIG9uIHRoaXMgY29udHJhY3QgYmFjayB0byB0aGUgb3duZXINCiAgICB0b2tlbi50cmFuc2Zlcihvd25lciwgdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpKTsNCiAgfQ0KDQogIC8vLyBAZGV2IEdldCB0aGUgY3VycmVudCBiYWxhbmNlIG9mIHRva2VucyBpbiB0aGUgdmF1bHQNCiAgLy8vIEByZXR1cm4gdWludCBIb3cgbWFueSB0b2tlbnMgdGhlcmUgYXJlIGN1cnJlbnRseSBpbiB2YXVsdA0KICBmdW5jdGlvbiBnZXRCYWxhbmNlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMgKHVpbnQgaG93TWFueVRva2Vuc0N1cnJlbnRseUluVmF1bHQpIHsNCiAgICByZXR1cm4gdG9rZW4uYmFsYW5jZU9mKGFkZHJlc3ModGhpcykpOw0KICB9DQoNCiAgLy8vIEBkZXYgQ2xhaW0gTiBib3VnaHQgdG9rZW5zIHRvIHRoZSBpbnZlc3RvciBhcyB0aGUgbXNnIHNlbmRlcg0KICBmdW5jdGlvbiBjbGFpbSgpIHsNCg0KICAgIGFkZHJlc3MgaW52ZXN0b3IgPSBtc2cuc2VuZGVyOw0KDQogICAgaWYobG9ja2VkQXQgPT0gMCkgew0KICAgICAgdGhyb3c7IC8vIFdlIHdlcmUgbmV2ZXIgbG9ja2VkDQogICAgfQ0KDQogICAgaWYobm93IDwgZnJlZXplRW5kc0F0KSB7DQogICAgICB0aHJvdzsgLy8gVHJ5aW5nIHRvIGNsYWltIGVhcmx5DQogICAgfQ0KDQogICAgaWYoYmFsYW5jZXNbaW52ZXN0b3JdID09IDApIHsNCiAgICAgIC8vIE5vdCBvdXIgaW52ZXN0b3INCiAgICAgIHRocm93Ow0KICAgIH0NCg0KICAgIGlmKGNsYWltZWRbaW52ZXN0b3JdID4gMCkgew0KICAgICAgdGhyb3c7IC8vIEFscmVhZHkgY2xhaW1lZA0KICAgIH0NCg0KICAgIHVpbnQgYW1vdW50ID0gYmFsYW5jZXNbaW52ZXN0b3JdOw0KDQogICAgY2xhaW1lZFtpbnZlc3Rvcl0gPSBhbW91bnQ7DQoNCiAgICB0b3RhbENsYWltZWQgKz0gYW1vdW50Ow0KDQogICAgdG9rZW4udHJhbnNmZXIoaW52ZXN0b3IsIGFtb3VudCk7DQoNCiAgICBEaXN0cmlidXRlZChpbnZlc3RvciwgYW1vdW50KTsNCiAgfQ0KDQogIC8vLyBAZGV2IFJlc29sdmUgdGhlIGNvbnRyYWN0IHVtYW1iaWdpb3VzIHN0YXRlDQogIGZ1bmN0aW9uIGdldFN0YXRlKCkgcHVibGljIGNvbnN0YW50IHJldHVybnMoU3RhdGUpIHsNCiAgICBpZihsb2NrZWRBdCA9PSAwKSB7DQogICAgICByZXR1cm4gU3RhdGUuTG9hZGluZzsNCiAgICB9IGVsc2UgaWYobm93ID4gZnJlZXplRW5kc0F0KSB7DQogICAgICByZXR1cm4gU3RhdGUuRGlzdHJpYnV0aW5nOw0KICAgIH0gZWxzZSB7DQogICAgICByZXR1cm4gU3RhdGUuSG9sZGluZzsNCiAgICB9DQogIH0NCg0KfQ=='