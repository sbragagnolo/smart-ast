base 64 content
base64tokenWrapper
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4yOw0KDQovLyBUb2tlbiBzdGFuZGFyZCBBUEkNCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMA0KDQpjb250cmFjdCBFUkMyMENvbnN0YW50IHsNCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgc3VwcGx5KTsNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoIGFkZHJlc3Mgd2hvICkgY29uc3RhbnQgcmV0dXJucyAodWludCB2YWx1ZSk7DQogICAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCBfYWxsb3dhbmNlKTsNCn0NCmNvbnRyYWN0IEVSQzIwU3RhdGVmdWwgew0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKTsNCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oIGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSkgcmV0dXJucyAoYm9vbCBvayk7DQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spOw0KfQ0KY29udHJhY3QgRVJDMjBFdmVudHMgew0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQgdmFsdWUpOw0KICAgIGV2ZW50IEFwcHJvdmFsKCBhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50IHZhbHVlKTsNCn0NCmNvbnRyYWN0IEVSQzIwIGlzIEVSQzIwQ29uc3RhbnQsIEVSQzIwU3RhdGVmdWwsIEVSQzIwRXZlbnRzIHt9DQoNCmNvbnRyYWN0IEVSQzIwQmFzZSBpcyBFUkMyMA0Kew0KICAgIG1hcHBpbmcoIGFkZHJlc3MgPT4gdWludCApIF9iYWxhbmNlczsNCiAgICBtYXBwaW5nKCBhZGRyZXNzID0+IG1hcHBpbmcoIGFkZHJlc3MgPT4gdWludCApICkgX2FwcHJvdmFsczsNCiAgICB1aW50IF9zdXBwbHk7DQogICAgZnVuY3Rpb24gRVJDMjBCYXNlKCB1aW50IGluaXRpYWxfYmFsYW5jZSApIHsNCiAgICAgICAgX2JhbGFuY2VzW21zZy5zZW5kZXJdID0gaW5pdGlhbF9iYWxhbmNlOw0KICAgICAgICBfc3VwcGx5ID0gaW5pdGlhbF9iYWxhbmNlOw0KICAgIH0NCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgc3VwcGx5KSB7DQogICAgICAgIHJldHVybiBfc3VwcGx5Ow0KICAgIH0NCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoIGFkZHJlc3Mgd2hvICkgY29uc3RhbnQgcmV0dXJucyAodWludCB2YWx1ZSkgew0KICAgICAgICByZXR1cm4gX2JhbGFuY2VzW3dob107DQogICAgfQ0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKCBhZGRyZXNzIHRvLCB1aW50IHZhbHVlKSByZXR1cm5zIChib29sIG9rKSB7DQogICAgICAgIGlmKCBfYmFsYW5jZXNbbXNnLnNlbmRlcl0gPCB2YWx1ZSApIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIGlmKCAhc2FmZVRvQWRkKF9iYWxhbmNlc1t0b10sIHZhbHVlKSApIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIF9iYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSB2YWx1ZTsNCiAgICAgICAgX2JhbGFuY2VzW3RvXSArPSB2YWx1ZTsNCiAgICAgICAgVHJhbnNmZXIoIG1zZy5zZW5kZXIsIHRvLCB2YWx1ZSApOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKCBhZGRyZXNzIGZyb20sIGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spIHsNCiAgICAgICAgLy8gaWYgeW91IGRvbid0IGhhdmUgZW5vdWdoIGJhbGFuY2UsIHRocm93DQogICAgICAgIGlmKCBfYmFsYW5jZXNbZnJvbV0gPCB2YWx1ZSApIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIC8vIGlmIHlvdSBkb24ndCBoYXZlIGFwcHJvdmFsLCB0aHJvdw0KICAgICAgICBpZiggX2FwcHJvdmFsc1tmcm9tXVttc2cuc2VuZGVyXSA8IHZhbHVlICkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgaWYoICFzYWZlVG9BZGQoX2JhbGFuY2VzW3RvXSwgdmFsdWUpICkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgLy8gdHJhbnNmZXIgYW5kIHJldHVybiB0cnVlDQogICAgICAgIF9hcHByb3ZhbHNbZnJvbV1bbXNnLnNlbmRlcl0gLT0gdmFsdWU7DQogICAgICAgIF9iYWxhbmNlc1tmcm9tXSAtPSB2YWx1ZTsNCiAgICAgICAgX2JhbGFuY2VzW3RvXSArPSB2YWx1ZTsNCiAgICAgICAgVHJhbnNmZXIoIGZyb20sIHRvLCB2YWx1ZSApOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpIHJldHVybnMgKGJvb2wgb2spIHsNCiAgICAgICAgX2FwcHJvdmFsc1ttc2cuc2VuZGVyXVtzcGVuZGVyXSA9IHZhbHVlOw0KICAgICAgICBBcHByb3ZhbCggbXNnLnNlbmRlciwgc3BlbmRlciwgdmFsdWUgKTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIG93bmVyLCBhZGRyZXNzIHNwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQgX2FsbG93YW5jZSkgew0KICAgICAgICByZXR1cm4gX2FwcHJvdmFsc1tvd25lcl1bc3BlbmRlcl07DQogICAgfQ0KICAgIGZ1bmN0aW9uIHNhZmVUb0FkZCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCkgew0KICAgICAgICByZXR1cm4gKGEgKyBiID49IGEpOw0KICAgIH0NCn0NCg0KY29udHJhY3QgUmVkdWNlZFRva2VuIHsNCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIHJldHVybnMgKHVpbnQyNTYpOw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCk7DQogICAgZnVuY3Rpb24gbWlncmF0ZSh1aW50MjU2IF92YWx1ZSk7DQp9DQoNCmNvbnRyYWN0IERlcG9zaXRCcm9rZXJJbnRlcmZhY2Ugew0KICAgIGZ1bmN0aW9uIGNsZWFyKCk7DQp9DQoNCmNvbnRyYWN0IFRva2VuV3JhcHBlckludGVyZmFjZSBpcyBFUkMyMCB7DQogICAgZnVuY3Rpb24gd2l0aGRyYXcodWludCBhbW91bnQpOw0KDQogICAgLy8gTk8gZGVwb3NpdCwgbXVzdCBiZSBkb25lIHZpYSBicm9rZXIhIFNvcnJ5IQ0KICAgIGZ1bmN0aW9uIGNyZWF0ZUJyb2tlcigpIHJldHVybnMgKERlcG9zaXRCcm9rZXJJbnRlcmZhY2UpOw0KDQogICAgLy8gYnJva2VyIGNvbnRyYWN0cyBvbmx5IC0gdHJhbnNmZXIgdG8gYSBwZXJzb25hbCBicm9rZXIgdGhlbiB1c2UgYGNsZWFyYA0KICAgIGZ1bmN0aW9uIG5vdGlmeURlcG9zaXQodWludCBhbW91bnQpOw0KDQogICAgZnVuY3Rpb24gZ2V0QnJva2VyKGFkZHJlc3Mgb3duZXIpIHJldHVybnMgKERlcG9zaXRCcm9rZXJJbnRlcmZhY2UpOw0KfQ0KDQpjb250cmFjdCBEZXBvc2l0QnJva2VyIGlzIERlcG9zaXRCcm9rZXJJbnRlcmZhY2Ugew0KICAgIFJlZHVjZWRUb2tlbiBfZzsNCiAgICBUb2tlbldyYXBwZXJJbnRlcmZhY2UgX3c7DQogICAgZnVuY3Rpb24gRGVwb3NpdEJyb2tlciggUmVkdWNlZFRva2VuIHRva2VuICkgew0KICAgICAgICBfdyA9IFRva2VuV3JhcHBlckludGVyZmFjZShtc2cuc2VuZGVyKTsNCiAgICAgICAgX2cgPSB0b2tlbjsNCiAgICB9DQogICAgZnVuY3Rpb24gY2xlYXIoKSB7DQogICAgICAgIHZhciBhbW91bnQgPSBfZy5iYWxhbmNlT2YodGhpcyk7DQogICAgICAgIF9nLnRyYW5zZmVyKF93LCBhbW91bnQpOw0KICAgICAgICBfdy5ub3RpZnlEZXBvc2l0KGFtb3VudCk7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBUb2tlbldyYXBwZXJFdmVudHMgew0KICAgIGV2ZW50IExvZ0Jyb2tlcihhZGRyZXNzIGluZGV4ZWQgYnJva2VyKTsNCn0NCg0KLy8gRGVwb3NpdHMgb25seSBhY2NlcHRlZCB2aWEgYnJva2VyIQ0KY29udHJhY3QgVG9rZW5XcmFwcGVyIGlzIEVSQzIwQmFzZSgwKSwgVG9rZW5XcmFwcGVySW50ZXJmYWNlLCBUb2tlbldyYXBwZXJFdmVudHMgew0KICAgIFJlZHVjZWRUb2tlbiBfdW53cmFwcGVkOw0KICAgIG1hcHBpbmcoYWRkcmVzcz0+YWRkcmVzcykgX2Jyb2tlcjJvd25lcjsNCiAgICBtYXBwaW5nKGFkZHJlc3M9PmFkZHJlc3MpIF9vd25lcjJicm9rZXI7DQogICAgZnVuY3Rpb24gVG9rZW5XcmFwcGVyKCBSZWR1Y2VkVG9rZW4gdW53cmFwcGVkKSB7DQogICAgICAgIF91bndyYXBwZWQgPSB1bndyYXBwZWQ7DQogICAgfQ0KICAgIGZ1bmN0aW9uIGNyZWF0ZUJyb2tlcigpIHJldHVybnMgKERlcG9zaXRCcm9rZXJJbnRlcmZhY2UpIHsNCiAgICAgICAgRGVwb3NpdEJyb2tlciBicm9rZXI7DQogICAgICAgIGlmKCBfb3duZXIyYnJva2VyW21zZy5zZW5kZXJdID09IGFkZHJlc3MoMCkgKSB7DQogICAgICAgICAgICBicm9rZXIgPSBuZXcgRGVwb3NpdEJyb2tlcihfdW53cmFwcGVkKTsNCiAgICAgICAgICAgIF9icm9rZXIyb3duZXJbYnJva2VyXSA9IG1zZy5zZW5kZXI7DQogICAgICAgICAgICBfb3duZXIyYnJva2VyW21zZy5zZW5kZXJdID0gYnJva2VyOw0KICAgICAgICAgICAgTG9nQnJva2VyKGJyb2tlcik7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICBicm9rZXIgPSBEZXBvc2l0QnJva2VyKF9vd25lcjJicm9rZXJbbXNnLnNlbmRlcl0pOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICByZXR1cm4gYnJva2VyOw0KICAgIH0NCiAgICBmdW5jdGlvbiBub3RpZnlEZXBvc2l0KHVpbnQgYW1vdW50KSB7DQogICAgICAgIHZhciBvd25lciA9IF9icm9rZXIyb3duZXJbbXNnLnNlbmRlcl07DQogICAgICAgIGlmKCBvd25lciA9PSBhZGRyZXNzKDApICkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgX2JhbGFuY2VzW293bmVyXSArPSBhbW91bnQ7DQogICAgICAgIF9zdXBwbHkgKz0gYW1vdW50Ow0KICAgIH0NCiAgICBmdW5jdGlvbiB3aXRoZHJhdyh1aW50IGFtb3VudCkgew0KICAgICAgICBpZiggX2JhbGFuY2VzW21zZy5zZW5kZXJdIDwgYW1vdW50ICkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgX2JhbGFuY2VzW21zZy5zZW5kZXJdIC09IGFtb3VudDsNCiAgICAgICAgX3N1cHBseSAtPSBhbW91bnQ7DQogICAgICAgIF91bndyYXBwZWQudHJhbnNmZXIobXNnLnNlbmRlciwgYW1vdW50KTsNCiAgICB9DQogICAgZnVuY3Rpb24gZ2V0QnJva2VyKGFkZHJlc3Mgb3duZXIpIHJldHVybnMgKERlcG9zaXRCcm9rZXJJbnRlcmZhY2UpIHsNCiAgICAgICAgcmV0dXJuIERlcG9zaXRCcm9rZXIoX293bmVyMmJyb2tlclttc2cuc2VuZGVyXSk7DQogICAgfQ0KfQ=='