base 64 content
base64tracker1
	^'Y29udHJhY3QgT3duYWJsZSB7DQogIGFkZHJlc3MgcHVibGljIG93bmVyOw0KDQogIGZ1bmN0aW9uIE93bmFibGUoKSB7DQogICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICB9DQoNCiAgbW9kaWZpZXIgb25seU93bmVyKCkgew0KICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7DQogICAgICB0aHJvdzsNCiAgICB9DQogICAgXzsNCiAgfQ0KDQp9DQoNCg0KLy8vVGhpcyBpcyB0aGUgYmxvY2tjaGFpbiBzaWRlIG9mIHRoZSBub3RpZmllci4gSGVyZSBzbyB0aGF0IHBheW1lbnQsIHJlZ2lzdGVyaW5nLGV0YyBpcyBwYWlubGVzcyBhc3luYyBhbmQNCi8vLyBtb3N0IGltcG9ydGFudGx5ICp0cnVzdGxlc3MqIHNpbmNlIHlvdSBjYW4gZXhpdCBhdCBhbnkgdGltZSB0YWtpbmcgeW91ciBmdW5kcyBoYXZpbmcgbG9zdCBub3RoaW5nDQoNCi8vL0BhdXRob3Iga2luZ2NvY29tYW5nb0BnbWFpbC5jb20NCi8vL0B0aXRsZSBQcmljZSBub3RpZmllcg0KY29udHJhY3QgVHJhY2tlciBpcyBPd25hYmxlew0KICAgIC8vIFRoaXMgcmVwcmVzZW50cyBhIGNsaWVudCBpbiB0aGUgc2ltcGxlc3QgZm9ybQ0KICAgIC8vIE9ubHkgdHJhY2tzIGEgc2luZ2xlIGN1cnJlbmN5IHBhaXIsIGhhcmRjb2RlZA0KICAgIHN0cnVjdCBTaW1wbGVDbGllbnR7DQogICAgICAgIHVpbnQ4IHJhdGlvOy8vIHJhdGlvIHRyaWdnZXINCiAgICAgICAgdWludCBkb3NoOy8vIENsaWVudHMgZG9zaA0KICAgICAgICBzdHJpbmcgSGFzaDsvLyBwaG9uZSBudW1iZXIgYXMgYSB1dGYtOCBzdHJpbmcsIG9yIGEgaGFzaCBvZiBvbmUgZnJvbSB3ZWJzZXJ2aWNlDQogICAgICAgIHVpbnQgdGltZTsvLyBsYXN0IHRpbWUgY2xpZW50IHdhcyBkZWJpdGVkLiBTdGFydHMgYXMgY3JlYXRpb24gdGltZQ0KICAgIH0NCiAgICANCiAgICAvLyBUaGlzIGlzIHRoZSBtYXBwaW5nIGJldHdlZW4gZXRoIGFkZHIgYW5kIGNsaWVudCBzdHJ1Y3RzDQogICAgbWFwcGluZyhhZGRyZXNzID0+IFNpbXBsZUNsaWVudCkgcHVibGljIENsaWVudHM7DQogICAgLy8gVGhpcyBpcyB1c2VkIHRvIHN0b3JlIHRoZSBjdXJyZW50IHRvdGFsIG9ibGlnYXRpb25zIHRvIGNsaWVudHMNCiAgICB1aW50IHB1YmxpYyBvYmxpZ2F0aW9uczsNCiAgICANCiAgICAvLyBFdmVudHMgZm9yIGNsaWVudHMgcmVnaXN0ZXJpbmcgYW5kIGxlYXZpbmcNCiAgICAvLyBUaGlzIG1lYW5zIHJlY29nbml6aW5nIHRoZSBzZXQgb2YgY3VycmVudCBjbGllbnRzLCBmb3Igc2VuZGluZyBhbmQgZGViaXRpbmcgY2FuIGJlIGRvbmUgb2ZmLWNoYWluDQogICAgZXZlbnQgQ2xpZW50UmVnaXN0ZXJlZChhZGRyZXNzIENsaWVudCk7DQogICAgZXZlbnQgQ2xpZW50RXhpdGVkKGFkZHJlc3MgQ2xpZW50KTsNCiAgICANCiAgICAvLyBDb25zdGFudHMgdXNlZCBmb3IgY29uZmlndXJhdGlvbg0KICAgIHVpbnQgY29uc3RhbnQgUGVyaW9kID0gMSBkYXlzOyAvLyBhbW91bnQgb2YgdGltZSBiZXR3ZWVuIGRlYml0cyBFUlJPUiBzZXQgdGhlc2UgdmFsdWVzIGZvciByZWxlYXNlDQogICAgdWludCBjb25zdGFudCBGZWUgPSAxIGZpbm5leTsgLy8gYW1vdW50IGRlYml0ZWQgcGVyIHBlcmlvZA0KICAgIHVpbnQ4IGNvbnN0YW50IE1pbmludW1QZXJjZW50ID0gNTsgLy8gdGhpcyBpcyB0aGUgbWluaW11bSByYXRpbyBhbGxvd2VkLiBUT0RPIHNldCB0byA1IGZvciBzbXMgY29udHJhY3QNCg0KICAgIA0KICAgIC8vIFRoaXMgZnVuY3Rpb24gcmVnaXN0ZXJzIGEgbmV3IGNsaWVudCwgYW5kIGNhbiBiZSB1c2VkIHRvIGFkZCBmdW5kcyBvciBjaGFuZ2UgcmF0aW8NCiAgICBmdW5jdGlvbiBSZWdpc3Rlcih1aW50OCByYXRpbywgc3RyaW5nIEhhc2gpIHBheWFibGUgZXh0ZXJuYWwgew0KICAgICAgICB2YXIgTmV3Q2xpZW50ID0gU2ltcGxlQ2xpZW50KHJhdGlvPj1NaW5pbnVtUGVyY2VudD9yYXRpbzpNaW5pbnVtUGVyY2VudCwgbXNnLnZhbHVlLCBIYXNoLCBub3cpOyAvLyBjcmVhdGUgbmV3IGNsaWVudA0KICAgICAgICAvLyBub3RlIHRoYXQgcmF0aW8gaXMgbm90IGFsbG93ZWQgdG8gYmUgc21hbGxlciB0aGFuIE1pbmludW1QZXJjZW50JQ0KICAgICAgICAvLyBJbiBjYXNlIHNvbWVvbmUgcmVnaXN0ZXJzIG92ZXIgdGhlbXNlbHZlcywga2VlcCB0aGVpciBtb25leSBhcm91bmQNCiAgICAgICAgTmV3Q2xpZW50LmRvc2ggKz0gQ2xpZW50c1ttc2cuc2VuZGVyXS5kb3NoOyAvLyBrZWVwIHRoZWlyIG9sZCBhY2NvdW50IHJ1bm5pbmcNCiAgICAgICAgQ2xpZW50c1ttc2cuc2VuZGVyXSA9IE5ld0NsaWVudDsgLy8gcmVnaXN0ZXIgdGhlbQ0KICAgICAgICAvLyBub3RpZnkgdGhlIGxpc3RuZXJzDQogICAgICAgIENsaWVudFJlZ2lzdGVyZWQobXNnLnNlbmRlcik7DQogICAgICAgIC8vIGFuZCBpbmNyZW1lbnQgY3VycmVudCB0b3RhbCBvYmxpZ2F0aW9ucw0KICAgICAgICBvYmxpZ2F0aW9ucyArPSBtc2cudmFsdWU7DQogICAgICAgIA0KICAgIH0NCiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc3RvcCB1c2luZyB0aGUgc2VydmljZQ0KICAgIGZ1bmN0aW9uIEV4aXQoKSBleHRlcm5hbCB7DQogICAgICAgIHVpbnQgdG9zZW5kID0gQ2xpZW50c1ttc2cuc2VuZGVyXS5kb3NoOw0KICAgICAgICAvLyBBbmQgcmVtb3ZlIHRoZSBtb25leSB0aGV5IHdpdGhkcmV3IGZyb20gb3VyIG9ibGlnYXRpb25zDQogICAgICAgIG9ibGlnYXRpb25zIC09IHRvc2VuZDsNCiAgICAgICAgLy8gaWYgdGhlIHNlbmRpbmcgZmFpbHMsIGFsbCBvZiB0aGlzIHVud2luZHMuDQogICAgICAgIENsaWVudHNbbXNnLnNlbmRlcl0uZG9zaD0gMDsgLy8gd2Ugc2V0IGl0IGhlcmUgdG8gaXRzIHNhZmUgdG8gc2VuZCBtb25leQ0KICAgICAgICAvLyBOb3RpZnkgbGlzdG5lcnMgY2xpZW50IGhhcyBsZWZ0DQogICAgICAgIENsaWVudEV4aXRlZChtc2cuc2VuZGVyKTsNCiAgICAgICAgLy8gc2VuZCB0byB0aGUgY2FsbGVyIHRoZSBtb25leSB0aGVpciBzdHJ1Y3R1cmUgc2F5cyB0aGV5IGhhdmUNCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcih0b3NlbmQpOw0KICAgICAgICANCiAgICB9DQogICAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGNoYW5nZSB0aGUgcGhvbmUgbnVtYmVyIGluIHRoZSBzZXJ2aWNlDQogICAgZnVuY3Rpb24gQ2hhbmdlTnVtYmVyKHN0cmluZyBOZXdIYXNoKSBleHRlcm5hbCB7IC8vIFRoZSB3YXkgdGhpcyBtb2RpZmllcyBzdGF0ZSBpcyBpbnZpc2libGUgdG8gdGhlIGNvbnRyYWN0LHNvIG5vIHByb2JsZW1vDQogICAgICAgIENsaWVudHNbbXNnLnNlbmRlcl0uSGFzaCA9IE5ld0hhc2g7DQogICAgICAgIENsaWVudEV4aXRlZChtc2cuc2VuZGVyKTsNCiAgICAgICAgQ2xpZW50UmVnaXN0ZXJlZChtc2cuc2VuZGVyKTsgLy8gVGhpcyBjaGVhcCBzZXF1ZW5jZSBvZiBldmVudHMgY2hhbmdlcyB0aGUgbnVtYmVyLCBhbmQgbm90aWZpZXMgdGhlIGJhY2tlbmQgc2VydmljZQ0KICAgIH0NCiAgICAvLyBVc2VkIHRvIGNoYXJnZSBhIGNsaWVudA0KICAgIGZ1bmN0aW9uIERlYml0Q2xpZW50KGFkZHJlc3MgY2xpZW50KSBleHRlcm5hbHsvLyBzaW5jZSBvd25lciBpcyBwcm92YWJsZSBhbiBFT0MsIGNhbnQgYWJ1c2UgcmVlbnRyYW5jeQ0KICAgICAgICB1aW50IFRvdGFsRmVlOw0KICAgICAgICB1aW50IHRpbWVkaWYgPSBub3ctQ2xpZW50c1tjbGllbnRdLnRpbWU7IC8vIGhvdyBsb25nIHNpbmNlIGxhc3QgY2FsbCBvbiB0aGlzIGNsaWVudA0KICAgICAgICB1aW50IHBlcmlvZG11bHRpID0gdGltZWRpZi9QZXJpb2Q7IC8vIEhvdyBtYW55IHBlcmlvZHMgcGFzc2VkDQogICAgICAgIGlmKHBlcmlvZG11bHRpPjApeyAvLyB0aW1lZGlmIGlzID49IFBlcmlvZA0KICAgICAgICAgIFRvdGFsRmVlID0gRmVlKnBlcmlvZG11bHRpOyAvLyAxIHBlcmlvZCBmZWUgcGVyIG11bHRpcGxlIG9mIHBlcmlvZA0KICAgICAgICB9ZWxzZXsvLyBpdCB3YXMgc21hbGxlciB0aGFuIHBlcmlvZC4gV2FzdGVkIGdhcw0KICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIGlmKENsaWVudHNbY2xpZW50XS5kb3NoIDwgVG90YWxGZWUpeyAvLyBub3QgZW5vdWdoDQogICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgQ2xpZW50c1tjbGllbnRdLmRvc2ggLT0gVG90YWxGZWU7DQogICAgICAgIG9ibGlnYXRpb25zIC09IFRvdGFsRmVlOw0KICAgICAgICBDbGllbnRzW2NsaWVudF0udGltZSArPSBQZXJpb2QqcGVyaW9kbXVsdGk7IC8vIGNsaWVudCBnb3QgY2hhcmdlZCBmb3IgcGVyaW9kbXVsdGkgcGVyaW9kcywgc28gYWRkIHRoYXQgdG8gdGhlaXIgdGltZSBwYWlkDQogICAgfQ0KICAgIC8vIHVzZWQgdG8gY2hhcmdlIGZvciBhIHNpbmdsZSB0aW1lIHBlcmlvZCwgaW4gY2FzZSBjbGllbnQgZG9lc250IGhhdmUgZW5vdWdoIGRvc2ggdG8gcGF5IGFsbCBmZWVzIA0KICAgIGZ1bmN0aW9uIERlYml0Q2xpZW50T25jZShhZGRyZXNzIGNsaWVudCkgZXh0ZXJuYWx7Ly8gc2luY2Ugb3duZXIgaXMgcHJvdmFibGUgYW4gRU9DLCBjYW50IGFidXNlIHJlZW50cmFuY3kNCiAgICAgICAgdWludCB0aW1lZGlmID0gbm93LUNsaWVudHNbY2xpZW50XS50aW1lOyAvLyBob3cgbG9uZyBzaW5jZSBsYXN0IGNhbGwgb24gdGhpcyBjbGllbnQNCiAgICAgICAgaWYodGltZWRpZjxQZXJpb2QpeyAvLyB0b28gc29vbiwgd2FzdGVkLg0KICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIGlmKENsaWVudHNbY2xpZW50XS5kb3NoIDwgRmVlKXsgLy8gbm90IGVub3VnaA0KICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgICAgIENsaWVudHNbY2xpZW50XS5kb3NoIC09IEZlZTsNCiAgICAgICAgb2JsaWdhdGlvbnMgLT0gRmVlOw0KICAgICAgICBDbGllbnRzW2NsaWVudF0udGltZSArPSBQZXJpb2Q7IC8vIGNsaWVudCBnb3QgY2hhcmdlZCBmb3IgMSBwZXJpb2QsIHNvIGFkZCB0aGF0IHRvIHRoZWlyIHRpbWUgcGFpZA0KICAgIH0NCiAgICANCiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gd2l0aGRyYXcgZXRoZXINCiAgICBmdW5jdGlvbiBXaXRoZHJhdyh1aW50IGFtb3VudCkgb25seU93bmVyIGV4dGVybmFseyAvLyBzaW5jZSBvd25lciBpcyBwcm92YWJsZSBhbiBFT0MsIGNhbnQgYWJ1c2UgcmVlbnRyYW5jeQ0KICAgICAgICBpZih0aGlzLmJhbGFuY2UgPD0gb2JsaWdhdGlvbnMpeyAvLyB0aGlzIHNob3VsZCBwcm9iYWJseSBiZSByZW1vdmVkIGZyb20gcHJvZHVjdGlvbiBjb2RlLiBCdXQgdGhlb3JldGljYWxseSBpdCBjYW4gbmV2ZXIgaGFwcGVuDQogICAgICAgICAgICB0aHJvdzsgLy8gU29tZWhvdywgd2UgY2FudCBldmVuIGNvdmVyIG91ciBvYmxpZ2F0aW9ucy4gVGhpcyBtZWFucyBzb21ldGhpbmcgdmVyeSB3cm9uZyBoYXMgaGFwcGVuZWQNCiAgICAgICAgICAgIHNlbGZkZXN0cnVjdChvd25lcik7Ly8gVGhpcyBzaG91bGQgYmUgaW1wb3NzaWJsZSwgYnV0IGl0IG1lYW5zIEkgY2FuIG1hbnVhbGx5IHJlaW1idXJzZSBpZiBTSFRGDQogICAgICAgIH0NCiAgICAgICAgaWYoKHRoaXMuYmFsYW5jZSAtIG9ibGlnYXRpb25zKSA8PSBhbW91bnQgKXsvLyBhdmFpbGFibGUgYmFsYW5jZSBkb2VzbnQgY292ZXIgd2l0aGRyYXdhbA0KICAgICAgICAgICAgdGhyb3c7IC8vIG5vdCBhbGxvd2VkDQogICAgICAgIH0NCiAgICAgICAgb3duZXIudHJhbnNmZXIoYW1vdW50KTsvLyBBbGwgY2hlY2tzIHBhc3NlZCwgdGFrZSB0aGUgbW9uZXkNCiAgICB9DQp9'