base 64 content
base64vISTAcoin
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCmxpYnJhcnkgU2FmZU1hdGggew0KCWZ1bmN0aW9uIG11bCh1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KCQl1aW50IGMgPSBhICogYjsNCgkJYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsNCgkJcmV0dXJuIGM7DQoJfQ0KCQ0KCWZ1bmN0aW9uIGRpdih1aW50IGEsIHVpbnQgYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KCQlhc3NlcnQoYiA+IDApOw0KCQl1aW50IGMgPSBhIC8gYjsNCgkJYXNzZXJ0KGEgPT0gYiAqIGMgKyBhICUgYik7DQoJCXJldHVybiBjOw0KCX0NCgkNCglmdW5jdGlvbiBzdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCgkJYXNzZXJ0KGIgPD0gYSk7DQoJCXJldHVybiBhIC0gYjsNCgl9DQoJDQoJZnVuY3Rpb24gYWRkKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQoJCXVpbnQgYyA9IGEgKyBiOw0KCQlhc3NlcnQoYyA+PSBhKTsNCgkJcmV0dXJuIGM7DQoJfQ0KCQ0KCWZ1bmN0aW9uIG1heDY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7DQoJCXJldHVybiBhID49IGIgPyBhIDogYjsNCgl9DQoJDQoJZnVuY3Rpb24gbWluNjQodWludDY0IGEsIHVpbnQ2NCBiKSBpbnRlcm5hbCBjb25zdGFudCByZXR1cm5zICh1aW50NjQpIHsNCgkJcmV0dXJuIGEgPCBiID8gYSA6IGI7DQoJfQ0KCQ0KCWZ1bmN0aW9uIG1heDI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikgew0KCQlyZXR1cm4gYSA+PSBiID8gYSA6IGI7DQoJfQ0KCQ0KCWZ1bmN0aW9uIG1pbjI1Nih1aW50MjU2IGEsIHVpbnQyNTYgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDI1Nikgew0KCQlyZXR1cm4gYSA8IGIgPyBhIDogYjsNCgl9DQoJDQoJZnVuY3Rpb24gYXNzZXJ0KGJvb2wgYXNzZXJ0aW9uKSBpbnRlcm5hbCB7DQoJCWlmICghYXNzZXJ0aW9uKSB7DQoJCQl0aHJvdzsNCiAgICB9DQogIH0NCn0NCg0KDQpjb250cmFjdCBPd25hYmxlIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBvd25lcjsNCiAgICBmdW5jdGlvbiBPd25hYmxlKCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgfQ0KCQ0KICAgIG1vZGlmaWVyIG9ubHlPd25lciB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsNCiAgICAgICAgXzsNCiAgICB9DQoJDQogICAgZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIHsNCiAgICAgICAgaWYgKG5ld093bmVyICE9IGFkZHJlc3MoMCkpIHsNCiAgICAgICAgICAgIG93bmVyID0gbmV3T3duZXI7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCg0KDQovKg0KICogUGF1c2FibGUgRnVuY3Rpb24NCiAqIEFic3RyYWN0IGNvbnRyYWN0IHRoYXQgYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBhbiBlbWVyZ2VuY3kgc3RvcCBmdW5jdGlvbi4gDQogKi8NCmNvbnRyYWN0IFBhdXNhYmxlIGlzIE93bmFibGUgew0KCWJvb2wgcHVibGljIHN0b3BwZWQgPSBmYWxzZTsNCgltb2RpZmllciBzdG9wSW5FbWVyZ2VuY3kgew0KCQlpZiAoc3RvcHBlZCkgew0KCQkJdGhyb3c7DQoJCX0NCgkJXzsNCgl9DQogIA0KCW1vZGlmaWVyIG9ubHlJbkVtZXJnZW5jeSB7DQoJCWlmICghc3RvcHBlZCkgew0KCQkJdGhyb3c7DQoJCX0NCgkJXzsNCgl9DQoJDQovKg0KICogRW1lcmdlbmN5U3RvcCBGdW5jdGlvbg0KICogY2FsbGVkIGJ5IHRoZSBvd25lciBvbiBlbWVyZ2VuY3ksIHRyaWdnZXJzIHN0b3BwZWQgc3RhdGUgDQogKi8NCmZ1bmN0aW9uIGVtZXJnZW5jeVN0b3AoKSBleHRlcm5hbCBvbmx5T3duZXIgew0KICAgIHN0b3BwZWQgPSB0cnVlOw0KCX0NCg0KCQ0KLyoNCiAqIFJlbGVhc2UgRW1lcmdlbmN5U3RhdGUgRnVuY3Rpb24NCiAqIGNhbGxlZCBieSB0aGUgb3duZXIgb24gZW5kIG9mIGVtZXJnZW5jeSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUNCiAqLyAgDQoNCmZ1bmN0aW9uIHJlbGVhc2UoKSBleHRlcm5hbCBvbmx5T3duZXIgb25seUluRW1lcmdlbmN5IHsNCiAgICBzdG9wcGVkID0gZmFsc2U7DQoJfQ0KfQ0KDQovKg0KICogRVJDMjBCYXNpYyBjbGFzcw0KICogQWJzdHJhY3QgY29udHJhY3QgdGhhdCBhbGxvd3MgY2hpbGRyZW4gdG8gaW1wbGVtZW50IEVSQzIwYmFzaWMgcGVyc2lzdGVudCBkYXRhIGluIHN0YXRlIHZhcmlhYmxlcy4NCiAqLyAJDQpjb250cmFjdCBFUkMyMEJhc2ljIHsNCiAgdWludCBwdWJsaWMgdG90YWxTdXBwbHk7DQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIHdobykgY29uc3RhbnQgcmV0dXJucyAodWludCk7DQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgdG8sIHVpbnQgdmFsdWUpOw0KICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50IHZhbHVlKTsNCn0NCg0KDQovKg0KICogRVJDMjAgY2xhc3MNCiAqIEFic3RyYWN0IGNvbnRyYWN0IHRoYXQgYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBFUkMyMCBwZXJzaXN0ZW50IGRhdGEgaW4gc3RhdGUgdmFyaWFibGVzLg0KICovIA0KY29udHJhY3QgRVJDMjAgaXMgRVJDMjBCYXNpYyB7DQoJZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3Mgb3duZXIsIGFkZHJlc3Mgc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCk7DQoJZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgZnJvbSwgYWRkcmVzcyB0bywgdWludCB2YWx1ZSk7DQoJZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIHNwZW5kZXIsIHVpbnQgdmFsdWUpOw0KCWV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBvd25lciwgYWRkcmVzcyBpbmRleGVkIHNwZW5kZXIsIHVpbnQgdmFsdWUpOw0KfQ0KDQoNCg0KLyoNCiAqIEJhc2ljVG9rZW4gY2xhc3MNCiAqIEFic3RyYWN0IGNvbnRyYWN0IHRoYXQgYWxsb3dzIGNoaWxkcmVuIHRvIGltcGxlbWVudCBCYXNpY1Rva2VuIGZ1bmN0aW9ucyBhbmQgIHBlcnNpc3RlbnQgZGF0YSBpbiBzdGF0ZSB2YXJpYWJsZXMuDQogKi8NCg0KY29udHJhY3QgQmFzaWNUb2tlbiBpcyBFUkMyMEJhc2ljIHsNCiAgDQoJdXNpbmcgU2FmZU1hdGggZm9yIHVpbnQ7DQogIA0KCW1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSBiYWxhbmNlczsNCiAgDQoJLyoNCgkqIEZpeCBmb3IgdGhlIEVSQzIwIHNob3J0IGFkZHJlc3MgYXR0YWNrICANCgkqLw0KCW1vZGlmaWVyIG9ubHlQYXlsb2FkU2l6ZSh1aW50IHNpemUpIHsNCgkJaWYobXNnLmRhdGEubGVuZ3RoIDwgc2l6ZSArIDQpIHsNCgkJdGhyb3c7DQoJCX0NCgkJXzsNCgl9DQoJDQoJZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQgX3ZhbHVlKSBvbmx5UGF5bG9hZFNpemUoMiAqIDMyKSB7DQoJCWJhbGFuY2VzW21zZy5zZW5kZXJdID0gYmFsYW5jZXNbbXNnLnNlbmRlcl0uc3ViKF92YWx1ZSk7DQoJCWJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOw0KCQlUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQoJfQ0KCQ0KCWZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgY29uc3RhbnQgcmV0dXJucyAodWludCBiYWxhbmNlKSB7DQoJCXJldHVybiBiYWxhbmNlc1tfb3duZXJdOw0KCX0NCn0NCg0KDQoNCi8qDQogKiBTdGFuZGFyZFRva2VuIGNsYXNzDQogKiBBYnN0cmFjdCBjb250cmFjdCB0aGF0IGFsbG93cyBjaGlsZHJlbiB0byBpbXBsZW1lbnQgU3RhbmRUb2tlbiBmdW5jdGlvbnMgYW5kICBwZXJzaXN0ZW50IGRhdGEgaW4gc3RhdGUgdmFyaWFibGVzLg0KICovDQpjb250cmFjdCBTdGFuZGFyZFRva2VuIGlzIEJhc2ljVG9rZW4sIEVSQzIwIHsNCgltYXBwaW5nIChhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludCkpIGFsbG93ZWQ7DQoJZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50IF92YWx1ZSkgb25seVBheWxvYWRTaXplKDMgKiAzMikgew0KICAgIHZhciBfYWxsb3dhbmNlID0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl07DQogICAgLy8gQ2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHN1YihfYWxsb3dhbmNlLCBfdmFsdWUpIHdpbGwgYWxyZWFkeSB0aHJvdyBpZiB0aGlzIGNvbmRpdGlvbiBpcyBub3QgbWV0DQogICAgLy8gaWYgKF92YWx1ZSA+IF9hbGxvd2FuY2UpIHRocm93Ow0KICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dLmFkZChfdmFsdWUpOw0KICAgIGJhbGFuY2VzW19mcm9tXSA9IGJhbGFuY2VzW19mcm9tXS5zdWIoX3ZhbHVlKTsNCiAgICBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSA9IF9hbGxvd2FuY2Uuc3ViKF92YWx1ZSk7DQogICAgVHJhbnNmZXIoX2Zyb20sIF90bywgX3ZhbHVlKTsNCiAgfQ0KCWZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludCBfdmFsdWUpIHsNCgkJLy8gVG8gY2hhbmdlIHRoZSBhcHByb3ZlIGFtb3VudCB5b3UgZmlyc3QgaGF2ZSB0byByZWR1Y2UgdGhlIGFkZHJlc3Nlc2ANCgkJLy8gIGFsbG93YW5jZSB0byB6ZXJvIGJ5IGNhbGxpbmcgYGFwcHJvdmUoX3NwZW5kZXIsIDApYCBpZiBpdCBpcyBub3QNCgkJLy8gIGFscmVhZHkgMCB0byBtaXRpZ2F0ZSB0aGUgcmFjZSBjb25kaXRpb24gZGVzY3JpYmVkIGhlcmU6DQoJCS8vICBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMjAjaXNzdWVjb21tZW50LTI2MzUyNDcyOQ0KCQlpZiAoKF92YWx1ZSAhPSAwKSAmJiAoYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gIT0gMCkpIHRocm93Ow0KCQlhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsNCgkJQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7DQoJfQ0KCWZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludCByZW1haW5pbmcpIHsNCgkJcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQoJfQ0KfQ0KDQoNCg0KLyoqDQogKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KICogVklTVEEgdG9rZW4gc21hcnQgY29udHJhY3QuIEltcGxlbWVudHMNCiAqIFZJU1RBQ09JTiBjbGFzcw0KICovDQpjb250cmFjdCBWSVNUQWNvaW4gaXMgU3RhbmRhcmRUb2tlbiwgT3duYWJsZSB7DQoJc3RyaW5nIHB1YmxpYyBjb25zdGFudCBuYW1lID0gIlZJU1RBY29pbiI7DQoJc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiVlRBIjsNCgl1aW50IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDA7DQoJLy8gQ29uc3RydWN0b3INCglmdW5jdGlvbiBWSVNUQWNvaW4oKSB7DQoJCXRvdGFsU3VwcGx5ID0gNTAwMDAwMDA7DQoJCWJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHk7IC8vIFNlbmQgYWxsIHRva2VucyB0byBvd25lcg0KCX0NCn0='