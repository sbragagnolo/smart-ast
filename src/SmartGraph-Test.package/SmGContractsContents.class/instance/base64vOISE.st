base 64 content
base64vOISE
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC42Ow0KIA0KY29udHJhY3QgU2FmZU1hdGggew0KICAvL2ludGVybmFscw0KIA0KICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgdWludCBjID0gYSAqIGI7DQogICAgYXNzZXJ0KGEgPT0gMCB8fCBjIC8gYSA9PSBiKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KIA0KICBmdW5jdGlvbiBzYWZlU3ViKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgYXNzZXJ0KGIgPD0gYSk7DQogICAgcmV0dXJuIGEgLSBiOw0KICB9DQogDQogIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICB1aW50IGMgPSBhICsgYjsNCiAgICBhc3NlcnQoYz49YSAmJiBjPj1iKTsNCiAgICByZXR1cm4gYzsNCiAgfQ0KIA0KICBmdW5jdGlvbiBhc3NlcnQoYm9vbCBhc3NlcnRpb24pIGludGVybmFsIHsNCiAgICBpZiAoIWFzc2VydGlvbikgdGhyb3c7DQogIH0NCn0NCiANCmNvbnRyYWN0IFZPSVNFIGlzIFNhZmVNYXRoIHsNCiAgICAvKiBQdWJsaWMgdmFyaWFibGVzIG9mIHRoZSB0b2tlbiAqLw0KICAgIHN0cmluZyBwdWJsaWMgc3RhbmRhcmQgPSAnRVJDMjAnOw0KICAgIHN0cmluZyBwdWJsaWMgbmFtZSA9ICdWT0lTRSc7DQogICAgc3RyaW5nIHB1YmxpYyBzeW1ib2wgPSAnVlNNJzsNCiAgICB1aW50OCBwdWJsaWMgZGVjaW1hbHMgPSAwOw0KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Ow0KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOw0KICAgIHVpbnQyNTYgcHVibGljIHN0YXJ0VGltZSA9IDE0OTI1NjAwMDA7DQogICAgLyogdGVsbHMgaWYgdG9rZW5zIGhhdmUgYmVlbiBidXJuZWQgYWxyZWFkeSAqLw0KICAgIGJvb2wgYnVybmVkOw0KIA0KICAgIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCB0aGUgYmFsYW5jZXMgKi8NCiAgICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlT2Y7DQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBwdWJsaWMgYWxsb3dhbmNlOw0KIA0KIA0KICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgYWxsIGNsaWVudHMgKi8NCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsNCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBzcGVuZGVyLCB1aW50MjU2IHZhbHVlKTsNCiAgICBldmVudCBCdXJuZWQodWludCBhbW91bnQpOw0KIA0KICAgIC8qIEluaXRpYWxpemVzIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBzdXBwbHkgdG9rZW5zIGFuZCBnaXZlcyB0aGVtIHRvIHRoZSB2b2lzZSB0ZWFtIGFkcmVzcyAqLw0KICAgIGZ1bmN0aW9uIFZPSVNFKCkgew0KICAgICAgICANCiAgICAgICAgb3duZXIgPSAweGJCOTMyMjJDNTRmNzJhZTk5YjI1MzlhNDQwOTNmMkVENjI1MzNFQkU7DQogICAgICAgIA0KICAgICAgICBiYWxhbmNlT2Zbb3duZXJdID0gMTAwMDAwMDAwOyAgICAgICAgICAgICAgLy8gQWxsIG9mIHRoZW0gYXJlIHN0b3JlZCBpbiB0aGUgdm9pc2UgdGVhbSBhZHJlc3MgdW50aWwgdGhleSBhcmUgYm91Z2h0DQogICAgICAgIHRvdGFsU3VwcGx5ID0gMTAwMDAwMDAwOyAgICAgICAgICAgICAgICAgICAvLyB0b3RhbCBzdXBwbHkgb2YgdG9rZW5zDQogICAgfQ0KIA0KICAgIC8qIFNlbmQgc29tZSBvZiB5b3VyIHRva2VucyB0byBhIGdpdmVuIGFkZHJlc3MgKFByZXNzIGJvdW50aWVzKSAqLw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKXsNCiAgICAgICAgaWYgKG5vdyA8IHN0YXJ0VGltZSkgdGhyb3c7IC8vY2hlY2sgaWYgdGhlIGNyb3dkc2FsZSBpcyBhbHJlYWR5IG92ZXINCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gc2FmZVN1YihiYWxhbmNlT2ZbbXNnLnNlbmRlcl0sX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgYmFsYW5jZU9mW190b10gPSBzYWZlQWRkKGJhbGFuY2VPZltfdG9dLF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgc2FtZSB0byB0aGUgcmVjaXBpZW50DQogICAgICAgIFRyYW5zZmVyKG1zZy5zZW5kZXIsIF90bywgX3ZhbHVlKTsgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSBsaXN0ZW5pbmcgdGhhdCB0aGlzIHRyYW5zZmVyIHRvb2sgcGxhY2UNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KIA0KICAgIC8qIEFsbG93IGFub3RoZXIgY29udHJhY3Qgb3IgcGVyc29uIHRvIHNwZW5kIHNvbWUgdG9rZW5zIGluIHlvdXIgYmVoYWxmICovDQogICAgZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGFsbG93YW5jZVttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfdmFsdWU7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogDQogDQogICAgLyogQSBjb250cmFjdCBvciAgcGVyc29uIGF0dGVtcHRzIHRvIGdldCB0aGUgdG9rZW5zIG9mIHNvbWVib2R5IGVsc2UuICovDQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChub3cgPCBzdGFydFRpbWUgJiYgX2Zyb20hPW93bmVyKSB0aHJvdzsgLy9jaGVjayBpZiB0aGUgY3Jvd2RzYWxlIGlzIGFscmVhZHkgb3Zlcg0KICAgICAgICB2YXIgX2FsbG93YW5jZSA9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl07DQogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gPSBzYWZlU3ViKGJhbGFuY2VPZltfZnJvbV0sX3ZhbHVlKTsgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyDQogICAgICAgIGJhbGFuY2VPZltfdG9dID0gc2FmZUFkZChiYWxhbmNlT2ZbX3RvXSxfdmFsdWUpOyAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQNCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSA9IHNhZmVTdWIoX2FsbG93YW5jZSxfdmFsdWUpOw0KICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogDQogDQogICAgLyogdG8gYmUgY2FsbGVkIHdoZW4gSUNPIGlzIGNsb3NlZCwgYnVybnMgdGhlIHJlbWFpbmluZyB0b2tlbnMuDQogICAgKiAgZm9yIHRoZSBib3VudHkgcHJvZ3JhbSAoMyUpLg0KICAgICogIGZvciAgdGVhbSAoNSUpICAqLw0KICAgIA0KICAgIGZ1bmN0aW9uIGJ1cm4oKXsNCiAgICAgICAgLy9pZiB0b2tlbnMgaGF2ZSBub3QgYmVlbiBidXJuZWQgYWxyZWFkeSBhbmQgdGhlIElDTyBlbmRlZCwgYnVybiB0aGVtDQogICAgICAgIGlmKCFidXJuZWQgJiYgbm93PnN0YXJ0VGltZSl7DQogICAgICAgICAgICB1aW50IGRpZmZlcmVuY2UgPSBzYWZlU3ViKGJhbGFuY2VPZltvd25lcl0sIDgwMDAwMDApOw0KICAgICAgICAgICAgYmFsYW5jZU9mW293bmVyXSA9IDgwMDAwMDA7DQogICAgICAgICAgICB0b3RhbFN1cHBseSA9IHNhZmVTdWIodG90YWxTdXBwbHksIGRpZmZlcmVuY2UpOw0KICAgICAgICAgICAgYnVybmVkID0gdHJ1ZTsNCiAgICAgICAgICAgIEJ1cm5lZChkaWZmZXJlbmNlKTsNCiAgICAgICAgfQ0KICAgIH0NCiANCn0='