base 64 content
base64wavesEthereumSwap7
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQovLyBBIGNvbGxhYm9yYXRpb24gYmV0d2VlbiBJbmNlbnQgYW5kIEJvayA6KQ0KLy8gRW5qb3kuIChjKSBJbmNlbnQgTG95YWx0eSBQdHkgTHRkLCBhbmQgQm9rIENvbnN1bHRpbmcgUHR5IEx0ZCAyMDE3LiBUaGUgTUlUIExpY2VuY2UuDQovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCi8vY29uZmlnIGNvbnRyYWN0DQpjb250cmFjdCBUb2tlbkNvbmZpZyB7DQoNCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiSW5jZW50IENvZmZlZSBUb2tlbiI7DQogICAgc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAiSU5DT0YiOw0KICAgIHVpbnQ4IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDA7ICAvLyAwIGRlY2ltYWwgcGxhY2VzLCB0aGUgc2FtZSBhcyB0b2tlbnMgb24gV2F2ZQ0KICAgIHVpbnQyNTYgX3RvdGFsU3VwcGx5ID0gODI0Ow0KDQp9DQoNCg0KLy8gRVJDIFRva2VuIFN0YW5kYXJkICMyMCBJbnRlcmZhY2UNCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8yMA0KY29udHJhY3QgRVJDMjBJbnRlcmZhY2Ugew0KDQogICAgLy8gR2V0IHRoZSB0b3RhbCB0b2tlbiBzdXBwbHkNCiAgICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgdG90YWxTdXBwbHkpOw0KDQogICAgLy8gR2V0IHRoZSBhY2NvdW50IGJhbGFuY2Ugb2YgYW5vdGhlciBhY2NvdW50IHdpdGggYWRkcmVzcyBfb3duZXINCiAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSk7DQoNCiAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIHRvIGFkZHJlc3MgX3RvDQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KDQogICAgLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyBmcm9tIGFkZHJlc3MgX2Zyb20gdG8gYWRkcmVzcyBfdG8NCiAgICAvLyBUaGUgdHJhbnNmZXJGcm9tIG1ldGhvZCBpcyB1c2VkIGZvciBhIHdpdGhkcmF3IHdvcmtmbG93LCBhbGxvd2luZyBjb250cmFjdHMgdG8gc2VuZA0KICAgIC8vIHRva2VucyBvbiB5b3VyIGJlaGFsZiwgZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlDQogICAgLy8gZmVlcyBpbiBzdWItY3VycmVuY2llczsgdGhlIGNvbW1hbmQgc2hvdWxkIGZhaWwgdW5sZXNzIHRoZSBfZnJvbSBhY2NvdW50IGhhcw0KICAgIC8vIGRlbGliZXJhdGVseSBhdXRob3JpemVkIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgdmlhIHNvbWUgbWVjaGFuaXNtOyB3ZSBwcm9wb3NlDQogICAgLy8gdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGFwcHJvdmFsOg0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQoNCiAgICAvLyBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50Lg0KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLg0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQoNCiAgICAvLyBSZXR1cm5zIHRoZSBhbW91bnQgd2hpY2ggX3NwZW5kZXIgaXMgc3RpbGwgYWxsb3dlZCB0byB3aXRoZHJhdyBmcm9tIF9vd25lcg0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpOw0KDQogICAgLy8gVHJpZ2dlcmVkIHdoZW4gdG9rZW5zIGFyZSB0cmFuc2ZlcnJlZC4NCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQyNTYgX3ZhbHVlKTsNCg0KICAgIC8vIFRyaWdnZXJlZCB3aGVuZXZlciBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX3ZhbHVlKSBpcyBjYWxsZWQuDQogICAgZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7DQp9DQoNCmNvbnRyYWN0IEluY2VudENvZmZlZVRva2VuIGlzIEVSQzIwSW50ZXJmYWNlLCBUb2tlbkNvbmZpZyB7DQoNCiAgICAvLyBPd25lciBvZiB0aGlzIGNvbnRyYWN0DQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQoNCiAgICAvLyBCYWxhbmNlcyBmb3IgZWFjaCBhY2NvdW50DQogICAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQyNTYpIGJhbGFuY2VzOw0KDQogICAgLy8gT3duZXIgb2YgYWNjb3VudCBhcHByb3ZlcyB0aGUgdHJhbnNmZXIgb2YgYW4gYW1vdW50IHRvIGFub3RoZXIgYWNjb3VudA0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpKSBhbGxvd2VkOw0KDQogICAgLy8gRnVuY3Rpb25zIHdpdGggdGhpcyBtb2RpZmllciBjYW4gb25seSBiZSBleGVjdXRlZCBieSB0aGUgb3duZXINCiAgICBtb2RpZmllciBvbmx5T3duZXIoKSB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB7DQogICAgICAgICAgICB0aHJvdzsNCiAgICAgICAgfQ0KICAgICAgICBfOw0KICAgIH0NCg0KICAgIC8vIENvbnN0cnVjdG9yDQogICAgZnVuY3Rpb24gSW5jZW50Q29mZmVlVG9rZW4oKSB7DQoNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgICAgICBiYWxhbmNlc1tvd25lcl0gPSBfdG90YWxTdXBwbHk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KSB7DQogICAgICAgIHRvdGFsU3VwcGx5ID0gX3RvdGFsU3VwcGx5Ow0KICAgIH0NCg0KICAgIC8vIFdoYXQgaXMgdGhlIGJhbGFuY2Ugb2YgYSBwYXJ0aWN1bGFyIGFjY291bnQ/DQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIHsNCiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07DQogICAgfQ0KDQogICAgLy8gVHJhbnNmZXIgdGhlIGJhbGFuY2UgZnJvbSBvd25lcidzIGFjY291bnQgdG8gYW5vdGhlciBhY2NvdW50DQogICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSB7DQogICAgICAgIGlmIChiYWxhbmNlc1ttc2cuc2VuZGVyXSA+PSBfYW1vdW50ICYmIF9hbW91bnQgPiAwKSB7DQogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfYW1vdW50Ow0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50Ow0KICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90bw0KICAgIC8vIFRoZSB0cmFuc2ZlckZyb20gbWV0aG9kIGlzIHVzZWQgZm9yIGEgd2l0aGRyYXcgd29ya2Zsb3csIGFsbG93aW5nIGNvbnRyYWN0cyB0byBzZW5kDQogICAgLy8gdG9rZW5zIG9uIHlvdXIgYmVoYWxmLCBmb3IgZXhhbXBsZSB0byAiZGVwb3NpdCIgdG8gYSBjb250cmFjdCBhZGRyZXNzIGFuZC9vciB0byBjaGFyZ2UNCiAgICAvLyBmZWVzIGluIHN1Yi1jdXJyZW5jaWVzOyB0aGUgY29tbWFuZCBzaG91bGQgZmFpbCB1bmxlc3MgdGhlIF9mcm9tIGFjY291bnQgaGFzDQogICAgLy8gZGVsaWJlcmF0ZWx5IGF1dGhvcml6ZWQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSB2aWEgc29tZSBtZWNoYW5pc207IHdlIHByb3Bvc2UNCiAgICAvLyB0aGVzZSBzdGFuZGFyZGl6ZWQgQVBJcyBmb3IgYXBwcm92YWw6DQogICAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKA0KICAgICAgICBhZGRyZXNzIF9mcm9tLA0KICAgICAgICBhZGRyZXNzIF90bywNCiAgICAgICAgdWludDI1NiBfYW1vdW50DQogICAgKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCg0KICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQNCiAgICAgICAgICAgICYmIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdID49IF9hbW91bnQNCiAgICAgICAgICAgICYmIF9hbW91bnQgPiAwKSB7DQoNCiAgICAgICAgICAgIGJhbGFuY2VzW190b10gKz0gX2Ftb3VudDsNCiAgICAgICAgICAgIGJhbGFuY2VzW19mcm9tXSAtPSBfYW1vdW50Ow0KICAgICAgICAgICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsNCiAgICAgICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF9hbW91bnQpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBBbGxvdyBfc3BlbmRlciB0byB3aXRoZHJhdyBmcm9tIHlvdXIgYWNjb3VudCwgbXVsdGlwbGUgdGltZXMsIHVwIHRvIHRoZSBfdmFsdWUgYW1vdW50Lg0KICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLg0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgYWxsb3dlZFttc2cuc2VuZGVyXVtfc3BlbmRlcl0gPSBfYW1vdW50Ow0KICAgICAgICBBcHByb3ZhbChtc2cuc2VuZGVyLCBfc3BlbmRlciwgX2Ftb3VudCk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIHsNCiAgICAgICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07DQogICAgfQ0KDQoNCn0NCg0KY29udHJhY3QgV2F2ZXNFdGhlcmV1bVN3YXAgaXMgSW5jZW50Q29mZmVlVG9rZW4gew0KDQogZXZlbnQgV2F2ZXNUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIHN0cmluZyB3YXZlc0FkZHJlc3MsIHVpbnQyNTYgYW1vdW50KTsNCg0KIGZ1bmN0aW9uIG1vdmVUb1dhdmVzKHN0cmluZyB3YXZlc0FkZHJlc3MsIHVpbnQyNTYgYW1vdW50KSB7DQoNCiAgICAgaWYgKCF0cmFuc2Zlcihvd25lciwgYW1vdW50KSkgdGhyb3c7DQogICAgIFdhdmVzVHJhbnNmZXIobXNnLnNlbmRlciwgd2F2ZXNBZGRyZXNzLCBhbW91bnQpOw0KDQogfQ0KDQp9'