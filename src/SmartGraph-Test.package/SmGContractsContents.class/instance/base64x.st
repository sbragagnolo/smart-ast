base 64 content
base64x
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMzsNCg0KY29udHJhY3QgT3JhY2xpemVJIHsNCiAgICBhZGRyZXNzIHB1YmxpYyBjYkFkZHJlc3M7DQogICAgZnVuY3Rpb24gcXVlcnkodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnKSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsNCiAgICBmdW5jdGlvbiBxdWVyeV93aXRoR2FzTGltaXQodWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIHN0cmluZyBfYXJnLCB1aW50IF9nYXNsaW1pdCkgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7DQogICAgZnVuY3Rpb24gcXVlcnkyKHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBzdHJpbmcgX2FyZzEsIHN0cmluZyBfYXJnMikgcGF5YWJsZSByZXR1cm5zIChieXRlczMyIF9pZCk7DQogICAgZnVuY3Rpb24gcXVlcnkyX3dpdGhHYXNMaW1pdCh1aW50IF90aW1lc3RhbXAsIHN0cmluZyBfZGF0YXNvdXJjZSwgc3RyaW5nIF9hcmcxLCBzdHJpbmcgX2FyZzIsIHVpbnQgX2dhc2xpbWl0KSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsNCiAgICBmdW5jdGlvbiBxdWVyeU4odWludCBfdGltZXN0YW1wLCBzdHJpbmcgX2RhdGFzb3VyY2UsIGJ5dGVzIF9hcmdOKSBwYXlhYmxlIHJldHVybnMgKGJ5dGVzMzIgX2lkKTsNCiAgICBmdW5jdGlvbiBxdWVyeU5fd2l0aEdhc0xpbWl0KHVpbnQgX3RpbWVzdGFtcCwgc3RyaW5nIF9kYXRhc291cmNlLCBieXRlcyBfYXJnTiwgdWludCBfZ2FzbGltaXQpIHBheWFibGUgcmV0dXJucyAoYnl0ZXMzMiBfaWQpOw0KICAgIGZ1bmN0aW9uIGdldFByaWNlKHN0cmluZyBfZGF0YXNvdXJjZSkgcmV0dXJucyAodWludCBfZHNwcmljZSk7DQogICAgZnVuY3Rpb24gZ2V0UHJpY2Uoc3RyaW5nIF9kYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSByZXR1cm5zICh1aW50IF9kc3ByaWNlKTsNCiAgICBmdW5jdGlvbiB1c2VDb3Vwb24oc3RyaW5nIF9jb3Vwb24pOw0KICAgIGZ1bmN0aW9uIHNldFByb29mVHlwZShieXRlIF9wcm9vZlR5cGUpOw0KICAgIGZ1bmN0aW9uIHNldENvbmZpZyhieXRlczMyIF9jb25maWcpOw0KICAgIGZ1bmN0aW9uIHNldEN1c3RvbUdhc1ByaWNlKHVpbnQgX2dhc1ByaWNlKTsNCiAgICBmdW5jdGlvbiByYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpIHJldHVybnMoYnl0ZXMzMik7DQp9DQpjb250cmFjdCBPcmFjbGl6ZUFkZHJSZXNvbHZlckkgew0KICAgIGZ1bmN0aW9uIGdldEFkZHJlc3MoKSByZXR1cm5zIChhZGRyZXNzIF9hZGRyKTsNCn0NCmNvbnRyYWN0IHVzaW5nT3JhY2xpemUgew0KICAgIHVpbnQgY29uc3RhbnQgZGF5ID0gNjAqNjAqMjQ7DQogICAgdWludCBjb25zdGFudCB3ZWVrID0gNjAqNjAqMjQqNzsNCiAgICB1aW50IGNvbnN0YW50IG1vbnRoID0gNjAqNjAqMjQqMzA7DQogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfTk9ORSA9IDB4MDA7DQogICAgYnl0ZSBjb25zdGFudCBwcm9vZlR5cGVfVExTTm90YXJ5ID0gMHgxMDsNCiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9BbmRyb2lkID0gMHgyMDsNCiAgICBieXRlIGNvbnN0YW50IHByb29mVHlwZV9MZWRnZXIgPSAweDMwOw0KICAgIGJ5dGUgY29uc3RhbnQgcHJvb2ZUeXBlX05hdGl2ZSA9IDB4RjA7DQogICAgYnl0ZSBjb25zdGFudCBwcm9vZlN0b3JhZ2VfSVBGUyA9IDB4MDE7DQogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX2F1dG8gPSAwOw0KICAgIHVpbnQ4IGNvbnN0YW50IG5ldHdvcmtJRF9tYWlubmV0ID0gMTsNCiAgICB1aW50OCBjb25zdGFudCBuZXR3b3JrSURfdGVzdG5ldCA9IDI7DQogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX21vcmRlbiA9IDI7DQogICAgdWludDggY29uc3RhbnQgbmV0d29ya0lEX2NvbnNlbnN5cyA9IDE2MTsNCg0KICAgIE9yYWNsaXplQWRkclJlc29sdmVySSBPQVI7DQoNCiAgICBPcmFjbGl6ZUkgb3JhY2xpemU7DQogICAgbW9kaWZpZXIgb3JhY2xpemVBUEkgew0KICAgICAgICBpZigoYWRkcmVzcyhPQVIpPT0wKXx8KGdldENvZGVTaXplKGFkZHJlc3MoT0FSKSk9PTApKSBvcmFjbGl6ZV9zZXROZXR3b3JrKG5ldHdvcmtJRF9hdXRvKTsNCiAgICAgICAgb3JhY2xpemUgPSBPcmFjbGl6ZUkoT0FSLmdldEFkZHJlc3MoKSk7DQogICAgICAgIF87DQogICAgfQ0KICAgIG1vZGlmaWVyIGNvdXBvbihzdHJpbmcgY29kZSl7DQogICAgICAgIG9yYWNsaXplID0gT3JhY2xpemVJKE9BUi5nZXRBZGRyZXNzKCkpOw0KICAgICAgICBvcmFjbGl6ZS51c2VDb3Vwb24oY29kZSk7DQogICAgICAgIF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0TmV0d29yayh1aW50OCBuZXR3b3JrSUQpIGludGVybmFsIHJldHVybnMoYm9vbCl7DQogICAgICAgIGlmIChnZXRDb2RlU2l6ZSgweDFkM0IyNjM4YTdjQzlmMkNCM0QyOThBM0RBN2E5MEI2N0U1NTA2ZWQpPjApeyAvL21haW5uZXQNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDFkM0IyNjM4YTdjQzlmMkNCM0QyOThBM0RBN2E5MEI2N0U1NTA2ZWQpOw0KICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9tYWlubmV0Iik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHhjMDNBMjYxNUQ1ZWZhZjVGNDlGNjBCN0JCNjU4M2VhZWMyMTJmZGYxKT4wKXsgLy9yb3BzdGVuIHRlc3RuZXQNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweGMwM0EyNjE1RDVlZmFmNUY0OUY2MEI3QkI2NTgzZWFlYzIxMmZkZjEpOw0KICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9yb3BzdGVuMyIpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4QjdBMDdCY0YyQmEyZjI3MDNiMjRDMDY5MWI1Mjc4OTk5QzU5QUM3ZSk+MCl7IC8va292YW4gdGVzdG5ldA0KICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4QjdBMDdCY0YyQmEyZjI3MDNiMjRDMDY5MWI1Mjc4OTk5QzU5QUM3ZSk7DQogICAgICAgICAgICBvcmFjbGl6ZV9zZXROZXR3b3JrTmFtZSgiZXRoX2tvdmFuIik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHgxNDY1MDBjZmQzNUIyMkU0QTM5MkZlMGFEYzA2RGUxYTEzNjhFZDQ4KT4wKXsgLy9yaW5rZWJ5IHRlc3RuZXQNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDE0NjUwMGNmZDM1QjIyRTRBMzkyRmUwYURjMDZEZTFhMTM2OEVkNDgpOw0KICAgICAgICAgICAgb3JhY2xpemVfc2V0TmV0d29ya05hbWUoImV0aF9yaW5rZWJ5Iik7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoZ2V0Q29kZVNpemUoMHg2ZjQ4NUM4QkY2ZmM0M2VBMjEyRTkzQkJGOGNlMDQ2QzdmMWNiNDc1KT4wKXsgLy9ldGhlcmV1bS1icmlkZ2UNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDZmNDg1QzhCRjZmYzQzZUEyMTJFOTNCQkY4Y2UwNDZDN2YxY2I0NzUpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4MjBlMTJBMUY4NTlCM0ZlYUU1RmIyQTBBMzJDMThGNWE2NTU1NWJCRik+MCl7IC8vZXRoZXIuY2FtcCBpZGUNCiAgICAgICAgICAgIE9BUiA9IE9yYWNsaXplQWRkclJlc29sdmVySSgweDIwZTEyQTFGODU5QjNGZWFFNUZiMkEwQTMyQzE4RjVhNjU1NTViQkYpOw0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGdldENvZGVTaXplKDB4NTFlZmFGNGM4QjNDOUFmQkQ1YUI5RjRiYkM4Mjc4NEFiNmVmOGZBQSk+MCl7IC8vYnJvd3Nlci1zb2xpZGl0eQ0KICAgICAgICAgICAgT0FSID0gT3JhY2xpemVBZGRyUmVzb2x2ZXJJKDB4NTFlZmFGNGM4QjNDOUFmQkQ1YUI5RjRiYkM4Mjc4NEFiNmVmOGZBQSk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gX19jYWxsYmFjayhieXRlczMyIG15aWQsIHN0cmluZyByZXN1bHQpIHsNCiAgICAgICAgX19jYWxsYmFjayhteWlkLCByZXN1bHQsIG5ldyBieXRlcygwKSk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBteWlkLCBzdHJpbmcgcmVzdWx0LCBieXRlcyBwcm9vZikgew0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV91c2VDb3Vwb24oc3RyaW5nIGNvZGUpIG9yYWNsaXplQVBJIGludGVybmFsIHsNCiAgICAgICAgb3JhY2xpemUudXNlQ291cG9uKGNvZGUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldFByaWNlKHN0cmluZyBkYXRhc291cmNlKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zICh1aW50KXsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldFByaWNlKHN0cmluZyBkYXRhc291cmNlLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zICh1aW50KXsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeS52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZyBhcmcsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlfd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGFyZywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeV93aXRoR2FzTGltaXQudmFsdWUocHJpY2UpKDAsIGRhdGFzb3VyY2UsIGFyZywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Mi52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMik7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nIGFyZzEsIHN0cmluZyBhcmcyKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnF1ZXJ5Mi52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmcxLCBhcmcyLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmcgYXJnMSwgc3RyaW5nIGFyZzIsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnkyX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkoMCwgZGF0YXNvdXJjZSwgYXJnMSwgYXJnMiwgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTikgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlKTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKjIwMDAwMCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOw0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nW10gYXJnTiwgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCl7DQogICAgICAgIHVpbnQgcHJpY2UgPSBvcmFjbGl6ZS5nZXRQcmljZShkYXRhc291cmNlLCBnYXNsaW1pdCk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSpnYXNsaW1pdCkgcmV0dXJuIDA7IC8vIHVuZXhwZWN0ZWRseSBoaWdoIHByaWNlDQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcmdzID0gc3RyYTJjYm9yKGFyZ04pOw0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBzdHJhMmNib3IoYXJnTik7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgxKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgxKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1sxXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDEpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMSk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOyAgICAgICANCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDIpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbMl0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMyk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSgzKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oMyk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1szXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDMpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgc3RyaW5nWzRdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgc3RyaW5nW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgc3RyaW5nW10oNCk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNF0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg0KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDQpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIHN0cmluZ1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIHN0cmluZ1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IHN0cmluZ1tdKDUpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsNCiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBzdHJpbmdbNV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBzdHJpbmdbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBzdHJpbmdbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqMjAwMDAwKSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOw0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOLnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04pIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSk7DQogICAgICAgIGlmIChwcmljZSA+IDEgZXRoZXIgKyB0eC5nYXNwcmljZSoyMDAwMDApIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU4udmFsdWUocHJpY2UpKHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbXSBhcmdOLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKXsNCiAgICAgICAgdWludCBwcmljZSA9IG9yYWNsaXplLmdldFByaWNlKGRhdGFzb3VyY2UsIGdhc2xpbWl0KTsNCiAgICAgICAgaWYgKHByaWNlID4gMSBldGhlciArIHR4Lmdhc3ByaWNlKmdhc2xpbWl0KSByZXR1cm4gMDsgLy8gdW5leHBlY3RlZGx5IGhpZ2ggcHJpY2UNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGFyZ3MgPSBiYTJjYm9yKGFyZ04pOw0KICAgICAgICByZXR1cm4gb3JhY2xpemUucXVlcnlOX3dpdGhHYXNMaW1pdC52YWx1ZShwcmljZSkodGltZXN0YW1wLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1tdIGFyZ04sIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpew0KICAgICAgICB1aW50IHByaWNlID0gb3JhY2xpemUuZ2V0UHJpY2UoZGF0YXNvdXJjZSwgZ2FzbGltaXQpOw0KICAgICAgICBpZiAocHJpY2UgPiAxIGV0aGVyICsgdHguZ2FzcHJpY2UqZ2FzbGltaXQpIHJldHVybiAwOyAvLyB1bmV4cGVjdGVkbHkgaGlnaCBwcmljZQ0KICAgICAgICBieXRlcyBtZW1vcnkgYXJncyA9IGJhMmNib3IoYXJnTik7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5xdWVyeU5fd2l0aEdhc0xpbWl0LnZhbHVlKHByaWNlKSgwLCBkYXRhc291cmNlLCBhcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1sxXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgxKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeSh1aW50IHRpbWVzdGFtcCwgc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzFdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDEpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbMV0gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMSk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOyAgICAgICANCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgDQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzJdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDIpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1syXSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgyKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbM10gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1szXSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSgzKTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KHRpbWVzdGFtcCwgZGF0YXNvdXJjZSwgZHluYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbM10gYXJncywgdWludCBnYXNsaW1pdCkgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oMyk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzNdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDMpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9xdWVyeShzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNCk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncyk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHVpbnQgdGltZXN0YW1wLCBzdHJpbmcgZGF0YXNvdXJjZSwgYnl0ZXNbNF0gYXJncykgb3JhY2xpemVBUEkgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMzMiBpZCkgew0KICAgICAgICBieXRlc1tdIG1lbW9yeSBkeW5hcmdzID0gbmV3IGJ5dGVzW10oNCk7DQogICAgICAgIGR5bmFyZ3NbMF0gPSBhcmdzWzBdOw0KICAgICAgICBkeW5hcmdzWzFdID0gYXJnc1sxXTsNCiAgICAgICAgZHluYXJnc1syXSA9IGFyZ3NbMl07DQogICAgICAgIGR5bmFyZ3NbM10gPSBhcmdzWzNdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s0XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg0KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeSh0aW1lc3RhbXAsIGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzRdIGFyZ3MsIHVpbnQgZ2FzbGltaXQpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDQpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplX3F1ZXJ5KGRhdGFzb3VyY2UsIGR5bmFyZ3MsIGdhc2xpbWl0KTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkoc3RyaW5nIGRhdGFzb3VyY2UsIGJ5dGVzWzVdIGFyZ3MpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIgaWQpIHsNCiAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZHluYXJncyA9IG5ldyBieXRlc1tdKDUpOw0KICAgICAgICBkeW5hcmdzWzBdID0gYXJnc1swXTsNCiAgICAgICAgZHluYXJnc1sxXSA9IGFyZ3NbMV07DQogICAgICAgIGR5bmFyZ3NbMl0gPSBhcmdzWzJdOw0KICAgICAgICBkeW5hcmdzWzNdID0gYXJnc1szXTsNCiAgICAgICAgZHluYXJnc1s0XSA9IGFyZ3NbNF07DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9xdWVyeShkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfcXVlcnkodWludCB0aW1lc3RhbXAsIHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkodGltZXN0YW1wLCBkYXRhc291cmNlLCBkeW5hcmdzLCBnYXNsaW1pdCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3F1ZXJ5KHN0cmluZyBkYXRhc291cmNlLCBieXRlc1s1XSBhcmdzLCB1aW50IGdhc2xpbWl0KSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCByZXR1cm5zIChieXRlczMyIGlkKSB7DQogICAgICAgIGJ5dGVzW10gbWVtb3J5IGR5bmFyZ3MgPSBuZXcgYnl0ZXNbXSg1KTsNCiAgICAgICAgZHluYXJnc1swXSA9IGFyZ3NbMF07DQogICAgICAgIGR5bmFyZ3NbMV0gPSBhcmdzWzFdOw0KICAgICAgICBkeW5hcmdzWzJdID0gYXJnc1syXTsNCiAgICAgICAgZHluYXJnc1szXSA9IGFyZ3NbM107DQogICAgICAgIGR5bmFyZ3NbNF0gPSBhcmdzWzRdOw0KICAgICAgICByZXR1cm4gb3JhY2xpemVfcXVlcnkoZGF0YXNvdXJjZSwgZHluYXJncywgZ2FzbGltaXQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX2NiQWRkcmVzcygpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGFkZHJlc3Mpew0KICAgICAgICByZXR1cm4gb3JhY2xpemUuY2JBZGRyZXNzKCk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldFByb29mKGJ5dGUgcHJvb2ZQKSBvcmFjbGl6ZUFQSSBpbnRlcm5hbCB7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZS5zZXRQcm9vZlR5cGUocHJvb2ZQKTsNCiAgICB9DQogICAgZnVuY3Rpb24gb3JhY2xpemVfc2V0Q3VzdG9tR2FzUHJpY2UodWludCBnYXNQcmljZSkgb3JhY2xpemVBUEkgaW50ZXJuYWwgew0KICAgICAgICByZXR1cm4gb3JhY2xpemUuc2V0Q3VzdG9tR2FzUHJpY2UoZ2FzUHJpY2UpOw0KICAgIH0NCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9zZXRDb25maWcoYnl0ZXMzMiBjb25maWcpIG9yYWNsaXplQVBJIGludGVybmFsIHsNCiAgICAgICAgcmV0dXJuIG9yYWNsaXplLnNldENvbmZpZyhjb25maWcpOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19nZXRTZXNzaW9uUHViS2V5SGFzaCgpIG9yYWNsaXplQVBJIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIpew0KICAgICAgICByZXR1cm4gb3JhY2xpemUucmFuZG9tRFNfZ2V0U2Vzc2lvblB1YktleUhhc2goKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBnZXRDb2RlU2l6ZShhZGRyZXNzIF9hZGRyKSBjb25zdGFudCBpbnRlcm5hbCByZXR1cm5zKHVpbnQgX3NpemUpIHsNCiAgICAgICAgYXNzZW1ibHkgew0KICAgICAgICAgICAgX3NpemUgOj0gZXh0Y29kZXNpemUoX2FkZHIpDQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwYXJzZUFkZHIoc3RyaW5nIF9hKSBpbnRlcm5hbCByZXR1cm5zIChhZGRyZXNzKXsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IHRtcCA9IGJ5dGVzKF9hKTsNCiAgICAgICAgdWludDE2MCBpYWRkciA9IDA7DQogICAgICAgIHVpbnQxNjAgYjE7DQogICAgICAgIHVpbnQxNjAgYjI7DQogICAgICAgIGZvciAodWludCBpPTI7IGk8MisyKjIwOyBpKz0yKXsNCiAgICAgICAgICAgIGlhZGRyICo9IDI1NjsNCiAgICAgICAgICAgIGIxID0gdWludDE2MCh0bXBbaV0pOw0KICAgICAgICAgICAgYjIgPSB1aW50MTYwKHRtcFtpKzFdKTsNCiAgICAgICAgICAgIGlmICgoYjEgPj0gOTcpJiYoYjEgPD0gMTAyKSkgYjEgLT0gODc7DQogICAgICAgICAgICBlbHNlIGlmICgoYjEgPj0gNjUpJiYoYjEgPD0gNzApKSBiMSAtPSA1NTsNCiAgICAgICAgICAgIGVsc2UgaWYgKChiMSA+PSA0OCkmJihiMSA8PSA1NykpIGIxIC09IDQ4Ow0KICAgICAgICAgICAgaWYgKChiMiA+PSA5NykmJihiMiA8PSAxMDIpKSBiMiAtPSA4NzsNCiAgICAgICAgICAgIGVsc2UgaWYgKChiMiA+PSA2NSkmJihiMiA8PSA3MCkpIGIyIC09IDU1Ow0KICAgICAgICAgICAgZWxzZSBpZiAoKGIyID49IDQ4KSYmKGIyIDw9IDU3KSkgYjIgLT0gNDg7DQogICAgICAgICAgICBpYWRkciArPSAoYjEqMTYrYjIpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBhZGRyZXNzKGlhZGRyKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdHJDb21wYXJlKHN0cmluZyBfYSwgc3RyaW5nIF9iKSBpbnRlcm5hbCByZXR1cm5zIChpbnQpIHsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IGEgPSBieXRlcyhfYSk7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBiID0gYnl0ZXMoX2IpOw0KICAgICAgICB1aW50IG1pbkxlbmd0aCA9IGEubGVuZ3RoOw0KICAgICAgICBpZiAoYi5sZW5ndGggPCBtaW5MZW5ndGgpIG1pbkxlbmd0aCA9IGIubGVuZ3RoOw0KICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBtaW5MZW5ndGg7IGkgKyspDQogICAgICAgICAgICBpZiAoYVtpXSA8IGJbaV0pDQogICAgICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICAgICAgZWxzZSBpZiAoYVtpXSA+IGJbaV0pDQogICAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgIGlmIChhLmxlbmd0aCA8IGIubGVuZ3RoKQ0KICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICBlbHNlIGlmIChhLmxlbmd0aCA+IGIubGVuZ3RoKQ0KICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGluZGV4T2Yoc3RyaW5nIF9oYXlzdGFjaywgc3RyaW5nIF9uZWVkbGUpIGludGVybmFsIHJldHVybnMgKGludCkgew0KICAgICAgICBieXRlcyBtZW1vcnkgaCA9IGJ5dGVzKF9oYXlzdGFjayk7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBuID0gYnl0ZXMoX25lZWRsZSk7DQogICAgICAgIGlmKGgubGVuZ3RoIDwgMSB8fCBuLmxlbmd0aCA8IDEgfHwgKG4ubGVuZ3RoID4gaC5sZW5ndGgpKQ0KICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICBlbHNlIGlmKGgubGVuZ3RoID4gKDIqKjEyOCAtMSkpDQogICAgICAgICAgICByZXR1cm4gLTE7DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgICAgdWludCBzdWJpbmRleCA9IDA7DQogICAgICAgICAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBoLmxlbmd0aDsgaSArKykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoaFtpXSA9PSBuWzBdKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgc3ViaW5kZXggPSAxOw0KICAgICAgICAgICAgICAgICAgICB3aGlsZShzdWJpbmRleCA8IG4ubGVuZ3RoICYmIChpICsgc3ViaW5kZXgpIDwgaC5sZW5ndGggJiYgaFtpICsgc3ViaW5kZXhdID09IG5bc3ViaW5kZXhdKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBzdWJpbmRleCsrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmKHN1YmluZGV4ID09IG4ubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludChpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gLTE7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IsIHN0cmluZyBfYywgc3RyaW5nIF9kLCBzdHJpbmcgX2UpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgew0KICAgICAgICBieXRlcyBtZW1vcnkgX2JhID0gYnl0ZXMoX2EpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JiID0gYnl0ZXMoX2IpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JjID0gYnl0ZXMoX2MpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JkID0gYnl0ZXMoX2QpOw0KICAgICAgICBieXRlcyBtZW1vcnkgX2JlID0gYnl0ZXMoX2UpOw0KICAgICAgICBzdHJpbmcgbWVtb3J5IGFiY2RlID0gbmV3IHN0cmluZyhfYmEubGVuZ3RoICsgX2JiLmxlbmd0aCArIF9iYy5sZW5ndGggKyBfYmQubGVuZ3RoICsgX2JlLmxlbmd0aCk7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBiYWJjZGUgPSBieXRlcyhhYmNkZSk7DQogICAgICAgIHVpbnQgayA9IDA7DQogICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IF9iYS5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmFbaV07DQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmIubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JiW2ldOw0KICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX2JjLmxlbmd0aDsgaSsrKSBiYWJjZGVbaysrXSA9IF9iY1tpXTsNCiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9iZC5sZW5ndGg7IGkrKykgYmFiY2RlW2srK10gPSBfYmRbaV07DQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYmUubGVuZ3RoOyBpKyspIGJhYmNkZVtrKytdID0gX2JlW2ldOw0KICAgICAgICByZXR1cm4gc3RyaW5nKGJhYmNkZSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc3RyQ29uY2F0KHN0cmluZyBfYSwgc3RyaW5nIF9iLCBzdHJpbmcgX2MsIHN0cmluZyBfZCkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBzdHJDb25jYXQoX2EsIF9iLCBfYywgX2QsICIiKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IsIHN0cmluZyBfYykgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBzdHJDb25jYXQoX2EsIF9iLCBfYywgIiIsICIiKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzdHJDb25jYXQoc3RyaW5nIF9hLCBzdHJpbmcgX2IpIGludGVybmFsIHJldHVybnMgKHN0cmluZykgew0KICAgICAgICByZXR1cm4gc3RyQ29uY2F0KF9hLCBfYiwgIiIsICIiLCAiIik7DQogICAgfQ0KDQogICAgLy8gcGFyc2VJbnQNCiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcgX2EpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgICAgcmV0dXJuIHBhcnNlSW50KF9hLCAwKTsNCiAgICB9DQoNCiAgICAvLyBwYXJzZUludChwYXJzZUZsb2F0KjEwXl9iKQ0KICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZyBfYSwgdWludCBfYikgaW50ZXJuYWwgcmV0dXJucyAodWludCkgew0KICAgICAgICBieXRlcyBtZW1vcnkgYnJlc3VsdCA9IGJ5dGVzKF9hKTsNCiAgICAgICAgdWludCBtaW50ID0gMDsNCiAgICAgICAgYm9vbCBkZWNpbWFscyA9IGZhbHNlOw0KICAgICAgICBmb3IgKHVpbnQgaT0wOyBpPGJyZXN1bHQubGVuZ3RoOyBpKyspew0KICAgICAgICAgICAgaWYgKChicmVzdWx0W2ldID49IDQ4KSYmKGJyZXN1bHRbaV0gPD0gNTcpKXsNCiAgICAgICAgICAgICAgICBpZiAoZGVjaW1hbHMpew0KICAgICAgICAgICAgICAgICAgIGlmIChfYiA9PSAwKSBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgZWxzZSBfYi0tOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBtaW50ICo9IDEwOw0KICAgICAgICAgICAgICAgIG1pbnQgKz0gdWludChicmVzdWx0W2ldKSAtIDQ4Ow0KICAgICAgICAgICAgfSBlbHNlIGlmIChicmVzdWx0W2ldID09IDQ2KSBkZWNpbWFscyA9IHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKF9iID4gMCkgbWludCAqPSAxMCoqX2I7DQogICAgICAgIHJldHVybiBtaW50Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHVpbnQyc3RyKHVpbnQgaSkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKXsNCiAgICAgICAgaWYgKGkgPT0gMCkgcmV0dXJuICIwIjsNCiAgICAgICAgdWludCBqID0gaTsNCiAgICAgICAgdWludCBsZW47DQogICAgICAgIHdoaWxlIChqICE9IDApew0KICAgICAgICAgICAgbGVuKys7DQogICAgICAgICAgICBqIC89IDEwOw0KICAgICAgICB9DQogICAgICAgIGJ5dGVzIG1lbW9yeSBic3RyID0gbmV3IGJ5dGVzKGxlbik7DQogICAgICAgIHVpbnQgayA9IGxlbiAtIDE7DQogICAgICAgIHdoaWxlIChpICE9IDApew0KICAgICAgICAgICAgYnN0cltrLS1dID0gYnl0ZSg0OCArIGkgJSAxMCk7DQogICAgICAgICAgICBpIC89IDEwOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBzdHJpbmcoYnN0cik7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIHN0cmEyY2JvcihzdHJpbmdbXSBhcnIpIGludGVybmFsIHJldHVybnMgKGJ5dGVzKSB7DQogICAgICAgICAgICB1aW50IGFycmxlbiA9IGFyci5sZW5ndGg7DQoNCiAgICAgICAgICAgIC8vIGdldCBjb3JyZWN0IGNib3Igb3V0cHV0IGxlbmd0aA0KICAgICAgICAgICAgdWludCBvdXRwdXRsZW4gPSAwOw0KICAgICAgICAgICAgYnl0ZXNbXSBtZW1vcnkgZWxlbUFycmF5ID0gbmV3IGJ5dGVzW10oYXJybGVuKTsNCiAgICAgICAgICAgIGZvciAodWludCBpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7DQogICAgICAgICAgICAgICAgZWxlbUFycmF5W2ldID0gKGJ5dGVzKGFycltpXSkpOw0KICAgICAgICAgICAgICAgIG91dHB1dGxlbiArPSBlbGVtQXJyYXlbaV0ubGVuZ3RoICsgKGVsZW1BcnJheVtpXS5sZW5ndGggLSAxKS8yMyArIDM7IC8vKzMgYWNjb3VudHMgZm9yIHBhaXJlZCBpZGVudGlmaWVyIHR5cGVzDQogICAgICAgICAgICB9DQogICAgICAgICAgICB1aW50IGN0ciA9IDA7DQogICAgICAgICAgICB1aW50IGNib3JsZW4gPSBhcnJsZW4gKyAweDgwOw0KICAgICAgICAgICAgb3V0cHV0bGVuICs9IGJ5dGUoY2JvcmxlbikubGVuZ3RoOw0KICAgICAgICAgICAgYnl0ZXMgbWVtb3J5IHJlcyA9IG5ldyBieXRlcyhvdXRwdXRsZW4pOw0KDQogICAgICAgICAgICB3aGlsZSAoYnl0ZShjYm9ybGVuKS5sZW5ndGggPiBjdHIpIHsNCiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoY2JvcmxlbilbY3RyXTsNCiAgICAgICAgICAgICAgICBjdHIrKzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJsZW47IGkrKykgew0KICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gMHg1RjsNCiAgICAgICAgICAgICAgICBjdHIrKzsNCiAgICAgICAgICAgICAgICBmb3IgKHVpbnQgeCA9IDA7IHggPCBlbGVtQXJyYXlbaV0ubGVuZ3RoOyB4KyspIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBhIGJ1ZyB3aXRoIGxhcmdlciBzdHJpbmdzLCB0aGlzIG1heSBiZSB0aGUgY3VscHJpdA0KICAgICAgICAgICAgICAgICAgICBpZiAoeCAlIDIzID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgZWxlbWNib3JsZW4gPSBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geCA+PSAyNCA/IDIzIDogZWxlbUFycmF5W2ldLmxlbmd0aCAtIHg7DQogICAgICAgICAgICAgICAgICAgICAgICBlbGVtY2JvcmxlbiArPSAweDQwOw0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBsY3RyID0gY3RyOw0KICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ5dGUoZWxlbWNib3JsZW4pLmxlbmd0aCA+IGN0ciAtIGxjdHIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbY3RyXSA9IGJ5dGUoZWxlbWNib3JsZW4pW2N0ciAtIGxjdHJdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gZWxlbUFycmF5W2ldW3hdOw0KICAgICAgICAgICAgICAgICAgICBjdHIrKzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweEZGOw0KICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHJlczsNCiAgICAgICAgfQ0KDQogICAgZnVuY3Rpb24gYmEyY2JvcihieXRlc1tdIGFycikgaW50ZXJuYWwgcmV0dXJucyAoYnl0ZXMpIHsNCiAgICAgICAgICAgIHVpbnQgYXJybGVuID0gYXJyLmxlbmd0aDsNCg0KICAgICAgICAgICAgLy8gZ2V0IGNvcnJlY3QgY2JvciBvdXRwdXQgbGVuZ3RoDQogICAgICAgICAgICB1aW50IG91dHB1dGxlbiA9IDA7DQogICAgICAgICAgICBieXRlc1tdIG1lbW9yeSBlbGVtQXJyYXkgPSBuZXcgYnl0ZXNbXShhcnJsZW4pOw0KICAgICAgICAgICAgZm9yICh1aW50IGkgPSAwOyBpIDwgYXJybGVuOyBpKyspIHsNCiAgICAgICAgICAgICAgICBlbGVtQXJyYXlbaV0gPSAoYnl0ZXMoYXJyW2ldKSk7DQogICAgICAgICAgICAgICAgb3V0cHV0bGVuICs9IGVsZW1BcnJheVtpXS5sZW5ndGggKyAoZWxlbUFycmF5W2ldLmxlbmd0aCAtIDEpLzIzICsgMzsgLy8rMyBhY2NvdW50cyBmb3IgcGFpcmVkIGlkZW50aWZpZXIgdHlwZXMNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHVpbnQgY3RyID0gMDsNCiAgICAgICAgICAgIHVpbnQgY2JvcmxlbiA9IGFycmxlbiArIDB4ODA7DQogICAgICAgICAgICBvdXRwdXRsZW4gKz0gYnl0ZShjYm9ybGVuKS5sZW5ndGg7DQogICAgICAgICAgICBieXRlcyBtZW1vcnkgcmVzID0gbmV3IGJ5dGVzKG91dHB1dGxlbik7DQoNCiAgICAgICAgICAgIHdoaWxlIChieXRlKGNib3JsZW4pLmxlbmd0aCA+IGN0cikgew0KICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShjYm9ybGVuKVtjdHJdOw0KICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFycmxlbjsgaSsrKSB7DQogICAgICAgICAgICAgICAgcmVzW2N0cl0gPSAweDVGOw0KICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgICAgIGZvciAodWludCB4ID0gMDsgeCA8IGVsZW1BcnJheVtpXS5sZW5ndGg7IHgrKykgew0KICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSdzIGEgYnVnIHdpdGggbGFyZ2VyIHN0cmluZ3MsIHRoaXMgbWF5IGJlIHRoZSBjdWxwcml0DQogICAgICAgICAgICAgICAgICAgIGlmICh4ICUgMjMgPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdWludCBlbGVtY2JvcmxlbiA9IGVsZW1BcnJheVtpXS5sZW5ndGggLSB4ID49IDI0ID8gMjMgOiBlbGVtQXJyYXlbaV0ubGVuZ3RoIC0geDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1jYm9ybGVuICs9IDB4NDA7DQogICAgICAgICAgICAgICAgICAgICAgICB1aW50IGxjdHIgPSBjdHI7DQogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnl0ZShlbGVtY2JvcmxlbikubGVuZ3RoID4gY3RyIC0gbGN0cikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc1tjdHJdID0gYnl0ZShlbGVtY2JvcmxlbilbY3RyIC0gbGN0cl07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RyKys7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmVzW2N0cl0gPSBlbGVtQXJyYXlbaV1beF07DQogICAgICAgICAgICAgICAgICAgIGN0cisrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXNbY3RyXSA9IDB4RkY7DQogICAgICAgICAgICAgICAgY3RyKys7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gcmVzOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICANCiAgICBzdHJpbmcgb3JhY2xpemVfbmV0d29ya19uYW1lOw0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX3NldE5ldHdvcmtOYW1lKHN0cmluZyBfbmV0d29ya19uYW1lKSBpbnRlcm5hbCB7DQogICAgICAgIG9yYWNsaXplX25ldHdvcmtfbmFtZSA9IF9uZXR3b3JrX25hbWU7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKCkgaW50ZXJuYWwgcmV0dXJucyAoc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9uZXR3b3JrX25hbWU7DQogICAgfQ0KICAgIA0KICAgIGZ1bmN0aW9uIG9yYWNsaXplX25ld1JhbmRvbURTUXVlcnkodWludCBfZGVsYXksIHVpbnQgX25ieXRlcywgdWludCBfY3VzdG9tR2FzTGltaXQpIGludGVybmFsIHJldHVybnMgKGJ5dGVzMzIpew0KICAgICAgICBpZiAoKF9uYnl0ZXMgPT0gMCl8fChfbmJ5dGVzID4gMzIpKSB0aHJvdzsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IG5ieXRlcyA9IG5ldyBieXRlcygxKTsNCiAgICAgICAgbmJ5dGVzWzBdID0gYnl0ZShfbmJ5dGVzKTsNCiAgICAgICAgYnl0ZXMgbWVtb3J5IHVub25jZSA9IG5ldyBieXRlcygzMik7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uS2V5SGFzaCA9IG5ldyBieXRlcygzMik7DQogICAgICAgIGJ5dGVzMzIgc2Vzc2lvbktleUhhc2hfYnl0ZXMzMiA9IG9yYWNsaXplX3JhbmRvbURTX2dldFNlc3Npb25QdWJLZXlIYXNoKCk7DQogICAgICAgIGFzc2VtYmx5IHsNCiAgICAgICAgICAgIG1zdG9yZSh1bm9uY2UsIDB4MjApDQogICAgICAgICAgICBtc3RvcmUoYWRkKHVub25jZSwgMHgyMCksIHhvcihibG9ja2hhc2goc3ViKG51bWJlciwgMSkpLCB4b3IoY29pbmJhc2UsIHRpbWVzdGFtcCkpKQ0KICAgICAgICAgICAgbXN0b3JlKHNlc3Npb25LZXlIYXNoLCAweDIwKQ0KICAgICAgICAgICAgbXN0b3JlKGFkZChzZXNzaW9uS2V5SGFzaCwgMHgyMCksIHNlc3Npb25LZXlIYXNoX2J5dGVzMzIpDQogICAgICAgIH0NCiAgICAgICAgYnl0ZXNbM10gbWVtb3J5IGFyZ3MgPSBbdW5vbmNlLCBuYnl0ZXMsIHNlc3Npb25LZXlIYXNoXTsgDQogICAgICAgIGJ5dGVzMzIgcXVlcnlJZCA9IG9yYWNsaXplX3F1ZXJ5KF9kZWxheSwgInJhbmRvbSIsIGFyZ3MsIF9jdXN0b21HYXNMaW1pdCk7DQogICAgICAgIG9yYWNsaXplX3JhbmRvbURTX3NldENvbW1pdG1lbnQocXVlcnlJZCwgc2hhMyhieXRlczgoX2RlbGF5KSwgYXJnc1sxXSwgc2hhMjU2KGFyZ3NbMF0pLCBhcmdzWzJdKSk7DQogICAgICAgIHJldHVybiBxdWVyeUlkOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBvcmFjbGl6ZV9yYW5kb21EU19zZXRDb21taXRtZW50KGJ5dGVzMzIgcXVlcnlJZCwgYnl0ZXMzMiBjb21taXRtZW50KSBpbnRlcm5hbCB7DQogICAgICAgIG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF0gPSBjb21taXRtZW50Ow0KICAgIH0NCiAgICANCiAgICBtYXBwaW5nKGJ5dGVzMzI9PmJ5dGVzMzIpIG9yYWNsaXplX3JhbmRvbURTX2FyZ3M7DQogICAgbWFwcGluZyhieXRlczMyPT5ib29sKSBvcmFjbGl6ZV9yYW5kb21EU19zZXNzaW9uS2V5c0hhc2hWZXJpZmllZDsNCg0KICAgIGZ1bmN0aW9uIHZlcmlmeVNpZyhieXRlczMyIHRvc2lnbmgsIGJ5dGVzIGRlcnNpZywgYnl0ZXMgcHVia2V5KSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsNCiAgICAgICAgYm9vbCBzaWdvazsNCiAgICAgICAgYWRkcmVzcyBzaWduZXI7DQogICAgICAgIA0KICAgICAgICBieXRlczMyIHNpZ3I7DQogICAgICAgIGJ5dGVzMzIgc2lnczsNCiAgICAgICAgDQogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWdyXyA9IG5ldyBieXRlcygzMik7DQogICAgICAgIHVpbnQgb2Zmc2V0ID0gNCsodWludChkZXJzaWdbM10pIC0gMHgyMCk7DQogICAgICAgIHNpZ3JfID0gY29weUJ5dGVzKGRlcnNpZywgb2Zmc2V0LCAzMiwgc2lncl8sIDApOw0KICAgICAgICBieXRlcyBtZW1vcnkgc2lnc18gPSBuZXcgYnl0ZXMoMzIpOw0KICAgICAgICBvZmZzZXQgKz0gMzIgKyAyOw0KICAgICAgICBzaWdzXyA9IGNvcHlCeXRlcyhkZXJzaWcsIG9mZnNldCsodWludChkZXJzaWdbb2Zmc2V0LTFdKSAtIDB4MjApLCAzMiwgc2lnc18sIDApOw0KDQogICAgICAgIGFzc2VtYmx5IHsNCiAgICAgICAgICAgIHNpZ3IgOj0gbWxvYWQoYWRkKHNpZ3JfLCAzMikpDQogICAgICAgICAgICBzaWdzIDo9IG1sb2FkKGFkZChzaWdzXywgMzIpKQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICANCiAgICAgICAgKHNpZ29rLCBzaWduZXIpID0gc2FmZXJfZWNyZWNvdmVyKHRvc2lnbmgsIDI3LCBzaWdyLCBzaWdzKTsNCiAgICAgICAgaWYgKGFkZHJlc3Moc2hhMyhwdWJrZXkpKSA9PSBzaWduZXIpIHJldHVybiB0cnVlOw0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIChzaWdvaywgc2lnbmVyKSA9IHNhZmVyX2VjcmVjb3Zlcih0b3NpZ25oLCAyOCwgc2lnciwgc2lncyk7DQogICAgICAgICAgICByZXR1cm4gKGFkZHJlc3Moc2hhMyhwdWJrZXkpKSA9PSBzaWduZXIpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3Nlc3Npb25LZXlWYWxpZGl0eShieXRlcyBwcm9vZiwgdWludCBzaWcyb2Zmc2V0KSBpbnRlcm5hbCByZXR1cm5zIChib29sKSB7DQogICAgICAgIGJvb2wgc2lnb2s7DQogICAgICAgIA0KICAgICAgICAvLyBTdGVwIDY6IHZlcmlmeSB0aGUgYXR0ZXN0YXRpb24gc2lnbmF0dXJlLCBBUFBLRVkxIG11c3Qgc2lnbiB0aGUgc2Vzc2lvbktleSBmcm9tIHRoZSBjb3JyZWN0IGxlZGdlciBhcHAgKENPREVIQVNIKQ0KICAgICAgICBieXRlcyBtZW1vcnkgc2lnMiA9IG5ldyBieXRlcyh1aW50KHByb29mW3NpZzJvZmZzZXQrMV0pKzIpOw0KICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIHNpZzJvZmZzZXQsIHNpZzIubGVuZ3RoLCBzaWcyLCAwKTsNCiAgICAgICAgDQogICAgICAgIGJ5dGVzIG1lbW9yeSBhcHBrZXkxX3B1YmtleSA9IG5ldyBieXRlcyg2NCk7DQogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgMysxLCA2NCwgYXBwa2V5MV9wdWJrZXksIDApOw0KICAgICAgICANCiAgICAgICAgYnl0ZXMgbWVtb3J5IHRvc2lnbjIgPSBuZXcgYnl0ZXMoMSs2NSszMik7DQogICAgICAgIHRvc2lnbjJbMF0gPSAxOyAvL3JvbGUNCiAgICAgICAgY29weUJ5dGVzKHByb29mLCBzaWcyb2Zmc2V0LTY1LCA2NSwgdG9zaWduMiwgMSk7DQogICAgICAgIGJ5dGVzIG1lbW9yeSBDT0RFSEFTSCA9IGhleCJmZDk0ZmE3MWJjMGJhMTBkMzlkNDY0ZDBkOGY0NjVlZmVlZjBhMjc2NGUzODg3ZmNjOWRmNDFkZWQyMGY1MDVjIjsNCiAgICAgICAgY29weUJ5dGVzKENPREVIQVNILCAwLCAzMiwgdG9zaWduMiwgMSs2NSk7DQogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24yKSwgc2lnMiwgYXBwa2V5MV9wdWJrZXkpOw0KICAgICAgICANCiAgICAgICAgaWYgKHNpZ29rID09IGZhbHNlKSByZXR1cm4gZmFsc2U7DQogICAgICAgIA0KICAgICAgICANCiAgICAgICAgLy8gU3RlcCA3OiB2ZXJpZnkgdGhlIEFQUEtFWTEgcHJvdmVuYW5jZSAobXVzdCBiZSBzaWduZWQgYnkgTGVkZ2VyKQ0KICAgICAgICBieXRlcyBtZW1vcnkgTEVER0VSS0VZID0gaGV4IjdmYjk1NjQ2OWM1YzliODk4NDBkNTViNDM1MzdlNjZhOThkZDQ4MTFlYTBhMjcyMjQyNzJjMmU1NjIyOTExZTg1MzdhMmY4ZTg2YTQ2YmFlYzgyODY0ZTk4ZGQwMWU5Y2NjMmY4YmM1ZGZjOWNiZTVhOTFhMjkwNDk4ZGQ5NmU0IjsNCiAgICAgICAgDQogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24zID0gbmV3IGJ5dGVzKDErNjUpOw0KICAgICAgICB0b3NpZ24zWzBdID0gMHhGRTsNCiAgICAgICAgY29weUJ5dGVzKHByb29mLCAzLCA2NSwgdG9zaWduMywgMSk7DQogICAgICAgIA0KICAgICAgICBieXRlcyBtZW1vcnkgc2lnMyA9IG5ldyBieXRlcyh1aW50KHByb29mWzMrNjUrMV0pKzIpOw0KICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIDMrNjUsIHNpZzMubGVuZ3RoLCBzaWczLCAwKTsNCiAgICAgICAgDQogICAgICAgIHNpZ29rID0gdmVyaWZ5U2lnKHNoYTI1Nih0b3NpZ24zKSwgc2lnMywgTEVER0VSS0VZKTsNCiAgICAgICAgDQogICAgICAgIHJldHVybiBzaWdvazsNCiAgICB9DQogICAgDQogICAgbW9kaWZpZXIgb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnkoYnl0ZXMzMiBfcXVlcnlJZCwgc3RyaW5nIF9yZXN1bHQsIGJ5dGVzIF9wcm9vZikgew0KICAgICAgICAvLyBTdGVwIDE6IHRoZSBwcmVmaXggaGFzIHRvIG1hdGNoICdMUFx4MDEnIChMZWRnZXIgUHJvb2YgdmVyc2lvbiAxKQ0KICAgICAgICBpZiAoKF9wcm9vZlswXSAhPSAiTCIpfHwoX3Byb29mWzFdICE9ICJQIil8fChfcHJvb2ZbMl0gIT0gMSkpIHRocm93Ow0KICAgICAgICANCiAgICAgICAgYm9vbCBwcm9vZlZlcmlmaWVkID0gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX21haW4oX3Byb29mLCBfcXVlcnlJZCwgYnl0ZXMoX3Jlc3VsdCksIG9yYWNsaXplX2dldE5ldHdvcmtOYW1lKCkpOw0KICAgICAgICBpZiAocHJvb2ZWZXJpZmllZCA9PSBmYWxzZSkgdGhyb3c7DQogICAgICAgIA0KICAgICAgICBfOw0KICAgIH0NCiAgICANCiAgICBmdW5jdGlvbiBtYXRjaEJ5dGVzMzJQcmVmaXgoYnl0ZXMzMiBjb250ZW50LCBieXRlcyBwcmVmaXgpIGludGVybmFsIHJldHVybnMgKGJvb2wpew0KICAgICAgICBib29sIG1hdGNoXyA9IHRydWU7DQogICAgICAgIA0KICAgICAgICBmb3IgKHZhciBpPTA7IGk8cHJlZml4Lmxlbmd0aDsgaSsrKXsNCiAgICAgICAgICAgIGlmIChjb250ZW50W2ldICE9IHByZWZpeFtpXSkgbWF0Y2hfID0gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIHJldHVybiBtYXRjaF87DQogICAgfQ0KDQogICAgZnVuY3Rpb24gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX21haW4oYnl0ZXMgcHJvb2YsIGJ5dGVzMzIgcXVlcnlJZCwgYnl0ZXMgcmVzdWx0LCBzdHJpbmcgY29udGV4dF9uYW1lKSBpbnRlcm5hbCByZXR1cm5zIChib29sKXsNCiAgICAgICAgYm9vbCBjaGVja29rOw0KICAgICAgICANCiAgICAgICAgDQogICAgICAgIC8vIFN0ZXAgMjogdGhlIHVuaXF1ZSBrZXloYXNoIGhhcyB0byBtYXRjaCB3aXRoIHRoZSBzaGEyNTYgb2YgKGNvbnRleHQgbmFtZSArIHF1ZXJ5SWQpDQogICAgICAgIHVpbnQgbGVkZ2VyUHJvb2ZMZW5ndGggPSAzKzY1Kyh1aW50KHByb29mWzMrNjUrMV0pKzIpKzMyOw0KICAgICAgICBieXRlcyBtZW1vcnkga2V5aGFzaCA9IG5ldyBieXRlcygzMik7DQogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgsIDMyLCBrZXloYXNoLCAwKTsNCiAgICAgICAgY2hlY2tvayA9IChzaGEzKGtleWhhc2gpID09IHNoYTMoc2hhMjU2KGNvbnRleHRfbmFtZSwgcXVlcnlJZCkpKTsNCiAgICAgICAgaWYgKGNoZWNrb2sgPT0gZmFsc2UpIHJldHVybiBmYWxzZTsNCiAgICAgICAgDQogICAgICAgIGJ5dGVzIG1lbW9yeSBzaWcxID0gbmV3IGJ5dGVzKHVpbnQocHJvb2ZbbGVkZ2VyUHJvb2ZMZW5ndGgrKDMyKzgrMSszMikrMV0pKzIpOw0KICAgICAgICBjb3B5Qnl0ZXMocHJvb2YsIGxlZGdlclByb29mTGVuZ3RoKygzMis4KzErMzIpLCBzaWcxLmxlbmd0aCwgc2lnMSwgMCk7DQogICAgICAgIA0KICAgICAgICANCiAgICAgICAgLy8gU3RlcCAzOiB3ZSBhc3N1bWUgc2lnMSBpcyB2YWxpZCAoaXQgd2lsbCBiZSB2ZXJpZmllZCBkdXJpbmcgc3RlcCA1KSBhbmQgd2UgdmVyaWZ5IGlmICdyZXN1bHQnIGlzIHRoZSBwcmVmaXggb2Ygc2hhMjU2KHNpZzEpDQogICAgICAgIGNoZWNrb2sgPSBtYXRjaEJ5dGVzMzJQcmVmaXgoc2hhMjU2KHNpZzEpLCByZXN1bHQpOw0KICAgICAgICBpZiAoY2hlY2tvayA9PSBmYWxzZSkgcmV0dXJuIGZhbHNlOw0KICAgICAgICANCiAgICAgICAgDQogICAgICAgIC8vIFN0ZXAgNDogY29tbWl0bWVudCBtYXRjaCB2ZXJpZmljYXRpb24sIHNoYTMoZGVsYXksIG5ieXRlcywgdW5vbmNlLCBzZXNzaW9uS2V5SGFzaCkgPT0gY29tbWl0bWVudCBpbiBzdG9yYWdlLg0KICAgICAgICAvLyBUaGlzIGlzIHRvIHZlcmlmeSB0aGF0IHRoZSBjb21wdXRlZCBhcmdzIG1hdGNoIHdpdGggdGhlIG9uZXMgc3BlY2lmaWVkIGluIHRoZSBxdWVyeS4NCiAgICAgICAgYnl0ZXMgbWVtb3J5IGNvbW1pdG1lbnRTbGljZTEgPSBuZXcgYnl0ZXMoOCsxKzMyKTsNCiAgICAgICAgY29weUJ5dGVzKHByb29mLCBsZWRnZXJQcm9vZkxlbmd0aCszMiwgOCsxKzMyLCBjb21taXRtZW50U2xpY2UxLCAwKTsNCiAgICAgICAgDQogICAgICAgIGJ5dGVzIG1lbW9yeSBzZXNzaW9uUHVia2V5ID0gbmV3IGJ5dGVzKDY0KTsNCiAgICAgICAgdWludCBzaWcyb2Zmc2V0ID0gbGVkZ2VyUHJvb2ZMZW5ndGgrMzIrKDgrMSszMikrc2lnMS5sZW5ndGgrNjU7DQogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgc2lnMm9mZnNldC02NCwgNjQsIHNlc3Npb25QdWJrZXksIDApOw0KICAgICAgICANCiAgICAgICAgYnl0ZXMzMiBzZXNzaW9uUHVia2V5SGFzaCA9IHNoYTI1NihzZXNzaW9uUHVia2V5KTsNCiAgICAgICAgaWYgKG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF0gPT0gc2hhMyhjb21taXRtZW50U2xpY2UxLCBzZXNzaW9uUHVia2V5SGFzaCkpeyAvL3Vub25jZSwgbmJ5dGVzIGFuZCBzZXNzaW9uS2V5SGFzaCBtYXRjaA0KICAgICAgICAgICAgZGVsZXRlIG9yYWNsaXplX3JhbmRvbURTX2FyZ3NbcXVlcnlJZF07DQogICAgICAgIH0gZWxzZSByZXR1cm4gZmFsc2U7DQogICAgICAgIA0KICAgICAgICANCiAgICAgICAgLy8gU3RlcCA1OiB2YWxpZGl0eSB2ZXJpZmljYXRpb24gZm9yIHNpZzEgKGtleWhhc2ggYW5kIGFyZ3Mgc2lnbmVkIHdpdGggdGhlIHNlc3Npb25LZXkpDQogICAgICAgIGJ5dGVzIG1lbW9yeSB0b3NpZ24xID0gbmV3IGJ5dGVzKDMyKzgrMSszMik7DQogICAgICAgIGNvcHlCeXRlcyhwcm9vZiwgbGVkZ2VyUHJvb2ZMZW5ndGgsIDMyKzgrMSszMiwgdG9zaWduMSwgMCk7DQogICAgICAgIGNoZWNrb2sgPSB2ZXJpZnlTaWcoc2hhMjU2KHRvc2lnbjEpLCBzaWcxLCBzZXNzaW9uUHVia2V5KTsNCiAgICAgICAgaWYgKGNoZWNrb2sgPT0gZmFsc2UpIHJldHVybiBmYWxzZTsNCiAgICAgICAgDQogICAgICAgIC8vIHZlcmlmeSBpZiBzZXNzaW9uUHVia2V5SGFzaCB3YXMgdmVyaWZpZWQgYWxyZWFkeSwgaWYgbm90Li4gbGV0J3MgZG8gaXQhDQogICAgICAgIGlmIChvcmFjbGl6ZV9yYW5kb21EU19zZXNzaW9uS2V5c0hhc2hWZXJpZmllZFtzZXNzaW9uUHVia2V5SGFzaF0gPT0gZmFsc2Upew0KICAgICAgICAgICAgb3JhY2xpemVfcmFuZG9tRFNfc2Vzc2lvbktleXNIYXNoVmVyaWZpZWRbc2Vzc2lvblB1YmtleUhhc2hdID0gb3JhY2xpemVfcmFuZG9tRFNfcHJvb2ZWZXJpZnlfX3Nlc3Npb25LZXlWYWxpZGl0eShwcm9vZiwgc2lnMm9mZnNldCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIHJldHVybiBvcmFjbGl6ZV9yYW5kb21EU19zZXNzaW9uS2V5c0hhc2hWZXJpZmllZFtzZXNzaW9uUHVia2V5SGFzaF07DQogICAgfQ0KDQogICAgDQogICAgLy8gdGhlIGZvbGxvd2luZyBmdW5jdGlvbiBoYXMgYmVlbiB3cml0dGVuIGJ5IEFsZXggQmVyZWdzemFzemkgKEBheGljKSwgdXNlIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UNCiAgICBmdW5jdGlvbiBjb3B5Qnl0ZXMoYnl0ZXMgZnJvbSwgdWludCBmcm9tT2Zmc2V0LCB1aW50IGxlbmd0aCwgYnl0ZXMgdG8sIHVpbnQgdG9PZmZzZXQpIGludGVybmFsIHJldHVybnMgKGJ5dGVzKSB7DQogICAgICAgIHVpbnQgbWluTGVuZ3RoID0gbGVuZ3RoICsgdG9PZmZzZXQ7DQoNCiAgICAgICAgaWYgKHRvLmxlbmd0aCA8IG1pbkxlbmd0aCkgew0KICAgICAgICAgICAgLy8gQnVmZmVyIHRvbyBzbWFsbA0KICAgICAgICAgICAgdGhyb3c7IC8vIFNob3VsZCBiZSBhIGJldHRlciB3YXk/DQogICAgICAgIH0NCg0KICAgICAgICAvLyBOT1RFOiB0aGUgb2Zmc2V0IDMyIGlzIGFkZGVkIHRvIHNraXAgdGhlIGBzaXplYCBmaWVsZCBvZiBib3RoIGJ5dGVzIHZhcmlhYmxlcw0KICAgICAgICB1aW50IGkgPSAzMiArIGZyb21PZmZzZXQ7DQogICAgICAgIHVpbnQgaiA9IDMyICsgdG9PZmZzZXQ7DQoNCiAgICAgICAgd2hpbGUgKGkgPCAoMzIgKyBmcm9tT2Zmc2V0ICsgbGVuZ3RoKSkgew0KICAgICAgICAgICAgYXNzZW1ibHkgew0KICAgICAgICAgICAgICAgIGxldCB0bXAgOj0gbWxvYWQoYWRkKGZyb20sIGkpKQ0KICAgICAgICAgICAgICAgIG1zdG9yZShhZGQodG8sIGopLCB0bXApDQogICAgICAgICAgICB9DQogICAgICAgICAgICBpICs9IDMyOw0KICAgICAgICAgICAgaiArPSAzMjsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0bzsNCiAgICB9DQogICAgDQogICAgLy8gdGhlIGZvbGxvd2luZyBmdW5jdGlvbiBoYXMgYmVlbiB3cml0dGVuIGJ5IEFsZXggQmVyZWdzemFzemkgKEBheGljKSwgdXNlIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UNCiAgICAvLyBEdXBsaWNhdGUgU29saWRpdHkncyBlY3JlY292ZXIsIGJ1dCBjYXRjaGluZyB0aGUgQ0FMTCByZXR1cm4gdmFsdWUNCiAgICBmdW5jdGlvbiBzYWZlcl9lY3JlY292ZXIoYnl0ZXMzMiBoYXNoLCB1aW50OCB2LCBieXRlczMyIHIsIGJ5dGVzMzIgcykgaW50ZXJuYWwgcmV0dXJucyAoYm9vbCwgYWRkcmVzcykgew0KICAgICAgICAvLyBXZSBkbyBvdXIgb3duIG1lbW9yeSBtYW5hZ2VtZW50IGhlcmUuIFNvbGlkaXR5IHVzZXMgbWVtb3J5IG9mZnNldA0KICAgICAgICAvLyAweDQwIHRvIHN0b3JlIHRoZSBjdXJyZW50IGVuZCBvZiBtZW1vcnkuIFdlIHdyaXRlIHBhc3QgaXQgKGFzDQogICAgICAgIC8vIHdyaXRlcyBhcmUgbWVtb3J5IGV4dGVuc2lvbnMpLCBidXQgZG9uJ3QgdXBkYXRlIHRoZSBvZmZzZXQgc28NCiAgICAgICAgLy8gU29saWRpdHkgd2lsbCByZXVzZSBpdC4gVGhlIG1lbW9yeSB1c2VkIGhlcmUgaXMgb25seSBuZWVkZWQgZm9yDQogICAgICAgIC8vIHRoaXMgY29udGV4dC4NCg0KICAgICAgICAvLyBGSVhNRTogaW5saW5lIGFzc2VtYmx5IGNhbid0IGFjY2VzcyByZXR1cm4gdmFsdWVzDQogICAgICAgIGJvb2wgcmV0Ow0KICAgICAgICBhZGRyZXNzIGFkZHI7DQoNCiAgICAgICAgYXNzZW1ibHkgew0KICAgICAgICAgICAgbGV0IHNpemUgOj0gbWxvYWQoMHg0MCkNCiAgICAgICAgICAgIG1zdG9yZShzaXplLCBoYXNoKQ0KICAgICAgICAgICAgbXN0b3JlKGFkZChzaXplLCAzMiksIHYpDQogICAgICAgICAgICBtc3RvcmUoYWRkKHNpemUsIDY0KSwgcikNCiAgICAgICAgICAgIG1zdG9yZShhZGQoc2l6ZSwgOTYpLCBzKQ0KDQogICAgICAgICAgICAvLyBOT1RFOiB3ZSBjYW4gcmV1c2UgdGhlIHJlcXVlc3QgbWVtb3J5IGJlY2F1c2Ugd2UgZGVhbCB3aXRoDQogICAgICAgICAgICAvLyAgICAgICB0aGUgcmV0dXJuIGNvZGUNCiAgICAgICAgICAgIHJldCA6PSBjYWxsKDMwMDAsIDEsIDAsIHNpemUsIDEyOCwgc2l6ZSwgMzIpDQogICAgICAgICAgICBhZGRyIDo9IG1sb2FkKHNpemUpDQogICAgICAgIH0NCiAgDQogICAgICAgIHJldHVybiAocmV0LCBhZGRyKTsNCiAgICB9DQoNCiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIGhhcyBiZWVuIHdyaXR0ZW4gYnkgQWxleCBCZXJlZ3N6YXN6aSAoQGF4aWMpLCB1c2UgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZQ0KICAgIGZ1bmN0aW9uIGVjcmVjb3ZlcnkoYnl0ZXMzMiBoYXNoLCBieXRlcyBzaWcpIGludGVybmFsIHJldHVybnMgKGJvb2wsIGFkZHJlc3MpIHsNCiAgICAgICAgYnl0ZXMzMiByOw0KICAgICAgICBieXRlczMyIHM7DQogICAgICAgIHVpbnQ4IHY7DQoNCiAgICAgICAgaWYgKHNpZy5sZW5ndGggIT0gNjUpDQogICAgICAgICAgcmV0dXJuIChmYWxzZSwgMCk7DQoNCiAgICAgICAgLy8gVGhlIHNpZ25hdHVyZSBmb3JtYXQgaXMgYSBjb21wYWN0IGZvcm0gb2Y6DQogICAgICAgIC8vICAge2J5dGVzMzIgcn17Ynl0ZXMzMiBzfXt1aW50OCB2fQ0KICAgICAgICAvLyBDb21wYWN0IG1lYW5zLCB1aW50OCBpcyBub3QgcGFkZGVkIHRvIDMyIGJ5dGVzLg0KICAgICAgICBhc3NlbWJseSB7DQogICAgICAgICAgICByIDo9IG1sb2FkKGFkZChzaWcsIDMyKSkNCiAgICAgICAgICAgIHMgOj0gbWxvYWQoYWRkKHNpZywgNjQpKQ0KDQogICAgICAgICAgICAvLyBIZXJlIHdlIGFyZSBsb2FkaW5nIHRoZSBsYXN0IDMyIGJ5dGVzLiBXZSBleHBsb2l0IHRoZSBmYWN0IHRoYXQNCiAgICAgICAgICAgIC8vICdtbG9hZCcgd2lsbCBwYWQgd2l0aCB6ZXJvZXMgaWYgd2Ugb3ZlcnJlYWQuDQogICAgICAgICAgICAvLyBUaGVyZSBpcyBubyAnbWxvYWQ4JyB0byBkbyB0aGlzLCBidXQgdGhhdCB3b3VsZCBiZSBuaWNlci4NCiAgICAgICAgICAgIHYgOj0gYnl0ZSgwLCBtbG9hZChhZGQoc2lnLCA5NikpKQ0KDQogICAgICAgICAgICAvLyBBbHRlcm5hdGl2ZSBzb2x1dGlvbjoNCiAgICAgICAgICAgIC8vICdieXRlJyBpcyBub3Qgd29ya2luZyBkdWUgdG8gdGhlIFNvbGlkaXR5IHBhcnNlciwgc28gbGV0cw0KICAgICAgICAgICAgLy8gdXNlIHRoZSBzZWNvbmQgYmVzdCBvcHRpb24sICdhbmQnDQogICAgICAgICAgICAvLyB2IDo9IGFuZChtbG9hZChhZGQoc2lnLCA2NSkpLCAyNTUpDQogICAgICAgIH0NCg0KICAgICAgICAvLyBhbGJlaXQgbm9uLXRyYW5zYWN0aW9uYWwgc2lnbmF0dXJlcyBhcmUgbm90IHNwZWNpZmllZCBieSB0aGUgWVAsIG9uZSB3b3VsZCBleHBlY3QgaXQNCiAgICAgICAgLy8gdG8gbWF0Y2ggdGhlIFlQIHJhbmdlIG9mIFsyNywgMjhdDQogICAgICAgIC8vDQogICAgICAgIC8vIGdldGggdXNlcyBbMCwgMV0gYW5kIHNvbWUgY2xpZW50cyBoYXZlIGZvbGxvd2VkLiBUaGlzIG1pZ2h0IGNoYW5nZSwgc2VlOg0KICAgICAgICAvLyAgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL2lzc3Vlcy8yMDUzDQogICAgICAgIGlmICh2IDwgMjcpDQogICAgICAgICAgdiArPSAyNzsNCg0KICAgICAgICBpZiAodiAhPSAyNyAmJiB2ICE9IDI4KQ0KICAgICAgICAgICAgcmV0dXJuIChmYWxzZSwgMCk7DQoNCiAgICAgICAgcmV0dXJuIHNhZmVyX2VjcmVjb3ZlcihoYXNoLCB2LCByLCBzKTsNCiAgICB9DQogICAgICAgIA0KfQ0KDQovKiBDb250cmFjdCBPd25lcnNoaXAgKi8NCmNvbnRyYWN0IG93bmVkIA0Kew0KCWFkZHJlc3MgcHVibGljIG93bmVyOw0KDQoJZnVuY3Rpb24gb3duZWQoKSANCgl7DQogICAgICAgIAlvd25lciA9IG1zZy5zZW5kZXI7DQoJfQ0KDQoJbW9kaWZpZXIgb25seU93bmVyIA0KCXsNCiAgICAgICAgCWlmIChtc2cuc2VuZGVyICE9IG93bmVyKSB0aHJvdzsNCiAgICAgICAgCV87DQoJfQ0KDQoJZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyBuZXdPd25lcikgb25seU93bmVyIA0KCXsNCiAgICAgICAgCW93bmVyID0gbmV3T3duZXI7DQoJfQ0KfQ0KDQovKiBFUkMyMCBpbnRlcmZhY2UgKi8NCmNvbnRyYWN0IEVSQzIwSW50ZXJmYWNlIA0Kew0KCS8vIEdldCB0aGUgdG90YWwgdG9rZW4gc3VwcGx5DQoJZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KTsNCg0KCS8vIEdldCB0aGUgYWNjb3VudCBiYWxhbmNlIG9mIGFub3RoZXIgYWNjb3VudCB3aXRoIGFkZHJlc3MgX293bmVyDQoJZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpOw0KDQoJLy8gU2VuZCBfdmFsdWUgYW1vdW50IG9mIHRva2VucyB0byBhZGRyZXNzIF90bw0KCWZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKTsNCiANCgkvLyBTZW5kIF92YWx1ZSBhbW91bnQgb2YgdG9rZW5zIGZyb20gYWRkcmVzcyBfZnJvbSB0byBhZGRyZXNzIF90byANCglmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpOw0KIA0KCS8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuIA0KCS8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLiANCgkvLyB0aGlzIGZ1bmN0aW9uIGlzIHJlcXVpcmVkIGZvciBzb21lIERFWCBmdW5jdGlvbmFsaXR5IA0KCWZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQogDQoJLy8gUmV0dXJucyB0aGUgYW1vdW50IHdoaWNoIF9zcGVuZGVyIGlzIHN0aWxsIGFsbG93ZWQgdG8gd2l0aGRyYXcgZnJvbSBfb3duZXINCglmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKTsNCiANCgkvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLg0KCWV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KDQoJLy8gVHJpZ2dlcmVkIHdoZW5ldmVyIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIGlzIGNhbGxlZC4gDQoJZXZlbnQgQXBwcm92YWwoYWRkcmVzcyBpbmRleGVkIF9vd25lciwgYWRkcmVzcyBpbmRleGVkIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSk7IA0KfQ0KDQpjb250cmFjdCBYIGlzIG93bmVkLCBFUkMyMEludGVyZmFjZSwgdXNpbmdPcmFjbGl6ZSANCnsNCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgX2Zyb20sIGFkZHJlc3MgaW5kZXhlZCBfdG8sIHVpbnQgX3ZhbHVlKTsNCiAgICBldmVudCBBcHByb3ZhbChhZGRyZXNzIGluZGV4ZWQgX293bmVyLCBhZGRyZXNzIGluZGV4ZWQgX3NwZW5kZXIsIHVpbnQgX3ZhbHVlKTsNCgltYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlczsNCglzdHJ1Y3QgZG9uYXRpb24NCgl7DQogICAgICAgIGFkZHJlc3MgX2RvbmF0aW9uQWRkcmVzczsNCiAgICAgICAgdWludCBfZG9uYXRpb25BbW91bnQ7DQogICAgfQ0KICAgIGRvbmF0aW9uW10gcHVibGljIF9kb25hdGlvbnM7DQoJZG9uYXRpb25bXSBwdWJsaWMgcmVndWxhckRvbmF0aW9uczsNCgkNCgltYXBwaW5nKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgYWxsb3dlZDsNCgkNCglzdHJpbmcgcHVibGljIGNvbnN0YW50IG5hbWUgPSAiWCI7DQoJc3RyaW5nIHB1YmxpYyBjb25zdGFudCBzeW1ib2wgPSAifFh8IjsNCgl1aW50IHB1YmxpYyBjb25zdGFudCBkZWNpbWFscyA9IDg7DQoNCgl1aW50IF90b3RhbFN1cHBseSA9IDEwMDAwMDAwMDAwMDAwMDAwMDsNCgl1aW50IF90b3RhbERvbmF0aW9uU3VwcGx5ID0gMTAwMDAwMDAwMDAwMDAwMDsNCgkNCgkvL0V0aGVyIHZhbHVlcw0KCXVpbnQgcHVibGljIF90b3RhbERvbmF0aW9ucyA9IDA7DQoJdWludCBwdWJsaWMgX3JlZ3VsYXJEb25hdGlvbnNUb3RhbCA9IDA7DQoJDQoJdWludCBwdWJsaWMgX2Nyb3dkU2FsZVN1cHBseSA9IDEwMDAwMDAwMDAwMDAwMDsNCgl1aW50IHB1YmxpYyBfZG9uYXRpb25TdXBwbHkgPSAxMDAwMDAwMDAwMDAwMDAwOw0KCXVpbnQgcHVibGljIF9mb3VuZGF0aW9uU3VwcGx5ID0gMTMwMDAwMDAwMDAwMDAwMDA7DQoJdWludCBwdWJsaWMgX0FJRXhjaGFuZ2VTdXBwbHkgPSAxMDkwMDAwMDAwMDAwMDAwMDsNCgl1aW50IHB1YmxpYyBfbG90dGVyeVN1cHBseSA9IDE4NzUwMDAwMDAwMDAwMDAwOw0KCXVpbnQgcHVibGljIF9taW5lYWJsZVN1cHBseSA9IDU2MjUwMDAwMDAwMDAwMDAwOw0KCQ0KCXVpbnQgX3ByZXNhbGVQcmljZSA9IDAuMDAzNSBldGhlcjsgLy9ub3QgdXNlZCAtIGhlcmUgZm9yIHBvc3Rlcml0eQ0KCXVpbnQgX2p1bFByaWNlID0gMC4wMDUyNSBldGhlcjsNCgl1aW50IF9hdWdQcmljZSA9IDAuMDY1IGV0aGVyOw0KCXVpbnQgX3NlcFByaWNlID0gMC4wMDcgZXRoZXI7DQoJdWludCBfb2N0UHJpY2UgPSAwLjAwNzcgZXRoZXI7DQoJdWludCBfbm92UHJpY2UgPSAwLjAwODc1IGV0aGVyOw0KCXVpbnQgX2RlY1ByaWNlID0gMC4wMSBldGhlcjsNCg0KCXVpbnQgX2F1ZzE3ID0gMTUwMTU0NTYwMDsNCgl1aW50IF9zZXAxNyA9IDE1MDQyMjQwMDA7DQoJdWludCBfb2N0MTcgPSAxNTA2ODE2MDAwOw0KCXVpbnQgX25vdjE3ID0gMTUwOTQ5NDQwMDsNCgl1aW50IF9kZWMxNyA9IDE1MTIwODY0MDA7DQoJdWludCBfamFuMTggPSAxNTE0NzY0ODAwOw0KCQ0KCS8vZ2FzIHByaWNlDQoJdWludCBwdWJsaWMgb3JhY2xpemVHYXNQcmljZSA9IDIwMDAwMDsNCg0KCWZ1bmN0aW9uIFgoKSANCgl7DQoJCS8vQWRkcmVzc2VzIHRvIHNlbmQgdG9rZW5zIHRvDQoJCWFkZHJlc3MgQUlFeGNoYW5nZSA9IDB4MDAzNWM0Qzg2ZjE1YmE4MDMxOTg1M2RmNjA5MkM4MzhiQTlCMzlDODsNCgkJYWRkcmVzcyBwcmVTYWxlMSA9IDB4MDY2NEIyMUZEMzM4NjVjMjI1OWQyNjc0Zjc1YjhDMmExQTRlMjdBNzsgLy8gMTEgdG9rZW5zLCBkb25hdGVkIDAuMDAxNSBldGhlcg0KCQlhZGRyZXNzIHByZVNhbGUyID0gMHhhQTQxZTBGOWY0QTE5NzE5MDA3QzUzMDY0QjY5NzliREI2REY4YjhjOyAvLyA2MjggdG9rZW5zLCAwLjAwMiBldGhlcg0KCQlhZGRyZXNzIHByZVNhbGUzID0gMHgzMkJlMzQzQjk0Zjg2MDEyNGRDNGZFZTI3OEZEQ0JEMzhDMTAyRDg4OyAvLyA4MCB0b2tlbnMsIDAgZG9uYXRpb24NCgkJYWRkcmVzcyBwcmVTYWxlNCA9IDB4N2VEMUU0NjlmQ2IzRUUxOUMwMzY2RDgyOWUyOTE0NTFiRTYzOEU1OTsgLy8gMTAgdG9rZW5zLCAwIGRvbmF0aW9uDQoJCWFkZHJlc3MgcHJlU2FsZTUgPSAweDhhYTUwZGZjOTVBYjA0NzEyOGNjRGM2QWY0QkEyZERiQThEMEE4NzQ7IC8vIEJpdGNvaW4gc2FsZSwgMjAwIHRva2VucywgMCBkb25hdGlvbiANCgkJDQoJCS8vQWxsb2NhdGlvbiB0byB0aGUgWCBGb3VuZGF0aW9uIGFuZCBBSSBFeGNoYW5nZQ0KCQliYWxhbmNlc1ttc2cuc2VuZGVyXSA9IF9mb3VuZGF0aW9uU3VwcGx5Ow0KCQliYWxhbmNlc1tBSUV4Y2hhbmdlXSA9IF9BSUV4Y2hhbmdlU3VwcGx5Ow0KCQlfZm91bmRhdGlvblN1cHBseSAtPSBfZm91bmRhdGlvblN1cHBseTsNCgkJX0FJRXhjaGFuZ2VTdXBwbHkgLT0gX0FJRXhjaGFuZ2VTdXBwbHk7DQoJCQ0KCQkvL0FsbG9jYXRpb24gdG8gcHJlc2FsZSBhZGRyZXNzZXMgKGJlZm9yZSBjb250cmFjdCBkZXBsb3ltZW50LikNCgkJYmFsYW5jZXNbcHJlU2FsZTFdID0gMTEwMDAwMDAwMDsgDQoJCV9kb25hdGlvbnMucHVzaChkb25hdGlvbih7X2RvbmF0aW9uQWRkcmVzczogcHJlU2FsZTEsIF9kb25hdGlvbkFtb3VudDogMC4wMDE1IGV0aGVyfSkpOw0KCQlfdG90YWxEb25hdGlvbnMgKz0gMC4wMDE1IGV0aGVyOw0KCQlfY3Jvd2RTYWxlU3VwcGx5IC09IGJhbGFuY2VzW3ByZVNhbGUxXTsNCg0KCQliYWxhbmNlc1twcmVTYWxlMl0gPSA2MjgwMDAwMDAwMDsNCgkJX2RvbmF0aW9ucy5wdXNoKGRvbmF0aW9uKHtfZG9uYXRpb25BZGRyZXNzOiBwcmVTYWxlMiwgX2RvbmF0aW9uQW1vdW50OiAwLjAwMiBldGhlcn0pKTsNCgkJX3RvdGFsRG9uYXRpb25zICs9IDAuMDAyIGV0aGVyOw0KCQlfY3Jvd2RTYWxlU3VwcGx5IC09IGJhbGFuY2VzW3ByZVNhbGUyXTsNCg0KCQliYWxhbmNlc1twcmVTYWxlM10gPSA4MDAwMDAwMDAwOw0KCQlfY3Jvd2RTYWxlU3VwcGx5IC09IGJhbGFuY2VzW3ByZVNhbGUzXTsNCg0KCQliYWxhbmNlc1twcmVTYWxlNF0gPSAxMDAwMDAwMDAwOw0KCQlfY3Jvd2RTYWxlU3VwcGx5IC09IGJhbGFuY2VzW3ByZVNhbGU0XTsNCg0KCQliYWxhbmNlc1twcmVTYWxlNV0gPSAyMDAwMDAwMDAwMDsNCgkJX2Nyb3dkU2FsZVN1cHBseSAtPSBiYWxhbmNlc1twcmVTYWxlNV07DQoJfQ0KDQogICAgLyogUnVucyB3aGVuIEV0aGVyIGlzIHNlbnQgdG8gdGhlIGNvbnRyYWN0IGFkZHJlc3MgKi8NCglmdW5jdGlvbiAoKSBwYXlhYmxlDQoJew0KCQl1aW50IGFtb3VudCA9IG1zZy52YWx1ZTsNCgkJaWYgKG5vdyA+IF9qYW4xOCkNCgkJew0KCQkJcmVndWxhckRvbmF0aW9ucy5wdXNoKGRvbmF0aW9uKHtfZG9uYXRpb25BZGRyZXNzOiBtc2cuc2VuZGVyLCBfZG9uYXRpb25BbW91bnQ6IGFtb3VudH0pKTsNCgkJCV9yZWd1bGFyRG9uYXRpb25zVG90YWwgKz0gYW1vdW50Ow0KCQkJcmV0dXJuOw0KCQl9DQoJCXVpbnQgY3Jvd2RTYWxlQ29zdCA9IGdldEN1cnJlbnRUb2tlbkNvc3QoKTsNCgkJaWYgKGFtb3VudCA8IGNyb3dkU2FsZUNvc3QpDQoJCXsNCgkJCXJldmVydCgpOyAvL3dob2xlIHRva2VuIHB1cmNoYXNlcyBvbmx5DQoJCX0NCgkJdWludCB3aG9sZU51bVRva2VucyA9IGFtb3VudC9jcm93ZFNhbGVDb3N0OyANCgkJdWludCByZW1haW5kZXJFdGggPSBhbW91bnQgLSAoKGFtb3VudC9jcm93ZFNhbGVDb3N0KSpjcm93ZFNhbGVDb3N0KTsNCgkJDQoJCWlmICgoX2Nyb3dkU2FsZVN1cHBseS8oMTAqKmRlY2ltYWxzKSkgPj0gd2hvbGVOdW1Ub2tlbnMpDQoJCXsNCgkJCWJhbGFuY2VzW21zZy5zZW5kZXJdID0gd2hvbGVOdW1Ub2tlbnMgKiAoMTAqKmRlY2ltYWxzKTsNCgkJCV9jcm93ZFNhbGVTdXBwbHkgLT0gd2hvbGVOdW1Ub2tlbnMgKiAoMTAqKmRlY2ltYWxzKTsNCgkJCWlmKHJlbWFpbmRlckV0aCA+IDApDQoJCQl7DQoJCQkJX2RvbmF0aW9ucy5wdXNoKGRvbmF0aW9uKHtfZG9uYXRpb25BZGRyZXNzOiBtc2cuc2VuZGVyLCBfZG9uYXRpb25BbW91bnQ6IHJlbWFpbmRlckV0aH0pKTsNCgkJCQlfdG90YWxEb25hdGlvbnMgKz0gcmVtYWluZGVyRXRoOw0KCQkJfQ0KCQl9DQoJCWVsc2UNCgkJew0KCQkJaWYoX2Nyb3dkU2FsZVN1cHBseSA+IDAgJiYgKF9jcm93ZFNhbGVTdXBwbHkvKDEwKipkZWNpbWFscykpIDwgd2hvbGVOdW1Ub2tlbnMpDQoJCQl7DQoJCQkgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBfY3Jvd2RTYWxlU3VwcGx5Ow0KCQkJICAgIHVpbnQgZG9uYXRpb25FdGggPSAod2hvbGVOdW1Ub2tlbnMgLSAoX2Nyb3dkU2FsZVN1cHBseS8oMTAqKmRlY2ltYWxzKSkpICogY3Jvd2RTYWxlQ29zdDsNCgkJCSAgICBfZG9uYXRpb25zLnB1c2goZG9uYXRpb24oe19kb25hdGlvbkFkZHJlc3M6IG1zZy5zZW5kZXIsIF9kb25hdGlvbkFtb3VudDogZG9uYXRpb25FdGh9KSk7DQoJCQkgICAgX3RvdGFsRG9uYXRpb25zICs9IGRvbmF0aW9uRXRoOw0KCQkJICAgIF9jcm93ZFNhbGVTdXBwbHkgPSAwOw0KCQkJfQ0KCQkJZWxzZQ0KCQkJew0KCQkJICAgIF9kb25hdGlvbnMucHVzaChkb25hdGlvbih7X2RvbmF0aW9uQWRkcmVzczogbXNnLnNlbmRlciwgX2RvbmF0aW9uQW1vdW50OiBhbW91bnR9KSk7DQoJCQkgICAgX3RvdGFsRG9uYXRpb25zICs9IGFtb3VudDsNCgkJCX0NCgkJfQ0KCQkNCgl9CQ0KDQogICAgZnVuY3Rpb24gZG9uYXRpb25Db3VudCgpIHJldHVybnMgKHVpbnQgbnVtKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIF9kb25hdGlvbnMubGVuZ3RoOw0KICAgIH0NCglmdW5jdGlvbiBjcm93ZFNhbGVEb25hdGUoKSBwYXlhYmxlIHJldHVybnMgKGJvb2wgc3VjY2VzcykNCgl7DQoJCWlmIChub3cgPiBfamFuMTgpDQoJCXsNCgkJCXJldmVydCgpOw0KCQl9DQoNCgkJdWludCBhbW91bnQgPSBtc2cudmFsdWU7DQoJCWlmIChhbW91bnQgPiAwKQ0KCQl7DQoJCSAgICBfZG9uYXRpb25zLnB1c2goZG9uYXRpb24oe19kb25hdGlvbkFkZHJlc3M6IG1zZy5zZW5kZXIsIF9kb25hdGlvbkFtb3VudDogYW1vdW50fSkpOw0KCQkgICAgX3RvdGFsRG9uYXRpb25zICs9IGFtb3VudDsNCgkJICAgIHJldHVybiB0cnVlOw0KCQl9DQoJCWVsc2UNCgkJew0KCQkgICAgcmV0dXJuIGZhbHNlOw0KCQl9DQoJfQ0KDQoJZnVuY3Rpb24gZ2V0Q3VycmVudFRva2VuQ29zdCgpIHJldHVybnMgKHVpbnQgY3Jvd2RTYWxlQ29zdCkNCgl7DQoJCWlmKG5vdyA8IF9hdWcxNykNCgkJew0KCQkJcmV0dXJuIF9qdWxQcmljZTsNCgkJfQ0KCQllbHNlIGlmKG5vdyA8IF9zZXAxNykNCgkJew0KCQkJcmV0dXJuIF9hdWdQcmljZTsNCgkJfQ0KCQllbHNlIGlmKG5vdyA8IF9vY3QxNykNCgkJew0KCQkJcmV0dXJuIF9zZXBQcmljZTsNCgkJfQ0KCQllbHNlIGlmKG5vdyA8IF9ub3YxNykNCgkJew0KCQkJcmV0dXJuIF9vY3RQcmljZTsNCgkJfQ0KCQllbHNlIGlmKG5vdyA8IF9kZWMxNykNCgkJew0KCQkJcmV0dXJuIF9ub3ZQcmljZTsNCgkJfQ0KCQllbHNlDQoJCXsNCgkJCXJldHVybiBfZGVjUHJpY2U7DQoJCX0NCgl9DQoJDQoJZnVuY3Rpb24gZGlzdHJpYnV0ZURvbmF0aW9uVG9rZW5zKCkgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykNCgl7DQoJICAgIGlmIChub3cgPiBfamFuMTgpDQoJICAgIHsNCgkgICAgICAgIHJldHVybiBmYWxzZTsNCgkgICAgfQ0KCSAgICBlbHNlIGlmIChfZG9uYXRpb25zLmxlbmd0aCA9PSAwKQ0KCSAgICB7DQoJICAgICAgICByZXR1cm4gZmFsc2U7DQoJICAgIH0NCgkgICAgZWxzZQ0KCSAgICB7DQoJICAgICAgICAvL2Rpc3RyaWJ1dGUgdG8gYWRkcmVzc2VzDQoJICAgICAgICB1aW50IGN1cnJlbnREaXN0cmlidXRpb24gPSAwOw0KCSAgICAgICAgd2hpbGUoX2RvbmF0aW9ucy5sZW5ndGggLSBjdXJyZW50RGlzdHJpYnV0aW9uID4gMCkNCgkgICAgICAgIHsNCgkgICAgICAgICAgICBkb25hdGlvbiBjdXJyZW50RG9ub3IgPSBfZG9uYXRpb25zW19kb25hdGlvbnMubGVuZ3RoIC0gY3VycmVudERpc3RyaWJ1dGlvbiAtIDFdOw0KCSAgICAgICAgICAgIHVpbnQgdHJhbnNmZXJBbW91bnQgPSAoKF90b3RhbERvbmF0aW9uU3VwcGx5ICogY3VycmVudERvbm9yLl9kb25hdGlvbkFtb3VudCkvKF90b3RhbERvbmF0aW9ucykpOw0KCSAgICAgICAgICAgIGJhbGFuY2VzW2N1cnJlbnREb25vci5fZG9uYXRpb25BZGRyZXNzXSArPSB0cmFuc2ZlckFtb3VudDsNCgkgICAgICAgICAgICBkZWxldGUgX2RvbmF0aW9uc1tfZG9uYXRpb25zLmxlbmd0aCAtIGN1cnJlbnREaXN0cmlidXRpb24gLSAxXTsNCgkgICAgICAgICAgICBjdXJyZW50RGlzdHJpYnV0aW9uICs9IDE7DQoJICAgICAgICB9DQoJICAgICAgICByZXR1cm4gdHJ1ZTsNCgkgICAgfQ0KCX0NCgkNCglmdW5jdGlvbiBjaGFuZ2VPcmFjbGl6ZUdhc1ByaWNlKHVpbnQgcHJpY2UpIG9ubHlPd25lciByZXR1cm5zIChib29sIHN1Y2Nlc3MpDQoJew0KCSAgICBvcmFjbGl6ZUdhc1ByaWNlID0gcHJpY2U7DQoJICAgIHJldHVybiB0cnVlOw0KCX0NCgkNCglmdW5jdGlvbiB3aXRoZHJhd0Z1bmRzKCkgb25seU93bmVyIHJldHVybnMgKGJvb2wgc3VjY2VzcykNCgl7DQoJICAgIG93bmVyLmNhbGwuZ2FzKDIwMDAwMCkudmFsdWUodGhpcy5iYWxhbmNlKSgpOw0KCSAgICByZXR1cm4gdHJ1ZTsNCgl9DQoNCgkvKiA9PT09PT09PT09IEVSQzIwIGltcGxlbWVudGF0aW9ucyA9PT09PT09PT09ICovDQoJZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IHRvdGFsU3VwcGx5KQ0KCXsNCiAgICAgICAgCXRvdGFsU3VwcGx5ID0gX3RvdGFsU3VwcGx5Ow0KICAgIH0gDQogDQogICAgZnVuY3Rpb24gYmFsYW5jZU9mKGFkZHJlc3MgX293bmVyKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGJhbGFuY2UpIA0KCXsNCiAgICAgICAgCXJldHVybiBiYWxhbmNlc1tfb3duZXJdOw0KCX0NCg0KCWZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKQ0KCXsNCgkJaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdIDwgX3ZhbHVlIHx8IGJhbGFuY2VzW190b10gKyBfdmFsdWUgPCBiYWxhbmNlc1tfdG9dKQ0KCQl7DQogICAgICAgIAlyZXZlcnQoKTsNCiAgICAgICAgCXJldHVybiBmYWxzZTsNCgkJfQ0KICAgIAliYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgCWJhbGFuY2VzW190b10gKz0gX3ZhbHVlOw0KICAgIAlUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgCXJldHVybiB0cnVlOw0KCX0NCg0KCWZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzIF9mcm9tLCBhZGRyZXNzIF90bywgdWludDI1NiBfYW1vdW50KSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIA0KCXsgDQogICAgICAgIAlpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCAmJiBfYW1vdW50ID4gMCAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIA0KCQl7DQogICAgICAgICAgICAJCWJhbGFuY2VzW19mcm9tXSAtPSBfYW1vdW50OyANCiAgICAgICAgICAgIAkJYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gLT0gX2Ftb3VudDsNCiAgICAgICAgICAgCQliYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7IA0KICAgICAgICAgICAgCQlUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsNCiAgICAgICAgICAgIAkJcmV0dXJuIHRydWU7DQogICAgICAgIAl9IA0KCQllbHNlIA0KCQl7DQogICAgICAgICAgICAJCXJldHVybiBmYWxzZTsNCiAgICAgICAgCX0NCiAgICAJfQ0KDQoJZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2VzcykNCgl7DQogICAgICAgIAlhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7IA0KICAgICAgICAJQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF9hbW91bnQpOyANCiAgICAgICAgCXJldHVybiB0cnVlOyANCgl9DQoNCglmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBfb3duZXIsIGFkZHJlc3MgX3NwZW5kZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgcmVtYWluaW5nKSANCgl7DQogICAgICAgIAlyZXR1cm4gYWxsb3dlZFtfb3duZXJdW19zcGVuZGVyXTsgDQoJfQ0KICAgIA0KICAgIGZ1bmN0aW9uIF9fY2FsbGJhY2soYnl0ZXMzMiBteWlkLCBzdHJpbmcgcmVzdWx0KSANCiAgICB7DQogICAgICAgIGlmIChtc2cuc2VuZGVyICE9IG9yYWNsaXplX2NiQWRkcmVzcygpKSANCiAgICAgICAgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICAgICAgYWRkcmVzcyBsb3R0ZXJ5V2lubmVyID0gcGFyc2VBZGRyKHJlc3VsdCk7DQoJCWlmIChfbG90dGVyeVN1cHBseSA+PSAoMSAqIDEwKipkZWNpbWFscykpDQoJCXsNCgkJCV9sb3R0ZXJ5U3VwcGx5IC09IDEgKiAoMTAqKmRlY2ltYWxzKTsNCgkJCWJhbGFuY2VzW2xvdHRlcnlXaW5uZXJdICs9IDEgKiAoMTAqKmRlY2ltYWxzKTsNCgkJfQ0KCQllbHNlDQoJCXsNCgkJCWJhbGFuY2VzW2xvdHRlcnlXaW5uZXJdICs9IF9sb3R0ZXJ5U3VwcGx5Ow0KCQkJX2xvdHRlcnlTdXBwbHkgLT0gX2xvdHRlcnlTdXBwbHk7CQ0KCQl9DQogICAgfQ0KDQoJLyogPT09PT09PT09PSBCbG9jayBSZXdhcmRzID09PT09PT09PT09PT0qLw0KCS8vTWluZXJzIHNob3VsZCBlbnN1cmUgdGhhdCB0aGV5IHBhc3MgaW4gYXQgbGVhc3QgMjUwLDAwMCBnYXMNCglmdW5jdGlvbiBnaXZlQmxvY2tSZXdhcmQoKSBwYXlhYmxlIHJldHVybnMgKGJvb2wgc3VjY2VzcykNCgl7DQoJCS8vbG90dGVyeSByZXdhcmQgLSBOQjogQ2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGggYXQgbGVhc3QgDQoJCW9yYWNsaXplX3F1ZXJ5KCJVUkwiLCAianNvbihodHRwczovL2RpZ2l0eC5pby9HZXRMb3R0ZXJ5V2lubmVyLmFzcHgpLndpbm5lciIsIG9yYWNsaXplR2FzUHJpY2UpOw0KCQkNCgkJLy9taW5lciByZXdhcmQNCgkJaWYgKF9taW5lYWJsZVN1cHBseSA+PSAoMyAqIDEwKipkZWNpbWFscykpDQoJCXsNCgkJCV9taW5lYWJsZVN1cHBseSAtPSAzICogKDEwKipkZWNpbWFscyk7DQoJCQliYWxhbmNlc1tibG9jay5jb2luYmFzZV0gKz0gMyAqICgxMCoqZGVjaW1hbHMpOw0KCQl9DQoJCWVsc2UNCgkJew0KCQkgICAgYmFsYW5jZXNbYmxvY2suY29pbmJhc2VdICs9IF9taW5lYWJsZVN1cHBseTsNCgkJCV9taW5lYWJsZVN1cHBseSAtPSBfbWluZWFibGVTdXBwbHk7CQ0KCQl9DQoJCXJldHVybiB0cnVlOw0KCX0NCgkNCn0='