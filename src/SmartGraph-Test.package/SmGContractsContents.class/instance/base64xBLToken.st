base 64 content
base64xBLToken
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC44Ow0KDQovKiBCaWxsaW9uYWlyZSBUb2tlbiAoWEJMKSBzb3VyY2UgY29kZS4gKi8NCiAgDQogY29udHJhY3QgWEJMVG9rZW4gew0KICAgICANCiAgICAvLyBHZXQgdGhlIHRvdGFsIHRva2VuIHN1cHBseQ0KICANCiAgICAvLyBUcmlnZ2VyZWQgd2hlbiB0b2tlbnMgYXJlIHRyYW5zZmVycmVkLg0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOw0KICANCiAgICAvLyBUcmlnZ2VyZWQgd2hlbmV2ZXIgYXBwcm92ZShhZGRyZXNzIF9zcGVuZGVyLCB1aW50MjU2IF92YWx1ZSkgaXMgY2FsbGVkLg0KICAgIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOw0KDQogICAgLyogVGhpcyBub3RpZmllcyBjbGllbnRzIGFib3V0IHRoZSBYQkwgYW1vdW50IGJ1cm5lZCAqLw0KICAgIGV2ZW50IEJ1cm4oYWRkcmVzcyBpbmRleGVkIGZyb20sIHVpbnQyNTYgdmFsdWUpOw0KICAgIA0KICAgIC8vIEFuZCB3ZSBiZWdpbjoNCiAgICBzdHJpbmcgcHVibGljIGNvbnN0YW50IHN5bWJvbCA9ICJYQkwiOw0KICAgIHN0cmluZyBwdWJsaWMgY29uc3RhbnQgbmFtZSA9ICJCaWxsaW9uYWlyZSBUb2tlbiI7DQogICAgdWludDggcHVibGljIGNvbnN0YW50IGRlY2ltYWxzID0gMTg7DQogICAgdWludDI1NiBfdG90YWxTdXBwbHkgPSAzMzMzMzMzMDAwMDAwMDAwMDAwMDAwMDAwOyAgICAvLyAzLDMzMywzMzMgdG9rZW5zIHdpdGggMTggZGVjaW1hbCBwbGFjZXMuDQogICAgdWludDI1NiBfdG90YWxCdXJuZWQgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUb3RhbCBidXJuZWQgaW5pdGlhbGx5IHN0YXJ0cyBhdCAwLg0KICAgICANCiAgICAvKiBUaGUgb3duZXIgb2YgdGhpcyBjb250cmFjdCAoaW5pdGlhbCBhZGRyZXNzKSAqLw0KICAgIGFkZHJlc3MgcHVibGljIG93bmVyOw0KICANCiAgICAvKiBEaWN0aW9uYXJ5IGNvbnRhaW5pbmcgYmFsYW5jZXMgZm9yIGVhY2ggYWNjb3VudCAqLw0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBiYWxhbmNlczsNCiAgDQogICAgLyogT3duZXIgb2YgYWNjb3VudCBjYW4gYXBwcm92ZSAoYWxsb3cpIHRoZSB0cmFuc2ZlciBvZiBhbiBhbW91bnQgdG8gYW5vdGhlciBhY2NvdW50ICovDQogICAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7DQogIA0KICAgICAvLyBGdW5jdGlvbnMgd2l0aCB0aGlzIG1vZGlmaWVyIGNhbiBvbmx5IGJlIGV4ZWN1dGVkIGJ5IHRoZSBvd25lcg0KICAgIG1vZGlmaWVyIG9ubHlPd25lcigpIA0KICAgICB7DQogICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBvd25lcikgDQogICAgICAgICB7DQogICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICB9DQogICAgICAgICBfOw0KICAgICB9DQogIA0KICAgICAvLyBDb25zdHJ1Y3RvcjoNCiAgICAgZnVuY3Rpb24gWEJMVG9rZW4oKSANCiAgICAgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgICAgIGJhbGFuY2VzW293bmVyXSA9IF90b3RhbFN1cHBseTsNCiAgICAgfQ0KICANCiAgICAgZnVuY3Rpb24gdG90YWxTdXBwbHkoKSBjb25zdGFudCByZXR1cm5zICh1aW50MjU2IGxfdG90YWxTdXBwbHkpIA0KICAgICB7DQogICAgICAgIGxfdG90YWxTdXBwbHkgPSBfdG90YWxTdXBwbHk7DQogICAgIH0NCg0KICAgICBmdW5jdGlvbiB0b3RhbEJ1cm5lZCgpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgbF90b3RhbEJ1cm5lZCkNCiAgICAgew0KICAgICAgICBsX3RvdGFsQnVybmVkID0gX3RvdGFsQnVybmVkOw0KICAgICB9DQogIA0KICAgICAvKiBXaGF0IGlzIHRoZSBiYWxhbmNlIG9mIGEgcGFydGljdWxhciBhY2NvdW50PyAqLw0KICAgICBmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcyBfb3duZXIpIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSkgDQogICAgIHsNCiAgICAgICAgcmV0dXJuIGJhbGFuY2VzW19vd25lcl07DQogICAgIH0NCiAgDQogICAgIC8qIFRyYW5zZmVyIHRoZSBiYWxhbmNlIGZyb20gb3duZXIncyBhY2NvdW50IHRvIGFub3RoZXIgYWNjb3VudC4gKi8NCiAgICAgZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSANCiAgICAgew0KICAgICAgICBpZiAoX3RvID09IDB4MCkgdGhyb3c7ICAgICAgLyogUHJldmVudHMgdHJhbnNmZXJyaW5nIHRvIDB4MCBhZGRyZXNzZXMuIFVzZSBidXJuKCkgaW5zdGVhZC4gKi8NCg0KICAgICAgICBpZiAoYmFsYW5jZXNbbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCAmJiBfYW1vdW50ID4gMCAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIA0KICAgICAgICB7DQogICAgICAgICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtPSBfYW1vdW50Ow0KICAgICAgICAgICAgYmFsYW5jZXNbX3RvXSArPSBfYW1vdW50Ow0KICAgICAgICAgICAgVHJhbnNmZXIobXNnLnNlbmRlciwgX3RvLCBfYW1vdW50KTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgfSANCiAgICAgICAgIGVsc2UgDQogICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICB9DQogICAgIH0NCiAgDQogICAgIC8vIFNlbmQgX3ZhbHVlIGFtb3VudCBvZiB0b2tlbnMgZnJvbSBhZGRyZXNzIF9mcm9tIHRvIGFkZHJlc3MgX3RvDQogICAgIC8vIFRoZSB0cmFuc2ZlckZyb20gbWV0aG9kIGlzIHVzZWQgZm9yIGEgd2l0aGRyYXcgd29ya2Zsb3csIGFsbG93aW5nIGNvbnRyYWN0cyB0byBzZW5kDQogICAgIC8vIHRva2VucyBvbiB5b3VyIGJlaGFsZiwgZm9yIGV4YW1wbGUgdG8gImRlcG9zaXQiIHRvIGEgY29udHJhY3QgYWRkcmVzcyBhbmQvb3IgdG8gY2hhcmdlDQogICAgIC8vIGZlZXMgaW4gc3ViLWN1cnJlbmNpZXM7IHRoZSBjb21tYW5kIHNob3VsZCBmYWlsIHVubGVzcyB0aGUgX2Zyb20gYWNjb3VudCBoYXMNCiAgICAgLy8gZGVsaWJlcmF0ZWx5IGF1dGhvcml6ZWQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSB2aWEgc29tZSBtZWNoYW5pc207IHdlIHByb3Bvc2UNCiAgICAgLy8gdGhlc2Ugc3RhbmRhcmRpemVkIEFQSXMgZm9yIGFwcHJvdmFsOg0KICAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSANCiAgICAgew0KICAgICAgICBpZiAoX3RvID09IDB4MCkgdGhyb3c7ICAgICAgLyogUHJldmVudHMgdHJhbnNmZXJyaW5nIHRvIDB4MCBhZGRyZXNzZXMuIFVzZSBidXJuKCkgaW5zdGVhZC4gKi8NCg0KICAgICAgICBpZiAoYmFsYW5jZXNbX2Zyb21dID49IF9hbW91bnQgJiYgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPj0gX2Ftb3VudCAmJiBfYW1vdW50ID4gMCAmJiBiYWxhbmNlc1tfdG9dICsgX2Ftb3VudCA+IGJhbGFuY2VzW190b10pIA0KICAgICAgICB7DQogICAgICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX2Ftb3VudDsNCiAgICAgICAgICAgIGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdIC09IF9hbW91bnQ7DQogICAgICAgICAgICBiYWxhbmNlc1tfdG9dICs9IF9hbW91bnQ7DQogICAgICAgICAgICBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfYW1vdW50KTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgfSANCiAgICAgICAgIGVsc2UgDQogICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICB9DQogICAgIH0NCiAgDQogICAgIC8vIEFsbG93IF9zcGVuZGVyIHRvIHdpdGhkcmF3IGZyb20geW91ciBhY2NvdW50LCBtdWx0aXBsZSB0aW1lcywgdXAgdG8gdGhlIF92YWx1ZSBhbW91bnQuDQogICAgIC8vIElmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIGl0IG92ZXJ3cml0ZXMgdGhlIGN1cnJlbnQgYWxsb3dhbmNlIHdpdGggX3ZhbHVlLg0KICAgICBmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3MgX3NwZW5kZXIsIHVpbnQyNTYgX2Ftb3VudCkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSANCiAgICAgew0KICAgICAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF9hbW91bnQ7DQogICAgICAgIEFwcHJvdmFsKG1zZy5zZW5kZXIsIF9zcGVuZGVyLCBfYW1vdW50KTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgIH0NCiAgDQogICAgIC8qIElzIHRoZSBfc3BlbmRlciBhbGxvd2VkIHRvIHNwZW5kIG9uIHRoZSBiZWhhbGYgb2YgdGhlIF9vd25lcj8gKi8gDQogICAgIGZ1bmN0aW9uIGFsbG93YW5jZShhZGRyZXNzIF9vd25lciwgYWRkcmVzcyBfc3BlbmRlcikgY29uc3RhbnQgcmV0dXJucyAodWludDI1NiByZW1haW5pbmcpIA0KICAgICB7DQogICAgICAgIHJldHVybiBhbGxvd2VkW19vd25lcl1bX3NwZW5kZXJdOw0KICAgICB9DQoNCiAgICBmdW5jdGlvbiBidXJuKHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIA0KICAgIHsNCiAgICAgICAgaWYgKGJhbGFuY2VzW21zZy5zZW5kZXJdIDwgX3ZhbHVlKSB0aHJvdzsgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gNCiAgICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgLyogVXBkYXRpbmcgaW5kaWNhdG9yIHZhcmlhYmxlcyAqLw0KICAgICAgICBfdG90YWxTdXBwbHkgLT0gX3ZhbHVlOyAgICAgICAgICANCiAgICAgICAgX3RvdGFsQnVybmVkICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAvKiBTZW5kIHRoZSBldmVudCBub3RpZmljYXRpb24gKi8NCiAgICAgICAgQnVybihtc2cuc2VuZGVyLCBfdmFsdWUpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBidXJuRnJvbShhZGRyZXNzIF9mcm9tLCB1aW50MjU2IF92YWx1ZSkgcmV0dXJucyAoYm9vbCBzdWNjZXNzKSANCiAgICB7DQogICAgICAgIGlmIChiYWxhbmNlc1tfZnJvbV0gPCBfdmFsdWUpIHRocm93OyAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gNCiAgICAgICAgaWYgKF92YWx1ZSA+IGFsbG93ZWRbX2Zyb21dW21zZy5zZW5kZXJdKSB0aHJvdzsgICAgIC8vIENoZWNrIGFsbG93YW5jZQ0KICAgICAgICBiYWxhbmNlc1tfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyDQogICAgICAgIC8qIFVwZGF0aW5nIGluZGljYXRvciB2YXJpYWJsZXMgKi8NCiAgICAgICAgX3RvdGFsU3VwcGx5IC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgX3RvdGFsQnVybmVkICs9IF92YWx1ZTsNCiAgICAgICAgLyogU2VuZCB0aGUgZXZlbnQgbm90aWZpY2F0aW9uICovDQogICAgICAgIEJ1cm4oX2Zyb20sIF92YWx1ZSk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCiB9'