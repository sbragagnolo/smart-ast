base 64 content
base64zeroCap
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMDsNCg0KY29udHJhY3QgVG9rZW4gew0KICAgIHVpbnQyNTYgcHVibGljIHRvdGFsU3VwcGx5Ow0KDQogICAgLyogVGhpcyBjcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGJhbGFuY2VzICovDQogICAgbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmFsYW5jZU9mOw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gbWFwcGluZyAoYWRkcmVzcyA9PiB1aW50MjU2KSkgcHVibGljIGFsbG93YW5jZTsNCg0KICAgIC8qIFRoaXMgZ2VuZXJhdGVzIGEgcHVibGljIGV2ZW50IG9uIHRoZSBibG9ja2NoYWluIHRoYXQgd2lsbCBub3RpZnkgY2xpZW50cyAqLw0KICAgIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBmcm9tLCBhZGRyZXNzIGluZGV4ZWQgdG8sIHVpbnQyNTYgdmFsdWUpOw0KDQogICAgLyogU2VuZCBjb2lucyAqLw0KICAgIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgew0KICAgICAgICByZXF1aXJlKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA+PSBfdmFsdWUpOyAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW5kZXIgaGFzIGVub3VnaA0KICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID49IGJhbGFuY2VPZltfdG9dKTsgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MNCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdIC09IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBzZW5kZXINCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHNhbWUgdG8gdGhlIHJlY2lwaWVudA0KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7ICAgICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhbnlvbmUgbGlzdGVuaW5nIHRoYXQgdGhpcyB0cmFuc2ZlciB0b29rIHBsYWNlDQogICAgfQ0KDQogICAgLyogQWxsb3cgYW5vdGhlciBjb250cmFjdCB0byBzcGVuZCBzb21lIHRva2VucyBpbiB5b3VyIGJlaGFsZiAqLw0KICAgIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHJldHVybnMgKGJvb2wgc3VjY2Vzcykgew0KICAgICAgICBhbGxvd2FuY2VbbXNnLnNlbmRlcl1bX3NwZW5kZXJdID0gX3ZhbHVlOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKiBBIGNvbnRyYWN0IGF0dGVtcHRzIHRvIGdldCB0aGUgY29pbnMgKi8NCiAgICBmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyBfZnJvbSwgYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsNCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX2Zyb21dID49IF92YWx1ZSk7ICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VuZGVyIGhhcyBlbm91Z2gNCiAgICAgICAgcmVxdWlyZShiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA+PSBiYWxhbmNlT2ZbX3RvXSk7ICAvLyBDaGVjayBmb3Igb3ZlcmZsb3dzDQogICAgICAgIHJlcXVpcmUoX3ZhbHVlIDw9IGFsbG93YW5jZVtfZnJvbV1bbXNnLnNlbmRlcl0pOyAgICAgLy8gQ2hlY2sgYWxsb3dhbmNlDQogICAgICAgIGJhbGFuY2VPZltfZnJvbV0gLT0gX3ZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgZnJvbSB0aGUgc2VuZGVyDQogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHRvIHRoZSByZWNpcGllbnQNCiAgICAgICAgYWxsb3dhbmNlW19mcm9tXVttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgIFRyYW5zZmVyKF9mcm9tLCBfdG8sIF92YWx1ZSk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIHVpbnQgcHVibGljIGlkOyAvKiBUbyBlbnN1cmUgZGlzdGluY3QgY29udHJhY3RzIGZvciBkaWZmZXJlbnQgdG9rZW5zIG93bmVkIGJ5IHRoZSBzYW1lIG93bmVyICovDQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQogICAgYm9vbCBwdWJsaWMgc2VhbGVkID0gZmFsc2U7DQoNCiAgICBmdW5jdGlvbiBUb2tlbih1aW50IF9pZCkgew0KICAgICAgICBvd25lciA9IG1zZy5zZW5kZXI7DQogICAgICAgIGlkID0gX2lkOw0KICAgIH0NCg0KICAgIC8qIEFsbG93cyB0aGUgb3duZXIgdG8gbWludCBtb3JlIHRva2VucyAqLw0KICAgIGZ1bmN0aW9uIG1pbnQoYWRkcmVzcyBfdG8sIHVpbnQyNTYgX3ZhbHVlKSByZXR1cm5zIChib29sKSB7DQogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSB0aGUgb3duZXIgaXMgYWxsb3dlZCB0byBtaW50DQogICAgICAgIHJlcXVpcmUoIXNlYWxlZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FuIG9ubHkgbWludCB3aGlsZSB1bnNlYWxlZA0KICAgICAgICByZXF1aXJlKGJhbGFuY2VPZltfdG9dICsgX3ZhbHVlID49IGJhbGFuY2VPZltfdG9dKTsgIC8vIENoZWNrIGZvciBvdmVyZmxvd3MNCiAgICAgICAgYmFsYW5jZU9mW190b10gKz0gX3ZhbHVlOw0KICAgICAgICB0b3RhbFN1cHBseSArPSBfdmFsdWU7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNlYWwoKSB7DQogICAgICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSBvd25lcik7DQogICAgICAgIHNlYWxlZCA9IHRydWU7DQogICAgfQ0KfQ0KDQpjb250cmFjdCBXaXRoZHJhdyB7DQogICAgVG9rZW4gcHVibGljIHRva2VuOw0KDQogICAgZnVuY3Rpb24gV2l0aGRyYXcoVG9rZW4gX3Rva2VuKSB7DQogICAgICAgIHRva2VuID0gX3Rva2VuOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uICgpIHBheWFibGUge30NCg0KICAgIGZ1bmN0aW9uIHdpdGhkcmF3KCkgew0KICAgICAgICByZXF1aXJlKHRva2VuLnNlYWxlZCgpKTsNCiAgICAgICAgcmVxdWlyZSh0b2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcikgPiAwKTsNCiAgICAgICAgdWludCB0b2tlbl9hbW91bnQgPSB0b2tlbi5iYWxhbmNlT2YobXNnLnNlbmRlcik7DQogICAgICAgIHVpbnQgd2VpX2Ftb3VudCA9IHRoaXMuYmFsYW5jZSAqIHRva2VuX2Ftb3VudCAvIHRva2VuLnRvdGFsU3VwcGx5KCk7DQogICAgICAgIGlmICghdG9rZW4udHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIHRoaXMsIHRva2VuX2Ftb3VudCkgfHwgIW1zZy5zZW5kZXIuc2VuZCh3ZWlfYW1vdW50KSkgew0KICAgICAgICAgICAgdGhyb3c7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCmNvbnRyYWN0IFRva2VuR2FtZSB7DQogICAgYWRkcmVzcyBwdWJsaWMgb3duZXI7DQogICAgdWludCBwdWJsaWMgY2FwX2luX3dlaTsNCiAgICB1aW50IGNvbnN0YW50IGluaXRpYWxfZHVyYXRpb24gPSAxIGhvdXJzOw0KICAgIHVpbnQgY29uc3RhbnQgdGltZV9leHRlbnNpb25fZnJvbV9kb3VibGluZyA9IDEgaG91cnM7DQogICAgdWludCBjb25zdGFudCB0aW1lX29mX2hhbGZfZGVjYXkgPSAxIGhvdXJzOw0KICAgIFRva2VuIHB1YmxpYyBleGNlc3NfdG9rZW47IC8qIFRva2VuIGNvbnRyYWN0IHVzZWQgdG8gcmVjZWl2ZSBleGNlc3MgYWZ0ZXIgdGhlIHNhbGUgKi8NCiAgICBXaXRoZHJhdyBwdWJsaWMgZXhjZXNzX3dpdGhkcmF3OyAgLyogV2l0aGRyYXcgY29udHJhY3QgZGlzdHJpYnV0aW5nIHRoZSBleGNlc3MgKi8NCiAgICBUb2tlbiBwdWJsaWMgZ2FtZV90b2tlbjsgICAvKiBUb2tlbiBjb250cmFjdCB1c2VkIHRvIHJlY2VpdmUgcHJpemVzICovDQogICAgdWludCBwdWJsaWMgZW5kX3RpbWU7ICAgICAgLyogQ3VycmVudCBlbmQgdGltZSAqLw0KICAgIHVpbnQgbGFzdF90aW1lID0gMDsgICAgICAgIC8qIFRpbWVzdGFtcCBvZiB0aGUgbGF0ZXN0IGNvbnRyaWJ1dGlvbiAqLw0KICAgIHVpbnQyNTYgZW1hID0gMDsgICAgICAgICAgIC8qIEN1cnJlbnQgdmFsdWUgb2YgdGhlIEVNQSAqLw0KICAgIHVpbnQgcHVibGljIHRvdGFsX3dlaV9naXZlbiA9IDA7ICAvKiBUb3RhbCBhbW91bnQgb2Ygd2VpIGdpdmVuIHZpYSBmYWxsYmFjayBmdW5jdGlvbiAqLw0KDQogICAgZnVuY3Rpb24gVG9rZW5HYW1lKHVpbnQgX2NhcF9pbl93ZWkpIHsNCiAgICAgICAgb3duZXIgPSBtc2cuc2VuZGVyOw0KICAgICAgICBjYXBfaW5fd2VpID0gX2NhcF9pbl93ZWk7DQogICAgICAgIGV4Y2Vzc190b2tlbiA9IG5ldyBUb2tlbigxKTsNCiAgICAgICAgZXhjZXNzX3dpdGhkcmF3ID0gbmV3IFdpdGhkcmF3KGV4Y2Vzc190b2tlbik7DQogICAgICAgIGdhbWVfdG9rZW4gPSBuZXcgVG9rZW4oMik7DQogICAgICAgIGVuZF90aW1lID0gbm93ICsgaW5pdGlhbF9kdXJhdGlvbjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBwbGF5KCkgcGF5YWJsZSB7DQogICAgICAgIHJlcXVpcmUobm93IDw9IGVuZF90aW1lKTsgICAvLyBDaGVjayB0aGF0IHRoZSBzYWxlIGhhcyBub3QgZW5kZWQNCiAgICAgICAgcmVxdWlyZShtc2cudmFsdWUgPiAwKTsgICAgIC8vIENoZWNrIHRoYXQgc29tZXRoaW5nIGhhcyBiZWVuIHNlbnQNCiAgICAgICAgdG90YWxfd2VpX2dpdmVuICs9IG1zZy52YWx1ZTsNCiAgICAgICAgZW1hID0gbXNnLnZhbHVlICsgZW1hICogdGltZV9vZl9oYWxmX2RlY2F5IC8gKHRpbWVfb2ZfaGFsZl9kZWNheSArIChub3cgLSBsYXN0X3RpbWUpICk7DQogICAgICAgIGxhc3RfdGltZSA9IG5vdzsNCiAgICAgICAgdWludCBleHRlbmRlZF90aW1lID0gbm93ICsgZW1hICogdGltZV9leHRlbnNpb25fZnJvbV9kb3VibGluZyAvIHRvdGFsX3dlaV9naXZlbjsNCiAgICAgICAgaWYgKGV4dGVuZGVkX3RpbWUgPiBlbmRfdGltZSkgew0KICAgICAgICAgICAgZW5kX3RpbWUgPSBleHRlbmRlZF90aW1lOw0KICAgICAgICB9DQogICAgICAgIGlmICghZXhjZXNzX3Rva2VuLm1pbnQobXNnLnNlbmRlciwgbXNnLnZhbHVlKSB8fCAhZ2FtZV90b2tlbi5taW50KG1zZy5zZW5kZXIsIG1zZy52YWx1ZSkpIHsNCiAgICAgICAgICAgIHRocm93Ow0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZmluYWxpc2UoKSB7DQogICAgICAgIHJlcXVpcmUobm93ID4gZW5kX3RpbWUpOw0KICAgICAgICBleGNlc3NfdG9rZW4uc2VhbCgpOw0KICAgICAgICBnYW1lX3Rva2VuLnNlYWwoKTsNCiAgICAgICAgdWludCB0b19vd25lciA9IDA7DQogICAgICAgIGlmICh0aGlzLmJhbGFuY2UgPiBjYXBfaW5fd2VpKSB7DQogICAgICAgICAgICB0b19vd25lciA9IGNhcF9pbl93ZWk7DQogICAgICAgICAgICBpZiAoIWV4Y2Vzc193aXRoZHJhdy5zZW5kKHRoaXMuYmFsYW5jZSAtIGNhcF9pbl93ZWkpKSB7DQogICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0b19vd25lciA9IHRoaXMuYmFsYW5jZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAodG9fb3duZXIgPiAwKSB7DQogICAgICAgICAgICBpZiAoIW93bmVyLnNlbmQodG9fb3duZXIpKSB7DQogICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQoNCmNvbnRyYWN0IFplcm9DYXAgaXMgVG9rZW5HYW1lIHsNCiAgICBXaXRoZHJhdyBwdWJsaWMgZ2FtZV93aXRoZHJhdzsNCg0KICAgIGZ1bmN0aW9uIFplcm9DYXAoKSBUb2tlbkdhbWUoMCkgew0KICAgICAgICBnYW1lX3dpdGhkcmF3ID0gbmV3IFdpdGhkcmF3KGdhbWVfdG9rZW4pOw0KICAgIH0NCn0='