base 64 content
base64ziberToken12
	^'cHJhZ21hIHNvbGlkaXR5XjAuNC4xMTsNCg0KLyoNCg0KICBaaWJlci5pbyBDb250cmFjdA0KICA9PT09PT09PT09PT09PT09PT09PT09PT0NCiAgQnV5cyBaQlIgdG9rZW5zIGZyb20gdGhlIERBTyBjcm93ZHNhbGUgb24geW91ciBiZWhhbGYuDQogIEF1dGhvcjogL3UvTGVvDQoNCiovDQoNCg0KLy8gSW50ZXJmYWNlIHRvIFpCUiBJQ08gQ29udHJhY3QNCmNvbnRyYWN0IERhb1Rva2VuIHsNCiAgdWludDI1NiBwdWJsaWMgQ0FQOw0KICB1aW50MjU2IHB1YmxpYyB0b3RhbEV0aGVyczsNCiAgZnVuY3Rpb24gcHJveHlQYXltZW50KGFkZHJlc3MgcGFydGljaXBhbnQpIHBheWFibGU7DQogIGZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MgX3RvLCB1aW50IF9hbW91bnQpIHJldHVybnMgKGJvb2wgc3VjY2Vzcyk7DQp9DQoNCmNvbnRyYWN0IFppYmVyVG9rZW4gew0KICAvLyBTdG9yZSB0aGUgYW1vdW50IG9mIEVUSCBkZXBvc2l0ZWQgYnkgZWFjaCBhY2NvdW50Lg0KICBtYXBwaW5nIChhZGRyZXNzID0+IHVpbnQyNTYpIHB1YmxpYyBiYWxhbmNlczsNCiAgLy8gU3RvcmUgd2hldGhlciBvciBub3QgZWFjaCBhY2NvdW50IHdvdWxkIGhhdmUgbWFkZSBpdCBpbnRvIHRoZSBjcm93ZHNhbGUuDQogIG1hcHBpbmcgKGFkZHJlc3MgPT4gYm9vbCkgcHVibGljIGNoZWNrZWRfaW47DQogIC8vIEJvdW50eSBmb3IgZXhlY3V0aW5nIGJ1eS4NCiAgdWludDI1NiBwdWJsaWMgYm91bnR5Ow0KICAvLyBUcmFjayB3aGV0aGVyIHRoZSBjb250cmFjdCBoYXMgYm91Z2h0IHRoZSB0b2tlbnMgeWV0Lg0KICBib29sIHB1YmxpYyBib3VnaHRfdG9rZW5zOw0KICAvLyBSZWNvcmQgdGhlIHRpbWUgdGhlIGNvbnRyYWN0IGJvdWdodCB0aGUgdG9rZW5zLg0KICB1aW50MjU2IHB1YmxpYyB0aW1lX2JvdWdodDsNCiAgLy8gRW1lcmdlbmN5IGtpbGwgc3dpdGNoIGluIGNhc2UgYSBjcml0aWNhbCBidWcgaXMgZm91bmQuDQogIGJvb2wgcHVibGljIGtpbGxfc3dpdGNoOw0KICANCiAgLyogUHVibGljIHZhcmlhYmxlcyBvZiB0aGUgdG9rZW4gKi8NCiAgc3RyaW5nIHB1YmxpYyBuYW1lOw0KICBzdHJpbmcgcHVibGljIHN5bWJvbDsNCiAgdWludDggcHVibGljIGRlY2ltYWxzOw0KICANCiAgLy8gUmF0aW8gb2YgWkJSIHRva2VucyByZWNlaXZlZCB0byBFVEggY29udHJpYnV0ZWQNCiAgLy8gMS4wMDAuMDAwIEJHUCA9IDgwLjAwMC4wMDAgWkJSDQogIC8vIDFFVEggPSAyMTggQkdQICgwMy4wNy4yMDE3OiBodHRwczovL3d3dy5jb2luZ2Vja28uY29tL2VuL3ByaWNlX2NoYXJ0cy9ldGhlcmV1bS9nYnApDQogIC8vIDEgRVRIID0gMTc0NDAgWkJSDQogIHVpbnQyNTYgWkJSX3Blcl9ldGggPSAxNzQ0MDsNCiAgLy9Ub3RhbCBaQlIgVG9rZW5zIFJlc2VydmUNCiAgdWludDI1NiBaQlJfdG90YWxfcmVzZXJ2ZSA9IDEwMDAwMDAwMDsNCiAgLy8gWkJSIFRva2VucyBmb3IgRGV2ZWxvcGVycw0KICB1aW50MjU2IFpCUl9kZXZfcmVzZXJ2ZWQgPSAxMDAwMDAwMDsNCiAgLy8gWkJSIFRva2VucyBmb3IgU2VsbGluZyBvdmVyIElDTw0KICB1aW50MjU2IFpCUl9mb3Jfc2VsbGluZyA9IDgwMDAwMDAwOw0KICAvLyBaQlIgVG9rZW5zIGZvciBCb3VudHkNCiAgdWludDI1NiBaQlJfZm9yX2JvdW50eT0gMTAwMDAwMDA7DQogIC8vIEVUSCBmb3IgYWN0aXZhdGUga2lsbC1zd2l0Y2ggaW4gY29udHJhY3QNCiAgdWludDI1NiBFVEhfdG9fZW5kID0gNTAwMDAgZXRoZXI7DQogIHVpbnQgcmVnaXN0cmVkVG87DQogIHVpbnQyNTYgbG9hZGVkUmVmdW5kOw0KICB1aW50MjU2IF9zdXBwbHk7DQogIHN0cmluZyBfbmFtZTsNCiAgc3RyaW5nIF9zeW1ib2w7DQogIHVpbnQ4IF9kZWNpbWFsczsNCg0KICAvLyBUaGUgWkJSIFRva2VuIGFkZHJlc3MgYW5kIHNhbGUgYWRkcmVzcyBhcmUgdGhlIHNhbWUuDQogIERhb1Rva2VuIHB1YmxpYyB0b2tlbiA9IERhb1Rva2VuKDB4YTlkNTg1Q0UzQjIyN2Q2OTk4NWMzRjdBODY2ZkU3ZDBlNTEwZGE1MCk7DQogIC8vIFRoZSBkZXZlbG9wZXIgYWRkcmVzcy4NCiAgYWRkcmVzcyBkZXZlbG9wZXJfYWRkcmVzcyA9IDB4NjUwODg3QjMzQkZBNDIzMjQwRUQ3QmM0QkQyNmM2NjA3NUUzYkVhZjsNCg0KDQogIC8qIFRoaXMgY3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBiYWxhbmNlcyAqLw0KICAgIG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikgcHVibGljIGJhbGFuY2VPZjsNCiAgICANCiAgICAvKiBUaGlzIGdlbmVyYXRlcyBhIHB1YmxpYyBldmVudCBvbiB0aGUgYmxvY2tjaGFpbiB0aGF0IHdpbGwgbm90aWZ5IGNsaWVudHMgKi8NCiAgICBldmVudCBUcmFuc2ZlcihhZGRyZXNzIGluZGV4ZWQgZnJvbSwgYWRkcmVzcyBpbmRleGVkIHRvLCB1aW50MjU2IHZhbHVlKTsNCiAgICANCiAgICAvKiBJbml0aWFsaXplcyBjb250cmFjdCB3aXRoIGluaXRpYWwgc3VwcGx5IHRva2VucyB0byB0aGUgY3JlYXRvciBvZiB0aGUgY29udHJhY3QgKi8NCiAgICBmdW5jdGlvbiBaaWJlclRva2VuKCkgew0KICAgICAgICAvKiBpZiBzdXBwbHkgbm90IGdpdmVuIHRoZW4gZ2VuZXJhdGUgMTAwIG1pbGxpb24gb2YgdGhlIHNtYWxsZXN0IHVuaXQgb2YgdGhlIHRva2VuICovDQogICAgICAgIF9zdXBwbHkgPSAxMDAwMDAwMDAwMDsNCiAgICAgICAgDQogICAgICAgIC8qIFVubGVzcyB5b3UgYWRkIG90aGVyIGZ1bmN0aW9ucyB0aGVzZSB2YXJpYWJsZXMgd2lsbCBuZXZlciBjaGFuZ2UgKi8NCiAgICAgICAgYmFsYW5jZU9mW21zZy5zZW5kZXJdID0gX3N1cHBseTsNCiAgICAgICAgbmFtZSA9ICJaSUJFUiBDcm93ZHNhbGUgVG9rZW5zIjsgICAgIA0KICAgICAgICBzeW1ib2wgPSAiWkJSIjsNCiAgICAgICAgDQogICAgICAgIC8qIElmIHlvdSB3YW50IGEgZGl2aXNpYmxlIHRva2VuIHRoZW4gYWRkIHRoZSBhbW91bnQgb2YgZGVjaW1hbHMgdGhlIGJhc2UgdW5pdCBoYXMgICovDQogICAgICAgIGRlY2ltYWxzID0gMjsNCiAgICB9DQoNCg0KICAgIC8vLyBTYWZlTWF0aCBjb250cmFjdCAtIG1hdGggb3BlcmF0aW9ucyB3aXRoIHNhZmV0eSBjaGVja3MNCiAgICAvLy8gQGF1dGhvciBkZXZAc21hcnRjb250cmFjdGVhbS5jb20NCiAgICBmdW5jdGlvbiBzYWZlTXVsKHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgICB1aW50IGMgPSBhICogYjsNCiAgICAgIGFzc2VydChhID09IDAgfHwgYyAvIGEgPT0gYik7DQogICAgICByZXR1cm4gYzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBzYWZlRGl2KHVpbnQgYSwgdWludCBiKSBpbnRlcm5hbCByZXR1cm5zICh1aW50KSB7DQogICAgICBhc3NlcnQoYiA+IDApOw0KICAgICAgdWludCBjID0gYSAvIGI7DQogICAgICBhc3NlcnQoYSA9PSBiICogYyArIGEgJSBiKTsNCiAgICAgIHJldHVybiBjOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNhZmVTdWIodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgIGFzc2VydChiIDw9IGEpOw0KICAgICAgcmV0dXJuIGEgLSBiOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNhZmVBZGQodWludCBhLCB1aW50IGIpIGludGVybmFsIHJldHVybnMgKHVpbnQpIHsNCiAgICAgIHVpbnQgYyA9IGEgKyBiOw0KICAgICAgYXNzZXJ0KGM+PWEgJiYgYz49Yik7DQogICAgICByZXR1cm4gYzsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtYXg2NCh1aW50NjQgYSwgdWludDY0IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQ2NCkgew0KICAgICAgcmV0dXJuIGEgPj0gYiA/IGEgOiBiOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG1pbjY0KHVpbnQ2NCBhLCB1aW50NjQgYikgaW50ZXJuYWwgY29uc3RhbnQgcmV0dXJucyAodWludDY0KSB7DQogICAgICByZXR1cm4gYSA8IGIgPyBhIDogYjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtYXgyNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICAgIHJldHVybiBhID49IGIgPyBhIDogYjsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBtaW4yNTYodWludDI1NiBhLCB1aW50MjU2IGIpIGludGVybmFsIGNvbnN0YW50IHJldHVybnMgKHVpbnQyNTYpIHsNCiAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGFzc2VydChib29sIGFzc2VydGlvbikgaW50ZXJuYWwgew0KICAgICAgaWYgKCFhc3NlcnRpb24pIHsNCiAgICAgICAgdGhyb3c7DQogICAgICB9DQogICAgfQ0KDQoNCiAgICAvKioNCiAgICAqIEFsbG93IGxvYWQgcmVmdW5kcyBiYWNrIG9uIHRoZSBjb250cmFjdCBmb3IgdGhlIHJlZnVuZGluZy4NCiAgICAqDQogICAgKiBUaGUgdGVhbSBjYW4gdHJhbnNmZXIgdGhlIGZ1bmRzIGJhY2sgb24gdGhlIHNtYXJ0IGNvbnRyYWN0IGluIHRoZSBjYXNlIHRoZSBtaW5pbXVtIGdvYWwgd2FzIG5vdCByZWFjaGVkLi4NCiAgICAqLw0KICAgIGZ1bmN0aW9uIGxvYWRSZWZ1bmQoKSBwYXlhYmxlIHsNCiAgICAgIGlmKG1zZy52YWx1ZSA9PSAwKSB0aHJvdzsNCiAgICAgIGxvYWRlZFJlZnVuZCA9IHNhZmVBZGQobG9hZGVkUmVmdW5kLCBtc2cudmFsdWUpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICogSW52ZXN0b3JzIGNhbiBjbGFpbSByZWZ1bmQuDQogICAgKi8NCiAgICBmdW5jdGlvbiByZWZ1bmQoKSBwcml2YXRlICB7DQogICAgICB1aW50MjU2IHdlaVZhbHVlID0gdGhpcy5iYWxhbmNlOw0KICAgICAgaWYgKHdlaVZhbHVlID09IDApIHRocm93Ow0KICAgICAgdWludDI1NiB3ZWlSZWZ1bmRlZDsNCiAgICAgIHdlaVJlZnVuZGVkID0gc2FmZUFkZCh3ZWlSZWZ1bmRlZCwgd2VpVmFsdWUpOw0KICAgICAgcmVmdW5kKCk7DQogICAgICBpZiAoIW1zZy5zZW5kZXIuc2VuZCh3ZWlWYWx1ZSkpIHRocm93Ow0KICAgIH0NCg0KICAgIC8qIFNlbmQgY29pbnMgKi8NCiAgICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHsNCiAgICAgICAgLyogaWYgdGhlIHNlbmRlciBkb2Vuc3QgaGF2ZSBlbm91Z2ggYmFsYW5jZSB0aGVuIHN0b3AgKi8NCiAgICAgICAgaWYgKGJhbGFuY2VPZlttc2cuc2VuZGVyXSA8IF92YWx1ZSkgdGhyb3c7DQogICAgICAgIGlmIChiYWxhbmNlT2ZbX3RvXSArIF92YWx1ZSA8IGJhbGFuY2VPZltfdG9dKSB0aHJvdzsNCiAgICAgICAgDQogICAgICAgIC8qIEFkZCBhbmQgc3VidHJhY3QgbmV3IGJhbGFuY2VzICovDQogICAgICAgIGJhbGFuY2VPZlttc2cuc2VuZGVyXSAtPSBfdmFsdWU7DQogICAgICAgIGJhbGFuY2VPZltfdG9dICs9IF92YWx1ZTsNCiAgICAgICAgDQogICAgICAgIC8qIE5vdGlmaXkgYW55b25lIGxpc3RlbmluZyB0aGF0IHRoaXMgdHJhbnNmZXIgdG9vayBwbGFjZSAqLw0KICAgICAgICBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7DQogICAgfQ0KICANCiAgLy8gQWxsb3dzIHRoZSBkZXZlbG9wZXIgdG8gc2h1dCBkb3duIGV2ZXJ5dGhpbmcgZXhjZXB0IHdpdGhkcmF3YWxzIGluIGVtZXJnZW5jaWVzLg0KICBmdW5jdGlvbiBhY3RpdmF0ZV9raWxsX3N3aXRjaCgpIHsNCiAgICAvLyBPbmx5IGFsbG93IHRoZSBkZXZlbG9wZXIgdG8gYWN0aXZhdGUgdGhlIGtpbGwgc3dpdGNoLg0KICAgIGlmIChtc2cuc2VuZGVyICE9IGRldmVsb3Blcl9hZGRyZXNzKSB0aHJvdzsNCiAgICAvLyBJcnJldmVyc2libHkgYWN0aXZhdGUgdGhlIGtpbGwgc3dpdGNoLg0KICAgIGtpbGxfc3dpdGNoID0gdHJ1ZTsNCiAgfQ0KICANCiAgLy8gV2l0aGRyYXdzIGFsbCBFVEggZGVwb3NpdGVkIG9yIFpCUiBwdXJjaGFzZWQgYnkgdGhlIHNlbmRlci4NCiAgZnVuY3Rpb24gd2l0aGRyYXcoKXsNCiAgICAvLyBJZiBjYWxsZWQgYmVmb3JlIHRoZSBJQ08sIGNhbmNlbCBjYWxsZXIncyBwYXJ0aWNpcGF0aW9uIGluIHRoZSBzYWxlLg0KICAgIGlmICghYm91Z2h0X3Rva2Vucykgew0KICAgICAgLy8gU3RvcmUgdGhlIHVzZXIncyBiYWxhbmNlIHByaW9yIHRvIHdpdGhkcmF3YWwgaW4gYSB0ZW1wb3JhcnkgdmFyaWFibGUuDQogICAgICB1aW50MjU2IGV0aF9hbW91bnQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXTsNCiAgICAgIC8vIFVwZGF0ZSB0aGUgdXNlcidzIGJhbGFuY2UgcHJpb3IgdG8gc2VuZGluZyBFVEggdG8gcHJldmVudCByZWN1cnNpdmUgY2FsbC4NCiAgICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gMDsNCiAgICAgIC8vIFJldHVybiB0aGUgdXNlcidzIGZ1bmRzLiAgVGhyb3dzIG9uIGZhaWx1cmUgdG8gcHJldmVudCBsb3NzIG9mIGZ1bmRzLg0KICAgICAgbXNnLnNlbmRlci50cmFuc2ZlcihldGhfYW1vdW50KTsNCiAgICB9DQogICAgLy8gV2l0aGRyYXcgdGhlIHNlbmRlcidzIHRva2VucyBpZiB0aGUgY29udHJhY3QgaGFzIGFscmVhZHkgcHVyY2hhc2VkIHRoZW0uDQogICAgZWxzZSB7DQogICAgICAvLyBTdG9yZSB0aGUgdXNlcidzIFpCUiBiYWxhbmNlIGluIGEgdGVtcG9yYXJ5IHZhcmlhYmxlICgxIEVUSFdlaSAtPiAyMDAwIFpCUldlaSkuDQogICAgICB1aW50MjU2IFpCUl9hbW91bnQgPSBiYWxhbmNlc1ttc2cuc2VuZGVyXSAqIFpCUl9wZXJfZXRoOw0KICAgICAgLy8gVXBkYXRlIHRoZSB1c2VyJ3MgYmFsYW5jZSBwcmlvciB0byBzZW5kaW5nIFpCUiB0byBwcmV2ZW50IHJlY3Vyc2l2ZSBjYWxsLg0KICAgICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSAwOw0KICAgICAgLy8gTm8gZmVlIGZvciB3aXRoZHJhd2luZyBpZiB0aGUgdXNlciB3b3VsZCBoYXZlIG1hZGUgaXQgaW50byB0aGUgY3Jvd2RzYWxlIGFsb25lLg0KICAgICAgdWludDI1NiBmZWUgPSAwOw0KICAgICAgLy8gMSUgZmVlIGlmIHRoZSB1c2VyIGRpZG4ndCBjaGVjayBpbiBkdXJpbmcgdGhlIGNyb3dkc2FsZS4NCiAgICAgIGlmICghY2hlY2tlZF9pblttc2cuc2VuZGVyXSkgew0KICAgICAgICBmZWUgPSBaQlJfYW1vdW50IC8gMTAwOw0KICAgICAgICAvLyBTZW5kIGFueSBub24temVybyBmZWVzIHRvIGRldmVsb3Blci4NCiAgICAgICAgaWYoIXRva2VuLnRyYW5zZmVyKGRldmVsb3Blcl9hZGRyZXNzLCBmZWUpKSB0aHJvdzsNCiAgICAgIH0NCiAgICAgIC8vIFNlbmQgdGhlIHVzZXIgdGhlaXIgdG9rZW5zLiAgVGhyb3dzIGlmIHRoZSBjcm93ZHNhbGUgaXNuJ3Qgb3Zlci4NCiAgICAgIGlmKCF0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBaQlJfYW1vdW50IC0gZmVlKSkgdGhyb3c7DQogICAgfQ0KICB9DQogIA0KICAvLyBBbGxvdyBkZXZlbG9wZXIgdG8gYWRkIEVUSCB0byB0aGUgYnV5IGV4ZWN1dGlvbiBib3VudHkuDQogIGZ1bmN0aW9uIGFkZF90b19ib3VudHkoKSBwYXlhYmxlIHsNCiAgICAvLyBPbmx5IGFsbG93IHRoZSBkZXZlbG9wZXIgdG8gY29udHJpYnV0ZSB0byB0aGUgYnV5IGV4ZWN1dGlvbiBib3VudHkuDQogICAgaWYgKG1zZy5zZW5kZXIgIT0gZGV2ZWxvcGVyX2FkZHJlc3MpIHRocm93Ow0KICAgIC8vIERpc2FsbG93IGFkZGluZyB0byBib3VudHkgaWYga2lsbCBzd2l0Y2ggaXMgYWN0aXZlLg0KICAgIGlmIChraWxsX3N3aXRjaCkgdGhyb3c7DQogICAgLy8gRGlzYWxsb3cgYWRkaW5nIHRvIHRoZSBib3VudHkgaWYgY29udHJhY3QgaGFzIGFscmVhZHkgYm91Z2h0IHRoZSB0b2tlbnMuDQogICAgaWYgKGJvdWdodF90b2tlbnMpIHRocm93Ow0KICAgIC8vIFVwZGF0ZSBib3VudHkgdG8gaW5jbHVkZSByZWNlaXZlZCBhbW91bnQuDQogICAgYm91bnR5ICs9IG1zZy52YWx1ZTsNCiAgfQ0KICANCiAgLy8gQnV5cyB0b2tlbnMgaW4gdGhlIGNyb3dkc2FsZSBhbmQgcmV3YXJkcyB0aGUgY2FsbGVyLCBjYWxsYWJsZSBieSBhbnlvbmUuDQogIGZ1bmN0aW9uIGNsYWltX2JvdW50eSgpew0KICAgIC8vIFNob3J0IGNpcmN1aXQgdG8gc2F2ZSBnYXMgaWYgdGhlIGNvbnRyYWN0IGhhcyBhbHJlYWR5IGJvdWdodCB0b2tlbnMuDQogICAgaWYgKGJvdWdodF90b2tlbnMpIHJldHVybjsNCiAgICAvLyBEaXNhbGxvdyBidXlpbmcgaW50byB0aGUgY3Jvd2RzYWxlIGlmIGtpbGwgc3dpdGNoIGlzIGFjdGl2ZS4NCiAgICBpZiAoa2lsbF9zd2l0Y2gpIHRocm93Ow0KICAgIC8vIFJlY29yZCB0aGF0IHRoZSBjb250cmFjdCBoYXMgYm91Z2h0IHRoZSB0b2tlbnMuDQogICAgYm91Z2h0X3Rva2VucyA9IHRydWU7DQogICAgLy8gUmVjb3JkIHRoZSB0aW1lIHRoZSBjb250cmFjdCBib3VnaHQgdGhlIHRva2Vucy4NCiAgICB0aW1lX2JvdWdodCA9IG5vdyArIDEgZGF5czsNCiAgICAvLyBUcmFuc2ZlciBhbGwgdGhlIGZ1bmRzIChsZXNzIHRoZSBib3VudHkpIHRvIHRoZSBaQlIgY3Jvd2RzYWxlIGNvbnRyYWN0DQogICAgLy8gdG8gYnV5IHRva2Vucy4gIFRocm93cyBpZiB0aGUgY3Jvd2RzYWxlIGhhc24ndCBzdGFydGVkIHlldCBvciBoYXMNCiAgICAvLyBhbHJlYWR5IGNvbXBsZXRlZCwgcHJldmVudGluZyBsb3NzIG9mIGZ1bmRzLg0KICAgIHRva2VuLnByb3h5UGF5bWVudC52YWx1ZSh0aGlzLmJhbGFuY2UgLSBib3VudHkpKGFkZHJlc3ModGhpcykpOw0KICAgIC8vIFNlbmQgdGhlIGNhbGxlciB0aGVpciBib3VudHkgZm9yIGJ1eWluZyB0b2tlbnMgZm9yIHRoZSBjb250cmFjdC4NCiAgICBpZih0aGlzLmJhbGFuY2UgPiBFVEhfdG9fZW5kKQ0KICAgIHsNCiAgICAgICAgbXNnLnNlbmRlci50cmFuc2Zlcihib3VudHkpOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgdGltZV9ib3VnaHQgPSBub3cgKyAgMSBkYXlzICogOTsNCiAgICAgICAgaWYodGhpcy5iYWxhbmNlID4gRVRIX3RvX2VuZCkgew0KICAgICAgICAgIG1zZy5zZW5kZXIudHJhbnNmZXIoYm91bnR5KTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICB9DQogIA0KICAvLyBBIGhlbHBlciBmdW5jdGlvbiBmb3IgdGhlIGRlZmF1bHQgZnVuY3Rpb24sIGFsbG93aW5nIGNvbnRyYWN0cyB0byBpbnRlcmFjdC4NCiAgZnVuY3Rpb24gZGVmYXVsdF9oZWxwZXIoKSBwYXlhYmxlIHsNCiAgICAvLyBUcmVhdCBuZWFyLXplcm8gRVRIIHRyYW5zYWN0aW9ucyBhcyBjaGVjayBpbnMgYW5kIHdpdGhkcmF3YWwgcmVxdWVzdHMuDQogICAgaWYgKG1zZy52YWx1ZSA8PSAxIGZpbm5leSkgew0KICAgICAgLy8gQ2hlY2sgaW4gZHVyaW5nIHRoZSBjcm93ZHNhbGUuDQogICAgICBpZiAoYm91Z2h0X3Rva2Vucykgew0KICAgICAgICAvLyBPbmx5IGFsbG93IGNoZWNraW5nIGluIGJlZm9yZSB0aGUgY3Jvd2RzYWxlIGhhcyByZWFjaGVkIHRoZSBjYXAuDQogICAgICAgIGlmICh0b2tlbi50b3RhbEV0aGVycygpID49IHRva2VuLkNBUCgpKSB0aHJvdzsNCiAgICAgICAgLy8gTWFyayB1c2VyIGFzIGNoZWNrZWQgaW4sIG1lYW5pbmcgdGhleSB3b3VsZCBoYXZlIGJlZW4gYWJsZSB0byBlbnRlciBhbG9uZS4NCiAgICAgICAgY2hlY2tlZF9pblttc2cuc2VuZGVyXSA9IHRydWU7DQogICAgICB9DQogICAgICAvLyBXaXRoZHJhdyBmdW5kcyBpZiB0aGUgY3Jvd2RzYWxlIGhhc24ndCBiZWd1biB5ZXQgb3IgaXMgYWxyZWFkeSBvdmVyLg0KICAgICAgZWxzZSB7DQogICAgICAgIHdpdGhkcmF3KCk7DQogICAgICB9DQogICAgfQ0KICAgIC8vIERlcG9zaXQgdGhlIHVzZXIncyBmdW5kcyBmb3IgdXNlIGluIHB1cmNoYXNpbmcgdG9rZW5zLg0KICAgIGVsc2Ugew0KICAgICAgLy8gRGlzYWxsb3cgZGVwb3NpdHMgaWYga2lsbCBzd2l0Y2ggaXMgYWN0aXZlLg0KICAgICAgaWYgKGtpbGxfc3dpdGNoKSB0aHJvdzsNCiAgICAgIC8vIE9ubHkgYWxsb3cgZGVwb3NpdHMgaWYgdGhlIGNvbnRyYWN0IGhhc24ndCBhbHJlYWR5IHB1cmNoYXNlZCB0aGUgdG9rZW5zLg0KICAgICAgaWYgKGJvdWdodF90b2tlbnMpIHRocm93Ow0KICAgICAgLy8gVXBkYXRlIHJlY29yZHMgb2YgZGVwb3NpdGVkIEVUSCB0byBpbmNsdWRlIHRoZSByZWNlaXZlZCBhbW91bnQuDQogICAgICBiYWxhbmNlc1ttc2cuc2VuZGVyXSArPSBtc2cudmFsdWU7DQogICAgfQ0KICB9DQogIA0KICAvLyBEZWZhdWx0IGZ1bmN0aW9uLiAgQ2FsbGVkIHdoZW4gYSB1c2VyIHNlbmRzIEVUSCB0byB0aGUgY29udHJhY3QuDQogIGZ1bmN0aW9uICgpIHBheWFibGUgew0KICAgIC8vIERlbGVnYXRlIHRvIHRoZSBoZWxwZXIgZnVuY3Rpb24uDQogICAgZGVmYXVsdF9oZWxwZXIoKTsNCiAgfQ0KICANCiAgLy9DaGVjayBpcyBtc2dfc2VuZGVyIGlzIGNvbnRyYWN0IGRldg0KICBtb2RpZmllciBvbmx5T3duZXIoKSB7DQogICAgaWYgKG1zZy5zZW5kZXIgIT0gZGV2ZWxvcGVyX2FkZHJlc3MpIHsNCiAgICAgIHRocm93Ow0KICAgIH0NCiAgICBfOw0KICB9DQogIA0KICAvLyBTZW5kIGZ1bmQgd2hlbiBpY28gZW5kDQogIGZ1bmN0aW9uIHdpdGhkcmF3RXRoKCkgb25seU93bmVyIHsgICAgICAgIA0KICAgICAgICBtc2cuc2VuZGVyLnRyYW5zZmVyKHRoaXMuYmFsYW5jZSk7DQogIH0NCiAgDQogIC8vS2lsbCBjb250cmFjdA0KICBmdW5jdGlvbiBraWxsKCkgb25seU93bmVyIHsgICAgICAgIA0KICAgICAgICBzZWxmZGVzdHJ1Y3QoZGV2ZWxvcGVyX2FkZHJlc3MpOw0KICB9DQp9'